{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Brobot Automation DSL Schema",
  "description": "Schema for Brobot automation functions and DSL instructions",
  "type": "object",
  "required": ["automationFunctions"],
  "properties": {
    "automationFunctions": {
      "type": "array",
      "description": "Automation functions defined in this instruction set",
      "items": {
        "$ref": "#/definitions/businessTask"
      }
    }
  },
  "definitions": {
    "businessTask": {
      "type": "object",
      "required": ["name", "returnType", "statements"],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique identifier for the business task"
        },
        "name": {
          "type": "string",
          "description": "Name of the business task"
        },
        "description": {
          "type": "string",
          "description": "Description of what the business task does"
        },
        "returnType": {
          "type": "string",
          "enum": ["void", "boolean", "string", "int", "double", "region", "matches", "stateImage", "stateRegion", "object"],
          "description": "Return type of the business task"
        },
        "parameters": {
          "type": "array",
          "description": "Parameters accepted by the business task",
          "items": {
            "type": "object",
            "required": ["name", "type"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the parameter"
              },
              "type": {
                "type": "string",
                "enum": ["boolean", "string", "int", "double", "region", "matches", "stateImage", "stateRegion", "object"],
                "description": "Type of the parameter"
              }
            }
          }
        },
        "statements": {
          "type": "array",
          "description": "Statements that make up the business task body",
          "items": {
            "$ref": "#/definitions/statement"
          }
        }
      }
    },
    "statement": {
      "type": "object",
      "description": "A statement in the business task",
      "oneOf": [
        {
          "$ref": "#/definitions/variableDeclaration"
        },
        {
          "$ref": "#/definitions/assignment"
        },
        {
          "$ref": "#/definitions/ifStatement"
        },
        {
          "$ref": "#/definitions/forEachStatement"
        },
        {
          "$ref": "#/definitions/returnStatement"
        },
        {
          "$ref": "#/definitions/methodCall"
        }
      ]
    },
    "variableDeclaration": {
      "type": "object",
      "required": ["statementType", "name", "type"],
      "properties": {
        "statementType": {
          "type": "string",
          "enum": ["variableDeclaration"],
          "description": "Type of statement"
        },
        "name": {
          "type": "string",
          "description": "Name of the variable"
        },
        "type": {
          "type": "string",
          "enum": ["boolean", "string", "int", "double", "region", "matches", "stateImage", "stateRegion", "actionOptions", "objectCollection", "object"],
          "description": "Type of the variable"
        },
        "value": {
          "description": "Initial value of the variable",
          "oneOf": [
            {
              "$ref": "#/definitions/expression"
            },
            {
              "$ref": "#/definitions/builder"
            }
          ]
        }
      }
    },
    "assignment": {
      "type": "object",
      "required": ["statementType", "variable", "value"],
      "properties": {
        "statementType": {
          "type": "string",
          "enum": ["assignment"],
          "description": "Type of statement"
        },
        "variable": {
          "type": "string",
          "description": "Variable being assigned to"
        },
        "value": {
          "$ref": "#/definitions/expression"
        }
      }
    },
    "ifStatement": {
      "type": "object",
      "required": ["statementType", "condition", "thenStatements"],
      "properties": {
        "statementType": {
          "type": "string",
          "enum": ["if"],
          "description": "Type of statement"
        },
        "condition": {
          "$ref": "#/definitions/expression"
        },
        "thenStatements": {
          "type": "array",
          "description": "Statements to execute if condition is true",
          "items": {
            "$ref": "#/definitions/statement"
          }
        },
        "elseStatements": {
          "type": "array",
          "description": "Statements to execute if condition is false",
          "items": {
            "$ref": "#/definitions/statement"
          }
        }
      }
    },
    "forEachStatement": {
      "type": "object",
      "required": ["statementType", "variable", "collection", "statements"],
      "properties": {
        "statementType": {
          "type": "string",
          "enum": ["forEach"],
          "description": "Type of statement"
        },
        "variable": {
          "type": "string",
          "description": "Loop variable name"
        },
        "variableType": {
          "type": "string",
          "description": "Type of the loop variable"
        },
        "collection": {
          "$ref": "#/definitions/expression"
        },
        "statements": {
          "type": "array",
          "description": "Statements to execute for each item",
          "items": {
            "$ref": "#/definitions/statement"
          }
        }
      }
    },
    "returnStatement": {
      "type": "object",
      "required": ["statementType"],
      "properties": {
        "statementType": {
          "type": "string",
          "enum": ["return"],
          "description": "Type of statement"
        },
        "value": {
          "$ref": "#/definitions/expression"
        }
      }
    },
    "methodCall": {
      "type": "object",
      "required": ["statementType", "method"],
      "properties": {
        "statementType": {
          "type": "string",
          "enum": ["methodCall"],
          "description": "Type of statement"
        },
        "object": {
          "type": "string",
          "description": "Object on which to call the method (null for static methods)"
        },
        "method": {
          "type": "string",
          "description": "Name of the method to call"
        },
        "arguments": {
          "type": "array",
          "description": "Arguments to pass to the method",
          "items": {
            "$ref": "#/definitions/expression"
          }
        }
      }
    },
    "expression": {
      "type": "object",
      "description": "An expression that produces a value",
      "oneOf": [
        {
          "$ref": "#/definitions/literal"
        },
        {
          "$ref": "#/definitions/variable"
        },
        {
          "$ref": "#/definitions/methodCallExpression"
        },
        {
          "$ref": "#/definitions/binaryOperation"
        },
        {
          "$ref": "#/definitions/builder"
        }
      ]
    },
    "literal": {
      "type": "object",
      "required": ["expressionType", "value"],
      "properties": {
        "expressionType": {
          "type": "string",
          "enum": ["literal"],
          "description": "Type of expression"
        },
        "valueType": {
          "type": "string",
          "enum": ["boolean", "string", "integer", "double", "null"],
          "description": "Type of the literal value"
        },
        "value": {
          "description": "The literal value"
        }
      }
    },
    "variable": {
      "type": "object",
      "required": ["expressionType", "name"],
      "properties": {
        "expressionType": {
          "type": "string",
          "enum": ["variable"],
          "description": "Type of expression"
        },
        "name": {
          "type": "string",
          "description": "Name of the variable"
        }
      }
    },
    "methodCallExpression": {
      "type": "object",
      "required": ["expressionType", "method"],
      "properties": {
        "expressionType": {
          "type": "string",
          "enum": ["methodCall"],
          "description": "Type of expression"
        },
        "object": {
          "type": "string",
          "description": "Object on which to call the method (null for static methods)"
        },
        "method": {
          "type": "string",
          "description": "Name of the method to call"
        },
        "arguments": {
          "type": "array",
          "description": "Arguments to pass to the method",
          "items": {
            "$ref": "#/definitions/expression"
          }
        }
      }
    },
    "binaryOperation": {
      "type": "object",
      "required": ["expressionType", "operator", "left", "right"],
      "properties": {
        "expressionType": {
          "type": "string",
          "enum": ["binaryOperation"],
          "description": "Type of expression"
        },
        "operator": {
          "type": "string",
          "enum": ["+", "-", "*", "/", "%", "==", "!=", "<", "<=", ">", ">=", "&&", "||"],
          "description": "Binary operator"
        },
        "left": {
          "$ref": "#/definitions/expression"
        },
        "right": {
          "$ref": "#/definitions/expression"
        }
      }
    },
    "builder": {
      "type": "object",
      "required": ["expressionType", "builderType"],
      "properties": {
        "expressionType": {
          "type": "string",
          "enum": ["builder"],
          "description": "Type of expression"
        },
        "builderType": {
          "type": "string",
          "enum": ["actionOptions", "objectCollection"],
          "description": "Type of builder"
        },
        "methods": {
          "type": "array",
          "description": "Builder methods to call",
          "items": {
            "type": "object",
            "required": ["method", "arguments"],
            "properties": {
              "method": {
                "type": "string",
                "description": "Builder method name"
              },
              "arguments": {
                "type": "array",
                "description": "Arguments for the builder method",
                "items": {
                  "$ref": "#/definitions/expression"
                }
              }
            }
          }
        }
      }
    }
  }
}
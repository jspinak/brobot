package io.github.jspinak.brobot.tools.logging.spi;

import io.github.jspinak.brobot.tools.logging.model.LogData;

/**
 * Service Provider Interface (SPI) for persisting log data to external storage systems.
 * <p>
 * This interface defines the contract for log sink implementations that receive
 * and persist log data generated by the Brobot automation framework. It follows
 * the SPI pattern, allowing users to plug in custom logging backends without
 * modifying the core framework.
 * <p>
 * Implementations can persist logs to various destinations:
 * <ul>
 * <li>File systems (JSON, CSV, XML formats)</li>
 * <li>Databases (SQL, NoSQL)</li>
 * <li>Log aggregation services (ELK stack, Splunk)</li>
 * <li>Cloud logging services (AWS CloudWatch, Google Cloud Logging)</li>
 * <li>Message queues for async processing</li>
 * </ul>
 * <p>
 * The interface is marked as {@code @FunctionalInterface} to support lambda
 * implementations for simple use cases:
 * <pre>{@code
 * LogSink consoleSink = logData -> System.out.println(logData);
 * }</pre>
 * <p>
 * Implementation considerations:
 * <ul>
 * <li>The save method should be thread-safe if used in concurrent environments</li>
 * <li>Implementations should handle errors gracefully without disrupting automation</li>
 * <li>Consider buffering or async processing for performance-sensitive scenarios</li>
 * <li>The LogData object should not be modified by implementations</li>
 * </ul>
 *
 * @see LogData
 * @see NoOpLogSink
 */
@FunctionalInterface
public interface LogSink {
    /**
     * Persists the provided log data to the implementation's storage backend.
     * <p>
     * This method is called by the logging framework whenever a loggable event
     * occurs during automation execution. Implementations should persist the
     * data according to their specific storage strategy.
     * <p>
     * The method should:
     * <ul>
     * <li>Complete quickly to avoid impacting automation performance</li>
     * <li>Handle any errors internally without throwing exceptions</li>
     * <li>Not modify the provided LogData object</li>
     * <li>Be thread-safe if the sink might be used concurrently</li>
     * </ul>
     *
     * @param logData The log data to persist. Never null, but may contain null fields.
     *                The object is immutable and should not be modified.
     */
    void save(LogData logData);
}

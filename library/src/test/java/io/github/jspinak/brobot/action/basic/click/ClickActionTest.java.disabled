package io.github.jspinak.brobot.action.basic.click;

import io.github.jspinak.brobot.action.ActionConfig;
import io.github.jspinak.brobot.action.ActionInterface;
import io.github.jspinak.brobot.action.ActionResult;
import io.github.jspinak.brobot.action.ObjectCollection;
import io.github.jspinak.brobot.action.basic.find.Find;
import io.github.jspinak.brobot.action.basic.find.PatternFindOptions;
import io.github.jspinak.brobot.action.internal.factory.ActionResultFactory;
import io.github.jspinak.brobot.action.internal.mouse.PostClickHandler;
import io.github.jspinak.brobot.action.internal.mouse.SingleClickExecutor;
import io.github.jspinak.brobot.model.element.Location;
import io.github.jspinak.brobot.model.element.Region;
import io.github.jspinak.brobot.model.match.Match;
import io.github.jspinak.brobot.model.state.StateImage;
import io.github.jspinak.brobot.model.state.StateLocation;
import io.github.jspinak.brobot.test.BrobotTestBase;
import io.github.jspinak.brobot.tools.testing.mock.time.TimeProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("Click Action Tests")
public class ClickActionTest extends BrobotTestBase {

    @Mock
    private Find mockFind;
    
    @Mock
    private SingleClickExecutor mockSingleClickExecutor;
    
    @Mock
    private PostClickHandler mockPostClickHandler;
    
    @Mock
    private ActionResultFactory mockActionResultFactory;
    
    @Mock
    private TimeProvider mockTimeProvider;
    
    private Click click;
    
    @BeforeEach
    @Override
    public void setupTest() {
        super.setupTest();
        click = new Click(mockFind, mockSingleClickExecutor, mockTimeProvider,
                         mockPostClickHandler, mockActionResultFactory);
    }
    
    @Test
    @DisplayName("Should return CLICK action type")
    public void testGetActionType() {
        assertEquals(ActionInterface.Type.CLICK, click.getActionType());
    }
    
    @Test
    @DisplayName("Should perform click on found match")
    public void testClickOnMatch() {
        // Setup
        ActionResult actionResult = new ActionResult();
        actionResult.setSuccess(false);
        actionResult.setActionConfig(new ClickOptions.Builder().build());
        
        ObjectCollection objectCollection = new ObjectCollection();
        StateImage stateImage = new StateImage.Builder().build();
        objectCollection.getStateImages().add(stateImage);
        
        Match match = new Match.Builder()
            .setRegion(new Region(100, 100, 50, 50))
            .setSimScore(0.95)
            .build();
        
        // Mock ActionResultFactory to return a new ActionResult for Find
        ActionResult findResult = new ActionResult();
        when(mockActionResultFactory.init(any(PatternFindOptions.class), anyString(), any())).thenReturn(findResult);
        
        // Mock find to add match to the result
        doAnswer(invocation -> {
            ActionResult ar = invocation.getArgument(0);
            ar.setSuccess(true);
            ar.add(match);
            return null;
        }).when(mockFind).perform(any(ActionResult.class), any(ObjectCollection.class));
        
        // Mock click executor
        when(mockSingleClickExecutor.click(any(Location.class), any(ActionConfig.class))).thenReturn(true);
        
        // Execute
        click.perform(actionResult, objectCollection);
        
        // Verify
        assertTrue(actionResult.isSuccess());
        verify(mockFind).perform(any(ActionResult.class), any(ObjectCollection.class));
        verify(mockSingleClickExecutor, atLeastOnce()).click(any(Location.class), any(ActionConfig.class));
    }
    
    @Test  
    @DisplayName("Should handle no matches found")
    public void testNoMatchesFound() {
        // Setup
        ActionResult actionResult = new ActionResult();
        actionResult.setSuccess(false);
        actionResult.setActionConfig(new ClickOptions.Builder().build());
        
        ObjectCollection objectCollection = new ObjectCollection();
        StateImage stateImage = new StateImage.Builder().build();
        objectCollection.getStateImages().add(stateImage);
        
        // Mock ActionResultFactory
        ActionResult findResult = new ActionResult();
        when(mockActionResultFactory.init(any(PatternFindOptions.class), anyString(), any())).thenReturn(findResult);
        
        // Mock find to return no matches
        doAnswer(invocation -> {
            ActionResult ar = invocation.getArgument(0);
            ar.setSuccess(false);
            return null;
        }).when(mockFind).perform(any(ActionResult.class), any(ObjectCollection.class));
        
        // Execute
        click.perform(actionResult, objectCollection);
        
        // Verify
        assertFalse(actionResult.isSuccess());
        verify(mockFind).perform(any(ActionResult.class), any(ObjectCollection.class));
        verify(mockSingleClickExecutor, never()).click(any(Location.class), any(ActionConfig.class));
    }
    
    @Test
    @DisplayName("Should click on location from StateLocation")
    public void testClickOnStateLocation() {
        // Setup
        ActionResult actionResult = new ActionResult();
        actionResult.setSuccess(false);
        actionResult.setActionConfig(new ClickOptions.Builder().build());
        
        ObjectCollection objectCollection = new ObjectCollection();
        Location location = new Location(200, 200);
        StateLocation stateLocation = new StateLocation.Builder()
            .setLocation(location)
            .build();
        objectCollection.getStateLocations().add(stateLocation);
        
        Match matchWithLocation = new Match.Builder()
            .setRegion(new Region(200, 200, 1, 1))
            .build();
        
        // Mock ActionResultFactory
        ActionResult findResult = new ActionResult();
        when(mockActionResultFactory.init(any(PatternFindOptions.class), anyString(), any())).thenReturn(findResult);
        
        // Mock find to add location as match
        doAnswer(invocation -> {
            ActionResult ar = invocation.getArgument(0);
            ar.setSuccess(true);
            ar.add(matchWithLocation);
            return null;
        }).when(mockFind).perform(any(ActionResult.class), any(ObjectCollection.class));
        
        // Mock click executor
        when(mockSingleClickExecutor.click(any(Location.class), any(ActionConfig.class))).thenReturn(true);
        
        // Execute
        click.perform(actionResult, objectCollection);
        
        // Verify
        assertTrue(actionResult.isSuccess());
        verify(mockSingleClickExecutor, atLeastOnce()).click(any(Location.class), any(ActionConfig.class));
    }
    
    @Test
    @DisplayName("Should handle multiple matches")
    public void testMultipleMatches() {
        // Setup
        ActionResult actionResult = new ActionResult();
        actionResult.setActionConfig(new ClickOptions.Builder().build());
        
        ObjectCollection objectCollection = new ObjectCollection();
        StateImage stateImage = new StateImage.Builder().build();
        objectCollection.getStateImages().add(stateImage);
        
        Match match1 = new Match.Builder()
            .setRegion(new Region(100, 100, 50, 50))
            .setSimScore(0.95)
            .build();
        Match match2 = new Match.Builder()
            .setRegion(new Region(200, 200, 50, 50))
            .setSimScore(0.90)
            .build();
        
        // Mock ActionResultFactory
        ActionResult findResult = new ActionResult();
        when(mockActionResultFactory.init(any(PatternFindOptions.class), anyString(), any())).thenReturn(findResult);
        
        // Mock find to add multiple matches
        doAnswer(invocation -> {
            ActionResult ar = invocation.getArgument(0);
            ar.setSuccess(true);
            ar.add(match1, match2);
            return null;
        }).when(mockFind).perform(any(ActionResult.class), any(ObjectCollection.class));
        
        // Mock click executor
        when(mockSingleClickExecutor.click(any(Location.class), any(ActionConfig.class))).thenReturn(true);
        
        // Execute
        click.perform(actionResult, objectCollection);
        
        // Verify - should click on both matches
        assertTrue(actionResult.isSuccess());
        verify(mockSingleClickExecutor, atLeast(2)).click(any(Location.class), any(ActionConfig.class));
    }
}
// In brobot/library/build.gradle

plugins {
    id 'java-library'
    id 'org.springframework.boot' apply false  // Don't apply boot plugin to library
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser'
    id 'jacoco'
}

dependencies {
    // These dependencies are part of the library's public API.
    api('com.sikulix:sikulixapi:2.0.5') {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'commons-logging', module: 'commons-logging'
        // This excludes the old JSON library to resolve the classpath conflict.
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    // Use JavaCV 1.5.3 to match SikuliX's OpenCV 4.3.0
    api 'org.bytedeco:javacv-platform:1.5.3'
    // Explicit OpenCV 4.3.0 to match SikuliX 2.0.5
    api 'org.bytedeco:opencv-platform:4.3.0-1.5.3'
    // FFmpeg version compatible with JavaCV 1.5.3
    api 'org.bytedeco:ffmpeg-platform:4.2.2-1.5.3'
    api 'org.apache.commons:commons-lang3:3.0'
    
    // These dependencies are exposed as part of Brobot's public API
    api 'org.springframework:spring-context'
    api 'org.springframework.boot:spring-boot-autoconfigure'
    api 'org.springframework.boot:spring-boot-starter-aop'
    api 'org.slf4j:slf4j-api:2.0.9'
    
    // Jakarta annotations for @PostConstruct
    api 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    // These dependencies are internal implementation details.
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    implementation 'com.github.erosb:everit-json-schema:1.14.5'
    implementation 'org.json:json:20240303'
    implementation 'com.networknt:json-schema-validator:1.4.0'
    
    // Jansi for Windows console color support
    implementation 'org.fusesource.jansi:jansi:2.4.0'

    // Test dependencies for the unit tests within this module
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'

    // Lombok is handled by the io.freefair.lombok plugin
    // But we need to explicitly add annotation processor for proper generation
    annotationProcessor 'org.projectlombok:lombok'
}

java {
    withJavadocJar()
    withSourcesJar()
}

// Handle duplicate files in jar tasks
tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Handle duplicate files in resource processing tasks
processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Exclude disabled tests from compilation
compileTestJava {
    exclude 'disabled/**'
}

// Ensure standard source sets configuration
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
            exclude 'disabled/**'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

// Configuration to share test classes with other modules
configurations {
    testOutput
}

task testJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    testOutput testJar
}

test {
    // Standard Spring Boot test setup
    useJUnitPlatform {
        // Enable tag filtering via command line
        // Examples:
        // ./gradlew test -PincludeTags=unit
        // ./gradlew test -PexcludeTags=slow,e2e
        if (project.hasProperty('includeTags')) {
            includeTags project.property('includeTags').split(',')
        }
        if (project.hasProperty('excludeTags')) {
            excludeTags project.property('excludeTags').split(',')
        }
    }
    
    // Exclude disabled tests directory
    exclude '**/disabled/**'
    exclude 'disabled/**'
    
    // Exclude test category/annotation classes (not actual tests)
    exclude '**/test/annotations/**'
    exclude '**/test/categories/**'
    exclude 'disabled/**'
    
    // Exclude problematic tests in CI/CD
    exclude '**/MotionDetectorTest.class'
    exclude '**/GridBasedClustererTest.class'
    exclude '**/ImageConverterTest.class'  // Timing out in CI/CD
    exclude '**/IterativePatternFinderTest.class'
    
    // Exclude test category/annotation classes (not actual tests)
    exclude '**/test/annotations/FlakyTest.class'
    exclude '**/test/categories/E2ETest.class'
    exclude '**/test/categories/IntegrationTest.class'
    exclude '**/test/categories/SlowTest.class'
    exclude '**/test/categories/UnitTest.class'
    
    // Enhanced memory and forking settings for 5000+ tests
    maxHeapSize = '4g'
    minHeapSize = '1g'
    
    // Enhanced parallel execution configuration for 5722+ tests
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
    // Dynamic strategy with increased parallelism factor
    systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
    systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '1.0'  // Use all cores
    systemProperty 'junit.jupiter.execution.parallel.config.dynamic.max-pool-size', '256'
    
    // Fork settings optimized for large test suite
    forkEvery = 200  // Create new JVM every 200 tests to balance memory vs startup overhead
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)  // Cap at 8 for stability
    
    // JVM args for better performance
    jvmArgs = [
        '-XX:+UseG1GC',
        '-XX:MaxGCPauseMillis=200',
        '-XX:+ParallelRefProcEnabled',
        '-Dbrobot.mock=true'  // Only set mock mode for tests
        // Removed headless=true to match 1.0.7 - let SikuliX determine environment
    ]
    
    // Timeout to prevent hanging tests
    timeout = Duration.ofMinutes(10)
    
    // Standard test logging
    testLogging {
        // Only show failed tests by default
        events "failed"
        exceptionFormat "full"
        showStandardStreams = false
        showStackTraces = true
        showCauses = true

        // Optional: show summary at the end
        afterSuite { desc, result ->
            if (!desc.parent && result.failedTestCount > 0) {
                println "\n${result.failedTestCount} tests FAILED out of ${result.testCount} total tests"
            }
        }
    }
    
    // Ensure test classes can access main classes
    classpath = sourceSets.test.runtimeClasspath
    
    // System properties for tests
    systemProperties = [
        'brobot.mock': 'true',  // Use mock mode for tests
        'sikuli.Debug': '0'
        // Removed headless=true to match 1.0.7 - let environment be detected naturally
    ]
}

// Custom test task for unit tests only
task unitTest(type: Test) {
    description = 'Runs only unit tests'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'unit'
    }
    
    // Exclude disabled tests directory
    exclude '**/disabled/**'
    exclude 'disabled/**'
    
    // Exclude test category/annotation classes (not actual tests)
    exclude '**/test/annotations/**'
    exclude '**/test/categories/**'
    
    // Unit tests should run faster with more parallelism
    maxParallelForks = Runtime.runtime.availableProcessors()
    forkEvery = 50
    
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
    }
}

// Custom test task for integration tests only
task integrationTest(type: Test) {
    description = 'Runs only integration tests'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'integration'
    }
    
    // Exclude disabled tests directory
    exclude '**/disabled/**'
    exclude 'disabled/**'
    
    // Exclude test category/annotation classes (not actual tests)
    exclude '**/test/annotations/**'
    exclude '**/test/categories/**'
    
    // Integration tests need more resources
    maxHeapSize = '2g'
    maxParallelForks = 2
    forkEvery = 20
    
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

// Task for running diagnostic tools
task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('mainClass')) {
        mainClass = project.mainClass
    } else {
        mainClass = 'io.github.jspinak.brobot.tools.diagnostics.QuickMatchComparison'
    }
    if (project.hasProperty('args')) {
        args project.args.split(' ')
    }
}

// Task for running DPI diagnostic
task runDPIDiagnostic(type: JavaExec) {
    description = 'Runs the DPI scaling diagnostic tool'
    group = 'diagnostics'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.brobot.tools.diagnostics.StandaloneDPIDiagnostic'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for verifying screen resolution
task runResolutionVerifier(type: JavaExec) {
    description = 'Verifies screen capture resolution'
    group = 'diagnostics'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.brobot.tools.diagnostics.ScreenResolutionVerifier'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for analyzing capture scaling
task runScalingAnalyzer(type: JavaExec) {
    description = 'Analyzes why SikuliX captures at 80% resolution'
    group = 'diagnostics'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.brobot.tools.diagnostics.CaptureScalingAnalyzer'
    standardOutput = System.out
    errorOutput = System.err
}

// Task for comprehensive capture testing
task runCaptureTest(type: JavaExec) {
    description = 'Tests patterns on different capture resolutions'
    group = 'diagnostics'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'io.github.jspinak.brobot.tools.diagnostics.ComprehensiveCaptureTest'
    standardOutput = System.out
    errorOutput = System.err
}

// Custom test task for E2E tests only
task e2eTest(type: Test) {
    description = 'Runs only E2E tests'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'e2e'
    }
    
    // E2E tests should run sequentially
    maxParallelForks = 1
    forkEvery = 0

    // E2E tests may need display
    // Let environment be detected naturally like in 1.0.7
    systemProperty 'brobot.mock', 'false'
    
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}

// Custom test task for fast tests (excludes slow and E2E)
task fastTest(type: Test) {
    description = 'Runs all tests except slow and E2E tests'
    group = 'verification'

    useJUnitPlatform {
        excludeTags 'slow', 'e2e'
    }

    maxParallelForks = Runtime.runtime.availableProcessors()
    forkEvery = 100

    testLogging {
        events "failed"
        showStandardStreams = false
    }
}

// Task to run tests and show only failures
task testFailuresOnly(type: Test) {
    description = 'Run tests and show only failures'
    group = 'verification'

    useJUnitPlatform()

    testLogging {
        events "failed"
        exceptionFormat "short"
        showStandardStreams = false
        showStackTraces = false
        showCauses = false

        // Show a concise summary of failures
        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.failedTestCount > 0) {
                    println "\n============ TEST FAILURES ============"
                    println "${result.failedTestCount} tests FAILED"
                    println "${result.successfulTestCount} tests PASSED"
                    println "${result.skippedTestCount} tests SKIPPED"
                    println "Total: ${result.testCount} tests"
                    println "======================================="
                } else {
                    println "\nAll ${result.testCount} tests PASSED!"
                }
            }
        }
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true  // Enable XML for CI/CD integration
        xml.outputLocation = layout.buildDirectory.file('jacoco/jacoco.xml')
        csv.required = true  // Enable CSV for detailed analysis
        csv.outputLocation = layout.buildDirectory.file('jacoco/jacoco.csv')
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    
    // Exclude generated code and test utilities
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/generated/**',
                '**/test/**',
                '**/BrobotTestBase.class',
                '**/TestConfiguration*.class',
                '**/*Test*.class',
                '**/mixins/**'  // Exclude Jackson mixins
            ])
        }))
    }
}

// Add coverage verification task
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70  // 70% minimum code coverage
            }
        }
        rule {
            element = 'CLASS'
            excludes = [
                'io.github.jspinak.brobot.test.*',
                'io.github.jspinak.brobot.*.mixins.*',
                '*.TestConfiguration'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60  // 60% line coverage per class
            }
        }
    }
}

// CI/CD task that runs tests and generates coverage report
task ciTest {
    description = 'Runs tests with coverage for CI/CD pipeline'
    group = 'verification'
    dependsOn test, jacocoTestReport, jacocoTestCoverageVerification
    
    doLast {
        println "Test Results: ${test.reports.html.outputLocation.get()}"
        println "Coverage Report: ${jacocoTestReport.reports.html.outputLocation.get()}"
    }
}

// Task for quick coverage check without enforcement
task coverageReport {
    description = 'Generates coverage report without verification'
    group = 'verification'
    dependsOn test, jacocoTestReport
    
    doLast {
        println "Coverage report generated at: ${jacocoTestReport.reports.html.outputLocation.get()}"
    }
}

javadoc {
    dependsOn compileJava

    // Debug logging for CI
    doFirst {
        println "===== JAVADOC DEBUG INFO ====="
        println "OS Name: ${System.getProperty('os.name')}"
        println "OS Version: ${System.getProperty('os.version')}"
        println "OS Arch: ${System.getProperty('os.arch')}"
        println "Java Version: ${JavaVersion.current()}"
        println "Java Home: ${System.getProperty('java.home')}"
        println "Gradle Version: ${gradle.gradleVersion}"
        println "Is Windows: ${System.getProperty('os.name').toLowerCase().contains('windows')}"
        println "=============================="
    }

    // After javadoc execution, dump the options file for debugging
    doLast {
        def optionsFile = file("${buildDir}/tmp/javadoc/javadoc.options")
        if (optionsFile.exists()) {
            println "===== JAVADOC OPTIONS FILE ====="
            println optionsFile.text
            println "================================"

            // Check for problematic patterns
            def content = optionsFile.text
            if (content.contains(" -\n") || content.contains(" -\r") || content.contains("' -") || content.contains("\" -")) {
                println "WARNING: Found potential 'invalid flag: -' pattern in options file"
            }
        }
    }

    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    exclude '**/module-info.java.disabled'
    exclude '**/module-info.java.v1.1.0'
    exclude '**/*.md'
    // Platform-specific handling for Xdoclint
    // On Windows CI, addBooleanOption('Xdoclint:none', true) causes "invalid flag: -" error
    def isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    if (!isWindows && JavaVersion.current().isJava8Compatible()) {
        // Only add on non-Windows systems where it works
        options.addBooleanOption('Xdoclint:none', true)
    } else if (isWindows) {
        // For Windows, try to suppress warnings differently
        options.addBooleanOption('quiet', true)
    }
    options.windowTitle = "Brobot 1.1.0 API" // This sets the browser tab title
    options.docTitle = "Brobot 1.1.0 API" // This sets the main header on the page

    // Enhanced JavaDoc options for better documentation
    options.author = true
    options.version = true
    options.use = true
    options.splitIndex = true
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'

    // Add links to external JavaDocs
    options.links(
        'https://docs.oracle.com/en/java/javase/21/docs/api/',
        'https://docs.spring.io/spring-framework/docs/current/javadoc-api/',
        'https://docs.spring.io/spring-boot/docs/current/api/',
        'https://projectlombok.org/api/',
        'https://www.slf4j.org/apidocs/'
    )

    // Custom footer with version and Maven Central link
    options.bottom = """
        <div style="text-align: center; padding: 10px; background-color: #f0f0f0; margin-top: 20px;">
            <b>Brobot ${project.version}</b> -
            <a href="https://github.com/jspinak/brobot">GitHub</a> |
            <a href="https://central.sonatype.com/artifact/io.github.jspinak/brobot">Maven Central</a> |
            <a href="https://jspinak.github.io/brobot">Documentation</a>
        </div>
    """.stripIndent()

    // Include compiled classes in classpath for Lombok-generated code
    classpath = configurations.compileClasspath + sourceSets.main.output

    // JavaDoc configuration that works with Lombok
    // We include the compiled output so JavaDoc can see Lombok-generated methods
    // Removed invalid -sourcepath option for modern Javadoc
}

// Task to generate JavaDocs in a format suitable for GitHub Pages
task javadocForGitHubPages(type: Javadoc) {
    description = 'Generate JavaDocs for GitHub Pages deployment'
    group = 'documentation'

    dependsOn delombok
    source = delombok
    classpath = configurations.compileClasspath + sourceSets.main.output
    destinationDir = file("${buildDir}/docs/javadoc/${project.version}")

    exclude '**/module-info.java.disabled'
    exclude '**/module-info.java.v1.1.0'
    exclude '**/*.md'

    // Copy all javadoc task options
    options {
        if(JavaVersion.current().isJava9Compatible()) {
            addBooleanOption('html5', true)
        }
        windowTitle = "Brobot ${project.version} API"
        docTitle = "Brobot ${project.version} API"
        author = true
        version = true
        use = true
        splitIndex = true
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        // Platform-specific handling for Xdoclint
        def isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
        if (!isWindows && JavaVersion.current().isJava8Compatible()) {
            // Only add on non-Windows systems where it works
            addBooleanOption('Xdoclint:none', true)
        } else if (isWindows) {
            // For Windows, try to suppress warnings differently
            addBooleanOption('quiet', true)
        }

        links(
            'https://docs.oracle.com/en/java/javase/21/docs/api/',
            'https://docs.spring.io/spring-framework/docs/current/javadoc-api/',
            'https://docs.spring.io/spring-boot/docs/current/api/',
            'https://projectlombok.org/api/',
            'https://www.slf4j.org/apidocs/'
        )

        bottom = """
            <div style="text-align: center; padding: 10px; background-color: #f0f0f0; margin-top: 20px;">
                <b>Brobot ${project.version}</b> -
                <a href="https://github.com/jspinak/brobot">GitHub</a> |
                <a href="https://central.sonatype.com/artifact/io.github.jspinak/brobot/${project.version}">Maven Central</a> |
                <a href="https://jspinak.github.io/brobot">Documentation</a>
            </div>
        """.stripIndent()
    }

    exclude '**/module-info.java.disabled'
    exclude '**/module-info.java.v1.1.0'
    exclude '**/*.md'
}

// Task to create a symlink for 'latest' JavaDocs
task createLatestSymlink {
    dependsOn javadocForGitHubPages
    description = 'Create a latest symlink for JavaDocs'
    group = 'documentation'

    doLast {
        def latestLink = file("${buildDir}/docs/javadoc/latest")
        if (latestLink.exists()) {
            latestLink.delete()
        }
        // Create an index.html that redirects to the versioned docs
        latestLink.mkdirs()
        file("${latestLink}/index.html").text = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="refresh" content="0; url=../${project.version}/index.html">
    <title>Redirecting to latest JavaDocs</title>
</head>
<body>
    <p>Redirecting to <a href="../${project.version}/index.html">latest JavaDocs (${project.version})</a>...</p>
</body>
</html>
        """.stripIndent()
    }
}

// -- Publishing Configuration --
publishing {
    publications {
        mavenJava(MavenPublication) {
            // Explicitly set the coordinates for this publication.
            // This ensures the POM and the upload path are correct.
            groupId = 'io.github.jspinak'
            artifactId = 'brobot'
            version = '1.1.0'

            from components.java
            pom {
                name = 'Brobot'
                description = 'Model-based GUI Automation'
                url = 'https://github.com/jspinak/brobot'
                inceptionYear = '2022'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'jspinak'
                        name = 'Joshua Spinak'
                        email = 'jspinak@hotmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jspinak/brobot.git'
                    developerConnection = 'scm:git:ssh://github.com:jspinak/brobot.git'
                    url = 'https://github.com/jspinak/brobot'
                }
            }
        }
    }
    repositories {
        maven {
            name = "CentralPortal"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.property('centralPortalUsername')
                password = project.property('centralPortalPassword')
            }
        }
    }
}

// Signing disabled for local builds
// signing {
//     sign publishing.publications.mavenJava
// }

// JReleaser configuration
jreleaser {
    // Git configuration
    gitRootSearch = true
    
    // Project configuration
    project {
        name = 'brobot'
        description = 'Model-based GUI Automation'
        website = 'https://github.com/jspinak/brobot'
        authors = ['Joshua Spinak']
        license = 'MIT'
        inceptionYear = '2022'
        stereotype = 'NONE'
        
        java {
            groupId = 'io.github.jspinak'
            version = '21'
            multiProject = true
        }
    }
    
    // Release configuration
    release {
        github {
            overwrite = true
            draft = false
            prerelease {
                enabled = false
            }
            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                contributors {
                    enabled = false
                }
            }
        }
    }
    
    // Signing configuration
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'MEMORY'
    }
    
    // Deploy configuration for Maven Central
    deploy {
        maven {
            nexus2 {
                'maven-central' {
                    active = 'ALWAYS'
                    url = 'https://s01.oss.sonatype.org/service/local'
                    closeRepository = true
                    releaseRepository = true
                    stagingRepositories = ['build/staging-deploy']
                }
            }
        }
    }
}

// Apply coverage tasks
// apply from: 'config-files/gradle-coverage-tasks.gradle'  // Temporarily disabled for testing
apply from: 'config-files/test-suites.gradle'  // Test suite configuration for 5000+ tests
// apply from: 'gradle/test-performance.gradle'  // Temporarily disabled - duplicate task error

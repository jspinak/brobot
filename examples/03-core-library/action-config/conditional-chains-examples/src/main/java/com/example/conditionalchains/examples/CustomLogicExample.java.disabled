package com.example.conditionalchains.examples;

import io.github.jspinak.brobot.action.ActionInterface;
import io.github.jspinak.brobot.action.basic.find.PatternFindOptions;
import io.github.jspinak.brobot.action.basic.click.ClickOptions;
import io.github.jspinak.brobot.action.ObjectCollection;
import io.github.jspinak.brobot.model.state.StateImage;
import io.github.jspinak.brobot.model.conditional.ConditionalActionChain;
import io.github.jspinak.brobot.action.ActionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Demonstrates real-world scenarios with ConditionalActionChain.
 * 
 * Based on documentation: /brobot/docs/docs/03-core-library/action-config/15-conditional-chains-examples.md
 * 
 * Shows advanced patterns like login flow, save confirmation, retry patterns, 
 * and switch-like behavior from the documentation.
 */
@Component
public class CustomLogicExample {
    private static final Logger log = LoggerFactory.getLogger(CustomLogicExample.class);

    @Autowired
    private ActionInterface action;
    
    // Login flow elements
    private StateImage loginButton;
    private StateImage menuButton;
    private StateImage usernameField;
    private StateImage passwordField;
    private StateImage submitButton;
    
    // Save confirmation elements
    private StateImage saveButton;
    private StateImage confirmDialog;
    private StateImage yesButton;
    private StateImage successMessage;
    
    // Dialog handling elements
    private StateImage dialogBox;
    private StateImage okButton;
    private StateImage continueButton;
    private StateImage closeButton;
    
    public CustomLogicExample() {
        initializeObjects();
    }
    
    private void initializeObjects() {
        // Login elements
        loginButton = new StateImage.Builder()
            .setName("LoginButton")
            .addPattern("login-button.png")
            .build();
            
        menuButton = new StateImage.Builder()
            .setName("MenuButton")
            .addPattern("menu-button.png")
            .build();
            
        usernameField = new StateImage.Builder()
            .setName("UsernameField")
            .addPattern("username-field.png")
            .build();
            
        passwordField = new StateImage.Builder()
            .setName("PasswordField")
            .addPattern("password-field.png")
            .build();
            
        submitButton = new StateImage.Builder()
            .setName("SubmitButton")
            .addPattern("submit-button.png")
            .build();
            
        // Save elements
        saveButton = new StateImage.Builder()
            .setName("SaveButton")
            .addPattern("save-button.png")
            .build();
            
        confirmDialog = new StateImage.Builder()
            .setName("ConfirmDialog")
            .addPattern("confirm-dialog.png")
            .build();
            
        yesButton = new StateImage.Builder()
            .setName("YesButton")
            .addPattern("yes-button.png")
            .build();
            
        successMessage = new StateImage.Builder()
            .setName("SuccessMessage")
            .addPattern("success-message.png")
            .build();
            
        // Dialog elements
        dialogBox = new StateImage.Builder()
            .setName("DialogBox")
            .addPattern("dialog-box.png")
            .build();
            
        okButton = new StateImage.Builder()
            .setName("OkButton")
            .addPattern("ok-button.png")
            .build();
            
        continueButton = new StateImage.Builder()
            .setName("ContinueButton")
            .addPattern("continue-button.png")
            .build();
            
        closeButton = new StateImage.Builder()
            .setName("CloseButton")
            .addPattern("close-button.png")
            .build();
    }
    
    /**
     * Login Flow - Using real API
     * 
     * public ActionResult performLogin(String username, String password) {
     *     return ConditionalActionChain.find(loginButton)
     *         .ifFound(click())
     *         .ifNotFoundLog("Login button not visible")
     *         .ifNotFound(find(menuButton))
     *         .ifFound(click())
     *         .always(wait(1.0))
     *         .then(find(usernameField))
     *         .ifFound(click())
     *         .ifFound(type(username))
     *         .then(find(passwordField))
     *         .ifFound(click())
     *         .ifFound(type(password))
     *         .then(find(submitButton))
     *         .ifFound(click())
     *         .always(wait(2.0))
     *         .perform(action, objectCollection);
     * }
     */
    public ActionResult performLogin(String username, String password) {
        log.info("=== Login Flow Example ===");
        
        ObjectCollection objectCollection = new ObjectCollection.Builder()
            .withImages(loginButton, menuButton, usernameField, passwordField, submitButton)
            .build();
            
        // Using real API for login flow
        PatternFindOptions findOptions = new PatternFindOptions.Builder().build();
        ClickOptions clickOptions = new ClickOptions.Builder().build();
        
        // Try to find and click login button
        ActionResult result = action.perform(findOptions, 
            new ObjectCollection.Builder().withImages(loginButton).build());
        
        if (!result.isSuccess()) {
            log.warn("Login button not visible, trying menu button");
            // Try menu button instead
            result = action.perform(findOptions,
                new ObjectCollection.Builder().withImages(menuButton).build());
            if (result.isSuccess()) {
                action.perform(clickOptions,
                    new ObjectCollection.Builder().withImages(menuButton).build());
            }
        } else {
            action.perform(clickOptions,
                new ObjectCollection.Builder().withImages(loginButton).build());
        }
        
        // Wait before proceeding
        try { Thread.sleep(1000); } catch (InterruptedException e) {}
        
        // Enter username
        result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(usernameField).build());
        if (result.isSuccess()) {
            action.perform(clickOptions,
                new ObjectCollection.Builder().withImages(usernameField).build());
            // Type username - would use TypeOptions with ObjectCollection containing text
            action.perform(new io.github.jspinak.brobot.action.basic.type.TypeOptions.Builder().build(),
                new ObjectCollection.Builder().withStrings(username).build());
        }
        
        // Enter password
        result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(passwordField).build());
        if (result.isSuccess()) {
            action.perform(clickOptions,
                new ObjectCollection.Builder().withImages(passwordField).build());
            // Type password
            action.perform(new io.github.jspinak.brobot.action.basic.type.TypeOptions.Builder().build(),
                new ObjectCollection.Builder().withStrings(password).build());
        }
        
        // Click submit
        result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(submitButton).build());
        if (result.isSuccess()) {
            action.perform(clickOptions,
                new ObjectCollection.Builder().withImages(submitButton).build());
        }
        
        // Wait for completion
        try { Thread.sleep(2000); } catch (InterruptedException e) {}
        
        return result;
    }
    
    /**
     * Save with Confirmation Dialog - Using real API
     * 
     * public ActionResult saveWithConfirmation() {
     *     return ConditionalActionChain.find(saveButton)
     *         .ifFound(click())
     *         .ifNotFoundLog("Save button not found")
     *         .ifFound(wait(0.5))
     *         .then(find(confirmDialog))
     *         .ifFound(find(yesButton))
     *         .ifFound(click())
     *         .ifNotFound(log("No confirmation needed"))
     *         .always(wait(1.0))
     *         .then(find(successMessage))
     *         .ifFoundLog("Save successful")
     *         .ifNotFoundLog("Save may have failed")
     *         .perform(action, objectCollection);
     * }
     */
    public ActionResult saveWithConfirmation() {
        log.info("=== Save with Confirmation Dialog ===");
        
        ObjectCollection objectCollection = new ObjectCollection.Builder()
            .withImages(saveButton, confirmDialog, yesButton, successMessage)
            .build();
            
        // Using real API for save with confirmation
        PatternFindOptions findOptions = new PatternFindOptions.Builder().build();
        ClickOptions clickOptions = new ClickOptions.Builder().build();
        
        // Click save button
        ActionResult result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(saveButton).build());
        
        if (!result.isSuccess()) {
            log.error("Save button not found");
            return result;
        }
        
        action.perform(clickOptions,
            new ObjectCollection.Builder().withImages(saveButton).build());
        
        // Wait for dialog
        try { Thread.sleep(500); } catch (InterruptedException e) {}
        
        // Check for confirmation dialog
        result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(confirmDialog).build());
        
        if (result.isSuccess()) {
            // Find and click Yes button
            ActionResult yesResult = action.perform(findOptions,
                new ObjectCollection.Builder().withImages(yesButton).build());
            if (yesResult.isSuccess()) {
                action.perform(clickOptions,
                    new ObjectCollection.Builder().withImages(yesButton).build());
            }
        } else {
            log.info("No confirmation needed");
        }
        
        // Wait and check for success
        try { Thread.sleep(1000); } catch (InterruptedException e) {}
        
        result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(successMessage).build());
        
        if (result.isSuccess()) {
            log.info("Save successful");
        } else {
            log.warn("Save may have failed");
        }
        
        return result;
    }
    
    /**
     * Retry Pattern - Using real API
     * 
     * public ActionResult clickWithRetry(StateImage target, int maxRetries) {
     *     ConditionalActionChain chain = ConditionalActionChain.find(
     *         new PatternFindOptions.Builder()
     *             .setSimilarity(0.8)
     *             .build()
     *     );
     *     
     *     for (int i = 0; i < maxRetries; i++) {
     *         chain = chain
     *             .ifNotFoundLog("Attempt " + (i + 1) + " failed")
     *             .ifNotFound(wait(1.0))
     *             .ifNotFound(find(target));
     *     }
     *     
     *     return chain
     *         .ifFound(click())
     *         .ifFoundLog("Successfully clicked after retries")
     *         .ifNotFoundLog("Failed after " + maxRetries + " attempts")
     *         .perform(action, new ObjectCollection.Builder()
     *             .withImages(target)
     *             .build());
     * }
     */
    public ActionResult clickWithRetry(StateImage target, int maxRetries) {
        log.info("=== Retry Pattern Example ===");
        
        // Using real API for retry pattern
        PatternFindOptions findOptions = new PatternFindOptions.Builder()
            .setSimilarity(0.8)
            .build();
        ClickOptions clickOptions = new ClickOptions.Builder().build();
        ObjectCollection objects = new ObjectCollection.Builder()
            .withImages(target)
            .build();
        
        ActionResult result = null;
        
        for (int i = 0; i < maxRetries; i++) {
            result = action.perform(findOptions, objects);
            
            if (result.isSuccess()) {
                action.perform(clickOptions, objects);
                log.info("Successfully clicked after {} attempts", i + 1);
                return result;
            }
            
            log.warn("Attempt {} failed", i + 1);
            
            if (i < maxRetries - 1) {
                try { Thread.sleep(1000); } catch (InterruptedException e) {}
            }
        }
        
        log.error("Failed after {} attempts", maxRetries);
        if (result == null) {
            result = new ActionResult();
            result.setSuccess(false);
        }
        return result;
    }
    
    /**
     * Switch-Like Behavior - Using real API
     * 
     * public ActionResult handleDialog() {
     *     return ConditionalActionChain.find(dialogBox)
     *         // Try OK button first
     *         .ifFound(find(okButton))
     *         .ifFound(click())
     *         
     *         // If no OK, try Yes button
     *         .ifNotFound(find(yesButton))
     *         .ifFound(click())
     *         
     *         // If no Yes, try Continue button
     *         .ifNotFound(find(continueButton))
     *         .ifFound(click())
     *         
     *         // If none found, try Close button
     *         .ifNotFound(find(closeButton))
     *         .ifFound(click())
     *         
     *         // Last resort - press Escape
     *         .ifNotFound(pressEscape())
     *         .always(wait(0.5))
     *         .perform(action, objectCollection);
     * }
     */
    public ActionResult handleDialog() {
        log.info("=== Switch-Like Behavior Example ===");
        
        ObjectCollection objectCollection = new ObjectCollection.Builder()
            .withImages(dialogBox, okButton, yesButton, continueButton, closeButton)
            .build();
            
        // Using real API for switch-like behavior
        PatternFindOptions findOptions = new PatternFindOptions.Builder().build();
        ClickOptions clickOptions = new ClickOptions.Builder().build();
        
        // Check for dialog box first
        ActionResult result = action.perform(findOptions,
            new ObjectCollection.Builder().withImages(dialogBox).build());
        
        if (!result.isSuccess()) {
            return result; // No dialog found
        }
        
        // Try buttons in order of preference
        StateImage[] buttonsToTry = {okButton, yesButton, continueButton, closeButton};
        
        for (StateImage button : buttonsToTry) {
            result = action.perform(findOptions,
                new ObjectCollection.Builder().withImages(button).build());
            
            if (result.isSuccess()) {
                action.perform(clickOptions,
                    new ObjectCollection.Builder().withImages(button).build());
                try { Thread.sleep(500); } catch (InterruptedException e) {}
                return result;
            }
        }
        
        // Last resort - press Escape
        log.info("No dialog buttons found, pressing Escape");
        // Press escape - would use KeyOptions
        action.perform(new io.github.jspinak.brobot.action.basic.keyboard.KeyOptions.Builder()
            .setKey(java.awt.event.KeyEvent.VK_ESCAPE).build(),
            new ObjectCollection.Builder().build());
        try { Thread.sleep(500); } catch (InterruptedException e) {}
        
        ActionResult failResult = new ActionResult();
        failResult.setSuccess(false);
        return failResult;
    }
    
    // Helper methods removed - using real API directly
    
    /**
     * Demonstrates all real-world scenarios from documentation
     */
    public void runAllExamples() {
        log.info("Running all real-world ConditionalActionChain examples...\n");
        
        performLogin("testuser", "testpass");
        log.info("");
        
        saveWithConfirmation();
        log.info("");
        
        clickWithRetry(loginButton, 3);
        log.info("");
        
        handleDialog();
        log.info("");
        
        log.info("All real-world examples completed!");
    }
}
package com.example.conditionalchains.examples;

import io.github.jspinak.brobot.action.ActionInterface;
import io.github.jspinak.brobot.action.basic.find.PatternFindOptions;
import io.github.jspinak.brobot.action.basic.click.ClickOptions;
import io.github.jspinak.brobot.action.ObjectCollection;
import io.github.jspinak.brobot.model.state.StateImage;
import io.github.jspinak.brobot.model.conditional.ConditionalActionChain;
import io.github.jspinak.brobot.action.ActionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Demonstrates basic ConditionalActionChain patterns with find operations.
 * 
 * Based on documentation: /brobot/docs/docs/03-core-library/action-config/15-conditional-chains-examples.md
 * 
 * This class shows basic patterns like simple find and click, and find with error handling.
 */
@Component
public class BasicFindExample {
    private static final Logger log = LoggerFactory.getLogger(BasicFindExample.class);
    
    @Autowired
    private ActionInterface action;
    
    // These would normally come from State classes
    private StateImage buttonImage;
    private StateImage loginButton;
    private StateImage menuButton;
    private StateImage usernameField;
    private StateImage passwordField;
    private StateImage submitButton;
    
    public BasicFindExample() {
        initializeObjects();
    }
    
    private void initializeObjects() {
        // In a real application, these would come from your State classes
        buttonImage = new StateImage.Builder()
            .setName("ButtonImage")
            .addPattern("button.png")
            .build();
            
        loginButton = new StateImage.Builder()
            .setName("LoginButton")
            .addPattern("login-button.png")
            .build();
            
        menuButton = new StateImage.Builder()
            .setName("MenuButton")
            .addPattern("menu-button.png")
            .build();
            
        usernameField = new StateImage.Builder()
            .setName("UsernameField")
            .addPattern("username-field.png")
            .build();
            
        passwordField = new StateImage.Builder()
            .setName("PasswordField")
            .addPattern("password-field.png")
            .build();
            
        submitButton = new StateImage.Builder()
            .setName("SubmitButton")
            .addPattern("submit-button.png")
            .build();
    }
    
    /**
     * Simple Find and Click - Using real API
     * 
     * The real ConditionalActionChain API requires ActionConfig objects.
     * For conditional execution, we use the Action class directly.
     */
    public void simpleFinAndClick() {
        log.info("=== Simple Find and Click Pattern ===");
        
        // Using the real API - find and conditionally click
        PatternFindOptions findOptions = new PatternFindOptions.Builder().build();
        ObjectCollection objects = new ObjectCollection.Builder()
            .withImages(buttonImage)
            .build();
            
        // First find the button
        ActionResult findResult = action.perform(findOptions, objects);
        
        // Then click if found
        if (findResult.isSuccess()) {
            ClickOptions clickOptions = new ClickOptions.Builder().build();
            ActionResult clickResult = action.perform(clickOptions, objects);
            log.info("Clicked button: {}", clickResult.isSuccess());
        } else {
            log.info("Button not found");
        }
    }
    
    /**
     * Find with Error Handling - Using real API
     * 
     * ConditionalActionChain.find(findOptions)
     *     .ifFound(click())
     *     .ifNotFoundLog("Critical button not found!")
     *     .ifNotFoundDo(result -> {
     *         // Custom error handling
     *         alertUser("UI element missing");
     *         takeDebugScreenshot();
     *     })
     *     .perform(action, objectCollection);
     */
    public void findWithErrorHandling() {
        log.info("=== Find with Error Handling ===");
        
        PatternFindOptions findOptions = new PatternFindOptions.Builder().build();
        
        ObjectCollection objects = new ObjectCollection.Builder()
            .withImages(buttonImage)
            .build();
            
        // Using real API with error handling
        ActionResult result = action.perform(findOptions, objects);
        
        if (result.isSuccess()) {
            ClickOptions clickOptions = new ClickOptions.Builder().build();
            action.perform(clickOptions, objects);
        } else {
            log.error("Critical button not found!");
            // Custom error handling
            alertUser("UI element missing");
            takeDebugScreenshot();
        }
                
        log.info("Find with error handling result: {}", result.isSuccess());
    }
    
    /**
     * If-Else Logic - Using real API
     * 
     * // Check if logged in, login if not
     * ConditionalActionChain.find(userAvatar)
     *     .ifFoundLog("Already logged in")
     *     .ifNotFound(find(loginButton))
     *     .ifFound(click())
     *     .ifFound(performLogin())
     *     .perform(action, objectCollection);
     */
    public void ifElseLogicPattern() {
        log.info("=== If-Else Logic Pattern ===");
        
        // Check if logged in, login if not - using real API
        ObjectCollection objects = new ObjectCollection.Builder()
            .withImages(menuButton) // Check for menu button (indicates logged in)
            .build();
            
        PatternFindOptions findOptions = new PatternFindOptions.Builder().build();
        ActionResult result = action.perform(findOptions, objects);
        
        if (result.isSuccess()) {
            log.info("Already logged in");
        } else {
            // Not logged in, click login button
            ObjectCollection loginObjects = new ObjectCollection.Builder()
                .withImages(loginButton)
                .build();
            ActionResult loginResult = action.perform(findOptions, loginObjects);
            if (loginResult.isSuccess()) {
                ClickOptions clickOptions = new ClickOptions.Builder().build();
                action.perform(clickOptions, loginObjects);
            }
        }
                
        log.info("If-else logic result: {}", result.isSuccess());
    }
    
    /**
     * Helper methods for custom error handling
     */
    private void alertUser(String message) {
        log.warn("ALERT: {}", message);
    }
    
    private void takeDebugScreenshot() {
        log.info("Taking debug screenshot...");
        // In real implementation, would capture screenshot
    }
    
    /**
     * Demonstrates all basic patterns from documentation
     */
    public void runAllExamples() {
        log.info("Running all basic ConditionalActionChain examples...\n");
        
        simpleFinAndClick();
        log.info("");
        
        findWithErrorHandling();
        log.info("");
        
        ifElseLogicPattern();
        log.info("");
        
        log.info("All basic examples completed!");
    }
}
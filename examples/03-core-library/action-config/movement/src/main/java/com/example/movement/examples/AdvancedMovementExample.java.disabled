package com.example.movement.examples;

import io.github.jspinak.brobot.action.ActionInterface;
import io.github.jspinak.brobot.action.basic.find.motion.MotionFindOptions;
import io.github.jspinak.brobot.model.match.Match;
import io.github.jspinak.brobot.action.ObjectCollection;
import io.github.jspinak.brobot.model.state.StateImage;
import io.github.jspinak.brobot.model.analysis.scene.SceneAnalysis;
import io.github.jspinak.brobot.model.analysis.scene.SceneAnalyses;
import io.github.jspinak.brobot.action.ActionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

/**
 * Demonstrates advanced motion detection configuration and results processing.
 * 
 * Based on documentation: /brobot/docs/docs/03-core-library/guides/finding-objects/movement.md
 * 
 * Shows configuration options, working with motion results, practical examples like tracking game characters,
 * and tips for better motion detection.
 */
@Component
public class AdvancedMovementExample {
    private static final Logger log = LoggerFactory.getLogger(AdvancedMovementExample.class);
    
    @Autowired
    private ActionInterface action; // obtain from Spring context or dependency injection
    
    /**
     * Advanced Motion Configuration - from documentation
     * 
     * MotionFindOptions advancedMotion = new MotionFindOptions.Builder()
     *         .setMaxMovement(150)     // Maximum pixels moved between scenes
     *         .setMinArea(100)         // Minimum area of moving objects
     *         .setMaxArea(5000)        // Maximum area of moving objects  
     *         .setMaxMatchesToActOn(5) // Track up to 5 moving objects
     *         .setSimilarity(0.75)     // 75% similarity required to match objects
     *         .setIllustrate(MotionFindOptions.Illustrate.YES)  // Save visual history
     *         .build();
     */
    public void advancedMotionConfiguration() {
        log.info("=== Advanced Motion Configuration ===");
        
        MotionFindOptions advancedMotion = new MotionFindOptions.Builder()
                .setMaxMovement(150)     // Maximum pixels moved between scenes
                .setMinArea(100)         // Minimum area of moving objects
                .setMaxArea(5000)        // Maximum area of moving objects  
                .setMaxMatchesToActOn(5) // Track up to 5 moving objects
                .setSimilarity(0.75)     // 75% similarity required to match objects
                .setIllustrate(MotionFindOptions.Illustrate.YES)  // Save visual history
                .build();
                
        log.info("Created advanced MotionFindOptions with:");
        log.info("  - Max movement: 150 pixels");
        log.info("  - Min area: 100 pixels");
        log.info("  - Max area: 5000 pixels");
        log.info("  - Max matches: 5 objects");
        log.info("  - Similarity threshold: 75%");
        log.info("  - Illustration: Enabled");
        
        ObjectCollection objectCollection = new ObjectCollection.Builder().build();
        ActionResult result = action.perform(advancedMotion, objectCollection);
        
        if (result.isSuccess()) {
            log.info("Advanced motion configuration successful!");
            log.info("Found {} moving objects", result.getMatchList().size());
        } else {
            log.warn("Advanced motion configuration failed");
        }
    }
    
    /**
     * Working with Motion Results - from documentation
     * 
     * MotionFindOptions motionOptions = new MotionFindOptions.Builder()
     *         .setMaxMovement(100)
     *         .setMaxMatchesToActOn(10)
     *         .build();
     * 
     * ActionResult motionResult = action.perform(motionOptions, objectCollection);
     * 
     * // Get all moving objects
     * List<Match> movingObjects = motionResult.getMatchList();
     * System.out.println("Found " + movingObjects.size() + " moving objects");
     * 
     * // Access scene-by-scene analysis
     * SceneAnalysisCollection scenes = motionResult.getSceneAnalysis();
     * if (scenes != null) {
     *     for (SceneAnalysis scene : scenes.getScenes()) {
     *         System.out.println("Scene " + scene.getSceneNumber() + 
     *                           " found " + scene.getMatches().size() + " objects");
     *         
     *         // Get matches for this scene
     *         for (Match match : scene.getMatches()) {
     *             System.out.println("  Object at " + match.getRegion());
     *         }
     *     }
     * }
     * 
     * // Check if motion detection was successful
     * if (motionResult.isSuccess()) {
     *     System.out.println("Motion detection successful!");
     * }
     */
    public void workingWithMotionResults() {
        log.info("=== Working with Motion Results ===");
        
        MotionFindOptions motionOptions = new MotionFindOptions.Builder()
                .setMaxMovement(100)
                .setMaxMatchesToActOn(10)
                .build();

        ObjectCollection objectCollection = new ObjectCollection.Builder().build();
        
        ActionResult motionResult = action.perform(motionOptions, objectCollection);

        // Get all moving objects - exact from documentation
        List<Match> movingObjects = motionResult.getMatchList();
        log.info("Found {} moving objects", movingObjects.size());

        // Access scene-by-scene analysis - exact from documentation
        SceneAnalyses scenes = motionResult.getSceneAnalysisCollection();
        if (scenes != null) {
            for (SceneAnalysis scene : scenes.getSceneAnalyses()) {
                log.info("Scene {} found {} objects", 
                    scene.getSceneId(), scene.getMatchList().size());
                
                // Get matches for this scene
                for (Match match : scene.getMatchList()) {
                    log.info("  Object at {}", match.getRegion());
                }
            }
        }

        // Check if motion detection was successful - exact from documentation
        if (motionResult.isSuccess()) {
            log.info("Motion detection successful!");
        }
    }
    
    /**
     * Practical Example: Tracking Game Characters - from documentation
     * 
     * // Configure motion detection for tracking characters
     * MotionFindOptions trackCharacters = new MotionFindOptions.Builder()
     *         .setMaxMovement(200)    // Characters can move up to 200 pixels
     *         .setMinArea(500)        // Character sprites are at least 500 pixels
     *         .setMaxArea(10000)      // But no larger than 10000 pixels
     *         .setMaxMatchesToActOn(3) // Track up to 3 characters
     *         .setSimilarity(0.8)     // High similarity for character matching
     *         .build();
     * 
     * // Configure for mock mode in application properties:
     * // brobot.core.mock=true
     * // Place screenshots in the directory configured by brobot.screenshot.path
     * 
     * // Execute motion tracking
     * ActionResult characters = action.perform(
     *     trackCharacters, 
     *     new ObjectCollection.Builder().build()
     * );
     * 
     * // Process results
     * for (Match character : characters.getMatchList()) {
     *     System.out.println("Character moved to: " + character.getTarget());
     * }
     */
    public void trackingGameCharacters() {
        log.info("=== Practical Example: Tracking Game Characters ===");
        log.info("Configure for mock mode in application properties:");
        log.info("brobot.core.mock=true");
        log.info("Place screenshots in the directory configured by brobot.screenshot.path");
        
        // Configure motion detection for tracking characters - exact from documentation
        MotionFindOptions trackCharacters = new MotionFindOptions.Builder()
                .setMaxMovement(200)    // Characters can move up to 200 pixels
                .setMinArea(500)        // Character sprites are at least 500 pixels
                .setMaxArea(10000)      // But no larger than 10000 pixels
                .setMaxMatchesToActOn(3) // Track up to 3 characters
                .setSimilarity(0.8)     // High similarity for character matching
                .build();

        // Execute motion tracking - exact from documentation
        ActionResult characters = action.perform(
            trackCharacters, 
            new ObjectCollection.Builder().build()
        );

        // Process results - exact from documentation
        for (Match character : characters.getMatchList()) {
            log.info("Character moved to: {}", character.getTarget());
        }
        
        if (characters.isSuccess()) {
            log.info("Successfully tracked {} characters", characters.getMatchList().size());
        } else {
            log.warn("Character tracking failed - check configuration");
        }
    }
    
    /**
     * Configuration Options Examples
     */
    public void configurationOptionsExamples() {
        log.info("=== Configuration Options Examples ===");
        
        // Example 1: High precision tracking
        log.info("High precision tracking configuration:");
        MotionFindOptions highPrecision = new MotionFindOptions.Builder()
                .setMaxMovement(50)      // Small movement only
                .setMinArea(200)         // Larger minimum area
                .setMaxMatchesToActOn(3) // Few objects for precision
                .setSimilarity(0.95)     // Very high similarity
                .build();
        log.info("  - Very restrictive settings for precise tracking");
        
        // Example 2: Fast object tracking
        log.info("Fast object tracking configuration:");
        MotionFindOptions fastTracking = new MotionFindOptions.Builder()
                .setMaxMovement(300)     // Allow fast movement
                .setMinArea(50)          // Small objects OK
                .setMaxMatchesToActOn(10) // Track many objects
                .setSimilarity(0.6)      // Lower similarity for speed
                .setPauseBeforeBegin(0.1) // Quick capture
                .setPauseBetweenActions(0.2) // Fast scene transitions
                .build();
        log.info("  - Optimized for fast-moving objects");
        
        // Example 3: Noise filtering
        log.info("Noise filtering configuration:");
        MotionFindOptions noiseFiltered = new MotionFindOptions.Builder()
                .setMaxMovement(100)
                .setMinArea(100)         // Filter out small noise
                .setMaxArea(2000)        // Filter out very large areas
                .setSimilarity(0.8)      // Good balance
                .build();
        log.info("  - Balanced settings to reduce false positives");
        
        // Test each configuration
        testConfiguration("High Precision", highPrecision);
        testConfiguration("Fast Tracking", fastTracking);
        testConfiguration("Noise Filtered", noiseFiltered);
    }
    
    private void testConfiguration(String name, MotionFindOptions options) {
        log.info("Testing {} configuration...", name);
        
        ObjectCollection testCollection = new ObjectCollection.Builder().build();
        ActionResult result = action.perform(options, testCollection);
        
        if (result.isSuccess()) {
            log.info("  ✓ {} successful - {} objects detected", name, result.getMatchList().size());
        } else {
            log.warn("  ✗ {} failed", name);
        }
    }
    
    /**
     * Tips for Better Motion Detection - implementation based on documentation tips
     * 
     * Documentation tips:
     * 1. Scene Timing: Allow sufficient time between scene captures for objects to move noticeably
     * 2. Lighting: Consistent lighting between scenes improves detection accuracy
     * 3. Background: Static backgrounds help distinguish moving objects
     * 4. Object Size: Set appropriate minArea to filter out noise and small movements
     * 5. Movement Range: Adjust maxMovement based on expected object speeds
     */
    public void tipsForBetterMotionDetection() {
        log.info("=== Tips for Better Motion Detection ===");
        
        log.info("1. Scene Timing Configuration:");
        MotionFindOptions goodTiming = new MotionFindOptions.Builder()
                .setPauseBeforeBegin(2.0)    // Allow setup time
                .setPauseBetweenActions(1.0) // Sufficient movement time
                .setMaxMovement(150)
                .build();
        log.info("   - Use longer pauses for better object movement detection");
        
        log.info("2. Lighting Consistency:");
        log.info("   - Ensure consistent lighting between scene captures");
        log.info("   - Avoid changing light conditions during motion detection");
        
        log.info("3. Background Considerations:");
        log.info("   - Static backgrounds help distinguish moving objects");
        log.info("   - Minimize background animation or changes");
        
        log.info("4. Object Size Filtering:");
        MotionFindOptions sizeFiltered = new MotionFindOptions.Builder()
                .setMinArea(100)  // Filter out small noise
                .setMaxArea(5000) // Filter out background changes
                .build();
        log.info("   - Set minArea to filter out noise and small movements");
        log.info("   - Set maxArea to avoid large background changes");
        
        log.info("5. Movement Range Adjustment:");
        MotionFindOptions rangeAdjusted = new MotionFindOptions.Builder()
                .setMaxMovement(200)  // Adjust based on expected speeds
                .setSimilarity(0.75)  // Balance between accuracy and tolerance
                .build();
        log.info("   - Adjust maxMovement based on expected object speeds");
        log.info("   - Use appropriate similarity threshold for object matching");
        
        // Test the optimized configuration
        log.info("Testing optimized configuration...");
        MotionFindOptions optimized = new MotionFindOptions.Builder()
                .setPauseBeforeBegin(1.5)
                .setPauseBetweenActions(0.8)
                .setMaxMovement(150)
                .setMinArea(100)
                .setMaxArea(3000)
                .setSimilarity(0.8)
                .setMaxMatchesToActOn(5)
                .build();
                
        ObjectCollection testCollection = new ObjectCollection.Builder().build();
        ActionResult result = action.perform(optimized, testCollection);
        
        if (result.isSuccess()) {
            log.info("✓ Optimized motion detection successful!");
            log.info("  Found {} moving objects with good settings", result.getMatchList().size());
        }
    }
    
    /**
     * Demonstrates all advanced motion detection examples from documentation
     */
    public void runAllAdvancedMotionExamples() {
        log.info("Running all advanced motion detection examples from documentation...\n");
        
        advancedMotionConfiguration();
        log.info("");
        
        workingWithMotionResults();
        log.info("");
        
        trackingGameCharacters();
        log.info("");
        
        configurationOptionsExamples();
        log.info("");
        
        tipsForBetterMotionDetection();
        log.info("");
        
        log.info("All advanced motion examples completed!");
    }
}
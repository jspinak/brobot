"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3101],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(96540);const a={},r=i.createContext(a);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},37185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/action-config/form-automation","title":"Form Automation Patterns","description":"Master form automation with reusable patterns and best practices","source":"@site/docs/03-core-library/action-config/10-form-automation.md","sourceDirName":"03-core-library/action-config","slug":"/core-library/action-config/form-automation","permalink":"/brobot/docs/core-library/action-config/form-automation","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/action-config/10-form-automation.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Form Automation Patterns","description":"Master form automation with reusable patterns and best practices"},"sidebar":"docSidebar","previous":{"title":"Troubleshooting Action Chains","permalink":"/brobot/docs/core-library/action-config/troubleshooting-chains"},"next":{"title":"Reusable Patterns","permalink":"/brobot/docs/core-library/action-config/reusable-patterns"}}');var a=t(74848),r=t(28453);const l={sidebar_position:10,title:"Form Automation Patterns",description:"Master form automation with reusable patterns and best practices"},o="Form Automation Patterns",s={},c=[{value:"Basic Form Elements",id:"basic-form-elements",level:2},{value:"Text Input Fields",id:"text-input-fields",level:3},{value:"Dropdown Menus",id:"dropdown-menus",level:3},{value:"Checkboxes and Radio Buttons",id:"checkboxes-and-radio-buttons",level:3},{value:"Complex Form Patterns",id:"complex-form-patterns",level:2},{value:"Multi-Step Forms",id:"multi-step-forms",level:3},{value:"Form Validation Handling",id:"form-validation-handling",level:3},{value:"Dynamic Form Fields",id:"dynamic-form-fields",level:3},{value:"Complete Form Example",id:"complete-form-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Clear Fields First",id:"1-always-clear-fields-first",level:3},{value:"2. Add Appropriate Delays",id:"2-add-appropriate-delays",level:3},{value:"3. Verify State Changes",id:"3-verify-state-changes",level:3},{value:"4. Handle Dynamic Loading",id:"4-handle-dynamic-loading",level:3},{value:"5. Create Reusable Components",id:"5-create-reusable-components",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"form-automation-patterns",children:"Form Automation Patterns"})}),"\n",(0,a.jsx)(n.p,{children:"Form automation is one of the most common use cases for UI automation. This guide provides comprehensive patterns and reusable components for automating various types of forms efficiently and reliably."}),"\n",(0,a.jsx)(n.h2,{id:"basic-form-elements",children:"Basic Form Elements"}),"\n",(0,a.jsx)(n.h3,{id:"text-input-fields",children:"Text Input Fields"}),"\n",(0,a.jsx)(n.p,{children:"Handle different types of text inputs with proper clearing and validation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class FormFieldHandler {\n    \n    public boolean fillTextField(StateImage field, String value, boolean clearFirst) {\n        ActionChainOptions.Builder chainBuilder = new ActionChainOptions.Builder(\n            // Click to focus the field\n            new ClickOptions.Builder()\n                .setPauseAfterEnd(0.2)\n                .build());\n        \n        if (clearFirst) {\n            // Select all and delete\n            chainBuilder\n                .then(new KeyDownOptions.Builder()\n                    .setKey("ctrl")\n                    .build())\n                .then(new TypeOptions.Builder()\n                    .setText("a")\n                    .build())\n                .then(new KeyUpOptions.Builder()\n                    .setKey("ctrl")\n                    .build())\n                .then(new TypeOptions.Builder()\n                    .setText("\\b") // Backspace\n                    .build());\n        }\n        \n        // Type the new value\n        chainBuilder.then(new TypeOptions.Builder()\n            .setText(value)\n            .setTypeDelay(0.05)\n            .build());\n        \n        ActionChainOptions chain = chainBuilder.build();\n        \n        return chainExecutor.executeChain(chain, new ActionResult(),\n            field.asObjectCollection(),\n            // Empty collections for ctrl+a operations\n            new ObjectCollection.Builder().build(),\n            new ObjectCollection.Builder().withStrings("a").build(),\n            new ObjectCollection.Builder().build(),\n            new ObjectCollection.Builder().withStrings("\\b").build(),\n            new ObjectCollection.Builder().withStrings(value).build()\n        ).isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dropdown-menus",children:"Dropdown Menus"}),"\n",(0,a.jsx)(n.p,{children:"Handle dropdown selections with retry logic:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public boolean selectDropdownOption(StateImage dropdown, StateImage option) {\n    // Click dropdown to open\n    ActionChainOptions openAndSelect = new ActionChainOptions.Builder(\n        new ClickOptions.Builder()\n            .setPauseAfterEnd(0.5) // Wait for dropdown to open\n            .build())\n        // Find the option\n        .then(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.FIRST)\n            .setPauseBeforeBegin(0.3)\n            .build())\n        // Click the option\n        .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(0.3)\n            .build())\n        .build();\n    \n    ActionResult result = chainExecutor.executeChain(\n        openAndSelect, new ActionResult(),\n        dropdown.asObjectCollection(),\n        option.asObjectCollection(),\n        option.asObjectCollection()\n    );\n    \n    // If failed, try with scrolling\n    if (!result.isSuccess()) {\n        return selectWithScrolling(dropdown, option);\n    }\n    \n    return true;\n}\n\nprivate boolean selectWithScrolling(StateImage dropdown, StateImage option) {\n    // Click to ensure dropdown is open\n    click(dropdown);\n    \n    // Try scrolling to find the option\n    for (int i = 0; i < 5; i++) {\n        if (find(option)) {\n            return click(option);\n        }\n        \n        // Scroll down\n        scrollMouseWheel(new ScrollOptions.Builder()\n            .setDirection(ScrollOptions.Direction.DOWN)\n            .setScrollSteps(3)\n            .build());\n        \n        pause(0.3);\n    }\n    \n    return false;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"checkboxes-and-radio-buttons",children:"Checkboxes and Radio Buttons"}),"\n",(0,a.jsx)(n.p,{children:"Handle toggle states intelligently:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class CheckboxHandler {\n    \n    public boolean setCheckboxState(StateImage checkbox, \n                                   StateImage checkedIndicator,\n                                   boolean desiredState) {\n        // First, determine current state\n        boolean isCurrentlyChecked = find(checkedIndicator);\n        \n        // If already in desired state, done\n        if (isCurrentlyChecked == desiredState) {\n            return true;\n        }\n        \n        // Click to toggle\n        ActionResult result = click(checkbox);\n        \n        if (!result.isSuccess()) {\n            return false;\n        }\n        \n        // Verify the state changed\n        pause(0.3);\n        boolean newState = find(checkedIndicator);\n        \n        return newState == desiredState;\n    }\n    \n    public boolean selectRadioButton(StateImage radioButton,\n                                   StateImage selectedIndicator) {\n        // Check if already selected\n        if (find(selectedIndicator)) {\n            return true;\n        }\n        \n        // Click to select\n        ActionResult result = click(radioButton);\n        \n        if (!result.isSuccess()) {\n            return false;\n        }\n        \n        // Verify selection\n        pause(0.3);\n        return find(selectedIndicator);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"complex-form-patterns",children:"Complex Form Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"multi-step-forms",children:"Multi-Step Forms"}),"\n",(0,a.jsx)(n.p,{children:"Handle wizard-style forms with navigation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class WizardFormHandler {\n    \n    public boolean completeWizard(List<WizardStep> steps,\n                                 StateImage nextButton,\n                                 StateImage finishButton) {\n        \n        for (int i = 0; i < steps.size(); i++) {\n            WizardStep step = steps.get(i);\n            \n            // Complete the current step\n            if (!step.complete()) {\n                logger.error("Failed at step {}: {}", i + 1, step.getName());\n                return false;\n            }\n            \n            // Navigate to next step or finish\n            if (i < steps.size() - 1) {\n                if (!clickAndVerify(nextButton, step.getNextStepIndicator())) {\n                    return false;\n                }\n            } else {\n                // Last step - click finish\n                if (!click(finishButton)) {\n                    return false;\n                }\n            }\n            \n            // Wait for page transition\n            pause(1.0);\n        }\n        \n        return true;\n    }\n    \n    public static abstract class WizardStep {\n        protected final String name;\n        protected final StateImage nextStepIndicator;\n        \n        public abstract boolean complete();\n        \n        public String getName() { return name; }\n        public StateImage getNextStepIndicator() { return nextStepIndicator; }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"form-validation-handling",children:"Form Validation Handling"}),"\n",(0,a.jsx)(n.p,{children:"Deal with validation errors gracefully:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class FormValidationHandler {\n    \n    public boolean submitFormWithValidation(StateImage submitButton,\n                                          StateImage successIndicator,\n                                          StateImage errorIndicator,\n                                          int maxRetries) {\n        \n        for (int attempt = 0; attempt < maxRetries; attempt++) {\n            // Click submit\n            ActionResult submitResult = click(submitButton);\n            \n            if (!submitResult.isSuccess()) {\n                continue;\n            }\n            \n            // Wait for response\n            pause(1.0);\n            \n            // Check for success\n            if (find(successIndicator)) {\n                return true;\n            }\n            \n            // Check for errors\n            if (find(errorIndicator)) {\n                // Handle specific error\n                if (!handleValidationError(errorIndicator)) {\n                    return false;\n                }\n            }\n            \n            // Retry after fixing errors\n            pause(0.5);\n        }\n        \n        return false;\n    }\n    \n    private boolean handleValidationError(StateImage errorIndicator) {\n        // Read error message if possible\n        // Fix the specific field based on error\n        // This would be customized per application\n        return true;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"dynamic-form-fields",children:"Dynamic Form Fields"}),"\n",(0,a.jsx)(n.p,{children:"Handle forms that add/remove fields dynamically:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class DynamicFormHandler {\n    \n    public boolean fillDynamicList(StateImage addButton,\n                                  StateImage fieldTemplate,\n                                  List<String> values) {\n        \n        for (String value : values) {\n            // Click add button to create new field\n            if (!click(addButton)) {\n                return false;\n            }\n            \n            pause(0.5);\n            \n            // Find the newly created field\n            ActionResult findResult = find(fieldTemplate);\n            \n            if (!findResult.isSuccess()) {\n                return false;\n            }\n            \n            // Fill the field\n            ActionChainOptions fillChain = new ActionChainOptions.Builder(\n                new ClickOptions.Builder()\n                    .setPauseAfterEnd(0.2)\n                    .build())\n                .then(new TypeOptions.Builder()\n                    .setText(value)\n                    .build())\n                .build();\n            \n            ActionResult fillResult = chainExecutor.executeChain(\n                fillChain, new ActionResult(),\n                findResult.getMatchedRegions().get(0).asObjectCollection(),\n                new ObjectCollection.Builder().withStrings(value).build()\n            );\n            \n            if (!fillResult.isSuccess()) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"complete-form-example",children:"Complete Form Example"}),"\n",(0,a.jsx)(n.p,{children:"Here's a comprehensive example that ties everything together:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class RegistrationFormAutomation {\n    private final FormFieldHandler fieldHandler;\n    private final CheckboxHandler checkboxHandler;\n    \n    public boolean completeRegistration(UserData userData) {\n        // Fill basic information\n        if (!fillBasicInfo(userData)) {\n            return false;\n        }\n        \n        // Fill address\n        if (!fillAddress(userData.getAddress())) {\n            return false;\n        }\n        \n        // Set preferences\n        if (!setPreferences(userData.getPreferences())) {\n            return false;\n        }\n        \n        // Accept terms\n        if (!acceptTerms()) {\n            return false;\n        }\n        \n        // Submit form\n        return submitForm();\n    }\n    \n    private boolean fillBasicInfo(UserData userData) {\n        // First name\n        if (!fieldHandler.fillTextField(\n                getStateImage("firstName"), \n                userData.getFirstName(), \n                true)) {\n            return false;\n        }\n        \n        // Last name\n        if (!fieldHandler.fillTextField(\n                getStateImage("lastName"), \n                userData.getLastName(), \n                true)) {\n            return false;\n        }\n        \n        // Email with validation\n        return fillEmailWithValidation(userData.getEmail());\n    }\n    \n    private boolean fillEmailWithValidation(String email) {\n        StateImage emailField = getStateImage("email");\n        StateImage validIndicator = getStateImage("emailValid");\n        StateImage invalidIndicator = getStateImage("emailInvalid");\n        \n        // Fill email\n        if (!fieldHandler.fillTextField(emailField, email, true)) {\n            return false;\n        }\n        \n        // Tab out to trigger validation\n        type("\\t");\n        pause(0.5);\n        \n        // Check validation\n        if (find(invalidIndicator)) {\n            logger.error("Invalid email format: {}", email);\n            return false;\n        }\n        \n        return find(validIndicator);\n    }\n    \n    private boolean setPreferences(UserPreferences prefs) {\n        // Newsletter subscription\n        if (!checkboxHandler.setCheckboxState(\n                getStateImage("newsletterCheckbox"),\n                getStateImage("newsletterChecked"),\n                prefs.wantsNewsletter())) {\n            return false;\n        }\n        \n        // Notification preference (radio buttons)\n        StateImage notificationOption = prefs.getNotificationPreference()\n            .equals("email") ? getStateImage("emailNotifications") \n                            : getStateImage("smsNotifications");\n        \n        return checkboxHandler.selectRadioButton(\n            notificationOption,\n            getStateImage("selectedRadio")\n        );\n    }\n    \n    private boolean submitForm() {\n        StateImage submitButton = getStateImage("submit");\n        StateImage successMessage = getStateImage("registrationSuccess");\n        StateImage errorMessage = getStateImage("registrationError");\n        \n        // Use validation handler for robust submission\n        FormValidationHandler validationHandler = new FormValidationHandler();\n        \n        return validationHandler.submitFormWithValidation(\n            submitButton,\n            successMessage,\n            errorMessage,\n            3 // max retries\n        );\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"1-always-clear-fields-first",children:"1. Always Clear Fields First"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Good\nfieldHandler.fillTextField(field, newValue, true); // clearFirst = true\n\n// Bad - might append to existing text\nfieldHandler.fillTextField(field, newValue, false);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-add-appropriate-delays",children:"2. Add Appropriate Delays"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"After clicks: 0.2-0.5 seconds"}),"\n",(0,a.jsx)(n.li,{children:"After form submission: 1-3 seconds"}),"\n",(0,a.jsx)(n.li,{children:"Between keystrokes: 0.05-0.1 seconds"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-verify-state-changes",children:"3. Verify State Changes"}),"\n",(0,a.jsx)(n.p,{children:"Always verify that actions had the intended effect:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Good\nif (!setCheckboxState(checkbox, indicator, true)) {\n    logger.error("Failed to check checkbox");\n    return false;\n}\n\n// Bad - assumes success\nclick(checkbox);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-handle-dynamic-loading",children:"4. Handle Dynamic Loading"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public boolean waitForFieldEnabled(StateImage field, double timeout) {\n    long startTime = System.currentTimeMillis();\n    \n    while ((System.currentTimeMillis() - startTime) < timeout * 1000) {\n        if (isFieldEnabled(field)) {\n            return true;\n        }\n        pause(0.5);\n    }\n    \n    return false;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-create-reusable-components",children:"5. Create Reusable Components"}),"\n",(0,a.jsx)(n.p,{children:"Build a library of form handling utilities that can be reused across different forms and applications."}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"/brobot/docs/core-library/action-config/reusable-patterns",children:"Reusable Patterns"})," for building component libraries"]}),"\n",(0,a.jsxs)(n.li,{children:["See ",(0,a.jsx)(n.a,{href:"/brobot/docs/core-library/action-config/migration-guide",children:"Migration Guide"})," for updating legacy form automation code"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);
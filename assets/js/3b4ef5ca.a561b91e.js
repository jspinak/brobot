"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6974],{28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function r(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),t.createElement(s.Provider,{value:e},n.children)}},71728:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ai-brobot-project-creation","title":"AI Instructions for Creating Brobot Projects","description":"Project Setup Sequence","source":"@site/docs/ai-brobot-project-creation.md","sourceDirName":".","slug":"/ai-brobot-project-creation","permalink":"/brobot/docs/ai-brobot-project-creation","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/ai-brobot-project-creation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"AspectJ Usage Guide for Brobot","permalink":"/brobot/docs/ASPECTJ_USAGE_GUIDE"},"next":{"title":"Migration Guide: ActionOptions to ActionConfig","permalink":"/brobot/docs/migration/actionoptions-to-actionconfig"}}');var o=i(74848),s=i(28453);const r={},a="AI Instructions for Creating Brobot Projects",l={},c=[{value:"Project Setup Sequence",id:"project-setup-sequence",level:2},{value:"Traditional State Pattern (Without @State)",id:"traditional-state-pattern-without-state",level:3},{value:"When to Define an Explicit State Object",id:"when-to-define-an-explicit-state-object",level:3},{value:"When to Use ActionChainBuilder vs .then()",id:"when-to-use-actionchainbuilder-vs-then",level:3},{value:"ConditionalActionChain - The Foundation",id:"conditionalactionchain---the-foundation",level:3},{value:"ConditionalActionChain - The Most Elegant Approach",id:"conditionalactionchain---the-most-elegant-approach",level:3},{value:"Real-World ConditionalActionChain Examples",id:"real-world-conditionalactionchain-examples",level:3},{value:"Brobot Annotations",id:"brobot-annotations",level:2},{value:"@State Annotation",id:"state-annotation",level:3},{value:"@Transition Annotation",id:"transition-annotation",level:3},{value:"@CollectData Annotation (Advanced)",id:"collectdata-annotation-advanced",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Testing Patterns",id:"testing-patterns",level:2},{value:"Configuration (v1.1.0+)",id:"configuration-v110",level:2},{value:"Important: Configuration Best Practices",id:"important-configuration-best-practices",level:3},{value:"Default Configuration",id:"default-configuration",level:3},{value:"Image Path Configuration",id:"image-path-configuration",level:3},{value:"Complete Configuration Example",id:"complete-configuration-example",level:3},{value:"Using application.yml (Recommended):",id:"using-applicationyml-recommended",level:4},{value:"Using application.properties:",id:"using-applicationproperties",level:4},{value:"Configuration Classes",id:"configuration-classes",level:3},{value:"Movement and Navigation in v1.1.0",id:"movement-and-navigation-in-v110",level:2},{value:"Available Movement APIs",id:"available-movement-apis",level:3},{value:"Mouse Movement",id:"mouse-movement",level:4},{value:"Scrolling",id:"scrolling",level:4},{value:"Mouse Button Control",id:"mouse-button-control",level:4},{value:"Drag Operations",id:"drag-operations",level:4},{value:"Illustration System (v1.1.0)",id:"illustration-system-v110",level:2},{value:"IllustrationController API",id:"illustrationcontroller-api",level:3},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"Environment-Specific Configurations",id:"environment-specific-configurations",level:3},{value:"State Management in v1.1.0",id:"state-management-in-v110",level:2},{value:"Recommended: Using Annotations",id:"recommended-using-annotations",level:3},{value:"Initial State Verification (v1.1.0+)",id:"initial-state-verification-v110",level:2},{value:"Configuration-Based (Recommended)",id:"configuration-based-recommended",level:3},{value:"Programmatic Usage",id:"programmatic-usage",level:3},{value:"Mock Testing Support",id:"mock-testing-support",level:3},{value:"Understanding Mock Mode",id:"understanding-mock-mode",level:4},{value:"Configuring Mock Mode",id:"configuring-mock-mode",level:4},{value:"Testing State Transitions",id:"testing-state-transitions",level:4},{value:"Dynamic State Simulation",id:"dynamic-state-simulation",level:4},{value:"Best Practices for Mock Testing",id:"best-practices-for-mock-testing",level:4},{value:"Profile-Based Testing Architecture",id:"profile-based-testing-architecture",level:3},{value:"Quick Setup",id:"quick-setup",level:4},{value:"Benefits Over Runtime Delegation",id:"benefits-over-runtime-delegation",level:4},{value:"Color Finding and Motion Detection",id:"color-finding-and-motion-detection",level:2},{value:"Color Finding with ColorFindOptions",id:"color-finding-with-colorfindoptions",level:3},{value:"Nested vs Confirmed Finds with ActionChainOptions",id:"nested-vs-confirmed-finds-with-actionchainoptions",level:3},{value:"Nested Finds Example",id:"nested-finds-example",level:4},{value:"Confirmed Finds Example",id:"confirmed-finds-example",level:4},{value:"Motion Detection with MotionFindOptions",id:"motion-detection-with-motionfindoptions",level:3},{value:"Histogram Finding",id:"histogram-finding",level:3},{value:"Practical Color + Pattern Example",id:"practical-color--pattern-example",level:3},{value:"ActionHistory for Integration Testing",id:"actionhistory-for-integration-testing",level:2},{value:"Overview",id:"overview",level:3},{value:"Modern ActionHistory Setup (v1.0.0+)",id:"modern-actionhistory-setup-v100",level:3},{value:"Direct Builder Integration",id:"direct-builder-integration",level:4},{value:"Using MockActionHistoryBuilder for Custom Configurations",id:"using-mockactionhistorybuilder-for-custom-configurations",level:4},{value:"Factory Methods for Common UI Patterns",id:"factory-methods-for-common-ui-patterns",level:4},{value:"Screen Position Helpers",id:"screen-position-helpers",level:4},{value:"Legacy ActionHistory Setup (Pre-v1.0.0)",id:"legacy-actionhistory-setup-pre-v100",level:3},{value:"Recording Different Action Types",id:"recording-different-action-types",level:3},{value:"Integration Test Configuration",id:"integration-test-configuration",level:3},{value:"Writing Integration Tests with ActionHistory",id:"writing-integration-tests-with-actionhistory",level:3},{value:"State-Specific ActionHistory",id:"state-specific-actionhistory",level:3},{value:"Saving and Loading ActionHistory in Java Projects",id:"saving-and-loading-actionhistory-in-java-projects",level:3},{value:"Built-in Library Classes",id:"built-in-library-classes",level:4},{value:"Recording ActionHistory During Live Automation",id:"recording-actionhistory-during-live-automation",level:3},{value:"Export/Import Between Projects",id:"exportimport-between-projects",level:3},{value:"Performance Testing with ActionHistory",id:"performance-testing-with-actionhistory",level:3},{value:"Best Practices for ActionHistory",id:"best-practices-for-actionhistory",level:3},{value:"ActionHistory Utility Classes",id:"actionhistory-utility-classes",level:3},{value:"Migration from Legacy ActionOptions",id:"migration-from-legacy-actionoptions",level:3},{value:"Screen-Adaptive Region Building",id:"screen-adaptive-region-building",level:2},{value:"Position-Based Region Building",id:"position-based-region-building",level:3},{value:"Advanced Positioning Features",id:"advanced-positioning-features",level:3},{value:"Precise Positioning and Flexibility",id:"precise-positioning-and-flexibility",level:3},{value:"Integration with Position Class",id:"integration-with-position-class",level:3},{value:"Logging and Diagnostics",id:"logging-and-diagnostics",level:2},{value:"Integrated Logging System",id:"integrated-logging-system",level:3},{value:"DiagnosticLogger Component",id:"diagnosticlogger-component",level:3},{value:"Verbosity Levels",id:"verbosity-levels",level:3},{value:"Failed Match Analysis",id:"failed-match-analysis",level:3},{value:"Pattern Caching",id:"pattern-caching",level:3},{value:"Debug Image Saving",id:"debug-image-saving",level:3},{value:"Using DiagnosticLogger in Custom Code",id:"using-diagnosticlogger-in-custom-code",level:3},{value:"Best Practices for Logging",id:"best-practices-for-logging",level:3},{value:"Unified Logging System",id:"unified-logging-system",level:3},{value:"Summary",id:"summary",level:2},{value:"Quick Reference: New ActionHistory Builder Methods (v1.0.0+)",id:"quick-reference-new-actionhistory-builder-methods-v100",level:3}];function d(n){const e={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"ai-instructions-for-creating-brobot-projects",children:"AI Instructions for Creating Brobot Projects"})}),"\n",(0,o.jsx)(e.h2,{id:"project-setup-sequence",children:"Project Setup Sequence"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Directory Structure"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"project-root/\n\u251c\u2500\u2500 src/main/java/com/[organization]/[project]/\n\u2502   \u251c\u2500\u2500 states/\n\u2502   \u251c\u2500\u2500 transitions/\n\u2502   \u251c\u2500\u2500 automation/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 [ProjectName]Application.java\n\u251c\u2500\u2500 src/main/resources/\n\u2502   \u251c\u2500\u2500 application.properties\n\u2502   \u2514\u2500\u2500 application.yml          # Alternative to properties\n\u251c\u2500\u2500 images/                      # Image resources in project root\n\u2502   \u2514\u2500\u2500 [state-name]/\n\u251c\u2500\u2500 history/                     # Destination for illustrated screenshots from unit testing\n\u251c\u2500\u2500 build.gradle\n\u2514\u2500\u2500 settings.gradle\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Gradle Configuration"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use Spring Boot 3.2.0+ with Java 21"}),"\n",(0,o.jsx)(e.li,{children:"For local Brobot library development, use composite build:"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-gradle",children:"// build.gradle\ndependencies {\n    // Brobot 1.1.0+ includes Spring, Lombok, SLF4J as transitive dependencies\n    implementation 'io.github.jspinak:brobot:1.1.0'\n    \n    // Only need annotation processor for Lombok\n    annotationProcessor 'org.projectlombok:lombok:1.18.32'\n    \n    // Add test dependencies as needed\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-gradle",children:"// settings.gradle\nincludeBuild('../brobot') {\n    dependencySubstitution {\n        substitute module('io.github.jspinak:brobot') using project(':library')\n    }\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"State Creation Pattern (Modern with Annotations)"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State  // Automatically registers as Spring component and Brobot state\n@Getter\n@Slf4j\npublic class ExampleState {\n    private final StateImage mainImage;  // Direct access to components\n    private final StateImage secondaryImage;\n    private final StateString textRegion;\n    \n    public ExampleState() {\n        // Create state components\n        mainImage = new StateImage.Builder()\n            .addPatterns("folder/image-name1", "folder/image-name2")  // No .png extension needed\n            .setName("MainImage")\n            .build();\n            \n        secondaryImage = new StateImage.Builder()\n            .addPatterns("folder/secondary-image")\n            .setName("SecondaryImage")\n            .build();\n            \n        textRegion = new StateString.Builder()\n            .setName("TextRegion")\n            .setRegion(new Region(100, 100, 200, 50))\n            .build();\n        \n        // No need to build State object - annotation handles it\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"For Initial States:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@State(initial = true)  // Marks as initial state for state machine\n@Getter\n@Slf4j\npublic class HomeState {\n    // State definition\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Important Naming Convention:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Classes with ",(0,o.jsx)(e.code,{children:"@State"}),' annotation are registered with the "State" suffix removed']}),"\n",(0,o.jsxs)(e.li,{children:["Example: ",(0,o.jsx)(e.code,{children:"WorldState"})," class is registered as ",(0,o.jsx)(e.code,{children:'"World"'})]}),"\n",(0,o.jsxs)(e.li,{children:["Example: ",(0,o.jsx)(e.code,{children:"HomeState"})," class is registered as ",(0,o.jsx)(e.code,{children:'"Home"'})]}),"\n",(0,o.jsxs)(e.li,{children:["When referencing states (e.g., in ",(0,o.jsx)(e.code,{children:"targetStateName"}),'), use the name without "State"']}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"traditional-state-pattern-without-state",children:"Traditional State Pattern (Without @State)"}),"\n",(0,o.jsx)(e.p,{children:"For reference, here's the traditional approach without annotations (as shown in the research paper):"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Component\n@Getter\npublic class Home { \n    public enum Name implements StateEnum { HOME } \n    \n    private StateImageObject toWorldButton = new StateImageObject.Builder() \n        .withImage("toWorldButton") \n        .isFixed(true) \n        .addSnapshot(new MatchSnapshot(220, 600, 20, 20)) \n        .build(); \n\n    private State state = new State.Builder(HOME) \n        .withImages(toWorldButton) \n        .build(); \n\n    public Home(StateService stateService) { \n        stateService.save(state); \n    } \n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"This approach requires:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Manual state registration in constructor"}),"\n",(0,o.jsx)(e.li,{children:"Explicit State object creation"}),"\n",(0,o.jsx)(e.li,{children:"Direct StateService dependency"}),"\n",(0,o.jsx)(e.li,{children:"Uses older StateImageObject API"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"when-to-define-an-explicit-state-object",children:"When to Define an Explicit State Object"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"With @State annotation, you have two options:"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Components Only (Recommended)"})," - Let the framework handle State creation:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@State\n@Getter\npublic class MenuState {\n    private final StateImage button;  // Only components\n    \n    public MenuState() {\n        button = new StateImage.Builder()...\n    }\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Explicit State (Rare)"})," - Only if you need direct State access:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State\n@Getter\npublic class MenuState {\n    private final State state;  // Explicit State object\n    private final StateImage button;\n    \n    public MenuState() {\n        button = new StateImage.Builder()...\n        state = new State.Builder("MENU")...\n    }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use explicit State only when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Migrating legacy code gradually"}),"\n",(0,o.jsx)(e.li,{children:"You need the State object for specific framework interactions"}),"\n",(0,o.jsx)(e.li,{children:"You're not using @State annotation (traditional approach)"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Otherwise, stick with components only"})," - it's cleaner and the framework handles everything automatically."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Declarative Search Region Definition (v1.1.0+)"})}),"\n",(0,o.jsx)(e.p,{children:"Brobot supports defining search regions relative to other objects, even across states:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State\n@Getter\npublic class WorkingState {\n    private final StateImage claudeIcon;\n    \n    public WorkingState() {\n        // ClaudeIcon\'s search region is defined relative to ClaudePrompt\n        claudeIcon = new StateImage.Builder()\n            .addPatterns("working/claude-icon-1", "working/claude-icon-2")\n            .setName("ClaudeIcon")\n            .setSearchRegionOnObject(SearchRegionOnObject.builder()\n                .targetType(StateObject.Type.IMAGE)\n                .targetStateName("Prompt")  // Can reference other states\n                .targetObjectName("ClaudePrompt")\n                .adjustments(MatchAdjustmentOptions.builder()\n                    .addX(3)    // Offset from ClaudePrompt location\n                    .addY(10)\n                    .addW(30)   // Expand width by 30 pixels\n                    .addH(55)   // Expand height by 55 pixels\n                    .build())\n                .build())\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Key Benefits:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Automatic Updates"}),": When ClaudePrompt is found, ClaudeIcon's search region updates automatically"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Cross-State References"}),": Objects can depend on objects in other states"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"No Manual Calculations"}),": Framework handles all region math"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Cleaner Code"}),": Define relationships declaratively, not imperatively"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Common Patterns:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Simple relative positioning\n.setSearchRegionOnObject(SearchRegionOnObject.builder()\n    .targetType(StateObject.Type.IMAGE)\n    .targetStateName("Menu")\n    .targetObjectName("MenuBar")\n    .adjustments(MatchAdjustmentOptions.builder()\n        .addY(50)  // 50 pixels below menu bar\n        .build())\n    .build())\n\n// Fixed dimensions with relative position\n.setSearchRegionOnObject(SearchRegionOnObject.builder()\n    .targetType(StateObject.Type.IMAGE)\n    .targetStateName("Form")\n    .targetObjectName("FormTitle")\n    .adjustments(MatchAdjustmentOptions.builder()\n        .addY(100)     // Below title\n        .absoluteW(200) // Fixed 200x50 region\n        .absoluteH(50)\n        .build())\n    .build())\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"How It Works:"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["Dependencies are registered when states load (via ",(0,o.jsx)(e.code,{children:"SearchRegionDependencyInitializer"}),")"]}),"\n",(0,o.jsxs)(e.li,{children:["When a FIND operation succeeds, ",(0,o.jsx)(e.code,{children:"FindPipeline"})," updates dependent regions"]}),"\n",(0,o.jsx)(e.li,{children:"Next search uses the updated region automatically"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"For detailed documentation, see:"})," ",(0,o.jsx)(e.code,{children:"docs/03-core-library/guides/declarative-region-definition.md"})]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Search Regions and Fixed Locations"})}),"\n",(0,o.jsx)(e.p,{children:"Understanding how search regions and fixed locations work together is crucial for efficient pattern matching:"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Key Concept:"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"The normal search region defines a limited area in which to search. StateImages marked as fixed will set the fixed region when found. However, until the image has been found, it will continue to search within the search regions defined for it."}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Basic Search Region Configuration:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State\n@Getter\npublic class ExampleState {\n    private final StateImage element;\n    \n    public ExampleState() {\n        // Define search region (e.g., lower left quarter of screen)\n        Region searchArea = Region.builder()\n            .withScreenPercentage(0.0, 0.5, 0.5, 0.5)  // x=0%, y=50%, w=50%, h=50%\n            .build();\n        \n        // Apply search region to StateImage\n        element = new StateImage.Builder()\n            .addPatterns("element-1", "element-2")\n            .setName("Element")\n            .setSearchRegionForAllPatterns(searchArea)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Fixed Location Pattern:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State\n@Getter\npublic class NavigationState {\n    private final StateImage menuBar;\n    \n    public NavigationState() {\n        Region topArea = Region.builder()\n            .withScreenPercentage(0.0, 0.0, 1.0, 0.1)  // Top 10% of screen\n            .build();\n        \n        menuBar = new StateImage.Builder()\n            .addPatterns("menu/menu-bar")\n            .setName("MenuBar")\n            .setSearchRegionForAllPatterns(topArea)\n            .build();\n        \n        // Mark as fixed - will remember location once found\n        menuBar.getPatterns().forEach(p -> p.setFixed(true));\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"How Fixed Locations Work:"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"First Search"}),": Searches within defined search regions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Location Memory"}),": When found, saves exact location as fixed region"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Subsequent Searches"}),": Checks fixed location first, falls back to search regions if not found"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Best Practices:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use fixed locations for static UI elements (navigation bars, status indicators)"}),"\n",(0,o.jsx)(e.li,{children:"Use search regions only for dynamic content (popups, moving elements)"}),"\n",(0,o.jsx)(e.li,{children:"Combine both for robustness (fixed location with search region fallback)"}),"\n",(0,o.jsx)(e.li,{children:"Keep search regions as small as practical for performance"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Performance Impact:"})}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Approach"}),(0,o.jsx)(e.th,{children:"Initial Search"}),(0,o.jsx)(e.th,{children:"Subsequent Searches"}),(0,o.jsx)(e.th,{children:"Use Case"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"Full Screen"}),(0,o.jsx)(e.td,{children:"Slowest"}),(0,o.jsx)(e.td,{children:"Slowest"}),(0,o.jsx)(e.td,{children:"Last resort"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"Search Region"}),(0,o.jsx)(e.td,{children:"Fast"}),(0,o.jsx)(e.td,{children:"Fast"}),(0,o.jsx)(e.td,{children:"Dynamic content"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"Fixed + Region"}),(0,o.jsx)(e.td,{children:"Fast"}),(0,o.jsx)(e.td,{children:"Fastest"}),(0,o.jsx)(e.td,{children:"Static UI elements"})]})]})]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"For detailed documentation, see:"})," ",(0,o.jsx)(e.code,{children:"docs/03-core-library/guides/search-regions-and-fixed-locations.md"})]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Transitions (Two Approaches)"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Modern Approach with @Transition Annotation (Recommended):"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Transition(from = ExampleState.class, to = TargetState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class ExampleToTargetTransition {\n    private final ExampleState exampleState;\n    private final Action action;\n    \n    public boolean execute() {\n        log.info("Executing transition from Example to Target");\n        // Use convenience methods for clean code\n        return action.click(exampleState.getMainImage()).isSuccess();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Traditional Approach with JavaStateTransition:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class ExampleTransitions {\n    private final ExampleState exampleState;\n    private final Action action;\n    \n    public StateTransitions getStateTransitions() {\n        return new StateTransitions.Builder(ExampleState.Name.EXAMPLE.toString())\n            .addTransition(createOutgoingTransition())\n            .addTransitionFinish(() -> verifyInState())\n            .build();\n    }\n    \n    private JavaStateTransition createOutgoingTransition() {\n        return new JavaStateTransition.Builder()\n            .setFunction(() -> executeTransition())\n            .addToActivate(TargetState.Name.TARGET.toString())\n            .setStaysVisibleAfterTransition(true)\n            .build();\n    }\n    \n    private boolean executeTransition() {\n        return action.click(exampleState.getMainImage()).isSuccess();\n    }\n    \n    private boolean verifyInState() {\n        return action.find(exampleState.getMainImage()).isSuccess();\n    }\n}\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Modern Action Patterns"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Use ActionConfig classes, NOT ActionOptions"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Good - Modern approach\nPatternFindOptions findOptions = new PatternFindOptions.Builder().build();\nClickOptions clickOptions = new ClickOptions.Builder().build();\nTypeOptions typeOptions = new TypeOptions.Builder().build();\nColorFindOptions colorOptions = new ColorFindOptions.Builder().build();\nMotionFindOptions motionOptions = new MotionFindOptions.Builder().build();\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Fluent API with Action Chaining (Two Approaches)"}),":"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"when-to-use-actionchainbuilder-vs-then",children:"When to Use ActionChainBuilder vs .then()"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use ActionChainBuilder when you need:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"More than 2 actions in sequence"}),"\n",(0,o.jsx)(e.li,{children:"Explicit control over chaining strategy (NESTED vs CONFIRM)"}),"\n",(0,o.jsx)(e.li,{children:"Chain-level configuration (pauseBeforeBegin, pauseAfterEnd for entire chain)"}),"\n",(0,o.jsx)(e.li,{children:"Better readability for complex sequences"}),"\n",(0,o.jsx)(e.li,{children:"To build reusable chain configurations"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Example: Complex 3+ action chain with strategy control\nActionChainOptions validateAndSubmit = ActionChainBuilder\n    .of(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .build())\n    .then(new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)\n        .build())\n    .then(new ClickOptions.Builder()\n        .setNumberOfClicks(2)\n        .build())\n    .then(new TypeOptions.Builder()\n        .setText("Submit")\n        .build())\n    .withStrategy(ActionChainOptions.ChainingStrategy.CONFIRM) // Explicit strategy\n    .pauseBeforeBegin(2.0)  // Wait before entire chain starts\n    .pauseAfterEnd(1.0)     // Wait after entire chain completes\n    .build();\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use .then() on ActionConfig when you have:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Simple 2-action sequences (find\u2192click, find\u2192type)"}),"\n",(0,o.jsx)(e.li,{children:"No need for explicit strategy control (defaults to sequential execution)"}),"\n",(0,o.jsx)(e.li,{children:"Quick inline action chains"}),"\n",(0,o.jsx)(e.li,{children:"Actions that naturally flow together"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Example: Simple find and click - concise and readable\nActionResult result = action.perform(\n    new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .then(new ClickOptions.Builder()\n            .setNumberOfClicks(1)\n            .build())\n        .build(),\n    stateImage\n);\n\n// Example: Find and type - common pattern\nPatternFindOptions findAndType = new PatternFindOptions.Builder()\n    .setStrategy(PatternFindOptions.Strategy.FIRST)\n    .then(new TypeOptions.Builder()\n        .setText("Hello World")\n        .build())\n    .build();\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Key Differences:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"ActionChainBuilder"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Creates ActionChainOptions with full chain control"}),"\n",(0,o.jsx)(e.li,{children:"Supports chain-wide configuration and strategies (NESTED, CONFIRM)"}),"\n",(0,o.jsx)(e.li,{children:"Best for complex multi-action sequences requiring precise control"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:".then() method"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Creates a simple subsequent action list (convenience method)"}),"\n",(0,o.jsx)(e.li,{children:"Inherits the parent action's default sequential execution behavior"}),"\n",(0,o.jsx)(e.li,{children:"Best for simple 2-3 step sequences without special requirements"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Rule of Thumb:"})," Start with .then() for simple cases. Switch to ActionChainBuilder when you need more control or have 3+ actions."]}),"\n",(0,o.jsx)(e.h3,{id:"conditionalactionchain---the-foundation",children:"ConditionalActionChain - The Foundation"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"ConditionalActionChain provides the core fluent API for building complex action sequences with conditional execution:"})}),"\n",(0,o.jsxs)(e.p,{children:["Located in the examples at ",(0,o.jsx)(e.code,{children:"examples/03-core-library/action-config/conditional-chains-examples/"}),", this class demonstrates the patterns for building conditional action sequences that handle different UI states and conditions."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.model.conditional.ConditionalActionChain;\n\n// Basic usage pattern\nConditionalActionChain\n    .find(loginButton)           // Start with find\n    .ifFound(clickOptions)        // Execute if found\n    .ifNotFoundLog("Not found")   // Log if not found\n    .then(usernameField)          // Continue to next element\n    .ifFoundType("username")      // Type if found\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Key Methods:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Starting methods"}),": ",(0,o.jsx)(e.code,{children:"find()"}),", ",(0,o.jsx)(e.code,{children:"start()"})," - Begin a chain"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Conditional methods"}),": ",(0,o.jsx)(e.code,{children:"ifFound()"}),", ",(0,o.jsx)(e.code,{children:"ifNotFound()"}),", ",(0,o.jsx)(e.code,{children:"ifFoundDo()"}),", ",(0,o.jsx)(e.code,{children:"ifNotFoundDo()"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Sequential methods"}),": ",(0,o.jsx)(e.code,{children:"then()"}),", ",(0,o.jsx)(e.code,{children:"always()"})," - Continue the chain"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Action methods"}),": ",(0,o.jsx)(e.code,{children:"click()"}),", ",(0,o.jsx)(e.code,{children:"type()"}),", ",(0,o.jsx)(e.code,{children:"clearAndType()"}),", ",(0,o.jsx)(e.code,{children:"highlight()"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Control methods"}),": ",(0,o.jsx)(e.code,{children:"stopChain()"}),", ",(0,o.jsx)(e.code,{children:"throwError()"}),", ",(0,o.jsx)(e.code,{children:"wait()"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Utility methods"}),": ",(0,o.jsx)(e.code,{children:"takeScreenshot()"}),", ",(0,o.jsx)(e.code,{children:"log()"}),", ",(0,o.jsx)(e.code,{children:"logAction()"})]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"conditionalactionchain---the-most-elegant-approach",children:"ConditionalActionChain - The Most Elegant Approach"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"ConditionalActionChain extends ConditionalActionChain with additional convenience methods and better sequential composition:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Basic pattern: find \u2192 if found do X \u2192 if not found do Y\nConditionalActionChain\n    .find(buttonImage)\n    .ifFoundClick()\n    .ifNotFoundLog("Button not found")\n    .perform(action, new ObjectCollection.Builder().build());\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Key Feature - The then() Method:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Sequential actions with then() - the missing piece!\nConditionalActionChain\n    .find(loginButton)\n    .ifFoundClick()\n    .then(usernameField)  // Move to next element\n    .ifFoundType("username")\n    .then(passwordField)  // Continue the flow\n    .ifFoundType("password")\n    .then(submitButton)   // Keep going\n    .ifFoundClick()\n    .perform(action, new ObjectCollection.Builder().build());\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Enhanced Features:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Sequential Composition"}),": The crucial ",(0,o.jsx)(e.code,{children:"then()"})," method for multi-step workflows"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Convenience Methods"}),": Direct ",(0,o.jsx)(e.code,{children:"click()"}),", ",(0,o.jsx)(e.code,{children:"type()"}),", ",(0,o.jsx)(e.code,{children:"scrollDown()"})," methods"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Keyboard Shortcuts"}),": Built-in ",(0,o.jsx)(e.code,{children:"pressEnter()"}),", ",(0,o.jsx)(e.code,{children:"pressTab()"}),", ",(0,o.jsx)(e.code,{children:"pressCtrlS()"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"No wait() Method"}),": Follows model-based principles - timing via action configurations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Control Flow"}),": ",(0,o.jsx)(e.code,{children:"stopChain()"}),", ",(0,o.jsx)(e.code,{children:"retry()"}),", ",(0,o.jsx)(e.code,{children:"throwError()"})," methods"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Conditional Logic"}),": Proper if/then/else execution with ",(0,o.jsx)(e.code,{children:"ifFound()"})," and ",(0,o.jsx)(e.code,{children:"ifNotFound()"})]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Common Patterns:"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Login Flow with Sequential Actions:"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'ConditionalActionChain\n    .find(loginButton)\n    .ifFoundClick()\n    .then(usernameField)      // Sequential action\n    .ifFoundType("username")\n    .then(passwordField)      // Continue flow\n    .ifFoundType("password")\n    .then(submitButton)       // Keep going\n    .ifFoundClick()\n    .perform(action, new ObjectCollection.Builder().build());\n'})}),"\n",(0,o.jsxs)(e.ol,{start:"2",children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Form Filling with Convenience Methods:"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'ConditionalActionChain\n    .find(formTitle)\n    .ifNotFoundDo(res -> { throw new RuntimeException("Form not found"); })\n    .then(nameField)\n    .ifFoundClick()\n    .clearAndType("John Doe")    // Convenience method\n    .pressTab()                   // Keyboard shortcut\n    .type("john@example.com")\n    .then(submitButton)\n    .ifFoundClick()\n    .takeScreenshot("form-submitted")\n    .perform(action, new ObjectCollection.Builder().build());\n'})}),"\n",(0,o.jsxs)(e.ol,{start:"3",children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Error Handling with Control Flow:"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'ConditionalActionChain\n    .find(submitButton)\n    .ifFoundClick()\n    .then(errorDialog)\n    .ifFoundLog("Error appeared")\n    .stopIf(res -> res.getText() != null && \n            !res.getText().isEmpty() && \n            res.getText().get(0).contains("CRITICAL"))\n    .then(retryButton)\n    .ifFoundClick()\n    .perform(action, new ObjectCollection.Builder().build());\n'})}),"\n",(0,o.jsxs)(e.ol,{start:"4",children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Retry Pattern and Keyboard Shortcuts:"})}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Retry with convenience methods\nConditionalActionChain\n    .retry(new PatternFindOptions.Builder().build(), 3)\n    .ifFoundClick()\n    .ifNotFoundLog("Failed after retries")\n    .perform(action, objectCollection);\n\n// Keyboard shortcuts workflow\nConditionalActionChain\n    .find(editorField)\n    .ifFoundClick()\n    .pressCtrlA()      // Select all\n    .pressDelete()     // Delete\n    .type("New text")\n    .pressCtrlS()      // Save\n    .perform(action, new ObjectCollection.Builder().build());\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"When to Use ConditionalActionChain:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Always for UI interactions"})," - Handles element not found gracefully"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Multi-step workflows"})," - Clean sequential flow with error handling"]}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"When you need both success and failure handling"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"For readable, self-documenting code"})}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"When NOT to Use:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Known coordinates"})," - Use ",(0,o.jsx)(e.code,{children:"action.perform(ActionType.CLICK, location)"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Simple unconditional actions"})," - Use convenience methods"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance-critical loops"})," - Use traditional find/action separation"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"real-world-conditionalactionchain-examples",children:"Real-World ConditionalActionChain Examples"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Complex Dialog Handling:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Handle multi-path dialog with various UI states\nConditionalActionChain\n    .find(dialogTitle)\n    .ifNotFoundLog("Dialog not present")\n    .stopChain()  // Exit early if no dialog\n    .then(errorMessage)\n    .ifFoundLog("Error detected")\n    .ifFoundDo(result -> {\n        // Custom error handling logic\n        String error = result.getText().get(0);\n        logger.error("Dialog error: {}", error);\n    })\n    .then(retryButton)\n    .ifFound(new ClickOptions.Builder().build())\n    .ifNotFound(cancelButton)\n    .ifFound(new ClickOptions.Builder().build())\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Form Validation Flow:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Validate and submit form with error highlighting\nConditionalActionChain\n    .start(validateButton)  // Start without initial find\n    .click()\n    .wait(0.5)  // Allow validation to complete\n    .then(errorFields)\n    .ifFoundDo(result -> {\n        // Highlight all error fields\n        result.getMatchList().forEach(match -> {\n            action.highlight(match.getRegion());\n        });\n    })\n    .highlightErrors()  // Additional error highlighting\n    .ifNotFound(submitButton)  // No errors, submit\n    .ifFoundClick()\n    .logAction()\n    .perform(action, objectCollection);\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"State-Aware Navigation:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Navigate based on current state\nConditionalActionChain\n    .checkPrerequisites()  // Custom prerequisite check\n    .then(homeIcon)\n    .ifFound(new ClickOptions.Builder().build())\n    .waitVanish(loadingSpinner)  // Wait for load\n    .then(navigationMenu)\n    .ifNotFoundLog("Menu not accessible")\n    .throwError("Navigation failed")\n    .ifFound(menuItems)\n    .analyzeItem()  // Analyze menu structure\n    .processItemDialog()  // Handle item selection\n    .cleanupResources()  // Cleanup after navigation\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Document Processing:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Process documents with different handlers\nConditionalActionChain\n    .find(documentIcon)\n    .ifFoundDo(result -> {\n        // Determine document type\n        String docType = analyzeDocumentType(result);\n        context.put("docType", docType);\n    })\n    .then(pdfIcon)\n    .ifFound(openDocument())  // PDF handler\n    .ifNotFound(imageIcon)\n    .ifFound(viewImage())     // Image handler\n    .ifNotFound(textIcon)\n    .ifFound(openDocument())  // Text handler\n    .always(showProperties()) // Always show properties\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Keyboard Navigation Example:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Navigate using keyboard shortcuts\nConditionalActionChain\n    .find(textEditor)\n    .ifFoundClick()\n    .pressCtrlA()      // Select all\n    .pressDelete()     // Clear\n    .type("New content")\n    .pressCtrlS()      // Save\n    .handleConfirmation()  // Handle save dialog\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Checkbox and Toggle Handling:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Smart checkbox handling\nConditionalActionChain\n    .find(checkbox)\n    .clickIfNotChecked()  // Only click if unchecked\n    .then(relatedOption)\n    .ifFoundLog("Related option appeared")\n    .validateFields()  // Validate dependent fields\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Region-Based Actions:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Work with specific regions\nRegion searchArea = new Region(100, 100, 400, 300);\nRegion clickArea = new Region(150, 150, 50, 30);\n\nConditionalActionChain\n    .find(new PatternFindOptions.Builder()\n        .setSearchRegion(searchArea)\n        .build())\n    .ifFound(highlightRegion(searchArea))\n    .clickRegion(clickArea)\n    .perform(action, objectCollection);\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"ConditionalActionWrapper for Spring Applications:"})}),"\n",(0,o.jsxs)(e.p,{children:["When using Spring Boot, you can use ",(0,o.jsx)(e.code,{children:"ConditionalActionWrapper"})," with ConditionalActionChain:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Component\npublic class LoginAutomation {\n    @Autowired\n    private ConditionalActionWrapper actions;\n    \n    public void performLogin(StateImage loginButton, String username) {\n        // Simple find and click\n        actions.findAndClick(loginButton);\n        \n        // Find and type\n        actions.findAndType(usernameField, username);\n        \n        // Complex conditional chain\n        actions.createChain()\n            .find(submitButton)\n            .ifFound(ConditionalActionWrapper.click())\n            .ifNotFoundLog("Submit button not found")\n            .execute();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"ConditionalActionWrapper vs FindAndClick/FindAndType:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"FindAndClick/FindAndType"}),": Simple composite actions that always execute all steps"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Always finds then clicks, no conditions\nFindAndClick findAndClick = new FindAndClick.Builder()\n    .withSimilarity(0.9)\n    .build();\naction.perform(findAndClick, objectCollection);\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"ConditionalActionWrapper"}),": Spring component with conditional execution"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Only clicks if found, with logging\n@Autowired ConditionalActionWrapper actions;\nactions.findAndClick(submitButton);  // Handles errors gracefully\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use ConditionalActionWrapper when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Working in a Spring Boot application"}),"\n",(0,o.jsx)(e.li,{children:"Need conditional execution paths"}),"\n",(0,o.jsx)(e.li,{children:"Want automatic error handling and logging"}),"\n",(0,o.jsx)(e.li,{children:"Building complex conditional workflows"}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Use FindAndClick/FindAndType when:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Not using Spring dependency injection"}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Always want to execute all steps"}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:"Working with simple, predictable sequences"}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Convenience Methods"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Simple find\naction.find(state.getImage()).isSuccess()\n\n// Find with timeout\naction.findWithTimeout(10.0, state.getImage()).isSuccess()\n\n// Direct click\naction.click(state.getImage())\n\n// Type with object collection\naction.type(new ObjectCollection.Builder()\n    .withStrings(state.getTextCommand())\n    .build())\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"State Registration with Event Listener (Recommended)"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import org.springframework.boot.context.event.ApplicationReadyEvent;\nimport org.springframework.context.event.EventListener;\nimport io.github.jspinak.brobot.config.FrameworkInitializer;\n\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class StateRegistrationListener {\n    private final StateService stateService;\n    private final StateTransitionStore stateTransitionStore;\n    private final StateMemory stateMemory;\n    private final FrameworkInitializer frameworkInitializer;\n    private final ExampleState exampleState;\n    private final ExampleTransitions exampleTransitions;\n    \n    @EventListener(ApplicationReadyEvent.class)\n    public void onApplicationReady() {\n        log.info("Application ready - registering states");\n        \n        try {\n            // Register states\n            stateService.save(exampleState.getState());\n            \n            // Register transitions\n            stateTransitionStore.add(exampleTransitions.getStateTransitions());\n            \n            // Critical: Initialize state structure after ALL states registered\n            frameworkInitializer.initializeStateStructure();\n            \n            // Set initial active state\n            Long stateId = stateService.getStateId(ExampleState.Name.EXAMPLE.toString());\n            if (stateId != null) {\n                stateMemory.addActiveState(stateId);\n            }\n        } catch (Exception e) {\n            log.error("Error registering states: ", e);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Why use @EventListener instead of @PostConstruct:"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Ensures framework is fully initialized before state registration"}),"\n",(0,o.jsx)(e.li,{children:"Prevents image loading errors during initialization"}),"\n",(0,o.jsx)(e.li,{children:"Better integration with Spring Boot lifecycle"}),"\n",(0,o.jsxs)(e.li,{children:["Required call to ",(0,o.jsx)(e.code,{children:"frameworkInitializer.initializeStateStructure()"})," after all states are registered"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Spring Boot Application"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@SpringBootApplication\n@ComponentScan(basePackages = {\n    "com.yourorg.yourproject",\n    "io.github.jspinak.brobot"  // Include Brobot components\n})\npublic class YourApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(YourApplication.class, args);\n    }\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Enhanced StateNavigator"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Add this method to StateNavigator for cleaner code\npublic boolean openState(StateEnum stateEnum) {\n    return openState(stateEnum.toString());\n}\n\n// Usage becomes cleaner\nstateNavigator.openState(WorkingState.Name.WORKING);\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"11",children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Image and Resource Organization"})}),"\n"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Place images in ",(0,o.jsx)(e.code,{children:"images/[state-name]/"})," at project root"]}),"\n",(0,o.jsxs)(e.li,{children:["Create ",(0,o.jsx)(e.code,{children:"history/"})," folder at project root for illustrated test screenshots"]}),"\n",(0,o.jsxs)(e.li,{children:["Build.gradle should copy images to build directory:","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-gradle",children:"task copyImages(type: Copy) {\n    from 'images'\n    into \"$buildDir/resources/main/images\"\n}\nprocessResources.dependsOn copyImages\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"brobot-annotations",children:"Brobot Annotations"}),"\n",(0,o.jsx)(e.h3,{id:"state-annotation",children:"@State Annotation"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Purpose"}),": Marks a class as a Brobot state and Spring component"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Parameters"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"initial"}),": boolean (default false) - marks as initial state"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"name"}),': String (default "") - optional state name override']}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"description"}),': String (default "") - state documentation']}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Required with"}),": ",(0,o.jsx)(e.code,{children:"@Getter"})," and ",(0,o.jsx)(e.code,{children:"@Slf4j"})]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"transition-annotation",children:"@Transition Annotation"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Purpose"}),": Marks a class as a Brobot transition and Spring component"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Parameters"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"from"}),": Class<?>[] - source state class(es)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"to"}),": Class<?>[] - target state class(es)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"method"}),': String (default "execute") - transition method name']}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"priority"}),": int (default 0) - transition priority"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"description"}),': String (default "") - transition documentation']}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Required with"}),": ",(0,o.jsx)(e.code,{children:"@RequiredArgsConstructor"})," and ",(0,o.jsx)(e.code,{children:"@Slf4j"})]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"collectdata-annotation-advanced",children:"@CollectData Annotation (Advanced)"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Purpose"}),": Marks methods for automatic ML dataset collection"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Parameters"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"category"}),': String - data category (default "general")']}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"features"}),": String[] - specific features to collect (empty = all)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"captureScreenshots"}),": boolean - capture before/after screenshots (default true)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"captureIntermediateStates"}),": boolean - capture multi-step operations (default false)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"samplingRate"}),": double - collection rate 0.0-1.0 (default 1.0)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"maxSamples"}),": int - max samples to collect, -1 = unlimited (default -1)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"onlySuccess"}),": boolean - collect only successful executions (default false)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"format"}),": DataFormat - storage format (JSON, CSV, BINARY, TFRECORD, PARQUET)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"labels"}),": String[] - labels for supervised learning"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Use Case"}),": Training ML models on automation behavior"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Example usage:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@CollectData(\n    category = "click_accuracy",\n    captureScreenshots = true,\n    samplingRate = 0.1  // Collect 10% of executions\n)\npublic ActionResult performCriticalClick(StateImage target) {\n    // Click logic that will have data collected\n    return action.click(target);\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Code Organization"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Keep states simple with direct access to components"}),"\n",(0,o.jsx)(e.li,{children:"Use @State and @Transition annotations for cleaner code"}),"\n",(0,o.jsx)(e.li,{children:"Separate transitions into dedicated classes"}),"\n",(0,o.jsx)(e.li,{children:"Use Spring dependency injection throughout"}),"\n",(0,o.jsx)(e.li,{children:"Use declarative search regions for UI elements with predictable relationships"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Modern API Usage"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Always use ActionConfig classes (PatternFindOptions, ClickOptions, etc.)"}),"\n",(0,o.jsx)(e.li,{children:"Leverage fluent API for action chaining"}),"\n",(0,o.jsx)(e.li,{children:"Use convenience methods to reduce boilerplate"}),"\n",(0,o.jsx)(e.li,{children:"Implement StateEnum overloads for cleaner code"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"State Components"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Expose frequently used StateImages/StateStrings as fields"}),"\n",(0,o.jsx)(e.li,{children:"Create getter methods for direct access"}),"\n",(0,o.jsx)(e.li,{children:'Combine related actions in single StateString (e.g., "continue\\n")'}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Error Handling"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Wrap transitions in try-catch blocks"}),"\n",(0,o.jsx)(e.li,{children:"Log at appropriate levels (info for success, warn for failures)"}),"\n",(0,o.jsx)(e.li,{children:"Return boolean from transition functions"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Lombok Considerations"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use @RequiredArgsConstructor for dependency injection"}),"\n",(0,o.jsx)(e.li,{children:"Use @Slf4j for logging"}),"\n",(0,o.jsx)(e.li,{children:"If Lombok issues occur, create manual constructors"}),"\n",(0,o.jsx)(e.li,{children:"Ensure Lombok version matches Brobot's (1.18.32)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"ActionOptions Deprecated"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Always use specific ActionConfig implementations"}),"\n",(0,o.jsx)(e.li,{children:"ActionOptions will be removed in future versions"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"State Component Access"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Don't navigate through: ",(0,o.jsx)(e.code,{children:"state.getStateImages().iterator().next()"})]}),"\n",(0,o.jsxs)(e.li,{children:["Do provide direct access: ",(0,o.jsx)(e.code,{children:"getMainImage()"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Import Paths"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"io.github.jspinak.brobot.model.state.*"})," (not primitives)"]}),"\n",(0,o.jsxs)(e.li,{children:["ActionExecution is in ",(0,o.jsx)(e.code,{children:"internal.execution"})," package"]}),"\n",(0,o.jsxs)(e.li,{children:["StateMemory is in ",(0,o.jsx)(e.code,{children:"statemanagement"})," package"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Method Names"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"stateService.save()"})," not ",(0,o.jsx)(e.code,{children:"addState()"})]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"stateMemory.addActiveState()"})," not ",(0,o.jsx)(e.code,{children:"setActiveState()"})]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"isSuccess()"})," on ActionResult"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Transitions"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use StateTransitions.Builder pattern"}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"addTransitionFinish()"})," not ",(0,o.jsx)(e.code,{children:"setTransitionFinish()"})]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"setPauseBeforeBegin()"})," for timeouts"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Declarative Search Regions Not Working"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Verify target state and object names match exactly (case-sensitive)"}),"\n",(0,o.jsx)(e.li,{children:'Check logs for "Registered search region dependency" messages'}),"\n",(0,o.jsx)(e.li,{children:"Ensure target object has been found at least once"}),"\n",(0,o.jsxs)(e.li,{children:["Enable debug logging: ",(0,o.jsx)(e.code,{children:"logging.level.io.github.jspinak.brobot.action.internal.region=DEBUG"})]}),"\n",(0,o.jsxs)(e.li,{children:["Verify Spring component scanning includes ",(0,o.jsx)(e.code,{children:"io.github.jspinak.brobot"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"testing-patterns",children:"Testing Patterns"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Quick verification in transitions\nprivate boolean findWithTimeout() {\n    PatternFindOptions options = new PatternFindOptions.Builder()\n        .setPauseBeforeBegin(10.0)\n        .build();\n    return action.perform(options, state.getImage()).isSuccess();\n}\n\n// Or use convenience method\nprivate boolean findWithTimeout() {\n    return action.findWithTimeout(10.0, state.getImage()).isSuccess();\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"configuration-v110",children:"Configuration (v1.1.0+)"}),"\n",(0,o.jsx)(e.h3,{id:"important-configuration-best-practices",children:"Important: Configuration Best Practices"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"DO:"})," Configure through ",(0,o.jsx)(e.code,{children:"application.yml"})," or ",(0,o.jsx)(e.code,{children:"application.properties"}),(0,o.jsx)(e.br,{}),"\n",(0,o.jsx)(e.strong,{children:"DO NOT:"})," Set FrameworkSettings fields directly (deprecated)"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// \u274c WRONG - Direct static field access is deprecated\nFrameworkSettings.mock = true;\nFrameworkSettings.saveHistory = true;\n\n// \u2705 CORRECT - Use application properties\n// Configure in application.yml or application.properties\n"})}),"\n",(0,o.jsx)(e.h3,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,o.jsxs)(e.p,{children:["Brobot includes sensible defaults in ",(0,o.jsx)(e.code,{children:"brobot-defaults.properties"}),". You only need to override what you want to change."]}),"\n",(0,o.jsx)(e.h3,{id:"image-path-configuration",children:"Image Path Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"# application.yml\nbrobot:\n  core:\n    image-path: images/              # Load from project root images folder\n    # image-path: classpath:images/  # Load from classpath (after build copies them)\n    # image-path: /absolute/path/    # Absolute path\n"})}),"\n",(0,o.jsx)(e.h3,{id:"complete-configuration-example",children:"Complete Configuration Example"}),"\n",(0,o.jsx)(e.h4,{id:"using-applicationyml-recommended",children:"Using application.yml (Recommended):"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"brobot:\n  core:\n    image-path: images/\n    mock: false                      # Enable/disable mock mode\n    headless: false                  # Run without GUI (for CI/CD)\n    package-name: com.example        # Base package for scanning\n  \n  startup:\n    verify-initial-states: true\n    initial-states: HOME,LOGIN\n    fallback-search: true\n    startup-delay: 2\n  \n  mouse:\n    move-delay: 0.5                  # Delay for mouse movements\n    pause-before-down: 0.0           # Pause before mouse down\n    pause-after-down: 0.0            # Pause after mouse down\n    pause-before-up: 0.0             # Pause before mouse up\n    pause-after-up: 0.0              # Pause after mouse up\n  \n  mock:                              # Mock mode timings (seconds)\n    time-find-first: 0.1\n    time-find-all: 0.2\n    time-drag: 0.3\n    time-click: 0.05\n    time-move: 0.1\n    time-find-histogram: 0.3\n    time-find-color: 0.3\n    time-classify: 0.4\n  \n  screenshot:\n    save-snapshots: false            # Save screenshots during execution\n    save-history: false              # Save illustrated action history\n    path: screenshots/               # Screenshot directory\n    filename: screen                 # Screenshot filename prefix\n    history-path: history/           # History directory\n    history-filename: hist           # History filename prefix\n  \n  illustration:                      # What to draw in history screenshots\n    draw-find: true\n    draw-click: true\n    draw-drag: true\n    draw-move: true\n    draw-highlight: true\n    draw-repeated-actions: true\n    draw-classify: true\n    draw-define: true\n  \n  analysis:                          # Color analysis settings\n    k-means-in-profile: 5\n    max-k-means-to-store: 10\n  \n  recording:                         # Screen recording settings\n    enabled: false\n    path: recordings/\n    fps: 10\n    quality: 0.7\n  \n  dataset:                           # ML dataset generation\n    enabled: false\n    path: dataset/\n    save-format: JSON\n  \n  testing:                           # Unit test settings\n    mock: true\n    save-snapshots: true\n"})}),"\n",(0,o.jsx)(e.h4,{id:"using-applicationproperties",children:"Using application.properties:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Core settings\nbrobot.core.image-path=images/\nbrobot.core.mock=false\nbrobot.core.headless=false\nbrobot.core.package-name=com.example\n\n# Startup settings\nbrobot.startup.verify-initial-states=true\nbrobot.startup.initial-states=HOME,LOGIN\nbrobot.startup.fallback-search=true\nbrobot.startup.startup-delay=2\n\n# Mouse settings\nbrobot.mouse.move-delay=0.5\nbrobot.mouse.pause-before-down=0.0\nbrobot.mouse.pause-after-down=0.0\n\n# Mock mode timings\nbrobot.mock.time-find-first=0.1\nbrobot.mock.time-find-all=0.2\nbrobot.mock.time-click=0.05\n\n# Screenshot settings\nbrobot.screenshot.save-snapshots=false\nbrobot.screenshot.save-history=false\nbrobot.screenshot.path=screenshots/\nbrobot.screenshot.history-path=history/\n\n# Illustration settings\nbrobot.illustration.draw-find=true\nbrobot.illustration.draw-click=true\n\n# Testing settings\nbrobot.testing.mock=true\nbrobot.testing.save-snapshots=true\n"})}),"\n",(0,o.jsx)(e.h3,{id:"configuration-classes",children:"Configuration Classes"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"BrobotProperties"}),": The main configuration class that maps to ",(0,o.jsx)(e.code,{children:"brobot.*"})," properties"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Uses Spring's ",(0,o.jsx)(e.code,{children:'@ConfigurationProperties(prefix = "brobot")'})]}),"\n",(0,o.jsx)(e.li,{children:"Automatically initialized on startup"}),"\n",(0,o.jsx)(e.li,{children:"Values are copied to FrameworkSettings for backward compatibility"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Key Configuration Groups"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.core.*"})," - Essential framework settings"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.mouse.*"})," - Mouse action timing and behavior"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.mock.*"})," - Simulated execution timings"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.screenshot.*"})," - Screen capture and history"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.illustration.*"})," - Visual feedback settings"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.analysis.*"})," - Color profiling settings"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"brobot.testing.*"})," - Test-specific overrides"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"movement-and-navigation-in-v110",children:"Movement and Navigation in v1.1.0"}),"\n",(0,o.jsx)(e.h3,{id:"available-movement-apis",children:"Available Movement APIs"}),"\n",(0,o.jsx)(e.p,{children:"Brobot v1.1.0 provides comprehensive movement control:"}),"\n",(0,o.jsx)(e.h4,{id:"mouse-movement",children:"Mouse Movement"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Direct mouse movement with speed control\nMouseMoveOptions moveOptions = new MouseMoveOptions.Builder()\n    .setMoveMouseDelay(0.5f)  // 0.0 = instant, 1.0 = slow\n    .setPauseAfterEnd(1.0)\n    .build();\n\naction.move(moveOptions, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"scrolling",children:"Scrolling"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Native mouse wheel scrolling\nScrollOptions scrollDown = new ScrollOptions.Builder()\n    .setDirection(ScrollOptions.Direction.DOWN)\n    .setScrollSteps(5)  // Number of scroll wheel clicks\n    .setPauseAfterEnd(0.5)\n    .build();\n\naction.scroll(scrollDown, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"mouse-button-control",children:"Mouse Button Control"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Press and hold mouse button\nMouseDownOptions pressOptions = new MouseDownOptions.Builder()\n    .setPressOptions(MousePressOptions.builder()\n        .button(MouseButton.LEFT)\n        .pauseAfterMouseDown(0.5)\n        .build())\n    .build();\n\naction.mouseDown(pressOptions, location);\n\n// Release mouse button\nMouseUpOptions releaseOptions = new MouseUpOptions.Builder()\n    .setPressOptions(MousePressOptions.builder()\n        .button(MouseButton.LEFT)\n        .build())\n    .build();\n\naction.mouseUp(releaseOptions, location);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"drag-operations",children:"Drag Operations"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"DragOptions dragOptions = new DragOptions.Builder()\n    .setFromOptions(new PatternFindOptions.Builder()\n        .setSimilarity(0.9)\n        .build())\n    .setToOptions(new PatternFindOptions.Builder()\n        .setSimilarity(0.9)\n        .build())\n    .setDragDelay(0.5)  // Hold duration before dragging\n    .build();\n\naction.drag(dragOptions, dragCollection);\n"})}),"\n",(0,o.jsx)(e.h2,{id:"illustration-system-v110",children:"Illustration System (v1.1.0)"}),"\n",(0,o.jsx)(e.h3,{id:"illustrationcontroller-api",children:"IllustrationController API"}),"\n",(0,o.jsx)(e.p,{children:"v1.1.0 provides the IllustrationController for programmatic control:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@Component\n@RequiredArgsConstructor\npublic class MyAutomation {\n    private final IllustrationController illustrationController;\n    \n    public void checkIllustration(ActionConfig config, ObjectCollection objects) {\n        // Check if action will be illustrated\n        boolean willIllustrate = illustrationController.okToIllustrate(config, objects);\n        \n        // Manually create illustration\n        ActionResult result = action.find(objects);\n        boolean illustrated = illustrationController.illustrateWhenAllowed(\n            result, searchRegions, config, objects\n        );\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Enable/disable illustrations by action type\nbrobot.illustration.draw-find=true\nbrobot.illustration.draw-click=true\nbrobot.illustration.draw-drag=true\nbrobot.illustration.draw-move=true\nbrobot.illustration.draw-highlight=true\n\n# Screenshot and history settings\nbrobot.screenshot.save-history=true\nbrobot.screenshot.save-snapshots=false\nbrobot.screenshot.path=screenshots/\nbrobot.screenshot.history-path=history/\nbrobot.screenshot.filename=screen\nbrobot.screenshot.history-filename=hist\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-specific-configurations",children:"Environment-Specific Configurations"}),"\n",(0,o.jsx)(e.p,{children:"Create different property files for different environments:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# application-dev.properties - Full debugging\nbrobot.illustration.draw-find=true\nbrobot.illustration.draw-click=true\nbrobot.screenshot.save-history=true\n\n# application-test.properties - Selective\nbrobot.illustration.draw-find=false\nbrobot.illustration.draw-click=true\nbrobot.screenshot.save-history=true\n\n# application-prod.properties - Minimal\nbrobot.illustration.draw-find=false\nbrobot.illustration.draw-click=false\nbrobot.screenshot.save-history=false\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Run with: ",(0,o.jsx)(e.code,{children:"java -jar app.jar --spring.profiles.active=dev"})]}),"\n",(0,o.jsx)(e.h2,{id:"state-management-in-v110",children:"State Management in v1.1.0"}),"\n",(0,o.jsx)(e.h3,{id:"recommended-using-annotations",children:"Recommended: Using Annotations"}),"\n",(0,o.jsx)(e.p,{children:"The modern approach uses @State and @Transition annotations for automatic registration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// State with @State annotation\n@State(initial = true)  // Marks as initial state\n@Getter\npublic class HomeState {\n    private final StateImage loginButton;\n    \n    public HomeState() {\n        loginButton = new StateImage.Builder()\n            .setName("LoginButton")\n            .addPatterns("home/login_button")\n            .setFixed(true)\n            .build();\n    }\n}\n\n// Transition with @Transition annotation\n@Transition(from = HomeState.class, to = WorldState.class)\n@RequiredArgsConstructor\npublic class HomeToWorldTransition {\n    private final HomeState homeState;\n    private final Action action;\n    \n    public boolean execute() {\n        return action.click(homeState.getLoginButton()).isSuccess();\n    }\n}\n\n// No manual configuration needed - annotations handle registration!\n'})}),"\n",(0,o.jsx)(e.h2,{id:"initial-state-verification-v110",children:"Initial State Verification (v1.1.0+)"}),"\n",(0,o.jsx)(e.p,{children:"Modern Brobot provides automatic initial state verification:"}),"\n",(0,o.jsx)(e.h3,{id:"configuration-based-recommended",children:"Configuration-Based (Recommended)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# application.properties\nbrobot.startup.verify-initial-states=true\nbrobot.startup.initial-states=HOME,LOGIN\nbrobot.startup.fallback-search=true\nbrobot.startup.startup-delay=2\n"})}),"\n",(0,o.jsx)(e.h3,{id:"programmatic-usage",children:"Programmatic Usage"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@Component\npublic class MyAutomation implements ApplicationRunner {\n    private final InitialStateVerifier stateVerifier;\n    \n    @Override\n    public void run(ApplicationArguments args) {\n        // Simple verification\n        stateVerifier.verify(HomePage.Name.HOME, LoginPage.Name.LOGIN);\n        \n        // Advanced verification\n        stateVerifier.builder()\n            .withStates(HomePage.Name.HOME, Dashboard.Name.MAIN)\n            .withFallbackSearch(true)\n            .activateFirstOnly(true)\n            .verify();\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"mock-testing-support",children:"Mock Testing Support"}),"\n",(0,o.jsx)(e.h4,{id:"understanding-mock-mode",children:"Understanding Mock Mode"}),"\n",(0,o.jsxs)(e.p,{children:["Mock mode (",(0,o.jsx)(e.code,{children:"brobot.framework.mock=true"}),") enables testing automation logic without GUI interaction:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"No screen capture"}),' - Patterns are "found" based on configured probabilities']}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Deterministic testing"})," - Use 100% probabilities for flow validation"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Stochastic testing"})," - Use variable probabilities for robustness testing"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"CI/CD friendly"})," - No GUI dependencies required"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"IMPORTANT"}),": Starting with Brobot v1.0.0+, ActionHistory is ",(0,o.jsx)(e.strong,{children:"REQUIRED"}),' for patterns to be found in mock mode. Without ActionHistory, all find operations will fail with "No matches found". Always configure ActionHistory using the new builder methods when creating StateImages for mock testing.']}),"\n",(0,o.jsx)(e.h4,{id:"configuring-mock-mode",children:"Configuring Mock Mode"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Enable in application.properties:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Enable mock mode for testing\nbrobot.framework.mock=true\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Configure state probabilities in state classes (recommended):"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State(initial = true)  // Mark initial state\n@Getter\n@Slf4j\npublic class LoginState {\n    \n    @Autowired(required = false)\n    private MockStateManagement mockStateManagement;\n    \n    // 100% for deterministic flow testing\n    private static final int MOCK_PROBABILITY = 100;\n    \n    private final StateImage loginButton;\n    \n    public LoginState() {\n        loginButton = new StateImage.Builder()\n            .addPatterns("login-button")\n            .setName("LoginButton")\n            .build();\n    }\n    \n    @PostConstruct\n    public void configureMockProbability() {\n        if (FrameworkSettings.mock && mockStateManagement != null) {\n            mockStateManagement.setStateProbabilities(MOCK_PROBABILITY, "Login");\n            log.debug("Configured Login state mock probability to {}%", MOCK_PROBABILITY);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"testing-state-transitions",children:"Testing State Transitions"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Deterministic flow testing (100% probabilities):"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Test\npublic void testLoginToHomeTransition() {\n    // Configure states for reliable transitions\n    mockStateManagement.setStateProbabilities(100, "Login", "Home");\n    \n    // Initial state should be Login\n    assertTrue(stateMemory.getActiveStateNames().contains("Login"));\n    \n    // Navigate to Home\n    boolean success = stateNavigator.openState("Home");\n    assertTrue(success);\n    \n    // Verify transition\n    assertTrue(stateMemory.getActiveStateNames().contains("Home"));\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Stochastic robustness testing (variable probabilities):"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Test with unreliable element detection\nstateVerifier.builder()\n    .withState(HomePage.Name.HOME, 70)    // 70% probability\n    .withState(LoginPage.Name.LOGIN, 30)  // 30% probability\n    .verify();\n\n// Test retry logic with intermittent failures\nmockStateManagement.setStateProbabilities(50, "UnstableDialog");\nfor (int i = 0; i < MAX_RETRIES; i++) {\n    ActionResult result = action.find(dialogElement);\n    if (result.isSuccess()) break;\n    Thread.sleep(1000);\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"dynamic-state-simulation",children:"Dynamic State Simulation"}),"\n",(0,o.jsx)(e.p,{children:"Simulate state changes during test execution:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Test\npublic void testCompleteWorkflow() {\n    // Initial: Login visible\n    mockStateManagement.setStateProbabilities(100, "Login");\n    mockStateManagement.setStateProbabilities(0, "Home");\n    \n    // Perform login\n    stateNavigator.openState("Home");\n    \n    // Simulate successful login: Home appears, Login disappears\n    mockStateManagement.setStateProbabilities(0, "Login");\n    mockStateManagement.setStateProbabilities(100, "Home");\n    \n    // Continue with workflow...\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"best-practices-for-mock-testing",children:"Best Practices for Mock Testing"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Use 100% probability for flow testing"})," - Focus on automation logic, not robustness"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Set initial states correctly"})," - Only starting states should have ",(0,o.jsx)(e.code,{children:"@State(initial = true)"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Configure probabilities in state classes"})," - Keep mock behavior with state definition"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Clean state between tests"})," - Clear active states in @AfterEach"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Use separate test properties"})," - Keep mock config separate from production"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["For complete mock mode documentation, see ",(0,o.jsx)(e.a,{href:"/docs/testing/mock-mode-guide",children:"Mock Mode Guide"}),"."]}),"\n",(0,o.jsx)(e.h3,{id:"profile-based-testing-architecture",children:"Profile-Based Testing Architecture"}),"\n",(0,o.jsx)(e.p,{children:"Brobot now supports a cleaner profile-based architecture that eliminates runtime conditionals and provides better separation between test and production environments."}),"\n",(0,o.jsx)(e.h4,{id:"quick-setup",children:"Quick Setup"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsxs)(e.strong,{children:["1. Create ",(0,o.jsx)(e.code,{children:"application-test.properties"}),":"]})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Test profile - automatically enables mock mode\nspring.config.import=optional:classpath:brobot-test-defaults.properties\nbrobot.framework.mock=true\nbrobot.action.similarity=0.70\nlogging.level.com.yourapp=DEBUG\n\n# State probabilities for deterministic testing\nyourapp.mock.state-probabilities=100\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsxs)(e.strong,{children:["2. Use ",(0,o.jsx)(e.code,{children:"@ActiveProfiles"})," in tests:"]})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")  // Replaces manual property configuration\npublic class YourAutomationTest {\n    // Mock mode automatically enabled\n    // Test-optimized settings applied\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"3. Configure states to use profiles:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State(initial = true)\n@Slf4j\npublic class YourState {\n    @Autowired(required = false)\n    private MockStateManagement mockStateManagement;\n    \n    @PostConstruct\n    public void configureMockMode() {\n        if (FrameworkSettings.mock && mockStateManagement != null) {\n            mockStateManagement.setStateProbabilities(100, "YourState");\n            log.info("Mock mode configured for YourState");\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"benefits-over-runtime-delegation",children:"Benefits Over Runtime Delegation"}),"\n",(0,o.jsx)(e.p,{children:"The old approach used runtime checks:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// OLD - Runtime delegation (still supported but not recommended)\nif (FrameworkSettings.mock) {\n    return mockExecution();\n} else {\n    return liveExecution();\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"The new profile-based approach uses dependency injection:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// NEW - Profile-based (recommended)\n@Component\n@Profile("test")\npublic class MockExecutor implements Executor { }\n\n@Component\n@Profile("!test")\npublic class LiveExecutor implements Executor { }\n'})}),"\n",(0,o.jsx)(e.p,{children:"Benefits:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"No runtime overhead"})," - No conditional checks in production"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Clean separation"})," - Test and production code clearly separated"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Automatic configuration"})," - Settings applied based on environment"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Better IDE support"})," - Profile-aware code completion"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Easier testing"})," - Guaranteed mock mode in tests"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["For complete profile documentation, see ",(0,o.jsx)(e.a,{href:"/docs/testing/profile-based-architecture",children:"Profile-Based Architecture Guide"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"color-finding-and-motion-detection",children:"Color Finding and Motion Detection"}),"\n",(0,o.jsx)(e.h3,{id:"color-finding-with-colorfindoptions",children:"Color Finding with ColorFindOptions"}),"\n",(0,o.jsx)(e.p,{children:"Brobot supports three color analysis strategies:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// 1. KMEANS - Find dominant colors using k-means clustering\nColorFindOptions kmeansColor = new ColorFindOptions.Builder()\n    .setColorStrategy(ColorFindOptions.Color.KMEANS)\n    .setKmeans(3)  // Find 3 dominant colors\n    .setDiameter(5) // Minimum cluster size\n    .setSimilarity(0.9)\n    .build();\n\n// 2. MU - Use mean color statistics (default)\nColorFindOptions meanColor = new ColorFindOptions.Builder()\n    .setColorStrategy(ColorFindOptions.Color.MU)\n    .setDiameter(5)\n    .setSimilarity(0.95)\n    .build();\n\n// 3. CLASSIFICATION - Multi-class pixel classification\nColorFindOptions classification = new ColorFindOptions.Builder()\n    .setColorStrategy(ColorFindOptions.Color.CLASSIFICATION)\n    .setSimilarity(0.8)\n    .build();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"nested-vs-confirmed-finds-with-actionchainoptions",children:"Nested vs Confirmed Finds with ActionChainOptions"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Key Difference"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"NESTED"}),": Each action searches WITHIN the results of the previous action"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"CONFIRM"}),": Each action validates the results of the previous action; returns original match if confirmed"]}),"\n"]}),"\n",(0,o.jsx)(e.h4,{id:"nested-finds-example",children:"Nested Finds Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find yellow bars: first find all bars, then find yellow within those bars\nPatternFindOptions findBars = new PatternFindOptions.Builder()\n    .setStrategy(PatternFindOptions.Strategy.ALL)\n    .setSimilarity(0.7)  // Lower to catch all bars\n    .build();\n\nColorFindOptions findYellow = new ColorFindOptions.Builder()\n    .setColorStrategy(ColorFindOptions.Color.MU)\n    .setDiameter(10)\n    .setSimilarity(0.9)\n    .build();\n\nActionChainOptions nestedFind = new ActionChainOptions.Builder(findBars)\n    .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n    .then(findYellow)\n    .build();\n\n// Result: Returns yellow regions found INSIDE the bar patterns\nAction action = // obtain from Spring context\nActionResult yellowRegions = action.perform(nestedFind, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"confirmed-finds-example",children:"Confirmed Finds Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Confirm buttons by checking they have the right color\nPatternFindOptions findButtons = new PatternFindOptions.Builder()\n    .setStrategy(PatternFindOptions.Strategy.ALL)\n    .setSimilarity(0.8)\n    .build();\n\nColorFindOptions confirmColor = new ColorFindOptions.Builder()\n    .setColorStrategy(ColorFindOptions.Color.MU)\n    .setSimilarity(0.85)\n    .build();\n\nActionChainOptions confirmedFind = new ActionChainOptions.Builder(findButtons)\n    .setStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)\n    .then(confirmColor)\n    .build();\n\n// Result: Returns original button matches that passed color confirmation\nActionResult confirmedButtons = action.perform(confirmedFind, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"motion-detection-with-motionfindoptions",children:"Motion Detection with MotionFindOptions"}),"\n",(0,o.jsx)(e.p,{children:"Motion detection requires 3 scenes to determine direction of movement:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Configure motion detection\nMotionFindOptions motionOptions = new MotionFindOptions.Builder()\n    .setMaxMovement(150)     // Max pixels object can move between scenes\n    .setMinArea(100)         // Filter out small movements\n    .setMaxMatchesToActOn(5) // Track up to 5 moving objects\n    .setSimilarity(0.75)     // Match threshold across scenes\n    .build();\n\n// Three ways to provide scenes:\n\n// 1. From files (mock mode)\n// Configure in application.properties:\n// brobot.core.mock=true\n// brobot.screenshot.path=screenshots/\nObjectCollection emptyCollection = new ObjectCollection.Builder().build();\nActionResult motionFromFiles = action.perform(motionOptions, emptyCollection);\n\n// 2. From Brobot images\nObjectCollection scenes = new ObjectCollection.Builder()\n    .withScenes(scene1, scene2, scene3)\n    .build();\nActionResult motionFromImages = action.perform(motionOptions, scenes);\n\n// 3. From live screen (mock=false)\n// brobot.core.mock=false\nActionResult motionFromScreen = action.perform(motionOptions, emptyCollection);\n\n// Access results\nList<Match> movingObjects = motionFromScreen.getMatchList();\nSceneAnalysisCollection sceneAnalysis = motionFromScreen.getSceneAnalysis();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"histogram-finding",children:"Histogram Finding"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"HistogramFindOptions histogramFind = new HistogramFindOptions.Builder()\n    .setSimilarity(0.8)\n    .setBinOptions(HSVBinOptions.builder()\n        .hueBins(90)\n        .saturationBins(2)\n        .valueBins(1))\n    .setMaxMatchesToActOn(5)\n    .build();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"practical-color--pattern-example",children:"Practical Color + Pattern Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find red error buttons using pattern + color confirmation\npublic boolean clickErrorButton() {\n    // Define the chain\n    ActionChainOptions findRedButton = ActionChainBuilder\n        .of(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.ALL)\n            .setSimilarity(0.7)\n            .build())\n        .then(new ColorFindOptions.Builder()\n            .setColorStrategy(ColorFindOptions.Color.MU)\n            .setSimilarity(0.9)\n            .build())\n        .withStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)\n        .build();\n    \n    // Execute find\n    ActionResult result = action.perform(findRedButton, \n        new ObjectCollection.Builder()\n            .withImages(errorButtonImage)\n            .build());\n    \n    // Click if found\n    if (result.isSuccess() && !result.getMatchList().isEmpty()) {\n        return action.click(result.getMatchList().get(0)).isSuccess();\n    }\n    return false;\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"actionhistory-for-integration-testing",children:"ActionHistory for Integration Testing"}),"\n",(0,o.jsx)(e.h3,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(e.p,{children:"ActionHistory is Brobot's core component for mock testing and probabilistic automation. It records action execution patterns over time, enabling realistic testing without the target application."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"New in v1.0.0+"}),": ActionHistory can now be configured directly in the StateImage builder using the new ",(0,o.jsx)(e.code,{children:"withActionHistory()"})," methods, eliminating the need for separate initialization methods."]}),"\n",(0,o.jsx)(e.h3,{id:"modern-actionhistory-setup-v100",children:"Modern ActionHistory Setup (v1.0.0+)"}),"\n",(0,o.jsx)(e.h4,{id:"direct-builder-integration",children:"Direct Builder Integration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.model.state.StateImage;\nimport io.github.jspinak.brobot.model.element.Region;\nimport io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryFactory;\nimport io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryBuilder;\n\n// NEW: ActionHistory configured directly in builder\n@State\n@Getter\npublic class LoginState {\n    private final StateImage loginButton;\n    \n    public LoginState() {\n        // Use factory method for common UI patterns\n        loginButton = new StateImage.Builder()\n            .addPatterns("login/button")\n            .setName("LoginButton")\n            .withActionHistory(MockActionHistoryFactory.reliableButton(\n                new Region(500, 400, 100, 40)))\n            .build();\n        // No separate initializeActionHistory() method needed!\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"using-mockactionhistorybuilder-for-custom-configurations",children:"Using MockActionHistoryBuilder for Custom Configurations"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@State\n@Getter\npublic class CustomState {\n    private final StateImage customElement;\n    \n    public CustomState() {\n        customElement = new StateImage.Builder()\n            .addPatterns("custom/element")\n            .setName("CustomElement")\n            .withActionHistory(MockActionHistoryBuilder.builder()\n                .successRate(0.85)          // 85% success rate\n                .matchRegion(new Region(50, 100, 150, 75))\n                .minSimilarity(0.80)\n                .maxSimilarity(0.95)\n                .minDuration(20)\n                .maxDuration(100)\n                .recordCount(30)\n                .build()\n                .build())\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"factory-methods-for-common-ui-patterns",children:"Factory Methods for Common UI Patterns"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Different factory methods for different UI elements\nStateImage button = new StateImage.Builder()\n    .addPatterns("ok-button")\n    .withActionHistory(MockActionHistoryFactory.reliableButton(region))\n    .build();\n\nStateImage textField = new StateImage.Builder()\n    .addPatterns("search-field")\n    .withActionHistory(MockActionHistoryFactory.dynamicTextField(region))\n    .build();\n\nStateImage loader = new StateImage.Builder()\n    .addPatterns("loading")\n    .withActionHistory(MockActionHistoryFactory.loadingIndicator(region))\n    .build();\n\nStateImage menu = new StateImage.Builder()\n    .addPatterns("file-menu")\n    .withActionHistory(MockActionHistoryFactory.menuItem(region))\n    .build();\n'})}),"\n",(0,o.jsx)(e.h4,{id:"screen-position-helpers",children:"Screen Position Helpers"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.model.element.Positions;\n\n// Element at center of screen\nStateImage centerModal = new StateImage.Builder()\n    .addPatterns("modal")\n    .withActionHistory(MockActionHistoryFactory.forScreenPosition(\n        Positions.Name.MIDDLEMIDDLE, 400, 300))\n    .build();\n\n// Element in lower-left corner\nStateImage chatWindow = new StateImage.Builder()\n    .addPatterns("chat")\n    .withActionHistory(MockActionHistoryFactory.lowerLeftElement(300, 200))\n    .build();\n'})}),"\n",(0,o.jsx)(e.h3,{id:"legacy-actionhistory-setup-pre-v100",children:"Legacy ActionHistory Setup (Pre-v1.0.0)"}),"\n",(0,o.jsx)(e.p,{children:"For reference, here's the traditional approach (still supported but not recommended):"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.model.action.ActionHistory;\nimport io.github.jspinak.brobot.model.action.ActionRecord;\nimport io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\nimport io.github.jspinak.brobot.model.match.Match;\n\n// OLD: Separate initialization method required\n@State\n@Getter\npublic class LegacyState {\n    private final StateImage loginButton;\n    \n    public LegacyState() {\n        loginButton = new StateImage.Builder()\n            .addPatterns("login/button")\n            .setName("LoginButton")\n            .build();\n        \n        // Old approach: separate method\n        initializeActionHistory();\n    }\n    \n    private void initializeActionHistory() {\n        ActionHistory history = new ActionHistory();\n        \n        // Manual record creation\n        for (int i = 0; i < 100; i++) {\n            boolean success = i < 90;\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder()\n                    .setSimilarity(0.85)\n                    .build())\n                .addMatch(success ? new Match.Builder()\n                    .setRegion(500, 400, 100, 40)\n                    .setSimScore(0.85 + Math.random() * 0.1)\n                    .build() : null)\n                .setActionSuccess(success)\n                .setDuration(success ? 200 : 5000)\n                .build();\n            \n            history.addSnapshot(record);\n        }\n        \n        // Manual setting on each pattern\n        for (Pattern pattern : loginButton.getPatterns()) {\n            pattern.setMatchHistory(history);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"recording-different-action-types",children:"Recording Different Action Types"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Click actions with timing data\nActionRecord clickRecord = new ActionRecord.Builder()\n    .setActionConfig(new ClickOptions.Builder()\n        .setClickType(ClickOptions.Type.DOUBLE)\n        .setNumberOfClicks(2)\n        .build())\n    .addMatch(new Match.Builder()\n        .setRegion(150, 250, 40, 20)\n        .setSimScore(0.92)\n        .build())\n    .setActionSuccess(true)\n    .setDuration(250)  // milliseconds\n    .build();\n\n// Type actions with text capture\nActionRecord typeRecord = new ActionRecord.Builder()\n    .setActionConfig(new TypeOptions.Builder()\n        .setPauseBeforeBegin(200)\n        .build())\n    .setText("user@example.com")\n    .setActionSuccess(true)\n    .build();\n\n// Vanish actions for element disappearance\nActionRecord vanishRecord = new ActionRecord.Builder()\n    .setActionConfig(new VanishOptions.Builder()\n        .setWaitTime(5.0)\n        .build())\n    .setActionSuccess(true)\n    .setDuration(3500)  // Vanished after 3.5 seconds\n    .build();\n'})}),"\n",(0,o.jsx)(e.h3,{id:"integration-test-configuration",children:"Integration Test Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"# application-test.yml\nbrobot:\n  mock:\n    enabled: true\n    use-real-screenshots: false\n    \n  testing:\n    deterministic: true  # Use seeded random for reproducible tests\n    seed: 12345\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"ActionHistory Persistence Options"}),":"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"In Java Projects (Library-based)"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"ActionHistoryJsonConverter"})," from the library for serialize/deserialize"]}),"\n",(0,o.jsx)(e.li,{children:"Implement your own persistence layer (as shown above)"}),"\n",(0,o.jsx)(e.li,{children:"Full control over when and how to save histories"}),"\n",(0,o.jsx)(e.li,{children:"Best for: Custom automation projects, integration tests"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"In Brobot Runner Application"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Automatic recording during execution"}),"\n",(0,o.jsx)(e.li,{children:"GUI for viewing and managing histories"}),"\n",(0,o.jsx)(e.li,{children:"Export/import functionality built-in"}),"\n",(0,o.jsx)(e.li,{children:"Best for: Interactive development, visual debugging"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"To use recorded data from the Runner in your Java tests:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Record sessions"})," in the Runner during live automation"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Export sessions"})," as JSON files from the Runner UI"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Import in tests"})," using ObjectMapper or custom loaders"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Apply to StateImages"})," for realistic mock testing"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"writing-integration-tests-with-actionhistory",children:"Writing Integration Tests with ActionHistory"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@SpringBootTest\n@TestPropertySource(properties = {\n    "brobot.mock.enabled=true",\n    "brobot.testing.deterministic=true"\n})\npublic class WorkflowIntegrationTest {\n    \n    @Autowired\n    private LoginState loginState;\n    \n    @Autowired\n    private Action action;\n    \n    @Test\n    public void testLoginWorkflowWithHistory() {\n        // Pre-populate with realistic data\n        prepareLoginHistory();\n        \n        // Execute workflow - uses ActionHistory for mocking\n        boolean success = performLogin();\n        \n        // Verify based on historical success rate\n        assertTrue(success || getRetryCount() > 0, \n            "Should succeed or retry based on history");\n    }\n    \n    private void prepareLoginHistory() {\n        ActionHistory history = loginState.getLoginButton().getActionHistory();\n        \n        // Add time-based patterns (morning = higher success)\n        LocalDateTime morning = LocalDateTime.now().withHour(9);\n        LocalDateTime evening = LocalDateTime.now().withHour(18);\n        \n        // Morning: 95% success\n        addTimeBasedRecords(history, morning, 0.95, 20);\n        \n        // Evening: 75% success (system load)\n        addTimeBasedRecords(history, evening, 0.75, 20);\n    }\n    \n    private void addTimeBasedRecords(ActionHistory history, \n                                     LocalDateTime time, \n                                     double successRate, \n                                     int count) {\n        for (int i = 0; i < count; i++) {\n            boolean success = Math.random() < successRate;\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder().build())\n                .setActionSuccess(success)\n                .setTimestamp(time.plusMinutes(i))\n                .setDuration(success ? 200 : 5000)\n                .build();\n            \n            history.addSnapshot(record);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"state-specific-actionhistory",children:"State-Specific ActionHistory"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Different success patterns for different states\npublic class StateAwareActionHistory {\n    \n    public void setupStateSpecificHistory(StateImage image) {\n        ActionHistory history = new ActionHistory();\n        \n        // Login state: high reliability\n        Long loginStateId = 1L;\n        addStateRecords(history, loginStateId, 0.95, 50);\n        \n        // Error state: lower reliability\n        Long errorStateId = 2L;\n        addStateRecords(history, errorStateId, 0.60, 50);\n        \n        image.setActionHistory(history);\n    }\n    \n    private void addStateRecords(ActionHistory history, \n                                 Long stateId, \n                                 double successRate, \n                                 int count) {\n        for (int i = 0; i < count; i++) {\n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder().build())\n                .setStateId(stateId)\n                .setActionSuccess(Math.random() < successRate)\n                .build();\n            \n            history.addSnapshot(record);\n        }\n    }\n    \n    // Query state-specific records\n    public Optional<ActionRecord> getStateSnapshot(ActionHistory history, \n                                                   Long stateId) {\n        PatternFindOptions config = new PatternFindOptions.Builder().build();\n        return history.getRandomSnapshot(config, stateId);\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"saving-and-loading-actionhistory-in-java-projects",children:"Saving and Loading ActionHistory in Java Projects"}),"\n",(0,o.jsxs)(e.p,{children:["The Brobot library now includes comprehensive ActionHistory utilities in the ",(0,o.jsx)(e.code,{children:"io.github.jspinak.brobot.tools.actionhistory"})," package:"]}),"\n",(0,o.jsx)(e.h4,{id:"built-in-library-classes",children:"Built-in Library Classes"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"ActionHistoryPersistence"})," - Core persistence functionality:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.actionhistory.ActionHistoryPersistence;\nimport io.github.jspinak.brobot.model.action.ActionHistory;\nimport io.github.jspinak.brobot.model.element.Pattern;\n\n@Autowired\nprivate ActionHistoryPersistence persistence;\n\n// Save ActionHistory to JSON\npersistence.saveToFile(history, "my-history.json");\n\n// Load ActionHistory from JSON\nActionHistory loaded = persistence.loadFromFile("my-history.json");\n\n// Save from Pattern with session metadata\npersistence.saveSessionHistory(pattern, "session-name");\n\n// Capture current execution\npersistence.captureCurrentExecution(result, pattern, config);\n\n// Batch load multiple histories\nMap<String, ActionHistory> histories = persistence.loadAllHistories();\n\n// Clean old history files\nint deleted = persistence.cleanOldHistories("histories", 30); // Keep 30 days\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"RecordingActionWrapper"})," - Automatic recording during execution:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.actionhistory.RecordingActionWrapper;\n\n@Autowired\nprivate RecordingActionWrapper recorder;\n\n// Start recording session\nrecorder.startSession("test-session");\n\n// Actions are automatically recorded\nActionResult result = recorder.find(stateImage);\nresult = recorder.click(stateImage);\n\n// End session and save all histories\nrecorder.endSession("test-session", patterns);\n\n// Get recording statistics\nMap<String, Integer> stats = recorder.getRecordingStatistics();\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"ActionHistoryExporter"})," - Export to various formats:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.actionhistory.ActionHistoryExporter;\n\n@Autowired\nprivate ActionHistoryExporter exporter;\n\n// Export to CSV\nexporter.exportToCSV(history, "report.csv");\n\n// Export to HTML with visualizations\nexporter.exportToHTML(history, "report.html");\n\n// Generate summary statistics\nMap<String, Object> summary = exporter.generateSummary(history);\n\n// Filter and export\nActionHistory filtered = exporter.filterHistory(history, \n    true, // successOnly\n    0,    // minDuration\n    5000  // maxDuration\n);\n\n// Batch export multiple histories\nexporter.batchExport(histories, "combined.html", ExportFormat.HTML);\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"PerformanceValidator"})," - Validate performance characteristics:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.actionhistory.PerformanceValidator;\n\n@Autowired\nprivate PerformanceValidator validator;\n\n// Validate with default thresholds\nValidationResult result = validator.validate(history);\nif (!result.isValid()) {\n    log.error("Performance issues: {}", result.getErrors());\n}\n\n// Custom validation config\nValidationConfig config = ValidationConfig.getDefault()\n    .withMinSuccessRate(90.0)\n    .withMaxAverageDuration(1000);\nValidationResult custom = validator.validate(history, config);\n\n// Compare baseline vs current\nComparisonResult comparison = validator.compare(baselineHistory, currentHistory);\nif (comparison.isRegression()) {\n    log.warn("Performance regression detected: {}", comparison.getIssues());\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"recording-actionhistory-during-live-automation",children:"Recording ActionHistory During Live Automation"}),"\n",(0,o.jsxs)(e.p,{children:["The library's ",(0,o.jsx)(e.code,{children:"RecordingActionWrapper"})," class automatically captures ActionHistory during automation runs. Use it in your transitions and actions:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Use in transitions\n@Transition(from = HomeState.class, to = WorldState.class)\n@RequiredArgsConstructor\npublic class RecordedTransition {\n    \n    @Autowired\n    private RecordingActionWrapper recorder;\n    private final HomeState homeState;\n    \n    public boolean execute() {\n        // Start recording session\n        recorder.startSession("transition-session");\n        \n        // All actions are automatically recorded\n        ActionResult result = recorder.click(homeState.getButton());\n        \n        // End session and save\n        recorder.endSession("transition-session", \n            Arrays.asList(homeState.getButton().getPatterns()));\n        \n        return result.isSuccess();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"exportimport-between-projects",children:"Export/Import Between Projects"}),"\n",(0,o.jsxs)(e.p,{children:["Use the library's ",(0,o.jsx)(e.code,{children:"ActionHistoryExporter"})," for sharing histories between projects:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Autowired\nprivate ActionHistoryExporter exporter;\n@Autowired\nprivate ActionHistoryPersistence persistence;\n\n// Export multiple histories for sharing\npublic void exportForProject(String projectName) throws IOException {\n    // Load all histories from the project\n    Map<String, ActionHistory> histories = persistence.loadAllHistories();\n    \n    // Batch export with metadata\n    exporter.batchExport(histories, \n        String.format("%s-export.html", projectName),\n        ActionHistoryExporter.ExportFormat.HTML);\n    \n    // Also export as CSV for analysis\n    exporter.batchExport(histories,\n        String.format("%s-export.csv", projectName),\n        ActionHistoryExporter.ExportFormat.CSV);\n    \n    // Generate summary report\n    for (Map.Entry<String, ActionHistory> entry : histories.entrySet()) {\n        Map<String, Object> summary = exporter.generateSummary(entry.getValue());\n        log.info("History {}: {} actions, {:.1f}% success rate", \n            entry.getKey(), \n            summary.get("totalActions"),\n            summary.get("successRate"));\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"performance-testing-with-actionhistory",children:"Performance Testing with ActionHistory"}),"\n",(0,o.jsxs)(e.p,{children:["Use the library's ",(0,o.jsx)(e.code,{children:"PerformanceValidator"})," for comprehensive performance testing:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Autowired\nprivate PerformanceValidator validator;\n\n@Test\npublic void validateActionPerformance() {\n    ActionHistory performanceHistory = loadPerformanceHistory();\n    \n    // Validate with custom thresholds\n    PerformanceValidator.ValidationConfig config = \n        PerformanceValidator.ValidationConfig.getDefault()\n            .withMinSuccessRate(85.0)\n            .withMaxAverageDuration(1500)\n            .withMaxDuration(3000);\n    \n    PerformanceValidator.ValidationResult result = \n        validator.validate(performanceHistory, config);\n    \n    // Assert no performance issues\n    assertTrue(result.isValid(), \n        "Performance issues detected: " + result.getErrors());\n    \n    // Check for anomalies\n    assertEquals(0, result.getAnomalyCount(), \n        "Anomalies detected: " + result.getAnomalies());\n    \n    // Analyze timing patterns\n        DoubleSummaryStatistics stats = performanceHistory.getSnapshots().stream()\n            .filter(ActionRecord::isActionSuccess)\n            .mapToDouble(ActionRecord::getDuration)\n            .summaryStatistics();\n        \n        // Assert performance requirements\n        assertTrue(stats.getAverage() < 500, \n            "Average response time should be under 500ms");\n        assertTrue(stats.getMax() < 2000, \n            "Max response time should be under 2s");\n        \n        // Check success rate\n        double successRate = performanceHistory.getTimesFound() * 100.0 / \n                           performanceHistory.getTimesSearched();\n        assertTrue(successRate > 85, \n            "Success rate should be above 85%");\n    }\n    \n    private ActionHistory createPerformanceHistory() {\n        ActionHistory history = new ActionHistory();\n        Random random = new Random(42);  // Deterministic\n        \n        // Simulate performance distribution\n        for (int i = 0; i < 1000; i++) {\n            // 90% fast responses, 10% slow\n            boolean fast = random.nextDouble() < 0.9;\n            long duration = fast ? \n                100 + random.nextInt(400) :  // 100-500ms\n                1000 + random.nextInt(4000); // 1-5s\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder().build())\n                .setDuration(duration)\n                .setActionSuccess(duration < 2000)  // Timeout at 2s\n                .build();\n            \n            history.addSnapshot(record);\n        }\n        \n        return history;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"best-practices-for-actionhistory",children:"Best Practices for ActionHistory"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Realistic Data Generation"}),": Create patterns that reflect real-world behavior"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Deterministic Testing"}),": Use seeded random for reproducible tests"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"State-Aware Patterns"}),": Different states should have different success patterns"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Time-Based Variations"}),": Model performance changes throughout the day"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Gradual Degradation"}),": Simulate system degradation over time"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Regular Persistence"}),": Save histories periodically during long automation runs"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Version Control"}),": Include history JSON files in test resources for regression testing"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"actionhistory-utility-classes",children:"ActionHistory Utility Classes"}),"\n",(0,o.jsxs)(e.p,{children:["The Brobot library now includes comprehensive ActionHistory utilities in the ",(0,o.jsx)(e.code,{children:"io.github.jspinak.brobot.tools.actionhistory"})," package:"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"ActionHistoryPersistence"})," - Standardized save/load operations with JSON serialization"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"RecordingActionWrapper"})," - Automatic recording during execution with session management"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"ActionHistoryExporter"})," - Export to CSV/HTML formats with summary statistics"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"PerformanceValidator"})," - Performance analysis, anomaly detection, and regression testing"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"These classes provide production-ready functionality for capturing, persisting, and analyzing automation performance."}),"\n",(0,o.jsx)(e.h3,{id:"migration-from-legacy-actionoptions",children:"Migration from Legacy ActionOptions"}),"\n",(0,o.jsxs)(e.p,{children:["If you have existing code using the deprecated ",(0,o.jsx)(e.code,{children:"ActionOptions"})," API:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Legacy (deprecated)\nActionRecord legacyRecord = new ActionRecord.Builder()\n    .setActionOptions(new ActionOptions.Builder()\n        .setAction(ActionOptions.Action.FIND)\n        .setFind(ActionOptions.Find.BEST)\n        .build())\n    .build();\n\n// Modern (use this)\nActionRecord modernRecord = new ActionRecord.Builder()\n    .setActionConfig(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .build())\n    .build();\n"})}),"\n",(0,o.jsxs)(e.p,{children:["For detailed migration instructions, see the ",(0,o.jsx)(e.a,{href:"testing/actionhistory-integration-testing",children:"ActionHistory Migration Guide"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"screen-adaptive-region-building",children:"Screen-Adaptive Region Building"}),"\n",(0,o.jsxs)(e.p,{children:["The Brobot library now includes enhanced ",(0,o.jsx)(e.code,{children:"RegionBuilder"})," with Position integration for creating screen-size aware regions that adapt to different resolutions."]}),"\n",(0,o.jsx)(e.h3,{id:"position-based-region-building",children:"Position-Based Region Building"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"RegionBuilder"})," class now integrates with ",(0,o.jsx)(e.code,{children:"Position"})," and ",(0,o.jsx)(e.code,{children:"Positions.Name"})," for intuitive region placement:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"import static io.github.jspinak.brobot.model.element.Positions.Name.*;\n\n// Position a region at 70% width, 30% height of screen\nRegion customPos = Region.builder()\n    .withSize(200, 150)\n    .withPosition(new Position(0.7, 0.3))\n    .build();\n\n// Use named positions for quick placement\nRegion topRight = Region.builder()\n    .withSize(300, 200)\n    .withPosition(TOPRIGHT)\n    .build();\n\n// Position relative to another region\nRegion tooltip = Region.builder()\n    .withSize(200, 50)\n    .positionRelativeTo(dialogRegion, TOPMIDDLE)\n    .adjustY(-10)  // 10px gap above\n    .build();\n\n// Create centered dialog with margins\nRegion dialog = Region.builder()\n    .withScreenPercentageSize(0.6, 0.4)  // 60% width, 40% height\n    .centerOnScreen()\n    .build();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"advanced-positioning-features",children:"Advanced Positioning Features"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Custom anchor points\nRegion customAnchor = Region.builder()\n    .withSize(100, 100)\n    .withAnchor(new Position(0.75, 0.25))  // Custom anchor at 75% width, 25% height\n    .build();\n\n// Named anchor helpers\nRegion bottomCorner = Region.builder()\n    .withSize(120, 40)\n    .bottomRight()\n    .adjustX(-20)  // 20px margin from edges\n    .adjustY(-20)\n    .build();\n\n// Position chains for complex layouts\nRegion sidebar = Region.builder()\n    .withScreenPercentageSize(0.2, 1.0)  // 20% width, full height\n    .leftCenter()\n    .build();\n\nRegion content = Region.builder()\n    .positionRelativeTo(sidebar, MIDDLERIGHT)\n    .withScreenPercentageSize(0.8, 1.0)\n    .build();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"precise-positioning-and-flexibility",children:"Precise Positioning and Flexibility"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Direct pixel coordinates for precise placement\nRegion button = Region.builder()\n    .withPosition(1800, 1000)  // Exact pixel position\n    .withSize(100, 50)  // Exact size in pixels\n    .build();\n\n// Percentage-based regions for flexibility\nRegion searchArea = Region.builder()\n    .withScreenPercentage(0.1, 0.1, 0.8, 0.3)  // 10% margins, 80% width, 30% height\n    .build();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"integration-with-position-class",children:"Integration with Position Class"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"Position"})," class provides percentage-based coordinates (0.0 to 1.0) that work seamlessly with ",(0,o.jsx)(e.code,{children:"RegionBuilder"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Positions.Name enum"}),": Predefined positions like ",(0,o.jsx)(e.code,{children:"TOPLEFT"}),", ",(0,o.jsx)(e.code,{children:"MIDDLEMIDDLE"}),", ",(0,o.jsx)(e.code,{children:"BOTTOMRIGHT"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Custom positions"}),": Any percentage-based position using ",(0,o.jsx)(e.code,{children:"new Position(x, y)"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Position math"}),": Add offsets and scale positions for dynamic layouts"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"This integration makes it easy to create regions that adapt to different screen sizes while maintaining their relative positions and proportions."}),"\n",(0,o.jsx)(e.h2,{id:"logging-and-diagnostics",children:"Logging and Diagnostics"}),"\n",(0,o.jsx)(e.h3,{id:"integrated-logging-system",children:"Integrated Logging System"}),"\n",(0,o.jsx)(e.p,{children:"Brobot v1.1.0+ includes a unified logging system that combines multiple logging approaches for comprehensive diagnostics:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"# application.yml - Configure logging levels\nbrobot:\n  logging:\n    verbosity: VERBOSE        # QUIET, NORMAL, or VERBOSE\n    console:\n      capture-enabled: false  # Prevent duplicate output\n      \n  console:\n    actions:\n      enabled: true\n      level: VERBOSE         # Maximum diagnostic information\n      report-highlight: true\n      show-search-regions: true\n\n# Component logging levels\nlogging:\n  level:\n    io.github.jspinak.brobot: DEBUG\n    io.github.jspinak.brobot.logging.DiagnosticLogger: DEBUG\n"})}),"\n",(0,o.jsx)(e.h3,{id:"diagnosticlogger-component",children:"DiagnosticLogger Component"}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"DiagnosticLogger"})," provides specialized pattern matching diagnostics that integrate with both ",(0,o.jsx)(e.code,{children:"ConsoleReporter"})," and ",(0,o.jsx)(e.code,{children:"BrobotLogger"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@Autowired\nprivate DiagnosticLogger diagnosticLogger;\n\n// Automatic logging in ScenePatternMatcher\n// You get output like:\n// [SEARCH] Pattern: 'login-button' (64x32) | Similarity: 0.70 | Scene: 1920x1080\n// [FOUND #1] Score: 0.852 at (450, 320)\n// [RESULT] 2 matches for 'login-button' | Best score: 0.852\n"})}),"\n",(0,o.jsx)(e.h3,{id:"verbosity-levels",children:"Verbosity Levels"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"QUIET Mode"}),": Minimal output"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Only \u2713/\u2717 symbols for success/failure"}),"\n",(0,o.jsx)(e.li,{children:"No detailed diagnostics"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"NORMAL Mode"}),": Concise diagnostics"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"[SEARCH], [RESULT], [FOUND] prefixes"}),"\n",(0,o.jsx)(e.li,{children:"Basic match information"}),"\n",(0,o.jsx)(e.li,{children:"Image analysis for failures"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"VERBOSE Mode"}),": Maximum information"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"All NORMAL mode output"}),"\n",(0,o.jsx)(e.li,{children:"Pattern caching information"}),"\n",(0,o.jsx)(e.li,{children:"Detailed metadata via BrobotLogger"}),"\n",(0,o.jsx)(e.li,{children:"Similarity threshold analysis"}),"\n",(0,o.jsx)(e.li,{children:"Performance metrics"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"failed-match-analysis",children:"Failed Match Analysis"}),"\n",(0,o.jsx)(e.p,{children:"When patterns aren't found, the system provides comprehensive diagnostics:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"[RESULT] NO MATCHES for 'submit-button'\n  [IMAGE ANALYSIS]\n    Pattern: 128x48 type=RGB bytes=24KB\n    Pattern content: 2.3% black, 45.6% white, avg RGB=(127,189,210)\n    Scene: 1920x1080 type=RGB bytes=8MB\n    Scene content: 95.2% black, 0.1% white, avg RGB=(5,5,5)\n    WARNING: Scene is mostly BLACK - possible capture failure!\n  [SIMILARITY ANALYSIS]\n    Threshold 0.9: No match\n    Threshold 0.8: No match\n    Threshold 0.7: No match\n    Threshold 0.6: FOUND with score 0.624\n"})}),"\n",(0,o.jsx)(e.p,{children:"This immediately identifies:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Screen capture failures (black/white screens)"}),"\n",(0,o.jsx)(e.li,{children:"Similarity threshold issues"}),"\n",(0,o.jsx)(e.li,{children:"Image content problems"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"pattern-caching",children:"Pattern Caching"}),"\n",(0,o.jsx)(e.p,{children:"The system now caches SikuliX Pattern objects to eliminate redundant creation:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Pattern.java includes caching\n@JsonIgnore\nprivate transient org.sikuli.script.Pattern cachedSikuliPattern = null;\n\n// In VERBOSE mode, you'll see:\n// [Pattern.sikuli()] Using CACHED SikuliX Pattern for: login-button\n// [Pattern.sikuli()] Creating NEW SikuliX Pattern for: login-button\n"})}),"\n",(0,o.jsx)(e.h3,{id:"debug-image-saving",children:"Debug Image Saving"}),"\n",(0,o.jsx)(e.p,{children:'For patterns with "prompt" in the name, debug images are automatically saved:'}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"[DEBUG] Saved pattern image to: debug_images/pattern_prompt-button.png\n[DEBUG] Saved scene image to: debug_images/scene_current.png\n"})}),"\n",(0,o.jsx)(e.h3,{id:"using-diagnosticlogger-in-custom-code",children:"Using DiagnosticLogger in Custom Code"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@Component\npublic class MyAutomation {\n    @Autowired(required = false)\n    private DiagnosticLogger diagnosticLogger;\n    \n    public void debugPatternMatching(Pattern pattern, Scene scene) {\n        if (diagnosticLogger != null) {\n            // Log search attempt\n            diagnosticLogger.logPatternSearch(pattern, scene, 0.7);\n            \n            // Log results\n            diagnosticLogger.logPatternResult(pattern, matchCount, bestScore);\n            \n            // Analyze failures\n            diagnosticLogger.logImageAnalysis(patternImg, sceneImg, pattern.getName());\n            \n            // Test similarity thresholds\n            double[] thresholds = {0.9, 0.8, 0.7, 0.6, 0.5};\n            diagnosticLogger.logSimilarityAnalysis(pattern.getName(), \n                thresholds, foundThreshold, foundScore);\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"best-practices-for-logging",children:"Best Practices for Logging"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Development"}),": Use VERBOSE for maximum information"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Testing"}),": Use NORMAL for concise but useful output"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Production"}),": Use QUIET to minimize overhead"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Debugging Pattern Matching"}),": Always use VERBOSE to see:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Pattern caching behavior"}),"\n",(0,o.jsx)(e.li,{children:"Similarity scores for all matches"}),"\n",(0,o.jsx)(e.li,{children:"Image content analysis"}),"\n",(0,o.jsx)(e.li,{children:"Progressive threshold testing"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"unified-logging-system",children:"Unified Logging System"}),"\n",(0,o.jsx)(e.p,{children:"For complete documentation on the unified logging system, see:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/guides/unified-logging-system",children:"Unified Logging System Guide"})}),"\n",(0,o.jsx)(e.li,{children:"Covers BrobotLogger, ConsoleReporter, and ActionLogger integration"}),"\n",(0,o.jsx)(e.li,{children:"Session management and context propagation"}),"\n",(0,o.jsx)(e.li,{children:"Performance tracking and metrics"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(e.p,{children:"Modern Brobot development emphasizes:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Clean, readable code with minimal boilerplate"}),"\n",(0,o.jsx)(e.li,{children:"Type safety through StateEnum and proper generics"}),"\n",(0,o.jsx)(e.li,{children:"Dependency injection with Spring Boot"}),"\n",(0,o.jsx)(e.li,{children:"Fluent APIs and method chaining"}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"ConditionalActionChain for elegant UI interactions with proper sequential composition"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"ActionHistory for probabilistic mock testing - NOW WITH BUILDER INTEGRATION (v1.0.0+)"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Screen-adaptive RegionBuilder with Position integration for resolution-independent automation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.strong,{children:"Integrated logging with DiagnosticLogger for comprehensive pattern matching diagnostics"})}),"\n",(0,o.jsx)(e.li,{children:"Direct access to state components"}),"\n",(0,o.jsx)(e.li,{children:"Automatic initial state verification"}),"\n",(0,o.jsx)(e.li,{children:"Configuration-driven behavior"}),"\n",(0,o.jsx)(e.li,{children:"Advanced color and motion detection capabilities"}),"\n",(0,o.jsx)(e.li,{children:"Flexible action chaining with nested/confirmed strategies"}),"\n",(0,o.jsx)(e.li,{children:"Comprehensive testing with historical action data"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"quick-reference-new-actionhistory-builder-methods-v100",children:"Quick Reference: New ActionHistory Builder Methods (v1.0.0+)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// In StateImage.Builder - no separate initialization needed!\nStateImage image = new StateImage.Builder()\n    .addPatterns("pattern.png")\n    .withActionHistory(MockActionHistoryFactory.reliableButton(region))  // Factory method\n    .build();\n\n// Available factory methods:\nMockActionHistoryFactory.reliableButton(region)      // 98% success, quick response\nMockActionHistoryFactory.dynamicTextField(region)    // 85% success, variable content\nMockActionHistoryFactory.loadingIndicator(region)   // 60% success, appears/disappears\nMockActionHistoryFactory.menuItem(region)           // 90% success when visible\nMockActionHistoryFactory.modalDialog(region)        // 100% success when present\nMockActionHistoryFactory.lowerLeftElement(w, h)     // Common position helper\nMockActionHistoryFactory.forScreenPosition(pos, w, h) // Any screen position\n\n// Custom builder configuration:\n.withActionHistory(MockActionHistoryBuilder.builder()\n    .successRate(0.95).matchRegion(region).recordCount(20).build().build())\n\n// Presets:\nMockActionHistoryBuilder.Presets.alwaysFound(region)  // 100% success\nMockActionHistoryBuilder.Presets.reliable(region)     // 95% success\nMockActionHistoryBuilder.Presets.flaky(region)       // 70% success\nMockActionHistoryBuilder.Presets.neverFound()         // 0% success\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Remember"}),": ActionHistory is REQUIRED for mock mode finds to work!"]}),"\n",(0,o.jsx)(e.p,{children:"Follow these patterns for maintainable, professional Brobot applications."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);
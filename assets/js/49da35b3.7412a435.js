"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1502],{299:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"logging/unified-logging-system","title":"Unified Logging System","description":"The Brobot Unified Logging System consolidates all logging functionality into a single, cohesive API that simplifies developer experience while providing powerful capabilities for debugging, monitoring, and analysis.","source":"@site/docs/07-logging/unified-logging-system.md","sourceDirName":"07-logging","slug":"/logging/unified-logging-system","permalink":"/brobot/docs/logging/unified-logging-system","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/07-logging/unified-logging-system.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"Brobot Logging Documentation","permalink":"/brobot/docs/logging/"},"next":{"title":"Logging Quick Reference","permalink":"/brobot/docs/logging/logging-quick-reference"}}');var o=i(74848),s=i(28453);const r={sidebar_position:5},l="Unified Logging System",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Session Scoped Logging",id:"session-scoped-logging",level:3},{value:"Performance Tracking",id:"performance-tracking",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Fluent Builder API",id:"fluent-builder-api",level:3},{value:"Custom Metadata",id:"custom-metadata",level:3},{value:"Error Handling with Screenshots",id:"error-handling-with-screenshots",level:3},{value:"State Transition Logging",id:"state-transition-logging",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Application Properties",id:"application-properties",level:3},{value:"Programmatic Configuration",id:"programmatic-configuration",level:3},{value:"Context Management",id:"context-management",level:2},{value:"Thread-Local Context",id:"thread-local-context",level:3},{value:"Async Operations",id:"async-operations",level:3},{value:"Diagnostic Logging",id:"diagnostic-logging",level:2},{value:"DiagnosticLogger",id:"diagnosticlogger",level:3},{value:"Verbosity Levels",id:"verbosity-levels",level:3},{value:"Pattern Matching Diagnostics",id:"pattern-matching-diagnostics",level:3},{value:"Failed Match Analysis",id:"failed-match-analysis",level:3},{value:"Output Formats",id:"output-formats",level:2},{value:"Console Output",id:"console-output",level:3},{value:"Structured Output (JSON)",id:"structured-output-json",level:3},{value:"Integration with Existing Systems",id:"integration-with-existing-systems",level:2},{value:"SLF4J Integration",id:"slf4j-integration",level:3},{value:"ActionLogger Compatibility",id:"actionlogger-compatibility",level:3},{value:"ConsoleReporter Integration",id:"consolereporter-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Session Scopes",id:"1-use-session-scopes",level:3},{value:"2. Log at Appropriate Levels",id:"2-log-at-appropriate-levels",level:3},{value:"3. Include Relevant Context",id:"3-include-relevant-context",level:3},{value:"4. Use Timers for Performance Metrics",id:"4-use-timers-for-performance-metrics",level:3},{value:"5. Leverage Metadata for Debugging",id:"5-leverage-metadata-for-debugging",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From ConsoleReporter",id:"from-consolereporter",level:3},{value:"From ActionLogger",id:"from-actionlogger",level:3},{value:"From SLF4J",id:"from-slf4j",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Action Logging with Console Output and Visual Feedback",id:"action-logging-with-console-output-and-visual-feedback",level:2},{value:"Console Action Reporting",id:"console-action-reporting",level:3},{value:"Visual Highlighting",id:"visual-highlighting",level:3},{value:"GUI Access Detection",id:"gui-access-detection",level:3},{value:"Configuration",id:"configuration-1",level:3},{value:"Using Enhanced Action Logging",id:"using-enhanced-action-logging",level:3},{value:"Profile-Based Configuration",id:"profile-based-configuration",level:3},{value:"Development Profile",id:"development-profile",level:4},{value:"CI/CD Profile",id:"cicd-profile",level:4},{value:"Production Profile",id:"production-profile",level:4},{value:"Visual Feedback Options",id:"visual-feedback-options",level:3},{value:"Integration with Desktop Runner",id:"integration-with-desktop-runner",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Examples Repository",id:"examples-repository",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"unified-logging-system",children:"Unified Logging System"})}),"\n",(0,o.jsx)(n.p,{children:"The Brobot Unified Logging System consolidates all logging functionality into a single, cohesive API that simplifies developer experience while providing powerful capabilities for debugging, monitoring, and analysis."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"Previously, Brobot used three separate logging systems:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"SLF4J"})," - Traditional application logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ActionLogger"})," - Structured automation event logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ConsoleReporter"})," - Real-time console feedback"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The new unified system combines these into a single ",(0,o.jsx)(n.code,{children:"BrobotLogger"})," facade that automatically handles routing to appropriate backends while providing a consistent API."]}),"\n",(0,o.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Single Entry Point"})," - One logger for all logging needs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Automatic Context"})," - Session, state, and action context propagation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fluent API"})," - Simple methods for common cases, builder pattern for complex scenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance Tracking"})," - Built-in timers and metrics"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Backward Compatible"})," - Works with existing logging infrastructure"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Thread Safe"})," - Thread-local context management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Modular Formatting"})," - Configurable output formats (QUIET, NORMAL, VERBOSE) via the ",(0,o.jsx)(n.a,{href:"../architecture/modular-logging-system.md",children:"Modular Logging System"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,o.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Component\npublic class LoginAutomation {\n    @Autowired\n    private BrobotLogger logger;\n    \n    public void performLogin(String username, String password) {\n        // Simple action logging\n        logger.action("CLICK", loginButton);\n        \n        // Log with result\n        ActionResult result = click(loginButton);\n        logger.action("CLICK", loginButton, result);\n        \n        // State transition\n        logger.transition(loginState, dashboardState);\n        \n        // Observation\n        logger.observation("Login form displayed correctly");\n        \n        // Error logging\n        logger.error("Failed to find login button", exception);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"session-scoped-logging",children:"Session Scoped Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// All logs within the session automatically include session ID\ntry (var session = logger.session("test-session-123")) {\n    logger.action("START", testCase);\n    \n    // Perform test steps...\n    logger.transition(state1, state2);\n    \n    logger.observation("Test completed successfully");\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"performance-tracking",children:"Performance Tracking"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Using operation scope\ntry (var operation = logger.operation("ComplexOperation")) {\n    performComplexTask();\n    // Duration automatically logged when scope closes\n}\n\n// Using explicit timer\ntry (var timer = logger.startTimer("DataProcessing")) {\n    processData();\n    // Timer stops and logs duration when closed\n}\n\n// Manual timer control\nBrobotLogger.Timer timer = logger.startTimer("CustomTimer");\ndoWork();\nlong duration = timer.stop(); // Returns duration in ms\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,o.jsx)(n.h3,{id:"fluent-builder-api",children:"Fluent Builder API"}),"\n",(0,o.jsx)(n.p,{children:"The builder API provides fine-grained control for complex logging scenarios:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'logger.log()\n    .type(LogEvent.Type.ACTION)\n    .level(LogEvent.Level.INFO)\n    .action("CLICK")\n    .target(submitButton)\n    .result(actionResult)\n    .success(true)\n    .duration(250)\n    .screenshot("/tmp/screenshot.png")\n    .metadata("retryCount", 3)\n    .metadata("elementVisible", true)\n    .performance("responseTime", 150)\n    .color(AnsiColor.GREEN)\n    .log();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-metadata",children:"Custom Metadata"}),"\n",(0,o.jsx)(n.p,{children:"Add contextual information that will be included in all subsequent logs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Add metadata to context\nlogger.getContext().addMetadata("testSuite", "regression");\nlogger.getContext().addMetadata("environment", "staging");\n\n// All subsequent logs will include this metadata\nlogger.action("CLICK", button); // Includes testSuite and environment\n'})}),"\n",(0,o.jsx)(n.h3,{id:"error-handling-with-screenshots",children:"Error Handling with Screenshots"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'try {\n    clickElement(targetElement);\n} catch (ElementNotFoundException e) {\n    String screenshotPath = captureScreenshot();\n    \n    logger.log()\n        .error(e)\n        .message("Element not found after retries")\n        .screenshot(screenshotPath)\n        .metadata("lastKnownLocation", element.getLocation())\n        .log();\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"state-transition-logging",children:"State Transition Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Simple transition\nlogger.transition(currentState, targetState);\n\n// Transition with details\nlogger.transition(currentState, targetState, success, duration);\n\n// Complex transition with builder\nlogger.log()\n    .transition(currentState.getName(), targetState.getName())\n    .success(false)\n    .duration(5000)\n    .message("Transition timeout - retrying")\n    .metadata("attemptNumber", 2)\n    .log();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,o.jsxs)(n.p,{children:["Configure the logging system through ",(0,o.jsx)(n.code,{children:"application.yml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  logging:\n    console:\n      level: HIGH          # NONE, LOW, HIGH\n      colors: true         # Enable ANSI colors\n      format: compact      # compact or detailed\n    structured:\n      enabled: true        # Enable structured logging\n      format: json         # json, xml, csv\n      sink: file          # file, database, cloud\n      file:\n        path: logs/brobot-structured.json\n        rotation: daily    # daily, size, none\n        max-size: 100MB\n    performance:\n      enabled: true\n      metrics-export: prometheus\n    context:\n      include-thread-name: true\n      include-timestamp: true\n      include-hostname: false\n"})}),"\n",(0,o.jsx)(n.h3,{id:"programmatic-configuration",children:"Programmatic Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Configure console output\nlogger.setConsoleLevel(ConsoleReporter.OutputLevel.LOW);\n\n// Enable/disable structured logging\nlogger.enableStructuredLogging(true);\n\n// Custom configuration\nBrobotLogger.configure()\n    .consoleLevel(OutputLevel.HIGH)\n    .enableColors(true)\n    .structuredLogging(true)\n    .addSink(new CustomLogSink())\n    .apply();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"context-management",children:"Context Management"}),"\n",(0,o.jsx)(n.h3,{id:"thread-local-context",children:"Thread-Local Context"}),"\n",(0,o.jsx)(n.p,{children:"The logging context is thread-local, ensuring isolation between concurrent executions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Component\npublic class LoggingContext {\n    // Set context information\n    void setSessionId(String sessionId);\n    void setCurrentState(State state);\n    void setCurrentAction(String action);\n    \n    // Hierarchical operations\n    void pushOperation(String operationName);\n    String popOperation();\n    \n    // Custom metadata\n    void addMetadata(String key, Object value);\n    Map<String, Object> getAllMetadata();\n    \n    // Context snapshots for async operations\n    Context snapshot();\n    void restore(Context snapshot);\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"async-operations",children:"Async Operations"}),"\n",(0,o.jsx)(n.p,{children:"For asynchronous operations, capture and restore context:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Capture context before async operation\nLoggingContext.Context snapshot = logger.getContext().snapshot();\n\nCompletableFuture.runAsync(() -> {\n    // Restore context in async thread\n    logger.getContext().restore(snapshot);\n    \n    logger.action("ASYNC_PROCESS", dataObject);\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"diagnostic-logging",children:"Diagnostic Logging"}),"\n",(0,o.jsx)(n.h3,{id:"diagnosticlogger",children:"DiagnosticLogger"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"DiagnosticLogger"})," component provides specialized logging for pattern matching and image analysis, with full verbosity awareness:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Autowired\nprivate DiagnosticLogger diagnosticLogger;\n\n// Pattern search logging\ndiagnosticLogger.logPatternSearch(pattern, scene, similarity);\n\n// Match result logging\ndiagnosticLogger.logPatternResult(pattern, matchCount, bestScore);\n\n// Image analysis for failed matches\ndiagnosticLogger.logImageAnalysis(patternImg, sceneImg, patternName);\n\n// Similarity threshold analysis\ndiagnosticLogger.logSimilarityAnalysis(patternName, thresholds, foundThreshold, foundScore);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"verbosity-levels",children:"Verbosity Levels"}),"\n",(0,o.jsx)(n.p,{children:"The diagnostic logger respects the configured verbosity level:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"QUIET"}),": Minimal output (\u2713/\u2717 symbols only)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NORMAL"}),": Concise diagnostic information with [SEARCH], [RESULT], [IMAGE ANALYSIS] tags"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"VERBOSE"}),": Full details including all matches, metadata, caching information, and performance metrics"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"pattern-matching-diagnostics",children:"Pattern Matching Diagnostics"}),"\n",(0,o.jsx)(n.p,{children:"In VERBOSE mode, you'll see comprehensive pattern matching information:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[SEARCH] Pattern: 'login-button' (64x32) | Similarity: 0.70 | Scene: 1920x1080\n  [Pattern.sikuli()] Using CACHED SikuliX Pattern for: login-button\n  [FOUND #1] Score: 0.852 at (450, 320)\n  [FOUND #2] Score: 0.743 at (450, 520)\n  [RESULT] 2 matches for 'login-button' | Best score: 0.852\n"})}),"\n",(0,o.jsx)(n.h3,{id:"failed-match-analysis",children:"Failed Match Analysis"}),"\n",(0,o.jsx)(n.p,{children:"When patterns aren't found, detailed diagnostics help identify the issue:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[RESULT] NO MATCHES for 'submit-button'\n  [IMAGE ANALYSIS]\n    Pattern: 128x48 type=RGB bytes=24KB\n    Pattern content: 2.3% black, 45.6% white, avg RGB=(127,189,210)\n    Scene: 1920x1080 type=RGB bytes=8MB\n    Scene content: 95.2% black, 0.1% white, avg RGB=(5,5,5)\n    WARNING: Scene is mostly BLACK - possible capture failure!\n  [SIMILARITY ANALYSIS]\n    Threshold 0.9: No match\n    Threshold 0.8: No match\n    Threshold 0.7: No match\n    Threshold 0.6: FOUND with score 0.624\n"})}),"\n",(0,o.jsx)(n.p,{children:"This immediately shows that:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"The scene is mostly black (screen capture failure)"}),"\n",(0,o.jsx)(n.li,{children:"The pattern would match at 0.6 similarity but not at the configured 0.7"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"output-formats",children:"Output Formats"}),"\n",(0,o.jsx)(n.h3,{id:"console-output",children:"Console Output"}),"\n",(0,o.jsx)(n.p,{children:"The console output is formatted for readability with optional ANSI colors:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[session-123] CLICK \u2192 LoginButton (success) [250ms]\n[session-123] STATE: Login \u2192 Dashboard [1.5s]\n[session-123] OBSERVE: Form validation passed\n[session-123] ERROR: Element not found - ElementNotFoundException\n[session-123] PERF: Operation completed: DataLoad (3.2s)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"structured-output-json",children:"Structured Output (JSON)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": 1704067200000,\n  "sessionId": "session-123",\n  "type": "ACTION",\n  "level": "INFO",\n  "action": "CLICK",\n  "target": "LoginButton",\n  "success": true,\n  "duration": 250,\n  "stateId": "LoginState",\n  "metadata": {\n    "matchCount": 1,\n    "screenshot": "/tmp/screenshot.png"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-existing-systems",children:"Integration with Existing Systems"}),"\n",(0,o.jsx)(n.h3,{id:"slf4j-integration",children:"SLF4J Integration"}),"\n",(0,o.jsx)(n.p,{children:"All logs are automatically routed to SLF4J with appropriate levels:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// BrobotLogger call\nlogger.error("Critical failure", exception);\n\n// Automatically logs to SLF4J as:\n// ERROR [BrobotLogger] [session-123] Critical failure\n'})}),"\n",(0,o.jsx)(n.h3,{id:"actionlogger-compatibility",children:"ActionLogger Compatibility"}),"\n",(0,o.jsx)(n.p,{children:"The unified logger maintains compatibility with the existing ActionLogger interface:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Actions are automatically logged to ActionLogger\nlogger.action("CLICK", button, result);\n// Routes to: actionLogger.logAction(sessionId, result, objectCollection)\n\n// State transitions\nlogger.transition(from, to, success, duration);\n// Routes to: actionLogger.logStateTransition(...)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"consolereporter-integration",children:"ConsoleReporter Integration"}),"\n",(0,o.jsx)(n.p,{children:"Console output respects existing ConsoleReporter settings:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Set global console level\nConsoleReporter.outputLevel = OutputLevel.LOW;\n\n// Or through unified logger\nlogger.setConsoleLevel(OutputLevel.HIGH);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-use-session-scopes",children:"1. Use Session Scopes"}),"\n",(0,o.jsx)(n.p,{children:"Always wrap test executions in session scopes for proper correlation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Test\npublic void testUserFlow() {\n    try (var session = logger.session(generateSessionId())) {\n        // All logs in this block are correlated\n        performUserFlow();\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-log-at-appropriate-levels",children:"2. Log at Appropriate Levels"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Actions"}),": User interactions (clicks, types, etc.)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transitions"}),": State changes in the application"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Observations"}),": Notable conditions or validations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": Timing-sensitive operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Errors"}),": Failures and exceptions"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-include-relevant-context",children:"3. Include Relevant Context"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'logger.log()\n    .action("SUBMIT_FORM")\n    .target(form)\n    .metadata("formData", sanitizeFormData(data))\n    .metadata("validationErrors", errors)\n    .screenshot(captureOnError ? screenshotPath : null)\n    .log();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-use-timers-for-performance-metrics",children:"4. Use Timers for Performance Metrics"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'try (var timer = logger.startTimer("DatabaseQuery")) {\n    return executeQuery(sql);\n} // Timer automatically logs duration\n'})}),"\n",(0,o.jsx)(n.h3,{id:"5-leverage-metadata-for-debugging",children:"5. Leverage Metadata for Debugging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Add test context\nlogger.getContext().addMetadata("testCase", testName);\nlogger.getContext().addMetadata("dataSet", dataSetId);\n\n// Add environment context\nlogger.getContext().addMetadata("browser", getBrowserInfo());\nlogger.getContext().addMetadata("viewport", getViewportSize());\n'})}),"\n",(0,o.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,o.jsx)(n.h3,{id:"from-consolereporter",children:"From ConsoleReporter"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Old way\nConsoleReporter.print(match, stateObject, actionOptions);\nConsoleReporter.println(OutputLevel.HIGH, "Processing complete");\n\n// New way\nlogger.action(actionOptions.getAction().toString(), stateObject);\nlogger.observation("Processing complete");\n'})}),"\n",(0,o.jsx)(n.h3,{id:"from-actionlogger",children:"From ActionLogger"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Old way\nactionLogger.logAction(sessionId, result, objectCollection);\nactionLogger.logStateTransition(sessionId, from, to, before, success, time);\n\n// New way\nlogger.action("CLICK", stateObject, result);\nlogger.transition(fromState, toState, success, time);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"from-slf4j",children:"From SLF4J"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Old way\nprivate static final Logger log = LoggerFactory.getLogger(MyClass.class);\nlog.info("Starting process");\nlog.error("Process failed", exception);\n\n// New way\n@Autowired\nprivate BrobotLogger logger;\n\nlogger.observation("Starting process");\nlogger.error("Process failed", exception);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Minimal Overhead"}),": The unified logger adds < 1% overhead compared to direct logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lazy Evaluation"}),": Expensive operations (like screenshots) are only performed when needed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Async Options"}),": Structured logging can be configured for async operation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Buffering"}),": File and network sinks support buffering for better performance"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Missing Context"}),": Ensure session is set before logging"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Always set session first\ntry (var session = logger.session("test-123")) {\n    // Now context is available\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"No Console Output"}),": Check console level setting"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"logger.setConsoleLevel(OutputLevel.HIGH);\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Lombok Errors"}),": IDE-specific Lombok issues don't affect runtime"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Ensure Lombok plugin is installed"}),"\n",(0,o.jsx)(n.li,{children:"Enable annotation processing"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Thread Context Lost"}),": Use snapshots for async operations"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"var snapshot = logger.getContext().snapshot();\n// Pass snapshot to async operation\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Cloud logging service integration (CloudWatch, Stackdriver)"}),"\n",(0,o.jsx)(n.li,{children:"Real-time log streaming"}),"\n",(0,o.jsx)(n.li,{children:"Advanced filtering and search capabilities"}),"\n",(0,o.jsx)(n.li,{children:"Machine learning-based anomaly detection"}),"\n",(0,o.jsx)(n.li,{children:"Distributed tracing support"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"action-logging-with-console-output-and-visual-feedback",children:"Action Logging with Console Output and Visual Feedback"}),"\n",(0,o.jsx)(n.p,{children:"The unified logging system now includes enhanced action logging with real-time console output and visual highlighting capabilities. This provides immediate feedback during automation development and debugging."}),"\n",(0,o.jsx)(n.h3,{id:"console-action-reporting",children:"Console Action Reporting"}),"\n",(0,o.jsx)(n.p,{children:"Get real-time feedback about action execution in the console:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'\ud83d\udd0d FIND: login-button \u2192 \u2713 FOUND (234ms)\n   \u2514\u2500 Location: (450,320) Score: 98.5%\n\n\u2713 CLICK login-button (156ms)\n\n\u2328\ufe0f TYPE: "test@example.com" \u2713\n\n\u2717 FIND submit-button (2003ms)\n   \u2514\u2500 Search regions: 3 areas checked\n\n\u26a0\ufe0f Performance Warning: FIND took 2003ms (threshold: 1000ms)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"visual-highlighting",children:"Visual Highlighting"}),"\n",(0,o.jsx)(n.p,{children:"See exactly what Brobot is doing with configurable visual feedback:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Green borders"})," for successful finds"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Blue borders"})," for search regions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Yellow ripple effects"})," for clicks"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Red indicators"})," for errors"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"gui-access-detection",children:"GUI Access Detection"}),"\n",(0,o.jsx)(n.p,{children:"Automatic detection and reporting of GUI access problems:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u274c GUI Problem: No DISPLAY environment variable set\n\ud83d\udca1 Possible solutions:\n   \u2022 Set DISPLAY=:0 for local display\n   \u2022 For SSH: use -X or -Y flag for X11 forwarding\n   \u2022 For Docker: pass --env DISPLAY=$DISPLAY\n   \u2022 For WSL: install and configure X server (VcXsrv, Xming)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configuration-1",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Configure action logging through properties:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'brobot:\n  # Console output configuration\n  console:\n    actions:\n      enabled: true\n      level: NORMAL        # QUIET, NORMAL, VERBOSE\n      show-match-details: true\n      use-icons: true\n  \n  # Visual highlighting configuration\n  highlight:\n    enabled: true\n    auto-highlight-finds: true\n    find:\n      color: "#00FF00"     # Green\n      duration: 2.0        # seconds\n    search-region:\n      color: "#0000FF"     # Blue\n      duration: 1.0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"using-enhanced-action-logging",children:"Using Enhanced Action Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Autowired\nprivate EnhancedActionLogger logger;\n\n// Log with visual feedback\nlogger.logActionWithVisuals(\n    "FIND", \n    target, \n    result,\n    VisualFeedbackOptions.debug()  // Maximum visibility\n);\n\n// Check GUI access\nif (!logger.checkAndLogGuiAccess()) {\n    // Handle GUI access problems\n}\n\n// Custom visual options\nVisualFeedbackOptions options = VisualFeedbackOptions.builder()\n    .highlightFinds(true)\n    .findHighlightColor(Color.YELLOW)\n    .findHighlightDuration(3.0)\n    .showMatchScore(true)\n    .build();\n\nlogger.logActionWithVisuals("CLICK", button, result, options);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"profile-based-configuration",children:"Profile-Based Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Use predefined profiles for different environments:"}),"\n",(0,o.jsx)(n.h4,{id:"development-profile",children:"Development Profile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Maximum visibility for debugging\njava -jar app.jar --spring.profiles.active=visual-debug\n"})}),"\n",(0,o.jsx)(n.h4,{id:"cicd-profile",children:"CI/CD Profile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Minimal output, no visual distractions\nbrobot:\n  console.actions.level: QUIET\n  highlight.enabled: false\n  gui-access.continue-on-error: true\n"})}),"\n",(0,o.jsx)(n.h4,{id:"production-profile",children:"Production Profile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Disable console output, keep error reporting\nbrobot:\n  console.actions.enabled: false\n  highlight.enabled: false\n  gui-access.report-problems: true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"visual-feedback-options",children:"Visual Feedback Options"}),"\n",(0,o.jsx)(n.p,{children:"Create custom visual feedback for specific scenarios:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Highlight only successful finds\nVisualFeedbackOptions.findsOnly()\n\n// Debug mode - highlight everything\nVisualFeedbackOptions.debug()\n\n// No visual feedback\nVisualFeedbackOptions.none()\n\n// Custom configuration\nVisualFeedbackOptions.builder()\n    .highlightFinds(true)\n    .highlightSearchRegions(true)\n    .flashHighlight(true)\n    .flashCount(3)\n    .persistHighlight(true)  // Keep highlight until cleared\n    .highlightLabel("Target Element")\n    .build()\n'})}),"\n",(0,o.jsx)(n.h3,{id:"integration-with-desktop-runner",children:"Integration with Desktop Runner"}),"\n",(0,o.jsxs)(n.p,{children:["The desktop runner automatically displays console output and visual feedback when configured. The ",(0,o.jsx)(n.code,{children:"ConsoleActionEventListener"})," bridges the event system with the console reporter for real-time updates."]}),"\n",(0,o.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,o.jsx)(n.p,{children:"The main classes for the unified logging system are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"BrobotLogger"})," - The main logging facade"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogEvent"})," - The event model for structured logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LoggingContext"})," - Thread-local context management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogBuilder"})," - Fluent API for complex logging scenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"EnhancedActionLogger"})," - Extended interface with visual feedback"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"VisualFeedbackOptions"})," - Configuration for visual highlighting"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"examples-repository",children:"Examples Repository"}),"\n",(0,o.jsxs)(n.p,{children:["Find more examples in the ",(0,o.jsx)(n.a,{href:"https://github.com/jspinak/brobot-examples",children:"brobot-examples"})," repository under ",(0,o.jsx)(n.code,{children:"/logging-examples"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
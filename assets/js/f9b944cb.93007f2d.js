"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2040],{28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>s});var t=i(96540);const r={},a=t.createContext(r);function o(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(a.Provider,{value:e},n.children)}},28748:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-library/tutorials/tutorial-basics/transitions","title":"Transitions","description":"Transitions define how your automation moves between states. With Brobot\'s modern @TransitionSet annotation system (1.2.0+), all transitions for a state are grouped together in a single class, providing better organization and clearer intent.","source":"@site/docs/03-core-library/tutorials/tutorial-basics/transitions.md","sourceDirName":"03-core-library/tutorials/tutorial-basics","slug":"/core-library/tutorials/tutorial-basics/transitions","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/transitions","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-basics/transitions.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"States","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/states"},"next":{"title":"Define the Capture Region","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/define-capture-region"}}');var r=i(74848),a=i(28453);const o={sidebar_position:5},s="Transitions",l={},c=[{value:"Modern Transition Definition with @TransitionSet",id:"modern-transition-definition-with-transitionset",level:2},{value:"Key Features of @TransitionSet",id:"key-features-of-transitionset",level:2},{value:"1. Unified Class Structure",id:"1-unified-class-structure",level:3},{value:"2. Method-Level Annotations",id:"2-method-level-annotations",level:3},{value:"@FromTransition",id:"fromtransition",level:4},{value:"@IncomingTransition",id:"incomingtransition",level:4},{value:"3. Automatic Registration",id:"3-automatic-registration",level:3},{value:"4. Dependency Injection",id:"4-dependency-injection",level:3},{value:"Complete Example: Island Transitions",id:"complete-example-island-transitions",level:2},{value:"Transition Patterns",id:"transition-patterns",level:2},{value:"Simple Navigation",id:"simple-navigation",level:3},{value:"Multi-Step Navigation",id:"multi-step-navigation",level:3},{value:"Conditional Navigation with Multiple Paths",id:"conditional-navigation-with-multiple-paths",level:3},{value:"Working with ActionConfig",id:"working-with-actionconfig",level:2},{value:"File Organization",id:"file-organization",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Testing Transitions",id:"testing-transitions",level:2},{value:"Migration from Old Format",id:"migration-from-old-format",level:2},{value:"Old Format (Pre-1.2.0)",id:"old-format-pre-120",level:3},{value:"New Format (1.2.0+)",id:"new-format-120",level:3},{value:"Benefits of @TransitionSet",id:"benefits-of-transitionset",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"transitions",children:"Transitions"})}),"\n",(0,r.jsxs)(e.p,{children:["Transitions define how your automation moves between states. With Brobot's modern ",(0,r.jsx)(e.code,{children:"@TransitionSet"})," annotation system (1.2.0+), all transitions for a state are grouped together in a single class, providing better organization and clearer intent."]}),"\n",(0,r.jsx)(e.h2,{id:"modern-transition-definition-with-transitionset",children:"Modern Transition Definition with @TransitionSet"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"@TransitionSet"})," annotation groups all transitions for a state in one class. Each class contains:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"@FromTransition"})," methods that define how to navigate TO this state FROM other states"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"@IncomingTransition"})," method that verifies arrival at this state"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@TransitionSet(state = WorldState.class, description = "World state transitions")\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class WorldTransitions {\n    \n    private final HomeState homeState;\n    private final WorldState worldState;\n    private final IslandState islandState;\n    private final Action action;\n    \n    /**\n     * Navigate from Home to World by clicking the world button.\n     */\n    @FromTransition(from = HomeState.class, priority = 1, description = "Navigate from Home to World")\n    public boolean fromHome() {\n        log.info("Navigating from Home to World");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful navigation");\n            return true;\n        }\n        \n        return action.click(homeState.getToWorldButton()).isSuccess();\n    }\n    \n    /**\n     * Navigate from Island back to World.\n     */\n    @FromTransition(from = IslandState.class, priority = 2, description = "Return from Island to World")\n    public boolean fromIsland() {\n        log.info("Navigating from Island to World");\n        \n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            return true;\n        }\n        \n        return action.click(islandState.getBackToWorldButton()).isSuccess();\n    }\n    \n    /**\n     * Verify that we have successfully arrived at the World state.\n     */\n    @IncomingTransition(description = "Verify arrival at World state", required = true)\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at World state");\n        \n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            return true;\n        }\n        \n        // Check for world-specific elements\n        boolean foundMinimap = action.find(worldState.getMinimap()).isSuccess();\n        \n        if (foundMinimap) {\n            log.info("Successfully confirmed World state is active");\n            return true;\n        } else {\n            log.error("Failed to confirm World state - minimap not found");\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"key-features-of-transitionset",children:"Key Features of @TransitionSet"}),"\n",(0,r.jsx)(e.h3,{id:"1-unified-class-structure",children:"1. Unified Class Structure"}),"\n",(0,r.jsx)(e.p,{children:"All transitions for a state are in ONE class:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Better organization - easy to find all paths to/from a state"}),"\n",(0,r.jsx)(e.li,{children:"Clear separation of concerns - navigation vs verification"}),"\n",(0,r.jsx)(e.li,{children:"Natural file structure that mirrors state structure"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"2-method-level-annotations",children:"2. Method-Level Annotations"}),"\n",(0,r.jsx)(e.h4,{id:"fromtransition",children:"@FromTransition"}),"\n",(0,r.jsx)(e.p,{children:"Defines how to navigate TO this state FROM another state:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@FromTransition(\n    from = SourceState.class,     // Required: source state\n    priority = 1,                  // Optional: higher = preferred path\n    description = "Navigation logic" // Optional: documentation\n)\npublic boolean fromSource() {\n    // Navigation logic\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"incomingtransition",children:"@IncomingTransition"}),"\n",(0,r.jsx)(e.p,{children:"Verifies successful arrival at the state:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@IncomingTransition(\n    description = "Verification logic",  // Optional: documentation\n    required = true                       // Optional: must succeed (default: false)\n)\npublic boolean verifyArrival() {\n    // Verification logic\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"3-automatic-registration",children:"3. Automatic Registration"}),"\n",(0,r.jsx)(e.p,{children:"No manual transition setup needed - the framework handles everything automatically."}),"\n",(0,r.jsx)(e.h3,{id:"4-dependency-injection",children:"4. Dependency Injection"}),"\n",(0,r.jsx)(e.p,{children:"Transitions are Spring components with full DI support:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@TransitionSet(state = DashboardState.class)\n@Component\n@RequiredArgsConstructor\npublic class DashboardTransitions {\n    private final LoginState loginState;\n    private final DashboardState dashboardState;\n    private final Action action;\n    private final DatabaseService databaseService;  // Any Spring bean\n    \n    @FromTransition(from = LoginState.class, priority = 1)\n    public boolean fromLogin() {\n        // Access any injected dependencies\n        return action.click(loginState.getSubmitButton()).isSuccess();\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"complete-example-island-transitions",children:"Complete Example: Island Transitions"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@TransitionSet(state = IslandState.class, description = "Island state transitions")\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class IslandTransitions {\n    \n    private final IslandState islandState;\n    private final WorldState worldState;\n    private final Action action;\n    \n    /**\n     * Navigate from World to Island by clicking on an island.\n     */\n    @FromTransition(from = WorldState.class, priority = 1)\n    public boolean fromWorld() {\n        log.info("Navigating from World to Island");\n        \n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            return true;\n        }\n        \n        // Try clicking different islands\n        ActionResult result = action.click(worldState.getCastle());\n        if (!result.isSuccess()) {\n            result = action.click(worldState.getFarms());\n        }\n        if (!result.isSuccess()) {\n            result = action.click(worldState.getMines());\n        }\n        \n        return result.isSuccess();\n    }\n    \n    /**\n     * Verify arrival at Island state.\n     */\n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at Island state");\n        \n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            return true;\n        }\n        \n        return action.find(islandState.getIslandName()).isSuccess();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"transition-patterns",children:"Transition Patterns"}),"\n",(0,r.jsx)(e.h3,{id:"simple-navigation",children:"Simple Navigation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@TransitionSet(state = SettingsState.class)\n@Component\n@RequiredArgsConstructor\npublic class SettingsTransitions {\n    \n    private final HomeState homeState;\n    private final SettingsState settingsState;\n    private final Action action;\n    \n    @FromTransition(from = HomeState.class, priority = 1)\n    public boolean fromHome() {\n        if (FrameworkSettings.mock) return true;\n        return action.click(homeState.getSettingsIcon()).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        return action.find(settingsState.getSettingsHeader()).isSuccess();\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"multi-step-navigation",children:"Multi-Step Navigation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@TransitionSet(state = DashboardState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class DashboardTransitions {\n    \n    private final LoginState loginState;\n    private final DashboardState dashboardState;\n    private final Action action;\n    \n    @FromTransition(from = LoginState.class, priority = 1)\n    public boolean fromLogin() {\n        log.info("Navigating from Login to Dashboard");\n        \n        if (FrameworkSettings.mock) return true;\n        \n        // Multi-step login process\n        ActionResult result = action\n            .click(loginState.getUsernameField())\n            .type("user@example.com")\n            .click(loginState.getPasswordField())\n            .type(System.getenv("APP_PASSWORD"))\n            .click(loginState.getLoginButton());\n            \n        if (result.isSuccess()) {\n            log.info("Login successful");\n            return true;\n        }\n        \n        log.error("Login failed: {}", result.getFailureReason());\n        return false;\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        \n        // Wait for dashboard to load\n        ActionResult validation = action.findWithTimeout(\n            dashboardState.getDashboardHeader(), 10\n        );\n        \n        return validation.isSuccess();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"conditional-navigation-with-multiple-paths",children:"Conditional Navigation with Multiple Paths"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@TransitionSet(state = GameState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class GameTransitions {\n    \n    private final MainMenuState mainMenu;\n    private final PauseMenuState pauseMenu;\n    private final GameState gameState;\n    private final Action action;\n    \n    @FromTransition(from = MainMenuState.class, priority = 1)\n    public boolean fromMainMenu() {\n        log.info("Starting game from main menu");\n        \n        if (FrameworkSettings.mock) return true;\n        \n        // Try primary action first\n        ActionResult playResult = action.click(mainMenu.getPlayButton());\n        \n        if (!playResult.isSuccess()) {\n            log.warn("Play button not found, trying alternative");\n            playResult = action.click(mainMenu.getStartButton());\n        }\n        \n        return playResult.isSuccess();\n    }\n    \n    @FromTransition(from = PauseMenuState.class, priority = 2)\n    public boolean fromPauseMenu() {\n        log.info("Resuming game from pause menu");\n        \n        if (FrameworkSettings.mock) return true;\n        \n        return action.click(pauseMenu.getResumeButton()).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        \n        // Wait for game board to appear\n        ActionResult waitResult = action.findWithTimeout(\n            gameState.getGameBoard(), 10\n        );\n        \n        if (!waitResult.isSuccess()) {\n            log.error("Game failed to load");\n            return false;\n        }\n        \n        log.info("Game state confirmed active");\n        return true;\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"working-with-actionconfig",children:"Working with ActionConfig"}),"\n",(0,r.jsx)(e.p,{children:"Use modern ActionConfig classes for precise control:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@TransitionSet(state = ConfirmationState.class)\n@Component\n@RequiredArgsConstructor\npublic class ConfirmationTransitions {\n    \n    private final FormState formState;\n    private final ConfirmationState confirmationState;\n    private final Action action;\n    \n    @FromTransition(from = FormState.class, priority = 1)\n    public boolean fromForm() {\n        if (FrameworkSettings.mock) return true;\n        \n        // Configure specific action behaviors\n        ClickOptions doubleClick = new ClickOptions.Builder()\n            .setNumberOfClicks(2)\n            .setPauseAfterEnd(0.5)\n            .build();\n            \n        TypeOptions secureType = new TypeOptions.Builder()\n            .setPauseBeforeBegin(0.3)\n            .build();\n            \n        // Chain actions with specific configurations\n        PatternFindOptions chainedAction = new PatternFindOptions.Builder()\n            .then(doubleClick)\n            .then(secureType)\n            .build();\n        \n        ObjectCollection targets = new ObjectCollection.Builder()\n            .withImages(formState.getSubmitButton())\n            .withStrings("John Doe")\n            .build();\n        \n        return action.perform(chainedAction, targets).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        return action.find(confirmationState.getSuccessMessage()).isSuccess();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"file-organization",children:"File Organization"}),"\n",(0,r.jsx)(e.p,{children:"Organize transitions alongside states for clarity:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"src/main/java/com/example/basics/\n\u251c\u2500\u2500 states/\n\u2502   \u251c\u2500\u2500 HomeState.java\n\u2502   \u251c\u2500\u2500 WorldState.java\n\u2502   \u251c\u2500\u2500 IslandState.java\n\u2502   \u2514\u2500\u2500 SettingsState.java\n\u2514\u2500\u2500 transitions/\n    \u251c\u2500\u2500 HomeTransitions.java      # All transitions for Home state\n    \u251c\u2500\u2500 WorldTransitions.java     # All transitions for World state\n    \u251c\u2500\u2500 IslandTransitions.java    # All transitions for Island state\n    \u2514\u2500\u2500 SettingsTransitions.java  # All transitions for Settings state\n"})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Always Include Mock Mode Support"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@FromTransition(from = SourceState.class)\npublic boolean fromSource() {\n    if (FrameworkSettings.mock) return true;\n    // Real navigation logic\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Use Descriptive Method Names"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"fromHome()"}),", ",(0,r.jsx)(e.code,{children:"fromLogin()"}),", ",(0,r.jsx)(e.code,{children:"fromMenu()"})," - clear source indication"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"verifyArrival()"})," - standard verification method name"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Add Comprehensive Logging"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@FromTransition(from = SourceState.class)\npublic boolean fromSource() {\n    log.info("Navigating from Source to Target");\n    if (FrameworkSettings.mock) {\n        log.info("Mock mode: simulating successful navigation");\n        return true;\n    }\n    // Navigation logic\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Handle Failures Gracefully"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@FromTransition(from = SourceState.class)\npublic boolean fromSource() {\n    try {\n        if (FrameworkSettings.mock) return true;\n        return action.click(element).isSuccess();\n    } catch (Exception e) {\n        log.error("Transition failed", e);\n        return false;\n    }\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Verify Critical Elements in IncomingTransition"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@IncomingTransition(required = true)\npublic boolean verifyArrival() {\n    if (FrameworkSettings.mock) return true;\n    \n    // Check multiple elements for robust verification\n    boolean hasHeader = action.find(state.getHeader()).isSuccess();\n    boolean hasContent = action.find(state.getMainContent()).isSuccess();\n    \n    return hasHeader && hasContent;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"testing-transitions",children:"Testing Transitions"}),"\n",(0,r.jsx)(e.p,{children:"The unified structure makes testing straightforward:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes = {TestConfiguration.class})\npublic class WorldTransitionsTest {\n    \n    @Autowired\n    private WorldTransitions worldTransitions;\n    \n    @MockBean\n    private Action action;\n    \n    @MockBean\n    private HomeState homeState;\n    \n    @Test\n    public void testFromHomeTransition() {\n        // Given\n        when(action.click(any())).thenReturn(\n            new ActionResult.Builder().setSuccess(true).build()\n        );\n        \n        // When\n        boolean result = worldTransitions.fromHome();\n        \n        // Then\n        assertTrue(result);\n        verify(action).click(homeState.getToWorldButton());\n    }\n    \n    @Test\n    public void testVerifyArrival() {\n        // Given\n        when(action.find(any())).thenReturn(\n            new ActionResult.Builder().setSuccess(true).build()\n        );\n        \n        // When\n        boolean arrived = worldTransitions.verifyArrival();\n        \n        // Then\n        assertTrue(arrived);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"migration-from-old-format",children:"Migration from Old Format"}),"\n",(0,r.jsxs)(e.p,{children:["If migrating from the old ",(0,r.jsx)(e.code,{children:"@Transition"})," annotation:"]}),"\n",(0,r.jsx)(e.h3,{id:"old-format-pre-120",children:"Old Format (Pre-1.2.0)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Separate class for each transition\n@Transition(from = HomeState.class, to = WorldState.class)\npublic class HomeToWorldTransition {\n    public boolean execute() {\n        return action.click(homeState.getToWorldButton()).isSuccess();\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"new-format-120",children:"New Format (1.2.0+)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// All transitions for a state in one class\n@TransitionSet(state = WorldState.class)\n@Component\npublic class WorldTransitions {\n    \n    @FromTransition(from = HomeState.class, priority = 1)\n    public boolean fromHome() {\n        if (FrameworkSettings.mock) return true;\n        return action.click(homeState.getToWorldButton()).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        return action.find(worldState.getMinimap()).isSuccess();\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"benefits-of-transitionset",children:"Benefits of @TransitionSet"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Better Organization"})," - All transitions for a state in ONE place"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Clearer Intent"})," - FromTransitions vs IncomingTransition makes flow obvious"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Less Boilerplate"})," - No manual StateTransitions builders"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Natural Structure"})," - File organization mirrors state structure"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Easier Testing"})," - Each method can be tested independently"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mock Mode Ready"})," - Easy to add testing support"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(e.p,{children:"With states and transitions defined using the @TransitionSet system, your entire state machine is automatically configured. The framework handles all registration and wiring - you just focus on your automation logic!"})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);
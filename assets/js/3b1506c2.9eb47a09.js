"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8675],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(96540);const s={},i=a.createContext(s);function o(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:t},e.children)}},30548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorial-basics/states","title":"States","description":"There are 3 states in the demo: HOME, WORLD, and ISLAND. Each state describes a collection","source":"@site/versioned_docs/version-1.0.6/tutorial-basics/states.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/states","permalink":"/brobot/docs/1.0.6/tutorial-basics/states","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/tutorial-basics/states.md","tags":[],"version":"1.0.6","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docSidebar","previous":{"title":"Initialize Brobot\'s Environment","permalink":"/brobot/docs/1.0.6/tutorial-basics/init-brobot"},"next":{"title":"Transitions","permalink":"/brobot/docs/1.0.6/tutorial-basics/transitions"}}');var s=n(74848),i=n(28453);const o={sidebar_position:4},r="States",c={},l=[{value:"Home",id:"home",level:2},{value:"World",id:"world",level:2},{value:"Island",id:"island",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"states",children:"States"})}),"\n",(0,s.jsx)(t.p,{children:"There are 3 states in the demo: HOME, WORLD, and ISLAND. Each state describes a collection\nof static images. The images are static in that they don't change their appearance\nand always appear when the state is active. A state image's location on-screen may or may not change."}),"\n",(0,s.jsx)(t.p,{children:"A state has an enum called Name that is used throughout the application to refer to the state. Every state\nstarts with an enum declaration."}),"\n",(0,s.jsx)(t.h2,{id:"home",children:"Home"}),"\n",(0,s.jsx)(t.p,{children:"The snapshot defined with the StateImageObject toWorldButton gives the location we\nexpect to find this object. Snapshots represent possible locations for the image, and\nwhen there is more than one a match will be chosen randomly from all snapshots."}),"\n",(0,s.jsx)(t.p,{children:"When a StateImageObject is fixed, it is expected to be found in the same location every time."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Component\n@Getter\npublic class Home {\n\n    public enum Name implements StateEnum {\n        HOME\n    }\n\n    private StateImageObject toWorldButton = new StateImageObject.Builder()\n            .withImage("toWorldButton")\n            .isFixed()\n            .addSnapshot(new MatchSnapshot(220, 600, 20, 20))\n            .build();\n\n    private State state = new State.Builder(HOME)\n            .withImages(toWorldButton)\n            .build();\n\n    public Home(StateService stateService) { stateService.save(state); }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"world",children:"World"}),"\n",(0,s.jsx)(t.p,{children:"If a StateImageObject has no snapshots, the locations of matches will be\ndetermined using probabilities."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Component\n@Getter\npublic class World {\n\n    public enum Name implements StateEnum {\n        WORLD\n    }\n\n    private StateImageObject searchButton = new StateImageObject.Builder()\n            .withImage("searchButton")\n            .isFixed()\n            .build();\n\n    private State state = new State.Builder(Name.WORLD)\n            .withImages(searchButton)\n            .build();\n\n    public World(StateService stateService) { stateService.save(state); }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"island",children:"Island"}),"\n",(0,s.jsx)(t.p,{children:"Images can be defined with multiple image files."}),"\n",(0,s.jsx)(t.p,{children:"The action GetText references only GetText snapshots. Every snapshot\nhas an action associated with it; default snapshots (without an explicitly defined\naction) are built as the result of Find operations. A GetText snapshot for a StateRegion\ngives the expected text to find when performing a GetText action on the StateRegion.\nIn our GetText snapshot, we have included a few different expected text results. Some of\nthem are misspelled to simulate the stochasticity of real execution, in which text is\nnot always found as it appears on-screen."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Component\n@Getter\npublic class Island {\n\n    public enum Name implements StateEnum {\n        ISLAND\n    }\n\n    private StateImageObject islandName = new StateImageObject.Builder()\n            .withImage("castle", "mines", "farms", "forest", "mountains", "lakes")\n            .called("island type text")\n            .isFixed()\n            .build();\n    private StateRegion islandRegion = new StateRegion.Builder()\n            .called("island region")\n            .addSnapshot(new MatchSnapshot.Builder()\n                    .setActionOptions(ActionOptions.Action.GET_TEXT)\n                    .addString("Mines")\n                    .addString("Lakess")\n                    .addString("Farmz")\n                    .build())\n            .build();\n\n    private State state = new State.Builder(Name.ISLAND)\n            .withImages(islandName)\n            .withRegions(islandRegion)\n            .build();\n\n    public Island(StateService stateService) { stateService.save(state); }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
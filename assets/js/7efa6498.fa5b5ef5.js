"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3757],{15743:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"sikulix-to-javacv-migration","title":"SikuliX to JavaCV Migration Strategy","description":"Executive Summary","source":"@site/docs/sikulix-to-javacv-migration.md","sourceDirName":".","slug":"/sikulix-to-javacv-migration","permalink":"/brobot/docs/sikulix-to-javacv-migration","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/sikulix-to-javacv-migration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Quick Start: Pattern Capture Setup","permalink":"/brobot/docs/quick-start-capture-setup"}}');var s=i(74848),l=i(28453);const t={},a="SikuliX to JavaCV Migration Strategy",c={},d=[{value:"Executive Summary",id:"executive-summary",level:2},{value:"Current Architecture Analysis",id:"current-architecture-analysis",level:2},{value:"SikuliX Dependencies (What We Use)",id:"sikulix-dependencies-what-we-use",level:3},{value:"JavaCV Replacement Architecture",id:"javacv-replacement-architecture",level:2},{value:"Direct Replacements Available",id:"direct-replacements-available",level:3},{value:"Benefits of Migration",id:"benefits-of-migration",level:2},{value:"1. Performance Improvements",id:"1-performance-improvements",level:3},{value:"2. Reduced Dependencies",id:"2-reduced-dependencies",level:3},{value:"3. Better Maintenance",id:"3-better-maintenance",level:3},{value:"4. Proven Success",id:"4-proven-success",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"Phase 1: Parallel Implementation (Low Risk)",id:"phase-1-parallel-implementation-low-risk",level:3},{value:"Phase 2: Testing &amp; Validation (Critical)",id:"phase-2-testing--validation-critical",level:3},{value:"Phase 3: Gradual Migration (Safe)",id:"phase-3-gradual-migration-safe",level:3},{value:"Phase 4: Complete Migration (Final)",id:"phase-4-complete-migration-final",level:3},{value:"Code Examples",id:"code-examples",level:2},{value:"Pattern Matching Comparison",id:"pattern-matching-comparison",level:3},{value:"Current (SikuliX)",id:"current-sikulix",level:4},{value:"New (JavaCV)",id:"new-javacv",level:4},{value:"OCR Comparison",id:"ocr-comparison",level:3},{value:"Current (SikuliX)",id:"current-sikulix-1",level:4},{value:"New (JavaCV)",id:"new-javacv-1",level:4},{value:"Risk Mitigation",id:"risk-mitigation",level:2},{value:"Compatibility Risks",id:"compatibility-risks",level:3},{value:"Performance Risks",id:"performance-risks",level:3},{value:"User Impact",id:"user-impact",level:3},{value:"Success Metrics",id:"success-metrics",level:2},{value:"Recommendation",id:"recommendation",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sikulix-to-javacv-migration-strategy",children:"SikuliX to JavaCV Migration Strategy"})}),"\n",(0,s.jsx)(n.h2,{id:"executive-summary",children:"Executive Summary"}),"\n",(0,s.jsx)(n.p,{children:"Brobot can completely replace SikuliX with JavaCV, providing a more modern, efficient, and maintainable solution. The migration would reduce dependencies, improve performance, and provide better control over core functionality."}),"\n",(0,s.jsx)(n.h2,{id:"current-architecture-analysis",children:"Current Architecture Analysis"}),"\n",(0,s.jsx)(n.h3,{id:"sikulix-dependencies-what-we-use",children:"SikuliX Dependencies (What We Use)"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pattern Matching"})," (",(0,s.jsx)(n.code,{children:"org.sikuli.script.Finder"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Template matching for finding images"}),"\n",(0,s.jsx)(n.li,{children:"~60 files depend on this"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"OCR"})," (",(0,s.jsx)(n.code,{children:"org.sikuli.script.OCR"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Text recognition via Tesseract"}),"\n",(0,s.jsx)(n.li,{children:"Used for text-based automation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input Control"})," (",(0,s.jsx)(n.code,{children:"org.sikuli.script.Mouse"}),", ",(0,s.jsx)(n.code,{children:"org.sikuli.script.Key"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Mouse and keyboard simulation"}),"\n",(0,s.jsx)(n.li,{children:"Cross-platform input handling"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Geometric Classes"})," (",(0,s.jsx)(n.code,{children:"org.sikuli.script.Region"}),", ",(0,s.jsx)(n.code,{children:"org.sikuli.script.Location"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rectangle and point abstractions"}),"\n",(0,s.jsx)(n.li,{children:"Used throughout for positioning"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Image Management"})," (",(0,s.jsx)(n.code,{children:"org.sikuli.script.ImagePath"}),")"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pattern loading and caching"}),"\n",(0,s.jsx)(n.li,{children:"Bundle management"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"javacv-replacement-architecture",children:"JavaCV Replacement Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"direct-replacements-available",children:"Direct Replacements Available"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"SikuliX Component"}),(0,s.jsx)(n.th,{children:"JavaCV Replacement"}),(0,s.jsx)(n.th,{children:"Status"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Screen Capture"}),(0,s.jsx)(n.td,{children:"\u2705 JavaCVFFmpegProvider"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Implemented & Tested"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Pattern Matching"}),(0,s.jsx)(n.td,{children:"JavaCVPatternMatcher"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Proof of Concept Ready"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OCR"}),(0,s.jsx)(n.td,{children:"JavaCVOCRService"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Proof of Concept Ready"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Mouse/Keyboard"}),(0,s.jsx)(n.td,{children:"Java Robot API"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Already in RobotProvider"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Region/Location"}),(0,s.jsx)(n.td,{children:"Java AWT Rectangle/Point"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Simple replacement"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Image Loading"}),(0,s.jsx)(n.td,{children:"Java ImageIO + JavaCV"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Straightforward"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-migration",children:"Benefits of Migration"}),"\n",(0,s.jsx)(n.h3,{id:"1-performance-improvements",children:"1. Performance Improvements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Direct OpenCV calls"})," - No abstraction overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Native memory management"})," - Better control over resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimized algorithms"})," - Can choose specific OpenCV methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel processing"})," - JavaCV supports GPU acceleration"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-reduced-dependencies",children:"2. Reduced Dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Remove 60MB+ SikuliX JAR"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single ecosystem"})," - JavaCV for both capture and matching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fewer version conflicts"})," - One OpenCV version"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-better-maintenance",children:"3. Better Maintenance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Active development"})," - JavaCV is actively maintained"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern API"})," - Better documentation and examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Direct debugging"})," - No black box abstractions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-proven-success",children:"4. Proven Success"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FFmpeg capture"})," - Already achieving 100% match with Windows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production ready"})," - JavaCV used in many production systems"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,s.jsx)(n.h3,{id:"phase-1-parallel-implementation-low-risk",children:"Phase 1: Parallel Implementation (Low Risk)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Duration: 2-4 weeks"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Complete JavaCV implementations"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\r\npublic class AdaptivePatternMatcher {\r\n    @Value("${brobot.matcher:SIKULIX}")\r\n    private String provider;\r\n    \r\n    public List<Match> find(BufferedImage screen, Pattern pattern) {\r\n        return "JAVACV".equals(provider) \r\n            ? javaCVMatcher.find(screen, pattern)\r\n            : sikuliMatcher.find(screen, pattern);\r\n    }\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Add configuration switches"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# application.properties\r\nbrobot.matcher.provider=JAVACV  # or SIKULIX\r\nbrobot.ocr.provider=JAVACV      # or SIKULIX\r\nbrobot.input.provider=ROBOT     # or SIKULIX\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compatibility adapters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Convert between SikuliX and JavaCV result formats"}),"\n",(0,s.jsx)(n.li,{children:"Maintain existing APIs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"phase-2-testing--validation-critical",children:"Phase 2: Testing & Validation (Critical)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Duration: 2-3 weeks"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance benchmarks"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Test\r\npublic void compareMatchingPerformance() {\r\n    // Test 1000 pattern matches\r\n    long sikulixTime = timeMatching(sikulixMatcher);\r\n    long javacvTime = timeMatching(javaCVMatcher);\r\n    \r\n    // Expect JavaCV to be faster\r\n    assertTrue(javacvTime < sikulixTime);\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Accuracy comparison"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Match score differences"}),"\n",(0,s.jsx)(n.li,{children:"False positive/negative rates"}),"\n",(0,s.jsx)(n.li,{children:"OCR accuracy metrics"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Memory profiling"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Heap usage comparison"}),"\n",(0,s.jsx)(n.li,{children:"Native memory tracking"}),"\n",(0,s.jsx)(n.li,{children:"Leak detection"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"phase-3-gradual-migration-safe",children:"Phase 3: Gradual Migration (Safe)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Duration: 4-6 weeks"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Module by module conversion"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start with non-critical modules"}),"\n",(0,s.jsx)(n.li,{children:"Run both in parallel initially"}),"\n",(0,s.jsx)(n.li,{children:"Switch based on success metrics"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"User opt-in"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# Users can choose\r\nbrobot.experimental.javacv=true\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Fallback mechanism"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'try {\r\n    return javaCVMatcher.find(screen, pattern);\r\n} catch (Exception e) {\r\n    log.warn("JavaCV failed, falling back to SikuliX", e);\r\n    return sikulixMatcher.find(screen, pattern);\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"phase-4-complete-migration-final",children:"Phase 4: Complete Migration (Final)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Duration: 2-3 weeks"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Remove SikuliX dependencies"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Update documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Migration tools for users"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"code-examples",children:"Code Examples"}),"\n",(0,s.jsx)(n.h3,{id:"pattern-matching-comparison",children:"Pattern Matching Comparison"}),"\n",(0,s.jsx)(n.h4,{id:"current-sikulix",children:"Current (SikuliX)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Finder finder = new Finder(screenImage);\r\nfinder.findAll(pattern.sikuli());\r\nwhile (finder.hasNext()) {\r\n    Match match = finder.next();\r\n    // Process match\r\n}\r\nfinder.destroy();\n"})}),"\n",(0,s.jsx)(n.h4,{id:"new-javacv",children:"New (JavaCV)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"JavaCVPatternMatcher matcher = new JavaCVPatternMatcher();\r\nList<MatchResult> matches = matcher.findPatterns(\r\n    screenImage, pattern, options);\r\nfor (MatchResult match : matches) {\r\n    // Process match\r\n}\r\n// No explicit cleanup needed - try-with-resources in implementation\n"})}),"\n",(0,s.jsx)(n.h3,{id:"ocr-comparison",children:"OCR Comparison"}),"\n",(0,s.jsx)(n.h4,{id:"current-sikulix-1",children:"Current (SikuliX)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"List<Match> words = OCR.readWords(image);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"new-javacv-1",children:"New (JavaCV)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"JavaCVOCRService ocr = new JavaCVOCRService();\r\nList<WordMatch> words = ocr.findWords(image);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"risk-mitigation",children:"Risk Mitigation"}),"\n",(0,s.jsx)(n.h3,{id:"compatibility-risks",children:"Compatibility Risks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Adapter pattern to maintain API compatibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": Comprehensive test suite comparing results"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-risks",children:"Performance Risks"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Benchmark before full migration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fallback"}),": Keep SikuliX as fallback option"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"user-impact",children:"User Impact"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Gradual rollout with opt-in"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": Clear migration guides"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"success-metrics",children:"Success Metrics"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Pattern matching 20% faster"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Memory usage reduced by 30%"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Startup time improved by 2 seconds"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Reliability"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Same or better match accuracy"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 No increase in false positives"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 OCR accuracy maintained"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Adoption"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 50% of users on JavaCV within 3 months"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 No critical bugs reported"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Positive performance feedback"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"recommendation",children:"Recommendation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Proceed with Phase 1 immediately"}),". The proof of concepts show JavaCV is viable and the benefits are substantial:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Already proven"})," - FFmpeg capture shows JavaCV works perfectly"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Low risk"})," - Parallel implementation allows easy rollback"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High reward"})," - Significant performance and maintenance benefits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Future-proof"})," - JavaCV is actively developed, SikuliX development has slowed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complete JavaCVPatternMatcher"})," - Add remaining features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration tests"})," - Ensure drop-in compatibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance benchmarks"})," - Quantify improvements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User documentation"})," - Prepare migration guides"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Beta program"})," - Get early user feedback"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Moving from SikuliX to JavaCV is not just feasible but highly recommended. The successful implementation of JavaCV FFmpeg capture (100% match with Windows) proves the approach works. A complete migration would modernize Brobot's architecture, improve performance, and reduce technical debt."}),"\n",(0,s.jsx)(n.p,{children:"The phased approach ensures minimal risk while maximizing the benefits of a modern, efficient pattern matching and OCR solution."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(96540);const s={},l=r.createContext(s);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9980],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},45481:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"testing/profile-based-testing","title":"Profile-Based Testing","description":"Using Spring profiles to manage test configurations and avoid bean conflicts","source":"@site/docs/04-testing/profile-based-testing.md","sourceDirName":"04-testing","slug":"/testing/profile-based-testing","permalink":"/brobot/docs/testing/profile-based-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/profile-based-testing.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Profile-Based Testing","description":"Using Spring profiles to manage test configurations and avoid bean conflicts"},"sidebar":"docSidebar","previous":{"title":"Hybrid Architecture Summary","permalink":"/brobot/docs/testing/hybrid-architecture-summary"},"next":{"title":"Test Utilities","permalink":"/brobot/docs/testing/test-utilities"}}');var s=i(74848),o=i(28453);const r={sidebar_position:8,title:"Profile-Based Testing",description:"Using Spring profiles to manage test configurations and avoid bean conflicts"},a="Profile-Based Testing Architecture",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Problem Solved",id:"problem-solved",level:2},{value:"Solution Architecture",id:"solution-architecture",level:2},{value:"1. Profile-Specific Configuration",id:"1-profile-specific-configuration",level:3},{value:"2. Test Base Class",id:"2-test-base-class",level:3},{value:"3. Profile Properties",id:"3-profile-properties",level:3},{value:"Implementation Guide",id:"implementation-guide",level:2},{value:"Step 1: Create Minimal Test Configuration",id:"step-1-create-minimal-test-configuration",level:3},{value:"Step 2: Update Test Classes",id:"step-2-update-test-classes",level:3},{value:"Step 3: Handle Component Annotations",id:"step-3-handle-component-annotations",level:3},{value:"Benefits",id:"benefits",level:2},{value:"1. <strong>Isolation</strong>",id:"1-isolation",level:3},{value:"2. <strong>Scalability</strong>",id:"2-scalability",level:3},{value:"3. <strong>Performance</strong>",id:"3-performance",level:3},{value:"4. <strong>Maintainability</strong>",id:"4-maintainability",level:3},{value:"Multiple Profile Strategy",id:"multiple-profile-strategy",level:2},{value:"Minimal Profile (Fastest)",id:"minimal-profile-fastest",level:3},{value:"Full Profile (Complete Context)",id:"full-profile-complete-context",level:3},{value:"Database Profile",id:"database-profile",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Bean Definition Conflicts",id:"bean-definition-conflicts",level:3},{value:"Profile Not Activated",id:"profile-not-activated",level:3},{value:"Mock Mode Not Enabled",id:"mock-mode-not-enabled",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Example: Complete Test Setup",id:"example-complete-test-setup",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"profile-based-testing-architecture",children:"Profile-Based Testing Architecture"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Profile-based testing provides a robust and scalable solution for managing test configurations in Brobot. This approach eliminates Spring bean conflicts that can occur when multiple test configurations define the same beans with ",(0,s.jsx)(n.code,{children:"@Primary"})," annotations."]}),"\n",(0,s.jsx)(n.h2,{id:"problem-solved",children:"Problem Solved"}),"\n",(0,s.jsx)(n.p,{children:"When running integration tests with Spring Boot, you may encounter errors like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"NoUniqueBeanDefinitionException: No qualifying bean of type 'ScreenCaptureService' \navailable: more than one 'primary' bean found among candidates\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This happens when multiple configurations (test and production) define the same beans as ",(0,s.jsx)(n.code,{children:"@Primary"}),", causing Spring to be unable to determine which bean to inject."]}),"\n",(0,s.jsx)(n.h2,{id:"solution-architecture",children:"Solution Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"1-profile-specific-configuration",children:"1. Profile-Specific Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create isolated test configurations using Spring profiles:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootConfiguration\n@EnableAutoConfiguration(exclude = {\n    DataSourceAutoConfiguration.class,\n    HibernateJpaAutoConfiguration.class\n})\n@Profile("integration-minimal")\npublic class IntegrationTestMinimalConfig {\n    // Test-specific bean definitions\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-test-base-class",children:"2. Test Base Class"}),"\n",(0,s.jsx)(n.p,{children:"Provide a common base class for integration tests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public abstract class IntegrationTestBase {\n    \n    protected final Logger log = LoggerFactory.getLogger(getClass());\n    \n    @BeforeEach\n    public void setupTest() {\n        // Ensure mock mode is enabled\n        MockModeManager.setMockMode(true);\n        System.setProperty("brobot.mock.enabled", "true");\n        System.setProperty("java.awt.headless", "true");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-profile-properties",children:"3. Profile Properties"}),"\n",(0,s.jsxs)(n.p,{children:["Configure test-specific properties in ",(0,s.jsx)(n.code,{children:"application-integration.properties"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# Integration Test Configuration\nspring.main.allow-bean-definition-overriding=true\nspring.main.lazy-initialization=false\n\n# Mock Mode Settings - SIMPLIFIED\n# Single master switch for mock mode\nbrobot.mock.enabled=true\n# Probability of action success (0.0 to 1.0)\nbrobot.mock.action.success.probability=1.0\n\n# Headless Mode\njava.awt.headless=true\n\n# Mock Timing Configuration (ultra-fast for tests)\nbrobot.mock.time-find-first=0.01\nbrobot.mock.time-click=0.01\nbrobot.mock.time-type=0.01\n\n# Logging\nlogging.level.io.github.jspinak.brobot=DEBUG\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-guide",children:"Implementation Guide"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-minimal-test-configuration",children:"Step 1: Create Minimal Test Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Create a configuration class that provides only the essential beans needed for your tests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootConfiguration\n@EnableAutoConfiguration(exclude = {\n    DataSourceAutoConfiguration.class,\n    HibernateJpaAutoConfiguration.class\n})\n@Profile("integration-minimal")\npublic class IntegrationTestMinimalConfig {\n    \n    static {\n        // Enable mock mode before Spring context loads\n        MockModeManager.setMockMode(true);\n        System.setProperty("java.awt.headless", "true");\n        System.setProperty("brobot.mock.enabled", "true");\n    }\n    \n    @Bean\n    @Primary\n    public ScreenCaptureService screenCaptureService() {\n        ScreenCaptureService service = mock(ScreenCaptureService.class);\n        BufferedImage mockImage = new BufferedImage(1920, 1080, BufferedImage.TYPE_INT_RGB);\n        when(service.captureScreen()).thenReturn(mockImage);\n        return service;\n    }\n    \n    @Bean\n    @Primary\n    public Action action() {\n        // Configure mock Action for tests\n        Action action = mock(Action.class);\n        \n        ActionResult successResult = new ActionResult();\n        successResult.setSuccess(true);\n        \n        // Add default match for find operations\n        Match mockMatch = new Match.Builder()\n            .setRegion(new Region(100, 100, 50, 50))\n            .setSimScore(0.95)\n            .build();\n        successResult.add(mockMatch);\n        \n        // Configure mock responses\n        doReturn(successResult).when(action)\n            .perform(any(ActionConfig.class), any(ObjectCollection[].class));\n        \n        return action;\n    }\n    \n    // Add other required beans...\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-update-test-classes",children:"Step 2: Update Test Classes"}),"\n",(0,s.jsx)(n.p,{children:"Use the profile-based configuration in your test classes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(classes = IntegrationTestMinimalConfig.class)\n@ActiveProfiles("integration-minimal")\n@TestPropertySource(locations = "classpath:application-integration.properties")\npublic class MyIntegrationTest extends IntegrationTestBase {\n    \n    @Autowired\n    private Action action;\n    \n    @Autowired\n    private StateService stateService;\n    \n    @Test\n    public void testWorkflow() {\n        // Your test code here\n        // No bean conflicts!\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-handle-component-annotations",children:"Step 3: Handle Component Annotations"}),"\n",(0,s.jsxs)(n.p,{children:["For test classes with ",(0,s.jsx)(n.code,{children:"@Component"})," annotations (like state classes), import them explicitly:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(classes = IntegrationTestMinimalConfig.class)\n@Import({\n    MyIntegrationTest.TestState.class,\n    MyIntegrationTest.AnotherTestState.class\n})\n@ActiveProfiles("integration-minimal")\npublic class MyIntegrationTest extends IntegrationTestBase {\n    \n    @Component\n    @State\n    public static class TestState {\n        // State definition\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,s.jsxs)(n.h3,{id:"1-isolation",children:["1. ",(0,s.jsx)(n.strong,{children:"Isolation"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test configurations are completely isolated from production configurations"}),"\n",(0,s.jsx)(n.li,{children:"No interference between different test suites"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-scalability",children:["2. ",(0,s.jsx)(n.strong,{children:"Scalability"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Easy to add new profiles for different test scenarios:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"integration-minimal"})," - Minimal beans for fast tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"integration-full"})," - Complete application context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"integration-db"})," - Tests with database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"integration-ui"})," - Tests with UI components"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-performance",children:["3. ",(0,s.jsx)(n.strong,{children:"Performance"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Load only required beans, reducing test startup time"}),"\n",(0,s.jsx)(n.li,{children:"Ultra-fast mock timings for quick test execution"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-maintainability",children:["4. ",(0,s.jsx)(n.strong,{children:"Maintainability"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clear separation of concerns"}),"\n",(0,s.jsx)(n.li,{children:"Easy to debug configuration issues"}),"\n",(0,s.jsx)(n.li,{children:"Explicit declaration of test dependencies"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"multiple-profile-strategy",children:"Multiple Profile Strategy"}),"\n",(0,s.jsx)(n.p,{children:"You can create different profiles for different testing needs:"}),"\n",(0,s.jsx)(n.h3,{id:"minimal-profile-fastest",children:"Minimal Profile (Fastest)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Profile("integration-minimal")\npublic class IntegrationTestMinimalConfig {\n    // Only essential beans\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"full-profile-complete-context",children:"Full Profile (Complete Context)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Profile("integration-full")\n@Import({BrobotConfig.class, StateManagementConfig.class})\npublic class IntegrationTestFullConfig {\n    // Full application context with overrides\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"database-profile",children:"Database Profile"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Profile("integration-db")\n@EnableJpaRepositories\npublic class IntegrationTestDatabaseConfig {\n    // Database-specific test configuration\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"bean-definition-conflicts",children:"Bean Definition Conflicts"}),"\n",(0,s.jsx)(n.p,{children:"If you still encounter bean conflicts:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Check for component scanning overlap"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ComponentScan(\n    basePackages = "io.github.jspinak.brobot",\n    excludeFilters = {\n        @Filter(type = FilterType.REGEX, pattern = ".*Test.*"),\n        @Filter(type = FilterType.REGEX, pattern = ".*Mock.*Config.*")\n    }\n)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use @ConditionalOnMissingBean"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Bean\n@ConditionalOnMissingBean(ScreenCaptureService.class)\npublic ScreenCaptureService screenCaptureService() {\n    // Bean definition\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Enable bean overriding"})," (use with caution):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"spring.main.allow-bean-definition-overriding=true\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"profile-not-activated",children:"Profile Not Activated"}),"\n",(0,s.jsx)(n.p,{children:"Ensure the profile is activated in your test:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ActiveProfiles("integration-minimal")  // Don\'t forget this!\n'})}),"\n",(0,s.jsx)(n.p,{children:"Or via environment variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"SPRING_PROFILES_ACTIVE=integration-minimal ./gradlew test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mock-mode-not-enabled",children:"Mock Mode Not Enabled"}),"\n",(0,s.jsx)(n.p,{children:"Ensure mock mode is set before Spring context loads:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'static {\n    MockModeManager.setMockMode(true);\n    System.setProperty("brobot.mock.enabled", "true");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep profiles focused"}),": Each profile should have a single, clear purpose"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document profile purpose"}),": Add JavaDoc explaining what each profile provides"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use descriptive names"}),": ",(0,s.jsx)(n.code,{children:"integration-minimal"})," is clearer than ",(0,s.jsx)(n.code,{children:"test1"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Minimize bean count"}),": Only include beans actually needed for tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reuse common configurations"}),": Create base configurations that profiles can extend"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test profile combinations"}),": Ensure profiles work together when needed"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsx)(n.p,{children:"To migrate existing tests to profile-based configuration:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Identify conflicting beans"})," in your current test setup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create a minimal configuration"})," with only required beans"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add @Profile annotation"})," to the configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update test classes"})," to use the new configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create profile-specific properties"})," file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Run tests"})," to verify no conflicts"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-complete-test-setup",children:"Example: Complete Test Setup"}),"\n",(0,s.jsx)(n.p,{children:"Here's a complete example of a test using profile-based configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Configuration\n@SpringBootConfiguration\n@EnableAutoConfiguration(exclude = {\n    DataSourceAutoConfiguration.class,\n    HibernateJpaAutoConfiguration.class\n})\n@Profile("integration-example")\npublic class ExampleTestConfig {\n    \n    @Bean\n    @Primary\n    public Action action() {\n        return new MockAction();\n    }\n    \n    @Bean\n    public StateService stateService() {\n        return mock(StateService.class);\n    }\n}\n\n// Test class\n@SpringBootTest(classes = ExampleTestConfig.class)\n@ActiveProfiles("integration-example")\n@TestPropertySource(properties = {\n    "brobot.mock.enabled=true",\n    "logging.level.io.github.jspinak.brobot=DEBUG"\n})\npublic class ExampleIntegrationTest {\n    \n    @Autowired\n    private Action action;\n    \n    @Test\n    public void testExample() {\n        PatternFindOptions options = new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.BEST)\n            .build();\n            \n        StateImage image = new StateImage.Builder()\n            .setName("TestImage")\n            .build();\n            \n        ObjectCollection objects = new ObjectCollection.Builder()\n            .withImages(image)\n            .build();\n            \n        ActionResult result = action.perform(options, objects);\n        assertTrue(result.isSuccess());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Profile-based testing provides a robust, scalable solution for managing test configurations in Brobot. By isolating test configurations with Spring profiles, you can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Eliminate bean conflicts"}),"\n",(0,s.jsx)(n.li,{children:"Improve test performance"}),"\n",(0,s.jsx)(n.li,{children:"Maintain cleaner test code"}),"\n",(0,s.jsx)(n.li,{children:"Scale your test suite effectively"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach is particularly valuable for large projects with complex Spring configurations and multiple test scenarios."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
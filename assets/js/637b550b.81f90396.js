"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5917],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var o=i(96540);const r={},t=o.createContext(r);function s(e){const n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(t.Provider,{value:n},e.children)}},61873:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"logging/usage","title":"Logging Usage Guide","description":"Transparent Logging - Zero Code Changes Required","source":"@site/docs/07-logging/usage.md","sourceDirName":"07-logging","slug":"/logging/usage","permalink":"/brobot/docs/logging/usage","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/07-logging/usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Logging Performance Guide","permalink":"/brobot/docs/logging/performance"}}');var r=i(74848),t=i(28453);const s={},a="Logging Usage Guide",l={},c=[{value:"Transparent Logging - Zero Code Changes Required",id:"transparent-logging---zero-code-changes-required",level:2},{value:"Example: Standard Actions with Transparent Logging",id:"example-standard-actions-with-transparent-logging",level:3},{value:"Automatic Log Output (when enabled in properties)",id:"automatic-log-output-when-enabled-in-properties",level:3},{value:"Controlling Logging via Configuration",id:"controlling-logging-via-configuration",level:3},{value:"ActionConfig Custom Logging",id:"actionconfig-custom-logging",level:2},{value:"Available Logging Methods",id:"available-logging-methods",level:3},{value:"Basic Example",id:"basic-example",level:3},{value:"Generated Log Output",id:"generated-log-output",level:3},{value:"Complex Workflow Example",id:"complex-workflow-example",level:3},{value:"State Transition Example",id:"state-transition-example",level:3},{value:"Debugging with Detailed Logging",id:"debugging-with-detailed-logging",level:3},{value:"Conditional Logging Based on Context",id:"conditional-logging-based-on-context",level:3},{value:"Integration with Transitions",id:"integration-with-transitions",level:3},{value:"Session Management for Workflow Correlation",id:"session-management-for-workflow-correlation",level:2},{value:"Basic Session Usage",id:"basic-session-usage",level:3},{value:"Generated Session Logs",id:"generated-session-logs",level:3},{value:"Automatic Session Management with Lambda",id:"automatic-session-management-with-lambda",level:3},{value:"Combining Sessions with Custom Messages",id:"combining-sessions-with-custom-messages",level:3},{value:"Best Practices for ActionConfig Logging",id:"best-practices-for-actionconfig-logging",level:3},{value:"Enhanced Action Logging Service",id:"enhanced-action-logging-service",level:2},{value:"Using ActionLoggingService",id:"using-actionloggingservice",level:3},{value:"Session Management",id:"session-management",level:3},{value:"Automatic Session Management",id:"automatic-session-management",level:3},{value:"Formatted Action Output",id:"formatted-action-output",level:3},{value:"Integration with ActionConfig Logging",id:"integration-with-actionconfig-logging",level:3},{value:"Programmatic Logging",id:"programmatic-logging",level:2},{value:"Inject the Logger",id:"inject-the-logger",level:3},{value:"Simple Logging",id:"simple-logging",level:3},{value:"Fluent API",id:"fluent-api",level:3},{value:"Event-Based Logging",id:"event-based-logging",level:3},{value:"Correlation Tracking",id:"correlation-tracking",level:2},{value:"Structured Event Types",id:"structured-event-types",level:2},{value:"ActionEvent",id:"actionevent",level:3},{value:"TransitionEvent",id:"transitionevent",level:3},{value:"MatchEvent",id:"matchevent",level:3},{value:"PerformanceEvent",id:"performanceevent",level:3},{value:"Conditional Logging",id:"conditional-logging",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Appropriate Categories",id:"1-use-appropriate-categories",level:3},{value:"2. Use Appropriate Levels",id:"2-use-appropriate-levels",level:3},{value:"3. Include Context",id:"3-include-context",level:3},{value:"4. Use Structured Events",id:"4-use-structured-events",level:3}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"logging-usage-guide",children:"Logging Usage Guide"})}),"\n",(0,r.jsx)(n.h2,{id:"transparent-logging---zero-code-changes-required",children:"Transparent Logging - Zero Code Changes Required"}),"\n",(0,r.jsxs)(n.p,{children:["Brobot's logging is completely transparent and configuration-driven. You don't need to use special logging services or modify your code. Just use the standard ",(0,r.jsx)(n.code,{children:"Action"})," class, and logging happens automatically based on your ",(0,r.jsx)(n.code,{children:"application.properties"})," configuration."]}),"\n",(0,r.jsx)(n.h3,{id:"example-standard-actions-with-transparent-logging",children:"Example: Standard Actions with Transparent Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Just write normal automation code - logging is automatic!\r\naction.click(usernameField);\r\naction.type("user123");\r\naction.click(passwordField);\r\naction.type(password);\r\naction.click(loginButton);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"automatic-log-output-when-enabled-in-properties",children:"Automatic Log Output (when enabled in properties)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\u2192 CLICK usernameField\r\n\u2713 CLICK usernameField | loc:(245,180) | sim:0.91 | 32ms\r\n\u2192 TYPE "user123"\r\n\u2713 TYPE "user123" | 125ms\r\n\u2192 CLICK passwordField\r\n\u2713 CLICK passwordField | loc:(245,220) | sim:0.90 | 28ms\r\n\u2192 TYPE "********"\r\n\u2713 TYPE "********" | 95ms\r\n\u2192 CLICK loginButton\r\n\u2713 CLICK loginButton | loc:(520,380) | sim:0.92 | 45ms\n'})}),"\n",(0,r.jsx)(n.h3,{id:"controlling-logging-via-configuration",children:"Controlling Logging via Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",children:"# Enable action logging (in application.properties)\r\nbrobot.logging.categories.actions=INFO\r\n\r\n# Or disable it completely\r\n# brobot.logging.categories.actions=OFF\r\n\r\n# Or get more details\r\n# brobot.logging.categories.actions=DEBUG\n"})}),"\n",(0,r.jsx)(n.h2,{id:"actionconfig-custom-logging",children:"ActionConfig Custom Logging"}),"\n",(0,r.jsx)(n.p,{children:"Brobot provides built-in logging methods for all ActionConfig subclasses (PatternFindOptions, ClickOptions, TypeOptions, etc.) allowing you to add custom log messages at key points in the action lifecycle."}),"\n",(0,r.jsx)(n.h3,{id:"available-logging-methods",children:"Available Logging Methods"}),"\n",(0,r.jsx)(n.p,{children:"Each ActionConfig builder supports four logging methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"withBeforeActionLog(String message)"})})," - Logged before the action begins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"withAfterActionLog(String message)"})})," - Logged after the action completes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"withSuccessLog(String message)"})})," - Logged only when the action succeeds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"withFailureLog(String message)"})})," - Logged only when the action fails"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'PatternFindOptions findOptions = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Searching for submit button...")\r\n    .withSuccessLog("Submit button found!")\r\n    .withFailureLog("Submit button not found - check if page loaded correctly")\r\n    .build();\r\n\r\n// Use perform() with ActionConfig for custom messages\r\nActionResult result = action.perform(findOptions, submitButton);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"generated-log-output",children:"Generated Log Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Searching for submit button...\r\n\u2192 FIND submitButton\r\n\u2713 FIND submitButton | loc:(100,200) | sim:0.95 | 25ms\r\nSubmit button found!\n"})}),"\n",(0,r.jsx)(n.h3,{id:"complex-workflow-example",children:"Complex Workflow Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Step 1: Verify we\'re on the correct page\r\nPatternFindOptions verifyPage = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Verifying arrival at login page...")\r\n    .withSuccessLog("Login page confirmed")\r\n    .withFailureLog("WARNING: Not on login page")\r\n    .build();\r\n\r\n// Step 2: Enter username\r\nTypeOptions typeUsername = new TypeOptions.Builder()\r\n    .withBeforeActionLog("Entering username...")\r\n    .withAfterActionLog("Username entry complete")\r\n    .build();\r\n\r\n// Step 3: Enter password\r\nTypeOptions typePassword = new TypeOptions.Builder()\r\n    .withBeforeActionLog("Entering password...")\r\n    .withAfterActionLog("Password entry complete")\r\n    .build();\r\n\r\n// Step 4: Click submit\r\nClickOptions submitClick = new ClickOptions.Builder()\r\n    .withBeforeActionLog("Submitting login form...")\r\n    .withSuccessLog("Login form submitted successfully")\r\n    .withFailureLog("ERROR: Failed to submit login form")\r\n    .build();\r\n\r\n// Execute the workflow - use perform() for custom messages\r\naction.perform(verifyPage, loginPageHeader);\r\naction.perform(typeUsername, usernameField, username);\r\naction.perform(typePassword, passwordField, password);\r\naction.perform(submitClick, submitButton);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"state-transition-example",children:"State Transition Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class LoginTransitions {\r\n\r\n    @Autowired\r\n    private Action action;\r\n\r\n    public void transitionToInventory() {\r\n        PatternFindOptions findInventory = new PatternFindOptions.Builder()\r\n            .withBeforeActionLog("Navigating to Inventory...")\r\n            .withSuccessLog("Successfully arrived at Inventory")\r\n            .withFailureLog("Failed to reach Inventory - may need to close dialogs")\r\n            .withSimilarity(0.85)\r\n            .build();\r\n\r\n        ClickOptions openInventory = new ClickOptions.Builder()\r\n            .withBeforeActionLog("Opening Inventory menu...")\r\n            .withAfterActionLog("Inventory menu interaction complete")\r\n            .build();\r\n\r\n        // Click to open, then verify arrival\r\n        action.perform(openInventory, inventoryButton);\r\n        action.perform(findInventory, inventoryHeader);\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"debugging-with-detailed-logging",children:"Debugging with Detailed Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use detailed logging for debugging complex interactions\r\nDragOptions complexDrag = new DragOptions.Builder()\r\n    .withBeforeActionLog("Starting drag operation from item slot to storage...")\r\n    .withAfterActionLog("Drag operation completed - checking result")\r\n    .withSuccessLog("Item successfully moved to storage")\r\n    .withFailureLog("Drag failed - item may be locked or storage full")\r\n    .setFromLocation(itemSlot)\r\n    .setToLocation(storageSlot)\r\n    .setPauseBeforeBegin(0.5)  // Give UI time to respond\r\n    .build();\r\n\r\naction.drag(complexDrag);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-logging-based-on-context",children:"Conditional Logging Based on Context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public PatternFindOptions buildFindOptions(boolean verbose) {\r\n    PatternFindOptions.Builder builder = new PatternFindOptions.Builder()\r\n        .withSimilarity(0.9);\r\n\r\n    if (verbose) {\r\n        builder.withBeforeActionLog("Performing high-precision search...")\r\n               .withSuccessLog("High-precision match found")\r\n               .withFailureLog("No match at 90% similarity");\r\n    }\r\n\r\n    return builder.build();\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-transitions",children:"Integration with Transitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class StateTransitions {\r\n\r\n    public PatternFindOptions arrivalVerification(String stateName) {\r\n        return new PatternFindOptions.Builder()\r\n            .withBeforeActionLog("Verifying arrival at " + stateName + "...")\r\n            .withSuccessLog("Successfully arrived at " + stateName)\r\n            .withFailureLog("Failed to confirm arrival at " + stateName)\r\n            .withSearchRegion(SearchRegion.TOP_HALF)\r\n            .build();\r\n    }\r\n\r\n    public ClickOptions navigationClick(String targetName) {\r\n        return new ClickOptions.Builder()\r\n            .withBeforeActionLog("Clicking " + targetName + "...")\r\n            .withSuccessLog(targetName + " clicked successfully")\r\n            .withFailureLog("Failed to click " + targetName)\r\n            .setClickType(ClickType.LEFT)\r\n            .build();\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"session-management-for-workflow-correlation",children:"Session Management for Workflow Correlation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ActionSessionManager"})," provides session-based logging for tracking related actions across workflows. Sessions use SLF4J MDC (Mapped Diagnostic Context) to add correlation IDs to all logs within a session."]}),"\n",(0,r.jsx)(n.h3,{id:"basic-session-usage",children:"Basic Session Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Autowired\r\nprivate ActionSessionManager sessionManager;\r\n\r\npublic void processWorkflow() {\r\n    // Start a named session\r\n    sessionManager.startSession("Process Items Workflow");\r\n\r\n    try {\r\n        // Track each action in the session\r\n        sessionManager.nextAction();\r\n        action.click(inventoryButton);\r\n\r\n        sessionManager.nextAction();\r\n        action.click(processButton);\r\n\r\n        sessionManager.nextAction();\r\n        action.click(startButton);\r\n\r\n    } finally {\r\n        // Always end the session\r\n        sessionManager.endSession();\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"generated-session-logs",children:"Generated Session Logs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"=== Starting Task: Process Items Workflow | Session: abc12345 ===\r\n[session:abc12345 seq:001] \u2192 CLICK inventoryButton\r\n[session:abc12345 seq:001] \u2713 CLICK inventoryButton | loc:(100,50) | sim:0.92 | 45ms\r\n[session:abc12345 seq:002] \u2192 CLICK processButton\r\n[session:abc12345 seq:002] \u2713 CLICK processButton | loc:(200,100) | sim:0.91 | 38ms\r\n[session:abc12345 seq:003] \u2192 CLICK startButton\r\n[session:abc12345 seq:003] \u2713 CLICK startButton | loc:(300,200) | sim:0.93 | 42ms\r\n=== Completed Task: Process Items Workflow | Session: abc12345 | Total Actions: 3 ===\n"})}),"\n",(0,r.jsx)(n.h3,{id:"automatic-session-management-with-lambda",children:"Automatic Session Management with Lambda"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Session automatically starts and ends, even if exception occurs\r\nsessionManager.executeWithSession("Login Flow", () -> {\r\n    action.click(usernameField);\r\n    action.type(username);\r\n    action.click(passwordField);\r\n    action.type(password);\r\n    action.click(loginButton);\r\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"combining-sessions-with-custom-messages",children:"Combining Sessions with Custom Messages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'sessionManager.startSession("Critical Operation");\r\n\r\nPatternFindOptions options = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Searching for critical element...")\r\n    .withSuccessLog("Critical element found - proceeding")\r\n    .withFailureLog("CRITICAL: Element not found - aborting")\r\n    .build();\r\n\r\nsessionManager.nextAction();\r\naction.perform(options, criticalElement);\r\n\r\nsessionManager.endSession();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"best-practices-for-actionconfig-logging",children:"Best Practices for ActionConfig Logging"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Be Descriptive but Concise"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Good - clear and informative\r\n.withBeforeActionLog("Validating form data before submission...")\r\n\r\n// Too vague\r\n.withBeforeActionLog("Processing...")\r\n\r\n// Too verbose\r\n.withBeforeActionLog("Now starting the process to validate all form fields including username, password, email...")\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Include Context in Failure Messages"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Good - helps with debugging\r\n.withFailureLog("Login button not found - check if page fully loaded or if button moved")\r\n\r\n// Less helpful\r\n.withFailureLog("Action failed")\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Success Logs for Important Milestones"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Good - marks important workflow points\r\n.withSuccessLog("Order successfully submitted - Order ID captured")\r\n\r\n// Unnecessary - duplicates automatic logging\r\n.withSuccessLog("Click successful")\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Combine with Other ActionConfig Options"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'PatternFindOptions robust = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Searching with reduced similarity...")\r\n    .withSimilarity(0.7)  // Lower threshold\r\n    .withSearchRegion(SearchRegion.FULL_SCREEN)  // Wider search\r\n    .setPauseBeforeBegin(1.0)  // Allow page to stabilize\r\n    .withFailureLog("Element not found even with relaxed criteria")\r\n    .build();\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"enhanced-action-logging-service",children:"Enhanced Action Logging Service"}),"\n",(0,r.jsxs)(n.p,{children:["Brobot provides an ",(0,r.jsx)(n.code,{children:"ActionLoggingService"})," that wraps the standard Action class with automatic logging, session management, and formatted output."]}),"\n",(0,r.jsx)(n.h3,{id:"using-actionloggingservice",children:"Using ActionLoggingService"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Autowired\r\nprivate ActionLoggingService actionLogger;\r\n\r\n// Simple usage - automatic logging of attempts and results\r\nactionLogger.click(submitButton);  // Logs: \u2192 CLICK submitButton\r\n                                   // Logs: \u2713 CLICK submitButton | loc:(100,200) | sim:0.95 | 25ms\n"})}),"\n",(0,r.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,r.jsx)(n.p,{children:"Track related actions with session correlation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Start a session for related actions\r\nactionLogger.startSession("User Registration");\r\n\r\n// All subsequent actions are tracked within this session\r\nactionLogger.find(registrationForm);\r\nactionLogger.type(emailField, "user@example.com");\r\nactionLogger.type(passwordField, "password");\r\nactionLogger.click(submitButton);\r\n\r\n// End the session with summary\r\nactionLogger.endSession();\r\n// Logs: === Completed Task: User Registration | Session: a1b2c3d4 | Total Actions: 4 ===\n'})}),"\n",(0,r.jsx)(n.h3,{id:"automatic-session-management",children:"Automatic Session Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Execute with automatic session lifecycle management\r\nactionLogger.executeWithSession("Login Flow", () -> {\r\n    actionLogger.find(loginPage);\r\n    actionLogger.type(usernameField, username);\r\n    actionLogger.type(passwordField, password);\r\n    actionLogger.click(loginButton);\r\n}); // Session automatically ended even if exception occurs\n'})}),"\n",(0,r.jsx)(n.h3,{id:"formatted-action-output",children:"Formatted Action Output"}),"\n",(0,r.jsx)(n.p,{children:"The service provides consistent, concise formatting:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Success"}),": ",(0,r.jsx)(n.code,{children:"\u2713 CLICK saveButton | loc:(520,380) | sim:0.92 | 45ms"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Failure"}),": ",(0,r.jsx)(n.code,{children:"\u2717 FIND submitButton | NOT FOUND | 1500ms"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Attempt"}),": ",(0,r.jsx)(n.code,{children:"\u2192 TYPE[user@example.com] emailField"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-actionconfig-logging",children:"Integration with ActionConfig Logging"}),"\n",(0,r.jsx)(n.p,{children:"ActionLoggingService works seamlessly with ActionConfig custom logging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'PatternFindOptions options = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Searching for save button...")\r\n    .withSuccessLog("Save button found!")\r\n    .build();\r\n\r\n// Both custom and automatic logging will occur\r\nactionLogger.find(options, saveButton);\r\n// Logs: Searching for save button...\r\n// Logs: \u2192 FIND saveButton\r\n// Logs: \u2713 FIND saveButton | loc:(100,50) | sim:0.95 | 30ms\r\n// Logs: Save button found!\n'})}),"\n",(0,r.jsx)(n.h2,{id:"programmatic-logging",children:"Programmatic Logging"}),"\n",(0,r.jsx)(n.p,{children:"For custom logging needs, use the BrobotLogger directly:"}),"\n",(0,r.jsx)(n.h3,{id:"inject-the-logger",children:"Inject the Logger"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Autowired\r\nprivate BrobotLogger logger;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"simple-logging",children:"Simple Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Log a simple message\r\nlogger.info(LogCategory.ACTIONS, "Processing form submission");\r\n\r\n// Log with format parameters\r\nlogger.debug(LogCategory.MATCHING, "Found {} matches in {}ms", 3, 150);\r\n\r\n// Log errors\r\nlogger.error(LogCategory.SYSTEM, "Failed to connect: {}", exception.getMessage());\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fluent-api",children:"Fluent API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Build complex log entries\r\nlogger.builder(LogCategory.ACTIONS)\r\n    .level(LogLevel.INFO)\r\n    .message("Processing batch operation")\r\n    .context("batch_id", batchId)\r\n    .context("items_count", items.size())\r\n    .duration(Duration.ofMillis(500))\r\n    .log();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"event-based-logging",children:"Event-Based Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Log action events\r\nActionEvent event = ActionEvent.builder()\r\n    .type("CLICK")\r\n    .target("submitButton")\r\n    .success(true)\r\n    .duration(Duration.ofMillis(25))\r\n    .location(new Location(100, 200))\r\n    .similarity(0.95)\r\n    .build();\r\n\r\nlogger.logAction(event);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"correlation-tracking",children:"Correlation Tracking"}),"\n",(0,r.jsx)(n.p,{children:"Track related operations with correlation IDs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Autowired\r\nprivate CorrelationContext correlation;\r\n\r\n// Start a new session\r\ncorrelation.startSession("user_registration");\r\n\r\n// All subsequent logs include the session ID\r\naction.click(submitButton);  // Logs include correlation ID\r\naction.type(emailField, email);  // Same correlation ID\r\n\r\n// End the session\r\ncorrelation.endSession();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"structured-event-types",children:"Structured Event Types"}),"\n",(0,r.jsx)(n.h3,{id:"actionevent",children:"ActionEvent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ActionEvent event = ActionEvent.builder()\r\n    .type("FIND")\r\n    .target("loginButton")\r\n    .success(true)\r\n    .duration(Duration.ofMillis(50))\r\n    .location(new Location(500, 300))\r\n    .similarity(0.92)\r\n    .metadata("attempts", 2)\r\n    .build();\r\n\r\nlogger.logAction(event);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"transitionevent",children:"TransitionEvent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'TransitionEvent event = TransitionEvent.builder()\r\n    .fromState("MainMenu")\r\n    .toState("Settings")\r\n    .success(true)\r\n    .duration(Duration.ofMillis(200))\r\n    .method(TransitionMethod.CLICK)\r\n    .build();\r\n\r\nlogger.logTransition(event);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"matchevent",children:"MatchEvent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'MatchEvent event = MatchEvent.builder()\r\n    .pattern("submitButton.png")\r\n    .matches(matchList)\r\n    .searchTime(Duration.ofMillis(75))\r\n    .strategy(SearchStrategy.BEST)\r\n    .searchRegion(region)\r\n    .build();\r\n\r\nlogger.logMatch(event);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performanceevent",children:"PerformanceEvent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'PerformanceEvent event = PerformanceEvent.builder()\r\n    .operation("batch_process")\r\n    .duration(Duration.ofSeconds(5))\r\n    .memoryUsed(1024 * 1024 * 50) // 50MB\r\n    .breakdown(Map.of(\r\n        "initialization", Duration.ofMillis(100),\r\n        "processing", Duration.ofMillis(4500),\r\n        "cleanup", Duration.ofMillis(400)\r\n    ))\r\n    .build();\r\n\r\nlogger.logPerformance(event);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"conditional-logging",children:"Conditional Logging"}),"\n",(0,r.jsx)(n.p,{children:"Check log levels before expensive operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"if (logger.shouldLog(LogCategory.MATCHING, LogLevel.DEBUG)) {\r\n    // Expensive operation only when DEBUG is enabled\r\n    String details = generateDetailedReport();\r\n    logger.debug(LogCategory.MATCHING, details);\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-use-appropriate-categories",children:"1. Use Appropriate Categories"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Good - use specific category\r\nlogger.info(LogCategory.ACTIONS, "Button clicked");\r\n\r\n// Bad - wrong category\r\nlogger.info(LogCategory.SYSTEM, "Button clicked");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-use-appropriate-levels",children:"2. Use Appropriate Levels"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// ERROR - Something failed that needs attention\r\nlogger.error(LogCategory.ACTIONS, "Critical action failed");\r\n\r\n// WARN - Something unexpected but recoverable\r\nlogger.warn(LogCategory.MATCHING, "Low similarity match: 0.65");\r\n\r\n// INFO - Normal operation events\r\nlogger.info(LogCategory.TRANSITIONS, "Navigation completed");\r\n\r\n// DEBUG - Detailed information for debugging\r\nlogger.debug(LogCategory.MATCHING, "Search region: {}", region);\r\n\r\n// TRACE - Most detailed, typically method entry/exit\r\nlogger.trace(LogCategory.LIFECYCLE, "Entering processAction()");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-include-context",children:"3. Include Context"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Good - includes context\r\nlogger.builder(LogCategory.ACTIONS)\r\n    .message("Processing failed")\r\n    .context("item_id", itemId)\r\n    .context("error", exception.getMessage())\r\n    .log();\r\n\r\n// Bad - no context\r\nlogger.error(LogCategory.ACTIONS, "Processing failed");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-use-structured-events",children:"4. Use Structured Events"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Good - structured event with metadata\r\nActionEvent event = ActionEvent.success("CLICK", "button", Duration.ofMillis(50));\r\nlogger.logAction(event);\r\n\r\n// Less ideal - plain text\r\nlogger.info(LogCategory.ACTIONS, "Clicked button in 50ms");\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5827],{28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(96540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},75238:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"testing/test-utilities","title":"Test Utilities","description":"Common utilities and helpers for testing Brobot applications","source":"@site/docs/04-testing/test-utilities.md","sourceDirName":"04-testing","slug":"/testing/test-utilities","permalink":"/brobot/docs/testing/test-utilities","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/test-utilities.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Test Utilities","description":"Common utilities and helpers for testing Brobot applications"},"sidebar":"docSidebar","previous":{"title":"Hybrid Architecture Summary","permalink":"/brobot/docs/testing/hybrid-architecture-summary"},"next":{"title":"Mock Mode Migration Guide","permalink":"/brobot/docs/testing/mock-mode-migration"}}');var i=s(74848),a=s(28453);const o={sidebar_position:8,title:"Test Utilities",description:"Common utilities and helpers for testing Brobot applications"},r="Test Utilities",l={},c=[{value:"BrobotTestBase - Base Test Class",id:"brobottestbase---base-test-class",level:2},{value:"What BrobotTestBase Provides:",id:"what-brobottestbase-provides",level:3},{value:"Test Utility Classes",id:"test-utility-classes",level:2},{value:"BrobotTestUtils - Common Test Helpers",id:"brobottestutils---common-test-helpers",level:3},{value:"MatTestUtils - OpenCV Mat Testing Utilities",id:"mattestutils---opencv-mat-testing-utilities",level:3},{value:"MockModeManager - Centralized Mock Control",id:"mockmodemanager---centralized-mock-control",level:2},{value:"BrobotTestUtils - Test Data Creation",id:"brobottestutils---test-data-creation",level:2},{value:"Overview",id:"overview",level:3},{value:"Factory Methods",id:"factory-methods",level:2},{value:"Creating Test States",id:"creating-test-states",level:3},{value:"Creating Test StateImages",id:"creating-test-stateimages",level:3},{value:"Creating Test Matches",id:"creating-test-matches",level:3},{value:"ActionResult Creation",id:"actionresult-creation",level:2},{value:"Successful Results",id:"successful-results",level:3},{value:"Failed Results",id:"failed-results",level:3},{value:"Location and Region Utilities",id:"location-and-region-utilities",level:2},{value:"Working with Locations",id:"working-with-locations",level:3},{value:"Working with Regions",id:"working-with-regions",level:3},{value:"Environment Detection",id:"environment-detection",level:2},{value:"CI/CD Detection",id:"cicd-detection",level:3},{value:"Headless Environment Detection",id:"headless-environment-detection",level:3},{value:"Timing Utilities",id:"timing-utilities",level:2},{value:"Sleep Functions",id:"sleep-functions",level:3},{value:"Test Name Generation",id:"test-name-generation",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Factory Methods for Consistency",id:"1-use-factory-methods-for-consistency",level:3},{value:"2. Leverage Random Data for Robustness",id:"2-leverage-random-data-for-robustness",level:3},{value:"3. Use Environment Detection for Conditional Testing",id:"3-use-environment-detection-for-conditional-testing",level:3},{value:"4. Approximate Comparisons for UI Testing",id:"4-approximate-comparisons-for-ui-testing",level:3},{value:"Integration with Test Frameworks",id:"integration-with-test-frameworks",level:2},{value:"JUnit 5 Integration",id:"junit-5-integration",level:3},{value:"Parameterized Tests",id:"parameterized-tests",level:3},{value:"Common Testing Patterns",id:"common-testing-patterns",level:2},{value:"Mock Data Creation",id:"mock-data-creation",level:3},{value:"Test Data Builders",id:"test-data-builders",level:3},{value:"Notes",id:"notes",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-utilities",children:"Test Utilities"})}),"\n",(0,i.jsx)(t.p,{children:"Brobot provides comprehensive test utilities to help you write robust and maintainable tests. The framework includes base classes, utility methods, and centralized mock mode management."}),"\n",(0,i.jsx)(t.h2,{id:"brobottestbase---base-test-class",children:"BrobotTestBase - Base Test Class"}),"\n",(0,i.jsxs)(t.p,{children:["All Brobot tests should extend ",(0,i.jsx)(t.code,{children:"BrobotTestBase"})," to ensure proper test configuration:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\nimport org.junit.jupiter.api.Test;\n\npublic class MyBrobotTest extends BrobotTestBase {\n    \n    @Test\n    public void testMyFeature() {\n        // Mock mode is automatically enabled\n        // Test will work in headless environments\n    }\n    \n    @Test\n    public void testWithRealMode() {\n        // Temporarily disable mock mode\n        disableMockMode();\n        try {\n            // Test with real screen capture\n        } finally {\n            // Re-enable mock mode\n            MockModeManager.setMockMode(true);\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"what-brobottestbase-provides",children:"What BrobotTestBase Provides:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Automatic mock mode activation"})," via ",(0,i.jsx)(t.code,{children:"MockModeManager"})]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.strong,{children:"Headless environment compatibility"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Fast mock timings"})," (0.01-0.04 seconds for operations)"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.strong,{children:"CI/CD pipeline support"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.strong,{children:"Prevention of AWTException and HeadlessException errors"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"test-utility-classes",children:"Test Utility Classes"}),"\n",(0,i.jsx)(t.h3,{id:"brobottestutils---common-test-helpers",children:"BrobotTestUtils - Common Test Helpers"}),"\n",(0,i.jsx)(t.p,{children:"Provides factory methods for creating test data:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import io.github.jspinak.brobot.test.utils.BrobotTestUtils;\n\n// Create test objects\nState testState = BrobotTestUtils.createTestState("MyState");\nStateImage testImage = BrobotTestUtils.createTestStateImage("TestImage");\nMatch testMatch = BrobotTestUtils.createTestMatch(100, 100, 50, 50, 0.95);\n\n// Create multiple test matches\nList<Match> matches = BrobotTestUtils.createTestMatches(5);\n\n// Create action results\nActionResult success = BrobotTestUtils.createSuccessfulResult(3);\nActionResult failure = BrobotTestUtils.createFailedResult();\n'})}),"\n",(0,i.jsx)(t.h3,{id:"mattestutils---opencv-mat-testing-utilities",children:"MatTestUtils - OpenCV Mat Testing Utilities"}),"\n",(0,i.jsx)(t.p,{children:"Comprehensive utilities for safe OpenCV Mat operations in tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'import io.github.jspinak.brobot.test.utils.MatTestUtils;\n\n// Create safe, validated Mats\nMat colorMat = MatTestUtils.createColorMat(100, 100, 255, 0, 0); // Red\nMat grayMat = MatTestUtils.createGrayMat(100, 100, 128);\n\n// Create test patterns\nMat checkerboard = MatTestUtils.createCheckerboardMat(200, 200, 25);\nMat gradient = MatTestUtils.createGradientMat(100, 100, true);\nMat circle = MatTestUtils.createShapeMat(100, 100, 1);\n\n// Validate Mats before operations\nMatTestUtils.validateMat(mat, "before processing");\n\n// Safe cleanup\nMatTestUtils.safeReleaseAll(mat1, mat2, mat3);\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Key Features:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Prevents JVM crashes from invalid Mat operations"}),"\n",(0,i.jsx)(t.li,{children:"Provides validation and safe cleanup"}),"\n",(0,i.jsx)(t.li,{children:"Includes pattern generation for testing"}),"\n",(0,i.jsx)(t.li,{children:"Motion detection test helpers"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["See ",(0,i.jsx)(t.a,{href:"/brobot/docs/testing/mat-testing-utilities",children:"Mat Testing Utilities"})," for complete documentation."]}),"\n",(0,i.jsx)(t.h2,{id:"mockmodemanager---centralized-mock-control",children:"MockModeManager - Centralized Mock Control"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"MockModeManager"})," provides a single source of truth for mock mode configuration:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import io.github.jspinak.brobot.config.MockModeManager;\n\n// Enable mock mode globally\nMockModeManager.setMockMode(true);\n\n// Check current mock mode\nboolean isMock = MockModeManager.isMockMode();\n\n// Debug mock mode state across all components\nMockModeManager.logMockModeState();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"brobottestutils---test-data-creation",children:"BrobotTestUtils - Test Data Creation"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"BrobotTestUtils"})," class provides utilities for creating test data:"]}),"\n",(0,i.jsx)(t.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["Located at ",(0,i.jsx)(t.code,{children:"io.github.jspinak.brobot.test.utils.BrobotTestUtils"}),", this utility class provides:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Factory methods for creating test objects"}),"\n",(0,i.jsx)(t.li,{children:"Random data generators for realistic test scenarios"}),"\n",(0,i.jsx)(t.li,{children:"Assertion helpers for approximate comparisons"}),"\n",(0,i.jsx)(t.li,{children:"Environment detection utilities"}),"\n",(0,i.jsx)(t.li,{children:"Timing and synchronization helpers"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"factory-methods",children:"Factory Methods"}),"\n",(0,i.jsx)(t.h3,{id:"creating-test-states",children:"Creating Test States"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Create a simple test state\nState testState = BrobotTestUtils.createTestState("LoginPage");\n\n// Create with custom properties\nState.Builder builder = new State.Builder("HomePage");\nbuilder.setBlocking(true);\nState customState = builder.build();\n'})}),"\n",(0,i.jsx)(t.h3,{id:"creating-test-stateimages",children:"Creating Test StateImages"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Create a test StateImage\nStateImage testImage = BrobotTestUtils.createTestStateImage("submitButton");\n\n// The created StateImage has default similarity settings\n'})}),"\n",(0,i.jsx)(t.h3,{id:"creating-test-matches",children:"Creating Test Matches"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create a match at specific location\nMatch match = BrobotTestUtils.createTestMatch(\n    100,  // x\n    200,  // y\n    50,   // width\n    50,   // height\n    0.95  // score\n);\n\n// Create a random match for testing\nMatch randomMatch = BrobotTestUtils.createRandomMatch();\n\n// Create multiple matches\nList<Match> matches = BrobotTestUtils.createTestMatches(5);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"actionresult-creation",children:"ActionResult Creation"}),"\n",(0,i.jsx)(t.h3,{id:"successful-results",children:"Successful Results"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create a successful result with 3 matches\nActionResult success = BrobotTestUtils.createSuccessfulResult(3);\n\n// Verify the result\nassertTrue(success.isSuccess());\nassertEquals(3, success.getMatches().size());\n"})}),"\n",(0,i.jsx)(t.h3,{id:"failed-results",children:"Failed Results"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create a failed result\nActionResult failed = BrobotTestUtils.createFailedResult();\n\n// Verify the result\nassertFalse(failed.isSuccess());\nassertTrue(failed.getMatches().isEmpty());\n"})}),"\n",(0,i.jsx)(t.h2,{id:"location-and-region-utilities",children:"Location and Region Utilities"}),"\n",(0,i.jsx)(t.h3,{id:"working-with-locations",children:"Working with Locations"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create a specific location\nLocation loc = BrobotTestUtils.createTestLocation(100, 200);\n\n// Create a random location within screen bounds\nLocation randomLoc = BrobotTestUtils.createRandomLocation();\n\n// Compare locations with tolerance\nLocation loc1 = new Location(100, 100);\nLocation loc2 = new Location(102, 98);\nboolean isClose = BrobotTestUtils.areLocationsApproximatelyEqual(\n    loc1, loc2, 5  // tolerance in pixels\n);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"working-with-regions",children:"Working with Regions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create a specific region\nRegion region = BrobotTestUtils.createTestRegion(\n    10,   // x\n    20,   // y\n    100,  // width\n    50    // height\n);\n\n// Create a random region\nRegion randomRegion = BrobotTestUtils.createRandomRegion();\n\n// Compare regions with tolerance\nboolean isClose = BrobotTestUtils.areRegionsApproximatelyEqual(\n    region1, region2, 3  // tolerance in pixels\n);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"environment-detection",children:"Environment Detection"}),"\n",(0,i.jsx)(t.h3,{id:"cicd-detection",children:"CI/CD Detection"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\nvoid testRequiringDisplay() {\n    if (BrobotTestUtils.isRunningInCI()) {\n        // Skip or use mock mode in CI environment\n        assumeFalse(true, "Skipping in CI environment");\n    }\n    \n    // Test requiring actual display\n    // ...\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"headless-environment-detection",children:"Headless Environment Detection"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@Test\nvoid testScreenCapture() {\n    if (BrobotTestUtils.isHeadless()) {\n        // Use mock mode for headless environments\n        FrameworkSettings.mock = true;\n    }\n    \n    // Proceed with test\n    // ...\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"timing-utilities",children:"Timing Utilities"}),"\n",(0,i.jsx)(t.h3,{id:"sleep-functions",children:"Sleep Functions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Short sleep (100ms)\nBrobotTestUtils.shortSleep();\n\n// Custom sleep duration\nBrobotTestUtils.sleep(500);  // 500ms\n\n// Use in test scenarios\n@Test\nvoid testWithTiming() {\n    action.click(button);\n    BrobotTestUtils.shortSleep();  // Wait for UI to update\n    assertTrue(isDialogVisible());\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-name-generation",children:"Test Name Generation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Generate unique test names\nString testName = BrobotTestUtils.generateTestName("TestRun");\n// Result: "TestRun_1735000123456_789"\n\n// Useful for creating unique test resources\nString imageName = BrobotTestUtils.generateTestName("testImage");\nStateImage image = new StateImage.Builder()\n    .setName(imageName)\n    .build();\n'})}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(t.h3,{id:"1-use-factory-methods-for-consistency",children:"1. Use Factory Methods for Consistency"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\nvoid testStateTransition() {\n    // Good: Use factory methods\n    State fromState = BrobotTestUtils.createTestState("LoginPage");\n    State toState = BrobotTestUtils.createTestState("HomePage");\n    \n    // Test transition logic\n    // ...\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"2-leverage-random-data-for-robustness",children:"2. Leverage Random Data for Robustness"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@Test\nvoid testMatchProcessing() {\n    // Test with various random matches\n    for (int i = 0; i < 10; i++) {\n        Match match = BrobotTestUtils.createRandomMatch();\n        // Process match\n        assertTrue(processMatch(match));\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-use-environment-detection-for-conditional-testing",children:"3. Use Environment Detection for Conditional Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@BeforeEach\nvoid setup() {\n    if (BrobotTestUtils.isHeadless() || BrobotTestUtils.isRunningInCI()) {\n        // Enable mock mode for headless/CI environments\n        FrameworkSettings.mock = true;\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"4-approximate-comparisons-for-ui-testing",children:"4. Approximate Comparisons for UI Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@Test\nvoid testMouseMovement() {\n    Location expected = new Location(100, 100);\n    action.move(expected);\n    \n    Location actual = Mouse.at();\n    \n    // Allow for small variations in mouse position\n    assertTrue(BrobotTestUtils.areLocationsApproximatelyEqual(\n        expected, actual, 2\n    ));\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"integration-with-test-frameworks",children:"Integration with Test Frameworks"}),"\n",(0,i.jsx)(t.h3,{id:"junit-5-integration",children:"JUnit 5 Integration"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass MyBrobotTest extends BrobotTestBase {\n    \n    @BeforeEach\n    void setup() {\n        // Use utilities for test setup\n        if (BrobotTestUtils.isHeadless()) {\n            FrameworkSettings.mock = true;\n        }\n    }\n    \n    @Test\n    void testWithUtilities() {\n        State state = BrobotTestUtils.createTestState("TestState");\n        ActionResult result = BrobotTestUtils.createSuccessfulResult(1);\n        \n        // Your test logic\n        assertNotNull(state);\n        assertTrue(result.isSuccess());\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"parameterized-tests",children:"Parameterized Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@ParameterizedTest\n@ValueSource(ints = {1, 3, 5, 10})\nvoid testMultipleMatches(int matchCount) {\n    ActionResult result = BrobotTestUtils.createSuccessfulResult(matchCount);\n    \n    assertEquals(matchCount, result.getMatches().size());\n    assertTrue(result.isSuccess());\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"common-testing-patterns",children:"Common Testing Patterns"}),"\n",(0,i.jsx)(t.h3,{id:"mock-data-creation",children:"Mock Data Creation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"private ActionResult mockFindAction() {\n    return BrobotTestUtils.createSuccessfulResult(1);\n}\n\nprivate List<Match> mockMultipleMatches() {\n    return BrobotTestUtils.createTestMatches(5);\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-data-builders",children:"Test Data Builders"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'class TestDataBuilder {\n    \n    public State buildLoginState() {\n        State state = BrobotTestUtils.createTestState("Login");\n        // Add custom configuration\n        return state;\n    }\n    \n    public List<StateImage> buildTestImages() {\n        return Arrays.asList(\n            BrobotTestUtils.createTestStateImage("button1"),\n            BrobotTestUtils.createTestStateImage("button2"),\n            BrobotTestUtils.createTestStateImage("button3")\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"notes",children:"Notes"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"All random generators use reasonable bounds (e.g., 1920x1080 screen)"}),"\n",(0,i.jsx)(t.li,{children:"Factory methods create objects with sensible defaults"}),"\n",(0,i.jsx)(t.li,{children:"Utilities are designed to work in both mock and real modes"}),"\n",(0,i.jsx)(t.li,{children:"Thread-safe for use in parallel test execution"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/unit-testing",children:"Unit Testing Guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/integration-testing",children:"Integration Testing"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/mock-mode-guide",children:"Mock Mode Guide"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/core-library/testing/enhanced-mocking",children:"Enhanced Mock Testing System"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/core-library/testing/test-logging-architecture",children:"Test Logging Architecture"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
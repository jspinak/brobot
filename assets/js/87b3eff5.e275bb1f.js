"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9191],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},74189:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/guides/advanced-illustration-system","title":"Advanced Illustration System","description":"Brobot\'s advanced illustration system provides intelligent, context-aware visual documentation of automation actions with performance optimization and quality-based filtering.","source":"@site/docs/03-core-library/guides/advanced-illustration-system.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/advanced-illustration-system","permalink":"/brobot/docs/core-library/guides/advanced-illustration-system","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/advanced-illustration-system.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"title":"Advanced Illustration System"},"sidebar":"docSidebar","previous":{"title":"State-Aware Scheduling","permalink":"/brobot/docs/core-library/guides/state-aware-scheduling"},"next":{"title":"Declarative Region Definition","permalink":"/brobot/docs/core-library/guides/declarative-region-definition"}}');var r=t(74848),s=t(28453);const l={sidebar_position:11,title:"Advanced Illustration System"},a="Advanced Illustration System",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Configuration System",id:"configuration-system",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Context-Based Filtering",id:"context-based-filtering",level:3},{value:"Adaptive Sampling",id:"adaptive-sampling",level:3},{value:"Quality-Based Filtering",id:"quality-based-filtering",level:2},{value:"Basic Quality Metrics",id:"basic-quality-metrics",level:3},{value:"Custom Quality Calculation",id:"custom-quality-calculation",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Smart Sampling Strategies",id:"smart-sampling-strategies",level:3},{value:"Batching for Performance",id:"batching-for-performance",level:3},{value:"State-Aware Illustrations",id:"state-aware-illustrations",level:2},{value:"Priority-Based Illustration",id:"priority-based-illustration",level:3},{value:"Integration with Existing Code",id:"integration-with-existing-code",level:2},{value:"Migrating from Basic Illustrations",id:"migrating-from-basic-illustrations",level:3},{value:"ActionConfig Integration",id:"actionconfig-integration",level:3},{value:"Monitoring and Debugging",id:"monitoring-and-debugging",level:2},{value:"Performance Metrics",id:"performance-metrics",level:3},{value:"Debugging Configuration",id:"debugging-configuration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Configuration Strategy",id:"configuration-strategy",level:3},{value:"Performance Guidelines",id:"performance-guidelines",level:3},{value:"Quality Management",id:"quality-management",level:3},{value:"Context Utilization",id:"context-utilization",level:3},{value:"Configuration Reference",id:"configuration-reference",level:2},{value:"IllustrationConfig Properties",id:"illustrationconfig-properties",level:3},{value:"BatchConfig Properties",id:"batchconfig-properties",level:3},{value:"QualityMetrics Properties",id:"qualitymetrics-properties",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"advanced-illustration-system",children:"Advanced Illustration System"})}),"\n",(0,r.jsx)(n.p,{children:"Brobot's advanced illustration system provides intelligent, context-aware visual documentation of automation actions with performance optimization and quality-based filtering."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The enhanced illustration system includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context-aware illustration decisions"})," based on action history and system state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance optimization"})," with adaptive sampling and batching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quality-based filtering"})," to focus on meaningful visualizations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Granular configuration"})," for different environments and use cases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource management"})," to prevent system overload"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-system",children:"Configuration System"}),"\n",(0,r.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Configuration\npublic class IllustrationConfig {\n    \n    @Bean\n    public IllustrationConfig illustrationConfig() {\n        return IllustrationConfig.builder()\n            .globalEnabled(true)\n            .actionEnabled(ActionType.FIND, true)\n            .actionEnabled(ActionType.CLICK, true)\n            .actionEnabled(ActionType.MOVE, false) // Disable noisy move illustrations\n            .qualityThreshold(0.75) // Only illustrate high-quality matches\n            .maxIllustrationsPerMinute(30) // Rate limiting\n            .build();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"context-based-filtering",children:"Context-Based Filtering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\npublic void configureContextFilters() {\n    IllustrationConfig config = IllustrationConfig.builder()\n        .globalEnabled(true)\n        // Only illustrate failures for debugging\n        .contextFilter("failures_only", context -> \n            context.getLastActionResult() != null && \n            !context.getLastActionResult().isSuccess())\n        // Only illustrate first occurrence of each action type\n        .contextFilter("first_occurrence", context -> \n            context.isFirstExecution())\n        // Only illustrate during retry attempts\n        .contextFilter("retries_only", context -> \n            context.isRetryAttempt())\n        .build();\n        \n    illustrationController.setConfig(config);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"adaptive-sampling",children:"Adaptive Sampling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Configuration\npublic class PerformanceOptimizedIllustrations {\n    \n    @Bean\n    public IllustrationConfig performanceConfig() {\n        return IllustrationConfig.builder()\n            .globalEnabled(true)\n            .adaptiveSampling(true) // Enable intelligent sampling\n            // High-frequency actions get reduced sampling\n            .samplingRate(ActionType.FIND, 1.0)   // Always illustrate find\n            .samplingRate(ActionType.MOVE, 0.1)   // Sample 10% of moves\n            .samplingRate(ActionType.CLICK, 0.5)  // Sample 50% of clicks\n            // Performance-based batching\n            .batchConfig(BatchConfig.builder()\n                .maxBatchSize(20)\n                .flushInterval(Duration.ofSeconds(10))\n                .flushOnStateTransition(true)\n                .maxMemoryUsageMB(50)\n                .build())\n            .build();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"quality-based-filtering",children:"Quality-Based Filtering"}),"\n",(0,r.jsx)(n.h3,{id:"basic-quality-metrics",children:"Basic Quality Metrics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"IllustrationConfig qualityFocusedConfig = IllustrationConfig.builder()\n    .qualityThreshold(0.8) // Only illustrate matches with >80% quality\n    .qualityMetrics(QualityMetrics.builder()\n        .minSimilarity(0.75)      // Minimum image similarity\n        .minConfidence(0.6)       // Minimum match confidence\n        .useRegionSize(true)      // Consider region size in quality\n        .useExecutionTime(false)  // Don't factor in timing\n        .build())\n    .build();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-quality-calculation",children:"Custom Quality Calculation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"IllustrationConfig customQualityConfig = IllustrationConfig.builder()\n    .qualityThreshold(0.7)\n    .qualityMetrics(QualityMetrics.builder()\n        .customQualityCalculator(context -> {\n            ActionResult result = context.getLastActionResult();\n            if (result == null || result.getMatchList().isEmpty()) {\n                return 0.0;\n            }\n            \n            // Custom quality calculation\n            double avgSimilarity = result.getMatchList().stream()\n                .mapToDouble(match -> match.getScore())\n                .average().orElse(0.0);\n                \n            // Boost quality for first executions\n            if (context.isFirstExecution()) {\n                avgSimilarity *= 1.2;\n            }\n            \n            // Reduce quality for frequent actions\n            if (context.getRecentIllustrationCount() > 10) {\n                avgSimilarity *= 0.8;\n            }\n            \n            return Math.min(1.0, avgSimilarity);\n        })\n        .build())\n    .build();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"smart-sampling-strategies",children:"Smart Sampling Strategies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Service\npublic class CustomIllustrationStrategy {\n    \n    @Autowired\n    private IllustrationPerformanceOptimizer optimizer;\n    \n    public void configureAdaptiveSampling() {\n        IllustrationConfig config = IllustrationConfig.builder()\n            .adaptiveSampling(true)\n            .samplingRate(ActionType.FIND, 1.0)\n            .contextFilter("performance_aware", context -> {\n                // Skip during high system load\n                if (context.getSystemMetrics() != null && \n                    context.getSystemMetrics().isHighLoad()) {\n                    return context.getPriority() == IllustrationContext.Priority.CRITICAL;\n                }\n                \n                // Reduce frequency for repeated actions\n                if (context.getConsecutiveFailures() > 0) {\n                    return true; // Always illustrate during failures\n                }\n                \n                // Sample based on recent success rate\n                return context.getRecentSuccessRate() < 0.9; // Illustrate when success rate drops\n            })\n            .build();\n            \n        optimizer.setConfig(config);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"batching-for-performance",children:"Batching for Performance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test \npublic void testBatchedIllustrations() {\n    IllustrationConfig config = IllustrationConfig.builder()\n        .batchConfig(BatchConfig.builder()\n            .maxBatchSize(50)                    // Batch up to 50 illustrations\n            .flushInterval(Duration.ofSeconds(30)) // Flush every 30 seconds\n            .flushOnStateTransition(true)        // Flush when states change\n            .maxMemoryUsageMB(100)               // Memory limit for batching\n            .build())\n        .contextFilter("batch_eligible", context -> {\n            // Only batch low-priority, frequent actions\n            return context.getPriority() == IllustrationContext.Priority.LOW &&\n                   context.getCurrentAction() == ActionType.MOVE;\n        })\n        .build();\n        \n    illustrationController.setConfig(config);\n    \n    // Execute many actions - some will be batched for efficiency\n    for (int i = 0; i < 100; i++) {\n        actions.move(randomLocation());\n    }\n    \n    // Verify performance optimization worked\n    PerformanceMetrics.MetricsSnapshot metrics = \n        illustrationPerformanceOptimizer.getPerformanceMetrics();\n    \n    assertTrue("Some illustrations should be batched", \n               metrics.getIllustrationsBatched() > 0);\n    assertTrue("Skip rate should be reasonable", \n               metrics.getSkipRate() < 0.8);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"state-aware-illustrations",children:"State-Aware Illustrations"}),"\n",(0,r.jsx)(n.h3,{id:"priority-based-illustration",children:"Priority-Based Illustration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'IllustrationConfig stateAwareConfig = IllustrationConfig.builder()\n    // Always illustrate critical states\n    .alwaysIllustrateState("ERROR_STATE")\n    .alwaysIllustrateState("LOGIN_FAILURE")\n    .alwaysIllustrateState("PAYMENT_CONFIRMATION")\n    \n    // Never illustrate noisy intermediate states\n    .neverIllustrateAction(ActionType.MOVE)\n    \n    .contextFilter("state_priority", context -> {\n        // High priority for error conditions\n        if (context.hasActiveState("ERROR_STATE", "WARNING_STATE")) {\n            return true;\n        }\n        \n        // Medium priority for authentication flows\n        if (context.hasActiveState("LOGIN_STATE", "AUTHENTICATION")) {\n            return context.getConsecutiveFailures() > 0; // Only on failures\n        }\n        \n        // Low priority for routine operations\n        return context.getRecentSuccessRate() < 0.95;\n    })\n    .build();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-existing-code",children:"Integration with Existing Code"}),"\n",(0,r.jsx)(n.h3,{id:"migrating-from-basic-illustrations",children:"Migrating from Basic Illustrations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Old approach - simple enable/disable\n@Configuration\npublic class OldIllustrationConfig {\n    @Bean\n    public BrobotSettings settings() {\n        BrobotSettings settings = new BrobotSettings();\n        settings.drawFind = true;\n        settings.drawClick = true; \n        settings.saveHistory = true;\n        return settings;\n    }\n}\n\n// New approach - context-aware configuration\n@Configuration\npublic class NewIllustrationConfig {\n    @Bean\n    public IllustrationConfig illustrationConfig() {\n        return IllustrationConfig.builder()\n            .globalEnabled(true)\n            .actionEnabled(ActionType.FIND, true)\n            .actionEnabled(ActionType.CLICK, true)\n            \n            // Add intelligent filtering\n            .contextFilter("meaningful_only", context -> \n                context.isFirstExecution() || \n                context.getConsecutiveFailures() > 0 ||\n                context.getLastActionResult() != null && \n                !context.getLastActionResult().isSuccess())\n                \n            // Add performance optimization    \n            .samplingRate(ActionType.FIND, 0.8)\n            .qualityThreshold(0.7)\n            .maxIllustrationsPerMinute(60)\n            .build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"actionconfig-integration",children:"ActionConfig Integration"}),"\n",(0,r.jsx)(n.p,{children:"The modern system uses ActionConfig with PatternFindOptions for flexible configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Modern ActionConfig approach\nPatternFindOptions findConfig = new PatternFindOptions.Builder()\n    .setActionType(ActionType.FIND)\n    .setIllustrate(ActionConfig.Illustrate.USE_GLOBAL)\n    .setSimilarity(0.8)\n    .build();\n\nPatternClickOptions clickConfig = new PatternClickOptions.Builder()\n    .setActionType(ActionType.CLICK)\n    .setIllustrate(ActionConfig.Illustrate.YES)\n    .setClickType(Click.Type.LEFT)\n    .build();\n    \n// All configurations respect the advanced illustration rules\nActionResult findResult = actions.find(element).configure(findConfig);\nActionResult clickResult = actions.click(element).configure(clickConfig);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-debugging",children:"Monitoring and Debugging"}),"\n",(0,r.jsx)(n.h3,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\npublic void monitorIllustrationPerformance() {\n    // Execute some actions\n    for (int i = 0; i < 100; i++) {\n        actions.find(testElement);\n    }\n    \n    // Get performance metrics\n    PerformanceMetrics.MetricsSnapshot metrics = \n        illustrationPerformanceOptimizer.getPerformanceMetrics();\n        \n    System.out.println("Illustrations per minute: " + metrics.getIllustrationsPerMinute());\n    System.out.println("Skip rate: " + (metrics.getSkipRate() * 100) + "%");\n    System.out.println("High quality rate: " + (metrics.getHighQualityRate() * 100) + "%");\n    System.out.println("Average processing time: " + metrics.getAverageProcessingTimeMs() + "ms");\n    System.out.println("Average memory usage: " + metrics.getAverageMemoryUsageMB() + "MB");\n    \n    // Verify performance is within acceptable bounds\n    assertTrue("Processing time should be reasonable", \n               metrics.getAverageProcessingTimeMs() < 500);\n    assertTrue("Memory usage should be controlled", \n               metrics.getAverageMemoryUsageMB() < 10);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"debugging-configuration",children:"Debugging Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'IllustrationConfig debugConfig = IllustrationConfig.builder()\n    .globalEnabled(true)\n    // Debug mode - illustrate everything with detailed context\n    .contextFilter("debug_mode", context -> {\n        System.out.printf("Action: %s, Success: %s, Priority: %s%n", \n            context.getCurrentAction(),\n            context.getLastActionResult() != null ? \n                context.getLastActionResult().isSuccess() : "N/A",\n            context.getPriority());\n        return true; // Illustrate everything in debug mode\n    })\n    .qualityThreshold(0.0) // No quality filtering in debug\n    .maxIllustrationsPerMinute(Integer.MAX_VALUE) // No rate limiting\n    .build();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"configuration-strategy",children:"Configuration Strategy"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Start with defaults"})," - Begin with sensible defaults and tune based on needs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor performance"})," - Use metrics to identify bottlenecks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test different environments"})," - Configurations may need adjustment for different systems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use state awareness"})," - Leverage state information for smarter illustration decisions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-guidelines",children:"Performance Guidelines"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use sampling for high-frequency actions"})," - Reduce overhead for repetitive operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enable batching for bulk operations"})," - Improve I/O efficiency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set appropriate quality thresholds"})," - Focus on meaningful illustrations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor system resources"})," - Prevent illustration system from impacting automation performance"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"quality-management",children:"Quality Management"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Define clear quality metrics"})," - Establish what constitutes a valuable illustration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use custom quality calculators"})," - Tailor quality assessment to your specific needs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Balance coverage and noise"})," - Ensure important events are captured without overwhelming detail"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regular quality audits"})," - Periodically review illustration quality and adjust thresholds"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"context-utilization",children:"Context Utilization"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leverage action history"})," - Use past executions to inform current decisions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consider system state"})," - Factor in current states and transitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use priority levels"})," - Ensure critical actions are always illustrated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement fallbacks"})," - Have sensible defaults when context is unavailable"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,r.jsx)(n.h3,{id:"illustrationconfig-properties",children:"IllustrationConfig Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"globalEnabled"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"Master switch for all illustrations"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"actionEnabledMap"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Map<Action, Boolean>"})}),(0,r.jsx)(n.td,{children:"all true"}),(0,r.jsx)(n.td,{children:"Per-action enablement"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"contextFilters"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Map<String, Predicate>"})}),(0,r.jsx)(n.td,{children:"empty"}),(0,r.jsx)(n.td,{children:"Context-based filters"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"samplingRates"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Map<Action, Double>"})}),(0,r.jsx)(n.td,{children:"all 1.0"}),(0,r.jsx)(n.td,{children:"Action sampling rates"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"qualityThreshold"})}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"0.0"}),(0,r.jsx)(n.td,{children:"Minimum quality for illustration"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxIllustrationsPerMinute"})}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"MAX_VALUE"}),(0,r.jsx)(n.td,{children:"Rate limiting"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"adaptiveSampling"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"Enable adaptive sampling"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"batchconfig-properties",children:"BatchConfig Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxBatchSize"})}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Maximum illustrations per batch"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"flushInterval"})}),(0,r.jsx)(n.td,{children:"Duration"}),(0,r.jsx)(n.td,{children:"5s"}),(0,r.jsx)(n.td,{children:"Maximum batch hold time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"flushOnStateTransition"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"Flush on state changes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxMemoryUsageMB"})}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"100"}),(0,r.jsx)(n.td,{children:"Memory limit for batching"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"qualitymetrics-properties",children:"QualityMetrics Properties"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"minSimilarity"})}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"0.7"}),(0,r.jsx)(n.td,{children:"Minimum match similarity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"minConfidence"})}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"0.5"}),(0,r.jsx)(n.td,{children:"Minimum match confidence"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"useRegionSize"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"true"}),(0,r.jsx)(n.td,{children:"Factor in region size"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"useExecutionTime"})}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"false"}),(0,r.jsx)(n.td,{children:"Factor in execution time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"customQualityCalculator"})}),(0,r.jsx)(n.td,{children:"Function"}),(0,r.jsx)(n.td,{children:"null"}),(0,r.jsx)(n.td,{children:"Custom quality function"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The advanced illustration system provides powerful tools for creating meaningful, performance-optimized visual documentation of your automation execution while maintaining system responsiveness and focusing on the most important events."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
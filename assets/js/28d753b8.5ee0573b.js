"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3856],{9908:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"core-library/architecture/initial-state-handling","title":"Initial State Handling in Brobot Framework","description":"Implementation Complete \u2705","source":"@site/docs/03-core-library/architecture/initial-state-handling.md","sourceDirName":"03-core-library/architecture","slug":"/core-library/architecture/initial-state-handling","permalink":"/brobot/docs/core-library/architecture/initial-state-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/architecture/initial-state-handling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"ActionResult Architecture","permalink":"/brobot/docs/core-library/architecture/actionresult-architecture"},"next":{"title":"Persistence Module Architecture","permalink":"/brobot/docs/core-library/architecture/persistence-module"}}');var a=i(74848),r=i(28453);const s={},l="Initial State Handling in Brobot Framework",o={},c=[{value:"Implementation Complete \u2705",id:"implementation-complete-",level:2},{value:"Current Implementation",id:"current-implementation",level:2},{value:"What <code>@State(initial = true)</code> Now Does",id:"what-stateinitial--true-now-does",level:3},{value:"Complete Call Chain",id:"complete-call-chain",level:3},{value:"Features Implemented",id:"features-implemented",level:2},{value:"1. Enhanced Annotation Processing",id:"1-enhanced-annotation-processing",level:3},{value:"2. Automatic Configuration Bean",id:"2-automatic-configuration-bean",level:3},{value:"3. Enhanced InitialStates Bean",id:"3-enhanced-initialstates-bean",level:3},{value:"4. Profile-Specific Behavior",id:"4-profile-specific-behavior",level:3},{value:"5. Configuration Properties",id:"5-configuration-properties",level:3},{value:"6. Improved Error Handling",id:"6-improved-error-handling",level:3},{value:"7. Migration Path",id:"7-migration-path",level:3},{value:"Implementation Checklist",id:"implementation-checklist",level:2},{value:"Benefits of Complete Implementation",id:"benefits-of-complete-implementation",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"initial-state-handling-in-brobot-framework",children:"Initial State Handling in Brobot Framework"})}),"\n",(0,a.jsx)(t.h2,{id:"implementation-complete-",children:"Implementation Complete \u2705"}),"\n",(0,a.jsxs)(t.p,{children:["As of version 1.2.0, Brobot now provides complete automatic initial state handling. States marked with ",(0,a.jsx)(t.code,{children:"@State(initial = true)"})," are automatically detected, configured, and activated at application startup."]}),"\n",(0,a.jsx)(t.h2,{id:"current-implementation",children:"Current Implementation"}),"\n",(0,a.jsxs)(t.h3,{id:"what-stateinitial--true-now-does",children:["What ",(0,a.jsx)(t.code,{children:"@State(initial = true)"})," Now Does"]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"@State(initial = true)"})," annotation now provides ",(0,a.jsx)(t.strong,{children:"complete automatic initial state management"}),":"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Detection Phase"})," (\u2705 Automatic):"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"AnnotationProcessor"})," scans for classes annotated with ",(0,a.jsx)(t.code,{children:"@State"})]}),"\n",(0,a.jsxs)(t.li,{children:["Checks the ",(0,a.jsx)(t.code,{children:"initial()"})," flag, ",(0,a.jsx)(t.code,{children:"priority()"}),", and ",(0,a.jsx)(t.code,{children:"profiles()"})," on each state"]}),"\n",(0,a.jsx)(t.li,{children:"Collects state names marked as initial for the current profile"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Registration Phase"})," (\u2705 Automatic):"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Adds initial states to the ",(0,a.jsx)(t.code,{children:"InitialStates"})," bean"]}),"\n",(0,a.jsx)(t.li,{children:"Uses configured priority for weighted selection"}),"\n",(0,a.jsx)(t.li,{children:"Profile-aware registration"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Configuration Phase"})," (\u2705 Automatic):"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"InitialStateAutoConfiguration"})," creates ",(0,a.jsx)(t.code,{children:"BrobotStartupConfiguration"})]}),"\n",(0,a.jsx)(t.li,{children:"Configures verification settings from properties"}),"\n",(0,a.jsx)(t.li,{children:"Sets up appropriate delays and behavior"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Activation Phase"})," (\u2705 Automatic):"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"ApplicationReadyEvent"})," triggers auto-activation"]}),"\n",(0,a.jsxs)(t.li,{children:["Waits for configured ",(0,a.jsx)(t.code,{children:"initial-delay"})," in real mode"]}),"\n",(0,a.jsxs)(t.li,{children:["Calls ",(0,a.jsx)(t.code,{children:"initialStates.findInitialStates()"})," automatically"]}),"\n",(0,a.jsxs)(t.li,{children:["Updates ",(0,a.jsx)(t.code,{children:"StateMemory"})," with active states"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"complete-call-chain",children:"Complete Call Chain"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"Application Start\r\n    \u2193\r\n@State(initial = true) processed by AnnotationProcessor\r\n    \u2193\r\nStates added to InitialStates bean with priorities\r\n    \u2193\r\nInitialStateAutoConfiguration creates BrobotStartupConfiguration\r\n    \u2193\r\nApplicationReadyEvent triggers auto-activation\r\n    \u2193\r\nInitial delay applied (real mode only)\r\n    \u2193\r\ninitialStates.findInitialStates() called\r\n    \u2193\r\n\u2705 States activated in StateMemory\n"})}),"\n",(0,a.jsx)(t.h2,{id:"features-implemented",children:"Features Implemented"}),"\n",(0,a.jsx)(t.h3,{id:"1-enhanced-annotation-processing",children:"1. Enhanced Annotation Processing"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@State(\r\n    initial = true,\r\n    priority = 100,  // Optional: for weighted selection\r\n    profile = {"production", "test"}  // Optional: profile-specific\r\n)\r\npublic class HomeState {\r\n    // ...\r\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"2-automatic-configuration-bean",children:"2. Automatic Configuration Bean"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Configuration\r\n@ConditionalOnMissingBean(BrobotStartupConfiguration.class)\r\npublic class InitialStateAutoConfiguration {\r\n    \r\n    @Bean\r\n    public BrobotStartupConfiguration brobotStartupConfiguration(\r\n            InitialStates initialStates,\r\n            @Value("${brobot.startup.verify:true}") boolean verify,\r\n            @Value("${brobot.startup.delay:0}") int delay) {\r\n        \r\n        BrobotStartupConfiguration config = new BrobotStartupConfiguration();\r\n        config.setVerifyInitialStates(verify);\r\n        config.setStartupDelay(delay);\r\n        \r\n        // Extract states marked with @State(initial = true)\r\n        List<String> annotatedInitialStates = extractFromInitialStates(initialStates);\r\n        config.getInitialStates().addAll(annotatedInitialStates);\r\n        \r\n        return config;\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"3-enhanced-initialstates-bean",children:"3. Enhanced InitialStates Bean"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Component\r\npublic class InitialStates {\r\n    // Existing code...\r\n    \r\n    // New method to expose registered initial states\r\n    public List<String> getRegisteredInitialStates() {\r\n        return potentialActiveStates.keySet().stream()\r\n            .flatMap(Set::stream)\r\n            .map(stateService::getStateName)\r\n            .filter(Optional::isPresent)\r\n            .map(Optional::get)\r\n            .distinct()\r\n            .collect(Collectors.toList());\r\n    }\r\n    \r\n    // Auto-activation method called by framework\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    @ConditionalOnProperty(\r\n        value = "brobot.startup.auto-activate",\r\n        havingValue = "true",\r\n        matchIfMissing = true\r\n    )\r\n    public void autoActivateInitialStates() {\r\n        if (!potentialActiveStates.isEmpty()) {\r\n            findIntialStates(); // Note: typo should be fixed to findInitialStates()\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"4-profile-specific-behavior",children:"4. Profile-Specific Behavior"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Configuration\r\n@Profile("test")\r\npublic class TestInitialStateConfiguration {\r\n    \r\n    @Bean\r\n    @Primary\r\n    public BrobotStartupConfiguration testStartupConfiguration() {\r\n        BrobotStartupConfiguration config = new BrobotStartupConfiguration();\r\n        config.setVerifyInitialStates(true);\r\n        config.setStartupDelay(0);  // No delay in tests\r\n        config.setActivateFirstOnly(true);  // Deterministic\r\n        // Test-specific initial states from @State annotations\r\n        return config;\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"5-configuration-properties",children:"5. Configuration Properties"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"brobot:\r\n  startup:\r\n    # Core settings\r\n    verify: true                    # Enable initial state verification\r\n    auto-activate: true             # Automatically activate initial states\r\n    delay: 1                        # Seconds to wait before verification\r\n    \r\n    # Verification behavior\r\n    fallback-search: false          # Search all states if initial not found\r\n    activate-first-only: true       # Only activate first found state\r\n    \r\n    # Override initial states (ignores annotations)\r\n    override-states:                # Optional: override @State(initial=true)\r\n      - LoginPage\r\n      - HomePage\r\n    \r\n    # Profile-specific overrides\r\n    profiles:\r\n      test:\r\n        delay: 0\r\n        activate-first-only: true\r\n      production:\r\n        fallback-search: true\n"})}),"\n",(0,a.jsx)(t.h3,{id:"6-improved-error-handling",children:"6. Improved Error Handling"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Component\r\npublic class InitialStateHealthIndicator implements HealthIndicator {\r\n    \r\n    @Override\r\n    public Health health() {\r\n        if (stateMemory.getActiveStates().isEmpty()) {\r\n            return Health.down()\r\n                .withDetail("reason", "No initial states activated")\r\n                .withDetail("configured", initialStates.getRegisteredInitialStates())\r\n                .build();\r\n        }\r\n        return Health.up()\r\n            .withDetail("activeStates", stateMemory.getActiveStateNames())\r\n            .build();\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"7-migration-path",children:"7. Migration Path"}),"\n",(0,a.jsx)(t.p,{children:"For existing applications:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Phase 1"}),": Add auto-configuration but disabled by default"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"brobot.startup.auto-activate: false  # Opt-in initially\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Phase 2"}),": Enable by default with clear migration guide"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"brobot.startup.auto-activate: true   # Default in next major version\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Phase 3"}),": Deprecate manual configuration classes"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"implementation-checklist",children:"Implementation Checklist"}),"\n",(0,a.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Fix typo: ",(0,a.jsx)(t.code,{children:"findIntialStates()"})," \u2192 ",(0,a.jsx)(t.code,{children:"findInitialStates()"})]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Add ",(0,a.jsx)(t.code,{children:"getRegisteredInitialStates()"})," to InitialStates"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Create InitialStateAutoConfiguration"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Add ApplicationReadyEvent listener for auto-activation"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Enhance @State annotation with priority and profile"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Add configuration properties for startup behavior"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Create health indicator for initial states"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Add comprehensive tests for all scenarios"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Update documentation with examples"]}),"\n",(0,a.jsxs)(t.li,{className:"task-list-item",children:[(0,a.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Create migration guide for existing applications"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"benefits-of-complete-implementation",children:"Benefits of Complete Implementation"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Zero Configuration"}),": Applications work with just ",(0,a.jsx)(t.code,{children:"@State(initial = true)"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Full Control"}),": Can override every aspect via configuration"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Profile Aware"}),": Different behavior for test/production"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Observable"}),": Health checks and metrics for monitoring"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Backward Compatible"}),": Existing applications continue to work"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Type Safe"}),": Compile-time checking with StateEnum support"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Testable"}),": Deterministic behavior in test profiles"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsxs)(t.p,{children:["The current ",(0,a.jsx)(t.code,{children:"@State(initial = true)"})," implementation only goes halfway - it registers initial states but doesn't activate them. A complete implementation would:"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Automatically create startup configuration from annotations"}),"\n",(0,a.jsx)(t.li,{children:"Verify and activate initial states at application startup"}),"\n",(0,a.jsx)(t.li,{children:"Provide configuration overrides for flexibility"}),"\n",(0,a.jsx)(t.li,{children:"Support profile-specific behavior"}),"\n",(0,a.jsx)(t.li,{children:"Include health monitoring and error handling"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:'This would make Brobot applications truly "zero configuration" while maintaining the flexibility needed for complex scenarios.'})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>l});var n=i(96540);const a={},r=n.createContext(a);function s(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);
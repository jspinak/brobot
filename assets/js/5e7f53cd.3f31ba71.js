"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1335],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},89079:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting-started/pathfinding","title":"Pathfinding & Multi-State Activation","description":"Introduction","source":"@site/docs/01-getting-started/pathfinding.md","sourceDirName":"01-getting-started","slug":"/getting-started/pathfinding","permalink":"/brobot/docs/getting-started/pathfinding","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/01-getting-started/pathfinding.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Pathfinding & Multi-State Activation"},"sidebar":"docSidebar","previous":{"title":"The Action Hierarchy","permalink":"/brobot/docs/getting-started/action-hierarchy"},"next":{"title":"Installation","permalink":"/brobot/docs/getting-started/installation"}}');var a=n(74848),s=n(28453);const r={sidebar_position:5,title:"Pathfinding & Multi-State Activation"},o="Pathfinding & Multi-State Activation",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"How Pathfinding Works",id:"how-pathfinding-works",level:2},{value:"The State Graph",id:"the-state-graph",level:3},{value:"Multi-State Activation",id:"multi-state-activation",level:3},{value:"Path Discovery Algorithm",id:"path-discovery-algorithm",level:3},{value:"Example: Finding Paths Through Multi-State Transitions",id:"example-finding-paths-through-multi-state-transitions",level:4},{value:"Important Concepts for Developers",id:"important-concepts-for-developers",level:2},{value:"1. Path Success vs. Complete Activation",id:"1-path-success-vs-complete-activation",level:3},{value:"2. IncomingTransitions Execute for ALL Activated States",id:"2-incomingtransitions-execute-for-all-activated-states",level:3},{value:"Practical Implications",id:"practical-implications",level:2},{value:"1. More Paths Available",id:"1-more-paths-available",level:3},{value:"2. Flexible Navigation",id:"2-flexible-navigation",level:3},{value:"3. Design Considerations",id:"3-design-considerations",level:3},{value:"When to Use Multi-State Activation",id:"when-to-use-multi-state-activation",level:4},{value:"Understanding Path Choices",id:"understanding-path-choices",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"Debugging Pathfinding",id:"debugging-pathfinding",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"pathfinding--multi-state-activation",children:"Pathfinding & Multi-State Activation"})}),"\n",(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(t.p,{children:"Brobot's pathfinding system is designed to handle the reality of modern GUIs where actions often activate multiple UI elements simultaneously. Unlike traditional page-based navigation where you go from Page A to Page B, real applications often display multiple panels, sidebars, and overlays at once."}),"\n",(0,a.jsx)(t.p,{children:'In Brobot 1.1.0, there is no concept of a "primary target state" in transitions. All states activated by a transition are treated equally for pathfinding purposes.'}),"\n",(0,a.jsx)(t.h2,{id:"how-pathfinding-works",children:"How Pathfinding Works"}),"\n",(0,a.jsx)(t.h3,{id:"the-state-graph",children:"The State Graph"}),"\n",(0,a.jsx)(t.p,{children:"Brobot builds a directed graph where:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Nodes"})," are States (UI configurations)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Edges"})," are Transitions (actions that change the UI)"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"multi-state-activation",children:"Multi-State Activation"}),"\n",(0,a.jsx)(t.p,{children:"When a transition executes, it can activate multiple states simultaneously:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'import io.github.jspinak.brobot.annotations.*;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\n@TransitionSet(state = LoginState.class)\r\npublic class LoginTransitions {\r\n\r\n    @Autowired\r\n    private Action action;\r\n\r\n    @Autowired\r\n    private LoginState loginState;\r\n\r\n    /**\r\n     * Verify we\'ve arrived at the Login state.\r\n     */\r\n    @IncomingTransition(description = "Verify login screen is visible")\r\n    public boolean verifyLoginScreen() {\r\n        return action.find(loginState.getLoginButton()).isSuccess();\r\n    }\r\n\r\n    /**\r\n     * Login transition that activates multiple states.\r\n     * Transitions FROM LoginState TO Dashboard (and related states).\r\n     */\r\n    @OutgoingTransition(\r\n        activate = {\r\n            DashboardState.class,\r\n            NavigationBarState.class,\r\n            StatusPanelState.class,\r\n            NotificationAreaState.class\r\n        }\r\n    )\r\n    public boolean login() {\r\n        return action.click(loginState.getLoginButton()).isSuccess();\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"path-discovery-algorithm",children:"Path Discovery Algorithm"}),"\n",(0,a.jsxs)(t.p,{children:["When you call ",(0,a.jsx)(t.code,{children:'navigator.openState("TargetState")'}),", Brobot:"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Indexes ALL Activated States"}),": Each transition is indexed by every state it activates"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Explores All Paths"}),": The pathfinder considers transitions through ANY activated state"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Finds Shortest Path"}),": Returns the path with the lowest total path cost"]}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"example-finding-paths-through-multi-state-transitions",children:"Example: Finding Paths Through Multi-State Transitions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'// Given these transitions:\r\n// State A \u2192 activates [B, C, D]\r\n// State B \u2192 activates [E]\r\n// State C \u2192 activates [F]\r\n// State D \u2192 activates [G]\r\n// State E \u2192 activates [TargetState]\r\n\r\n// When calling:\r\nnavigator.openState("TargetState");\r\n\r\n// Pathfinder considers these paths:\r\n// A \u2192 B \u2192 E \u2192 TargetState \u2713 (Found via B)\r\n// A \u2192 C \u2192 F \u2192 ... (Dead end)\r\n// A \u2192 D \u2192 G \u2192 ... (Dead end)\r\n\r\n// Result: Path A \u2192 B \u2192 E \u2192 TargetState is used\n'})}),"\n",(0,a.jsx)(t.h2,{id:"important-concepts-for-developers",children:"Important Concepts for Developers"}),"\n",(0,a.jsx)(t.h3,{id:"1-path-success-vs-complete-activation",children:"1. Path Success vs. Complete Activation"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Critical Understanding"}),": Path success only requires the NEXT NODE in the path to be activated, not all activated states."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Transition from A activates [B, C, D, E]\r\n// Path is A \u2192 B \u2192 F\r\n\r\n// During traversal:\r\n// 1. Execute transition from A\r\n// 2. Verify B is active \u2713 (Path continues)\r\n// 3. Don't need to verify C, D, E for path success\r\n// 4. If C, D, or E fail, path still succeeds (but log warnings)\n"})}),"\n",(0,a.jsx)(t.h3,{id:"2-incomingtransitions-execute-for-all-activated-states",children:"2. IncomingTransitions Execute for ALL Activated States"}),"\n",(0,a.jsxs)(t.p,{children:["When a transition activates multiple states, each state's ",(0,a.jsx)(t.code,{children:"@IncomingTransition"})," executes:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Transition activates Dashboard, Sidebar, Header\r\n// Execution order:\r\n// 1. OutgoingTransition executes (leaving source state)\r\n// 2. Dashboard.verifyArrival() executes\r\n// 3. Sidebar.verifyArrival() executes\r\n// 4. Header.verifyArrival() executes\r\n// All must succeed for complete transition success\n"})}),"\n",(0,a.jsx)(t.h2,{id:"practical-implications",children:"Practical Implications"}),"\n",(0,a.jsx)(t.h3,{id:"1-more-paths-available",children:"1. More Paths Available"}),"\n",(0,a.jsx)(t.p,{children:"Your automation has more navigation options:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'// If Login \u2192 [Dashboard, Menu, Profile]\r\n// Then you can reach Menu states via Login, even if\r\n// Login\'s "main purpose" seems to be Dashboard\n'})}),"\n",(0,a.jsx)(t.h3,{id:"2-flexible-navigation",children:"2. Flexible Navigation"}),"\n",(0,a.jsx)(t.p,{children:"States can be reached through unexpected routes:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// UserProfile might be reached via:\r\n// - Direct navigation: Menu \u2192 UserProfile\r\n// - Side effect: Dashboard \u2192 [Settings, UserProfile]\r\n// - Multi-activation: Login \u2192 [Dashboard, UserProfile, Notifications]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"3-design-considerations",children:"3. Design Considerations"}),"\n",(0,a.jsx)(t.h4,{id:"when-to-use-multi-state-activation",children:"When to Use Multi-State Activation"}),"\n",(0,a.jsxs)(t.p,{children:["\u2705 ",(0,a.jsx)(t.strong,{children:"Good Use Cases:"})]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Login opens multiple panels simultaneously"}),"\n",(0,a.jsx)(t.li,{children:"Tab switches that keep navigation visible"}),"\n",(0,a.jsx)(t.li,{children:"Modals that overlay existing content"}),"\n",(0,a.jsx)(t.li,{children:"Dashboards with multiple independent widgets"}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["\u274c ",(0,a.jsx)(t.strong,{children:"Avoid When:"})]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"States are sequential (load one, then another)"}),"\n",(0,a.jsx)(t.li,{children:"Activation depends on conditions"}),"\n",(0,a.jsx)(t.li,{children:"States are mutually exclusive"}),"\n"]}),"\n",(0,a.jsx)(t.h4,{id:"understanding-path-choices",children:"Understanding Path Choices"}),"\n",(0,a.jsx)(t.p,{children:"The pathfinder chooses paths based on:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Reachability"}),": Can we get there from current active states?"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Path Length"}),": Fewer transitions preferred"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Transition Costs"}),": Lower path costs preferred"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Good: Logical grouping of related states\r\n@OutgoingTransition(\r\n    activate = {\r\n        EmailComposeState.class,    // Main panel\r\n        EmailToolbarState.class,    // Related toolbar\r\n        RecipientListState.class    // Related sidebar\r\n    }\r\n)\r\npublic boolean openEmailCompose() {\r\n    return action.click(composeButton).isSuccess();\r\n}\r\n\r\n// Bad: Unrelated states that happen to appear together\r\n@OutgoingTransition(\r\n    activate = {\r\n        EmailComposeState.class,\r\n        StockTickerState.class,     // Unrelated - BAD!\r\n        WeatherWidgetState.class    // Unrelated - BAD!\r\n    }\r\n)\r\npublic boolean openEmailWithUnrelatedStuff() {\r\n    return action.click(composeButton).isSuccess();\r\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"debugging-pathfinding",children:"Debugging Pathfinding"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-properties",children:"# application.properties\r\nlogging.level.io.github.jspinak.brobot.navigation.path=TRACE\r\nlogging.level.io.github.jspinak.brobot.navigation.transition=TRACE\n"})}),"\n",(0,a.jsx)(t.p,{children:"This will enable TRACE-level logging for:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Path package: PathFinder algorithm, path calculation, graph traversal"}),"\n",(0,a.jsx)(t.li,{children:"Transition package: Transition execution, state activation/deactivation"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"For even more detailed debugging, you could also add:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# Enable all navigation logging\r\nlogging.level.io.github.jspinak.brobot.navigation=TRACE\r\n\r\n# Or be more specific\r\nlogging.level.io.github.jspinak.brobot.navigation.path.PathFinder=TRACE\r\nlogging.level.io.github.jspinak.brobot.navigation.transition.TransitionExecutor=TRACE\r\nlogging.level.io.github.jspinak.brobot.navigation.transition.StateNavigator=TRACE\n"})}),"\n",(0,a.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(t.p,{children:"Brobot's pathfinding system embraces the complexity of modern GUIs by:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Treating all activated states equally"}),' - No artificial "primary" target']}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Indexing transitions by ALL activated states"})," - More paths available"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Verifying path progression, not complete activation"})," - Flexible navigation"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Executing IncomingTransitions for all activated states"})," - Proper verification"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"This design makes your automation more robust and adaptable to real-world GUI behaviors where multiple elements appear and disappear together."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2858],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},89509:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/testing/motion-detection-testing","title":"Motion Detection Testing Guide","description":"Overview","source":"@site/docs/03-core-library/testing/motion-detection-testing.md","sourceDirName":"03-core-library/testing","slug":"/core-library/testing/motion-detection-testing","permalink":"/brobot/docs/core-library/testing/motion-detection-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/testing/motion-detection-testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"CI/CD Testing Guide for Brobot","permalink":"/brobot/docs/core-library/testing/ci-cd-testing"},"next":{"title":"Migration Guides","permalink":"/brobot/docs/category/migration-guides"}}');var s=t(74848),o=t(28453);const r={},a="Motion Detection Testing Guide",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Test Setup",id:"test-setup",level:2},{value:"Extending BrobotTestBase",id:"extending-brobottestbase",level:3},{value:"Configuration for Tests",id:"configuration-for-tests",level:3},{value:"Writing Motion Detection Tests",id:"writing-motion-detection-tests",level:2},{value:"Basic Motion Detection Test",id:"basic-motion-detection-test",level:3},{value:"Testing with Custom Options",id:"testing-with-custom-options",level:3},{value:"Testing No Motion Scenarios",id:"testing-no-motion-scenarios",level:3},{value:"Mock Data Configuration",id:"mock-data-configuration",level:2},{value:"Configuring Mock Responses",id:"configuring-mock-responses",level:3},{value:"Using Record and Replay",id:"using-record-and-replay",level:3},{value:"Testing Patterns",id:"testing-patterns",level:2},{value:"Parameterized Testing",id:"parameterized-testing",level:3},{value:"Contract Testing",id:"contract-testing",level:3},{value:"Edge Case Testing",id:"edge-case-testing",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Mock Performance Validation",id:"mock-performance-validation",level:3},{value:"Memory Usage Testing",id:"memory-usage-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"Testing with Spring Context",id:"testing-with-spring-context",level:3},{value:"Debugging Test Failures",id:"debugging-test-failures",level:2},{value:"Enable Detailed Logging",id:"enable-detailed-logging",level:3},{value:"Using Test Fixtures",id:"using-test-fixtures",level:3},{value:"Assertion Helpers",id:"assertion-helpers",level:3},{value:"CI/CD Considerations",id:"cicd-considerations",level:2},{value:"GitHub Actions Configuration",id:"github-actions-configuration",level:3},{value:"Docker Testing",id:"docker-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"motion-detection-testing-guide",children:"Motion Detection Testing Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This guide covers testing strategies for motion detection components in Brobot, including proper use of the OpenCV mock system and best practices for writing reliable tests."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Understanding of Brobot's mock mode (FrameworkSettings.mock)"}),"\n",(0,s.jsx)(n.li,{children:"Familiarity with OpenCV concepts (Mat, pixel analysis)"}),"\n",(0,s.jsx)(n.li,{children:"Knowledge of Spring dependency injection"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"test-setup",children:"Test Setup"}),"\n",(0,s.jsx)(n.h3,{id:"extending-brobottestbase",children:"Extending BrobotTestBase"}),"\n",(0,s.jsxs)(n.p,{children:["All motion detection tests must extend ",(0,s.jsx)(n.code,{children:"BrobotTestBase"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\n\npublic class MotionDetectionTest extends BrobotTestBase {\n    \n    @Autowired\n    private MotionAnalyzer motionAnalyzer;\n    \n    @Test\n    public void testMotionDetection() {\n        // Mock mode is automatically enabled\n        List<BufferedImage> images = loadTestImages();\n        MotionResult result = motionAnalyzer.analyzeMotion(images);\n        \n        assertTrue(result.isMotionDetected());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-for-tests",children:"Configuration for Tests"}),"\n",(0,s.jsx)(n.p,{children:"Configure mock behavior in test resources:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# src/test/resources/application-test.properties\nbrobot.mock=true\nbrobot.opencv.mock.motion.default-confidence=0.75\nbrobot.opencv.mock.motion.region-count=2\nbrobot.opencv.mock.replay.enabled=true\nbrobot.opencv.mock.replay.directory=src/test/resources/motion-recordings\n"})}),"\n",(0,s.jsx)(n.h2,{id:"writing-motion-detection-tests",children:"Writing Motion Detection Tests"}),"\n",(0,s.jsx)(n.h3,{id:"basic-motion-detection-test",children:"Basic Motion Detection Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Should detect motion between different images")\npublic void shouldDetectMotionBetweenDifferentImages() {\n    // Arrange\n    List<BufferedImage> images = Arrays.asList(\n        loadImage("frame1.png"),\n        loadImage("frame2.png"),\n        loadImage("frame3.png")\n    );\n    \n    // Act\n    MotionResult result = motionAnalyzer.analyzeMotion(images);\n    \n    // Assert\n    assertTrue(result.isMotionDetected());\n    assertFalse(result.getMotionRegions().isEmpty());\n    assertTrue(result.getConfidenceScore() > 0.5);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-with-custom-options",children:"Testing with Custom Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Should apply custom threshold for motion detection")\npublic void shouldApplyCustomThreshold() {\n    // Arrange\n    MotionOptions options = MotionOptions.builder()\n        .threshold(100)  // High threshold\n        .useGrayscale(true)\n        .blurRadius(5)\n        .build();\n    \n    List<BufferedImage> images = loadSequentialFrames();\n    \n    // Act\n    MotionResult result = motionAnalyzer.analyzeMotionWithOptions(images, options);\n    \n    // Assert\n    // High threshold should reduce detected motion\n    assertTrue(result.getMotionRegions().size() < 5);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"testing-no-motion-scenarios",children:"Testing No Motion Scenarios"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Should detect no motion for identical images")\npublic void shouldDetectNoMotionForIdenticalImages() {\n    // Arrange\n    BufferedImage sameImage = loadImage("static.png");\n    List<BufferedImage> images = Collections.nCopies(5, sameImage);\n    \n    // Act\n    MotionResult result = motionAnalyzer.analyzeMotion(images);\n    \n    // Assert\n    assertFalse(result.isMotionDetected());\n    assertTrue(result.getMotionRegions().isEmpty());\n    assertEquals(0.0, result.getConfidenceScore(), 0.01);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"mock-data-configuration",children:"Mock Data Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"configuring-mock-responses",children:"Configuring Mock Responses"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@TestConfiguration\npublic class MotionTestConfig {\n    \n    @Bean\n    @Primary\n    public MockConfiguration customMockConfig() {\n        return MockConfiguration.builder()\n            .motionDetectionBehavior(MotionBehavior.REALISTIC)\n            .defaultConfidence(0.85)\n            .minRegionSize(100)\n            .maxRegionSize(500)\n            .noiseLevel(0.1)\n            .build();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-record-and-replay",children:"Using Record and Replay"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\n@EnableRecording  // Custom annotation to enable recording\npublic void recordRealMotionData() {\n    // This test will record real OpenCV outputs when run with mock=false\n    FrameworkSettings.mock = false;\n    \n    List<BufferedImage> images = loadRealWorldSequence();\n    MotionResult result = motionAnalyzer.analyzeMotion(images);\n    \n    // Results are automatically recorded for replay in mock mode\n    assertTrue(result.isMotionDetected());\n}\n\n@Test\n@UseRecording("recordRealMotionData")  // Replay recorded data\npublic void testWithRecordedData() {\n    FrameworkSettings.mock = true;\n    \n    List<BufferedImage> images = loadRealWorldSequence();\n    MotionResult result = motionAnalyzer.analyzeMotion(images);\n    \n    // Uses recorded data for consistent testing\n    assertTrue(result.isMotionDetected());\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-patterns",children:"Testing Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"parameterized-testing",children:"Parameterized Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ParameterizedTest\n@CsvSource({\n    "2, true, 0.5",   // 2 images, motion expected, min confidence\n    "3, true, 0.7",   // 3 images, motion expected, higher confidence\n    "5, false, 0.0"   // 5 identical images, no motion\n})\nvoid testMotionDetectionScenarios(int imageCount, boolean expectedMotion, double minConfidence) {\n    List<BufferedImage> images = generateImageSequence(imageCount, expectedMotion);\n    \n    MotionResult result = motionAnalyzer.analyzeMotion(images);\n    \n    assertEquals(expectedMotion, result.isMotionDetected());\n    if (expectedMotion) {\n        assertTrue(result.getConfidenceScore() >= minConfidence);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"contract-testing",children:"Contract Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Test\npublic void testMockRealContract() {\n    List<BufferedImage> testImages = loadStandardTestSequence();\n    \n    // Test with mock\n    FrameworkSettings.mock = true;\n    MotionResult mockResult = motionAnalyzer.analyzeMotion(testImages);\n    \n    // Test with real (if available)\n    if (isOpenCVAvailable()) {\n        FrameworkSettings.mock = false;\n        MotionResult realResult = motionAnalyzer.analyzeMotion(testImages);\n        \n        // Results should be structurally similar\n        assertEquals(mockResult.isMotionDetected(), realResult.isMotionDetected());\n        assertEquals(mockResult.getMotionRegions().size(), \n                    realResult.getMotionRegions().size(), 2);  // Allow small variance\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"edge-case-testing",children:"Edge Case Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Nested\n@DisplayName("Edge Cases")\nclass EdgeCaseTests {\n    \n    @Test\n    @DisplayName("Should handle empty image list")\n    void shouldHandleEmptyImageList() {\n        List<BufferedImage> emptyList = Collections.emptyList();\n        \n        MotionResult result = motionAnalyzer.analyzeMotion(emptyList);\n        \n        assertNotNull(result);\n        assertFalse(result.isMotionDetected());\n        assertTrue(result.getMotionRegions().isEmpty());\n    }\n    \n    @Test\n    @DisplayName("Should handle single image")\n    void shouldHandleSingleImage() {\n        List<BufferedImage> singleImage = Arrays.asList(loadImage("test.png"));\n        \n        MotionResult result = motionAnalyzer.analyzeMotion(singleImage);\n        \n        assertNotNull(result);\n        assertFalse(result.isMotionDetected());  // Can\'t detect motion with one image\n    }\n    \n    @Test\n    @DisplayName("Should handle very small images")\n    void shouldHandleVerySmallImages() {\n        List<BufferedImage> tinyImages = Arrays.asList(\n            new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB),\n            new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB)\n        );\n        \n        MotionResult result = motionAnalyzer.analyzeMotion(tinyImages);\n        \n        assertNotNull(result);\n        // Should complete without errors\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,s.jsx)(n.h3,{id:"mock-performance-validation",children:"Mock Performance Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\n@Timeout(value = 1, unit = TimeUnit.SECONDS)\npublic void testMockPerformance() {\n    FrameworkSettings.mock = true;\n    List<BufferedImage> images = loadLargeImageSequence();  // 10 HD images\n    \n    long startTime = System.nanoTime();\n    \n    for (int i = 0; i < 100; i++) {\n        MotionResult result = motionAnalyzer.analyzeMotion(images);\n        assertNotNull(result);\n    }\n    \n    long duration = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);\n    \n    // Mock should be very fast\n    assertTrue(duration < 500, "100 iterations should complete in under 500ms");\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"memory-usage-testing",children:"Memory Usage Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testMemoryEfficiency() {\n    FrameworkSettings.mock = true;\n    \n    Runtime runtime = Runtime.getRuntime();\n    long initialMemory = runtime.totalMemory() - runtime.freeMemory();\n    \n    // Process many images\n    for (int i = 0; i < 1000; i++) {\n        List<BufferedImage> images = generateRandomImages(5);\n        MotionResult result = motionAnalyzer.analyzeMotion(images);\n        assertNotNull(result);\n    }\n    \n    System.gc();\n    long finalMemory = runtime.totalMemory() - runtime.freeMemory();\n    long memoryIncrease = finalMemory - initialMemory;\n    \n    // Should not leak memory\n    assertTrue(memoryIncrease < 50_000_000, "Memory increase should be less than 50MB");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.h3,{id:"testing-with-spring-context",children:"Testing with Spring Context"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")\npublic class MotionDetectionIntegrationTest extends BrobotTestBase {\n    \n    @Autowired\n    private ApplicationContext context;\n    \n    @Test\n    public void testSpringWiring() {\n        // Verify correct bean is loaded based on mock mode\n        PixelAnalyzer analyzer = context.getBean(PixelAnalyzer.class);\n        \n        if (FrameworkSettings.mock) {\n            assertInstanceOf(MockPixelAnalyzer.class, analyzer);\n        } else {\n            assertInstanceOf(OpenCVPixelAnalyzer.class, analyzer);\n        }\n    }\n    \n    @Test\n    public void testEndToEndMotionDetection() {\n        // Test complete flow from image loading to result processing\n        List<BufferedImage> images = imageLoader.loadSequence("test-sequence");\n        MotionResult result = motionAnalyzer.analyzeMotion(images);\n        \n        if (result.isMotionDetected()) {\n            List<Region> regions = result.getMotionRegions();\n            regions.forEach(region -> {\n                assertTrue(region.getWidth() > 0);\n                assertTrue(region.getHeight() > 0);\n            });\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"debugging-test-failures",children:"Debugging Test Failures"}),"\n",(0,s.jsx)(n.h3,{id:"enable-detailed-logging",children:"Enable Detailed Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# application-test.properties\nlogging.level.io.github.jspinak.brobot.analysis.motion=DEBUG\nbrobot.opencv.mock.debug=true\nbrobot.opencv.mock.trace-calls=true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-test-fixtures",children:"Using Test Fixtures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@BeforeEach\npublic void setupTestFixtures() {\n    // Create consistent test data\n    testImages = TestImageGenerator.createMotionSequence(\n        width: 640,\n        height: 480,\n        frameCount: 5,\n        motionType: MotionType.LINEAR\n    );\n    \n    // Configure mock to return predictable results\n    when(mockDataGenerator.generateMotionResult(any(), any()))\n        .thenReturn(createExpectedMotionResult());\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"assertion-helpers",children:"Assertion Helpers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class MotionAssertions {\n    \n    public static void assertValidMotionResult(MotionResult result) {\n        assertNotNull(result, "MotionResult should not be null");\n        assertNotNull(result.getMotionRegions(), "Motion regions should not be null");\n        assertTrue(result.getConfidenceScore() >= 0 && result.getConfidenceScore() <= 1,\n                  "Confidence score should be between 0 and 1");\n        \n        if (result.isMotionDetected()) {\n            assertFalse(result.getMotionRegions().isEmpty(),\n                       "Motion detected but no regions found");\n        }\n    }\n    \n    public static void assertMotionInRegion(MotionResult result, Region expectedRegion) {\n        assertTrue(result.isMotionDetected(), "Expected motion to be detected");\n        \n        boolean foundInRegion = result.getMotionRegions().stream()\n            .anyMatch(region -> region.overlaps(expectedRegion));\n        \n        assertTrue(foundInRegion, \n                  "Expected motion in region: " + expectedRegion);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"cicd-considerations",children:"CI/CD Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"github-actions-configuration",children:"GitHub Actions Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/motion-tests.yml\nname: Motion Detection Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Set up JDK\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n    \n    - name: Run Motion Detection Tests\n      run: |\n        ./gradlew test --tests \"*Motion*Test\"\n      env:\n        BROBOT_MOCK: true  # Ensure mock mode in CI\n    \n    - name: Upload Test Results\n      if: always()\n      uses: actions/upload-artifact@v2\n      with:\n        name: motion-test-results\n        path: build/reports/tests/\n"})}),"\n",(0,s.jsx)(n.h3,{id:"docker-testing",children:"Docker Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile.test\nFROM openjdk:11-jdk-slim\n\nWORKDIR /app\n\nCOPY . .\n\n# Run tests in mock mode (no display needed)\nENV BROBOT_MOCK=true\n\nRUN ./gradlew test --tests "*Motion*Test"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always extend BrobotTestBase"})," for proper mock configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use result objects"})," instead of raw Mat objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure mock behavior"})," appropriately for test scenarios"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test edge cases"})," including empty inputs and extreme values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate performance"})," to ensure mock efficiency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use parameterized tests"})," for comprehensive coverage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement contract tests"})," to ensure mock/real consistency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Record real data"})," for realistic mock responses"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add integration tests"})," for end-to-end validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor test execution time"})," to maintain fast feedback"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Issue"}),(0,s.jsx)(n.th,{children:"Cause"}),(0,s.jsx)(n.th,{children:"Solution"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"NullPointerException in tests"}),(0,s.jsx)(n.td,{children:"Direct OpenCV usage"}),(0,s.jsx)(n.td,{children:"Use analyzer interfaces"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Tests fail in CI but pass locally"}),(0,s.jsx)(n.td,{children:"Display dependencies"}),(0,s.jsx)(n.td,{children:"Ensure mock mode is enabled"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Inconsistent test results"}),(0,s.jsx)(n.td,{children:"Random mock data"}),(0,s.jsx)(n.td,{children:"Use fixed seeds or recordings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Slow test execution"}),(0,s.jsx)(n.td,{children:"Real OpenCV operations"}),(0,s.jsx)(n.td,{children:"Verify mock mode is active"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Out of memory errors"}),(0,s.jsx)(n.td,{children:"Large image processing"}),(0,s.jsx)(n.td,{children:"Reduce image size in tests"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/brobot/docs/core-library/opencv-mock-system/architecture",children:"OpenCV Mock System Architecture"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/brobot/docs/core-library/testing/enhanced-mocking",children:"Enhanced Mock Testing Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/brobot/docs/core-library/testing/test-logging-architecture",children:"Test Logging Architecture"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
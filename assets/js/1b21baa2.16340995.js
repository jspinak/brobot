"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8887],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const o={},l=t.createContext(o);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(l.Provider,{value:n},e.children)}},59309:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"core-library/action-config/action-chaining","title":"Action Chaining","description":"Learn how to chain multiple actions together using ActionChainOptions for complex automation workflows","source":"@site/docs/03-core-library/action-config/07-action-chaining.md","sourceDirName":"03-core-library/action-config","slug":"/core-library/action-config/action-chaining","permalink":"/brobot/docs/core-library/action-config/action-chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/action-config/07-action-chaining.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Action Chaining","description":"Learn how to chain multiple actions together using ActionChainOptions for complex automation workflows"},"sidebar":"docSidebar","previous":{"title":"Migration Examples","permalink":"/brobot/docs/core-library/action-config/migration-examples"},"next":{"title":"Complex Workflows","permalink":"/brobot/docs/core-library/action-config/complex-workflows"}}');var o=i(74848),l=i(28453);const s={sidebar_position:7,title:"Action Chaining",description:"Learn how to chain multiple actions together using ActionChainOptions for complex automation workflows"},a="Action Chaining with ActionChainOptions",c={},r=[{value:"Why Action Chaining?",id:"why-action-chaining",level:2},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Chaining Strategies",id:"chaining-strategies",level:3},{value:"Action Flow",id:"action-flow",level:3},{value:"Simple Examples",id:"simple-examples",level:2},{value:"Sequential Actions",id:"sequential-actions",level:3},{value:"Click and Verify",id:"click-and-verify",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Nested Search",id:"nested-search",level:3},{value:"Confirmation Pattern",id:"confirmation-pattern",level:3},{value:"Replacing Deprecated Patterns",id:"replacing-deprecated-patterns",level:2},{value:"Instead of MultipleActionsObject",id:"instead-of-multipleactionsobject",level:3},{value:"Instead of ActionResultCombo",id:"instead-of-actionresultcombo",level:3},{value:"Critical Insight: Object Type Preservation in Chains",id:"critical-insight-object-type-preservation-in-chains",level:2},{value:"The Object Type Problem",id:"the-object-type-problem",level:3},{value:"Solutions for Mixed Object Types",id:"solutions-for-mixed-object-types",level:3},{value:"Solution 1: Split Chains by Object Type (RECOMMENDED)",id:"solution-1-split-chains-by-object-type-recommended",level:4},{value:"Solution 2: Use CONFIRM Strategy",id:"solution-2-use-confirm-strategy",level:4},{value:"Solution 3: Custom Coordination",id:"solution-3-custom-coordination",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Pattern: Find-Click-Type Workflow",id:"common-pattern-find-click-type-workflow",level:2},{value:"\u274c Common Mistake",id:"-common-mistake",level:3},{value:"\u2705 Correct Implementation",id:"-correct-implementation",level:3},{value:"Alternative: Using State Transitions",id:"alternative-using-state-transitions",level:3},{value:"Enhanced Conditional Action Chaining",id:"enhanced-conditional-action-chaining",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"action-chaining-with-actionchainoptions",children:"Action Chaining with ActionChainOptions"})}),"\n",(0,o.jsxs)(n.p,{children:["Action chaining is a powerful pattern in Brobot that allows you to compose multiple actions into complex workflows. The ",(0,o.jsx)(n.code,{children:"ActionChainOptions"})," class provides a unified, type-safe way to chain actions together with different execution strategies."]}),"\n",(0,o.jsx)(n.h2,{id:"why-action-chaining",children:"Why Action Chaining?"}),"\n",(0,o.jsx)(n.p,{children:"Traditional automation often requires executing multiple actions in sequence:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Click a button, then verify a menu appears"}),"\n",(0,o.jsx)(n.li,{children:"Fill out a form with multiple fields"}),"\n",(0,o.jsx)(n.li,{children:"Navigate through a multi-step wizard"}),"\n",(0,o.jsx)(n.li,{children:"Perform complex drag-and-drop operations"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"ActionChainOptions provides a clean, fluent API for these scenarios while offering advanced features like nested searches and confirmation patterns."}),"\n",(0,o.jsx)(n.h2,{id:"basic-concepts",children:"Basic Concepts"}),"\n",(0,o.jsx)(n.h3,{id:"chaining-strategies",children:"Chaining Strategies"}),"\n",(0,o.jsx)(n.p,{children:"ActionChainOptions supports two chaining strategies:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NESTED"}),": Each action searches within the results of the previous action"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Useful for hierarchical UI navigation"}),"\n",(0,o.jsx)(n.li,{children:"Example: Find a dialog, then find a button within that dialog"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"CONFIRM"}),": Each action validates the results of the previous action"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Useful for reducing false positives"}),"\n",(0,o.jsx)(n.li,{children:"Example: Find potential matches, then confirm with additional criteria"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"action-flow",children:"Action Flow"}),"\n",(0,o.jsx)(n.p,{children:"When you chain actions:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"The first action executes with the initial ObjectCollections"}),"\n",(0,o.jsx)(n.li,{children:"Subsequent actions can use results from previous actions (NESTED) or validate them (CONFIRM)"}),"\n",(0,o.jsx)(n.li,{children:"The chain continues until all actions complete or one fails"}),"\n",(0,o.jsx)(n.li,{children:"The final result contains the complete execution history"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"simple-examples",children:"Simple Examples"}),"\n",(0,o.jsx)(n.h3,{id:"sequential-actions",children:"Sequential Actions"}),"\n",(0,o.jsx)(n.p,{children:"The most basic use case is executing actions in sequence:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Autowired\nprivate ActionChainExecutor chainExecutor;\n\n// Click a button, then type text\nActionChainOptions chain = new ActionChainOptions.Builder(\n    new ClickOptions.Builder().build())\n    .then(new TypeOptions.Builder()\n        .setTypeDelay(0.1)\n        .build())\n    .build();\n\n// Execute with appropriate ObjectCollections\nActionResult result = chainExecutor.executeChain(chain, new ActionResult(),\n    buttonImage.asObjectCollection(),\n    new ObjectCollection.Builder().withStrings("Hello World").build()\n);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"click-and-verify",children:"Click and Verify"}),"\n",(0,o.jsx)(n.p,{children:"A common pattern is clicking something and verifying the result:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ActionChainOptions clickVerify = new ActionChainOptions.Builder(\n    new ClickOptions.Builder()\n        .setPauseAfterEnd(0.5)\n        .build())\n    .then(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.FIRST)\n        .setPauseBeforeBegin(2.0) // Wait for result\n        .build())\n    .build();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"nested-search",children:"Nested Search"}),"\n",(0,o.jsx)(n.p,{children:"Find elements within other elements using the NESTED strategy:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Find a dialog, then find a button within it\nActionChainOptions nestedSearch = new ActionChainOptions.Builder(\n    new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.FIRST)\n        .build())\n    .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n    .then(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.FIRST)\n        .build())\n    .build();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"confirmation-pattern",children:"Confirmation Pattern"}),"\n",(0,o.jsx)(n.p,{children:"Use CONFIRM strategy to validate matches:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Find with low threshold, confirm with high threshold\nActionChainOptions confirmChain = new ActionChainOptions.Builder(\n    new PatternFindOptions.Builder()\n        .setSimilarity(0.7) // Lower threshold\n        .build())\n    .setStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)\n    .then(new PatternFindOptions.Builder()\n        .setSimilarity(0.9) // Higher threshold\n        .build())\n    .build();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"replacing-deprecated-patterns",children:"Replacing Deprecated Patterns"}),"\n",(0,o.jsx)(n.p,{children:"ActionChainOptions replaces several deprecated composite action patterns:"}),"\n",(0,o.jsx)(n.h3,{id:"instead-of-multipleactionsobject",children:"Instead of MultipleActionsObject"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Old way\nMultipleActionsObject mao = new MultipleActionsObject();\nmao.add(new ActionParameters(clickOptions, buttonCollection));\nmao.add(new ActionParameters(typeOptions, textCollection));\n\n// New way\nActionChainOptions chain = new ActionChainOptions.Builder(\n    new ClickOptions.Builder().build())\n    .then(new TypeOptions.Builder().build())\n    .build();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"instead-of-actionresultcombo",children:"Instead of ActionResultCombo"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Old way\nActionResultCombo combo = new ActionResultCombo();\ncombo.setActionOptions(clickOptions);\ncombo.setResultOptions(findOptions);\n\n// New way\nActionChainOptions chain = new ActionChainOptions.Builder(\n    new ClickOptions.Builder().build())\n    .then(new PatternFindOptions.Builder().build())\n    .build();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"critical-insight-object-type-preservation-in-chains",children:"Critical Insight: Object Type Preservation in Chains"}),"\n",(0,o.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,o.jsxs)(n.p,{children:["When chaining actions that use different object types (e.g., StateImage for find/click vs StateString for type), be aware that the ",(0,o.jsx)(n.strong,{children:"NESTED strategy does NOT preserve all object types"})," through the chain."]})}),"\n",(0,o.jsx)(n.h3,{id:"the-object-type-problem",children:"The Object Type Problem"}),"\n",(0,o.jsxs)(n.p,{children:["The NESTED strategy creates a new ObjectCollection containing only regions from previous matches, ",(0,o.jsx)(n.strong,{children:"discarding other object types like StateStrings"}),". This is a common pitfall when trying to chain find->click->type operations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// \u274c WRONG: This will fail - strings are lost in NESTED chain\nPatternFindOptions findClickType = new PatternFindOptions.Builder()\n    .then(new ClickOptions.Builder().build())  // Uses StateImage\n    .then(new TypeOptions.Builder().build())   // Needs StateString - but it\'s lost!\n    .build();\n\nObjectCollection mixed = new ObjectCollection.Builder()\n    .withImages(buttonImage)      // Used by find & click\n    .withStrings("Hello World")   // Lost during NESTED chaining!\n    .build();\n\n// The type action will receive NO strings and fail silently\n'})}),"\n",(0,o.jsx)(n.h3,{id:"solutions-for-mixed-object-types",children:"Solutions for Mixed Object Types"}),"\n",(0,o.jsx)(n.h4,{id:"solution-1-split-chains-by-object-type-recommended",children:"Solution 1: Split Chains by Object Type (RECOMMENDED)"}),"\n",(0,o.jsx)(n.p,{children:"Chain actions that use the same object type, then execute different types separately:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// \u2705 CORRECT: Chain find->click (both use StateImage)\nPatternFindOptions findClick = new PatternFindOptions.Builder()\n    .setPauseAfterEnd(0.5)\n    .then(new ClickOptions.Builder()\n        .setPauseAfterEnd(0.5)\n        .build())\n    .build();\n\n// Execute find->click with images\nObjectCollection imageCollection = new ObjectCollection.Builder()\n    .withImages(buttonImage)\n    .build();\nActionResult clickResult = action.perform(findClick, imageCollection);\n\n// Then execute type separately with strings\nTypeOptions typeOptions = new TypeOptions.Builder()\n    .setPauseBeforeBegin(0.5)\n    .build();\nObjectCollection stringCollection = new ObjectCollection.Builder()\n    .withStrings("Hello World")\n    .build();\nActionResult typeResult = action.perform(typeOptions, stringCollection);\n'})}),"\n",(0,o.jsx)(n.h4,{id:"solution-2-use-confirm-strategy",children:"Solution 2: Use CONFIRM Strategy"}),"\n",(0,o.jsx)(n.p,{children:"The CONFIRM strategy preserves the original ObjectCollection, but may not be semantically appropriate for all workflows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// \u2705 Alternative: CONFIRM strategy preserves all objects\nActionChainOptions chain = new ActionChainOptions.Builder(\n    new PatternFindOptions.Builder().build())\n    .setStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)  // Preserves ObjectCollection\n    .then(new ClickOptions.Builder().build())\n    .then(new TypeOptions.Builder().build())\n    .build();\n\n// Now mixed collections work\nObjectCollection mixed = new ObjectCollection.Builder()\n    .withImages(buttonImage)\n    .withStrings("Hello World")\n    .build();\n'})}),"\n",(0,o.jsx)(n.h4,{id:"solution-3-custom-coordination",children:"Solution 3: Custom Coordination"}),"\n",(0,o.jsx)(n.p,{children:"For complex workflows, manually coordinate between actions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// \u2705 Full control: Coordinate actions manually\nActionResult findResult = action.find(targetImage);\nif (findResult.isSuccess()) {\n    // Click at the found location\n    ObjectCollection clickTarget = new ObjectCollection.Builder()\n        .withRegions(findResult.getMatchList().get(0).getRegion())\n        .build();\n    action.perform(new ClickOptions.Builder().build(), clickTarget);\n    \n    // Then type\n    ObjectCollection typeTarget = new ObjectCollection.Builder()\n        .withStrings("Hello World")\n        .build();\n    action.perform(new TypeOptions.Builder().build(), typeTarget);\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Understand object type flow"}),": Know which actions use which object types","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Find/Click/Drag: Use StateImage, StateRegion, StateLocation"}),"\n",(0,o.jsx)(n.li,{children:"Type: Uses StateString"}),"\n",(0,o.jsx)(n.li,{children:"Highlight: Uses any visual object type"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Chain same-type actions"}),": Group actions that use the same object type"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use appropriate strategies"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"NESTED: For hierarchical searches within same object type"}),"\n",(0,o.jsx)(n.li,{children:"CONFIRM: When you need to preserve all object types"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Set proper delays"}),": Use ",(0,o.jsx)(n.code,{children:"setPauseAfterEnd()"})," to allow UI updates between actions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Handle failures gracefully"}),": Check intermediate results when needed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Create reusable patterns"}),": Build utility methods for common chains"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Keep chains focused"}),": Break complex workflows into smaller, manageable chains"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"common-pattern-find-click-type-workflow",children:"Common Pattern: Find-Click-Type Workflow"}),"\n",(0,o.jsx)(n.p,{children:"This is one of the most common automation patterns - finding an input field, clicking it, and typing text. Here's the definitive guide:"}),"\n",(0,o.jsx)(n.h3,{id:"-common-mistake",children:"\u274c Common Mistake"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// This looks logical but FAILS due to object type loss\nPatternFindOptions chainedActions = new PatternFindOptions.Builder()\n    .then(new ClickOptions.Builder().build())\n    .then(new TypeOptions.Builder().build())\n    .build();\n\nObjectCollection everything = new ObjectCollection.Builder()\n    .withImages(inputFieldImage)\n    .withStrings("user@example.com")\n    .build();\n\n// The type action never receives the string!\naction.perform(chainedActions, everything);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-correct-implementation",children:"\u2705 Correct Implementation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Component\npublic class LoginAutomation {\n    @Autowired\n    private Action action;\n    \n    public boolean fillLoginForm(StateImage emailField, StateImage passwordField,\n                                 String email, String password) {\n        // Step 1: Find and click email field\n        PatternFindOptions findClickEmail = new PatternFindOptions.Builder()\n            .setSimilarity(0.85)\n            .setPauseAfterEnd(0.3)\n            .then(new ClickOptions.Builder()\n                .setPauseAfterEnd(0.5)  // Wait for field to be active\n                .build())\n            .build();\n        \n        ObjectCollection emailFieldTarget = new ObjectCollection.Builder()\n            .withImages(emailField)\n            .build();\n        \n        ActionResult emailClick = action.perform(findClickEmail, emailFieldTarget);\n        if (!emailClick.isSuccess()) {\n            log.error("Failed to find/click email field");\n            return false;\n        }\n        \n        // Step 2: Type email\n        TypeOptions typeEmail = new TypeOptions.Builder()\n            .setPauseBeforeBegin(0.2)\n            .setTypeDelay(0.05)  // Human-like typing speed\n            .build();\n        \n        ObjectCollection emailText = new ObjectCollection.Builder()\n            .withStrings(email)\n            .build();\n        \n        action.perform(typeEmail, emailText);\n        \n        // Step 3: Tab to password field (or find-click it)\n        action.perform(new TypeOptions.Builder().build(), \n            new ObjectCollection.Builder().withStrings("\\t").build());\n        \n        // Step 4: Type password\n        ObjectCollection passwordText = new ObjectCollection.Builder()\n            .withStrings(password)\n            .build();\n        \n        action.perform(typeEmail, passwordText);\n        \n        return true;\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"alternative-using-state-transitions",children:"Alternative: Using State Transitions"}),"\n",(0,o.jsx)(n.p,{children:"For complex forms, consider using state transitions instead of chained actions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Transition(from = LoginFormState.class, to = FilledFormState.class)\npublic class FillLoginFormTransition {\n    \n    public boolean execute() {\n        // Each action is clear and separated\n        // State management handles the flow\n        return fillEmailField() && fillPasswordField() && clickSubmit();\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"enhanced-conditional-action-chaining",children:"Enhanced Conditional Action Chaining"}),"\n",(0,o.jsxs)(n.p,{children:["For more advanced conditional workflows with proper sequential composition, see the ",(0,o.jsx)(n.a,{href:"./conditional-chains-examples",children:"Enhanced Conditional Action Chains"})," documentation. The ",(0,o.jsx)(n.code,{children:"ConditionalActionChain"})," class provides:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The crucial ",(0,o.jsx)(n.code,{children:"then()"})," method for sequential action composition"]}),"\n",(0,o.jsxs)(n.li,{children:["Convenience methods like ",(0,o.jsx)(n.code,{children:"click()"}),", ",(0,o.jsx)(n.code,{children:"type()"}),", ",(0,o.jsx)(n.code,{children:"scrollDown()"})]}),"\n",(0,o.jsx)(n.li,{children:"Built-in keyboard shortcuts"}),"\n",(0,o.jsx)(n.li,{children:"Proper conditional execution logic"}),"\n",(0,o.jsxs)(n.li,{children:["No explicit ",(0,o.jsx)(n.code,{children:"wait()"})," methods (following model-based principles)"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Explore ",(0,o.jsx)(n.a,{href:"./conditional-chains-examples",children:"Enhanced Conditional Action Chains"})," for advanced patterns"]}),"\n",(0,o.jsxs)(n.li,{children:["Learn about ",(0,o.jsx)(n.a,{href:"./complex-workflows",children:"Complex Workflows"})," for multi-step automation"]}),"\n",(0,o.jsxs)(n.li,{children:["Learn about ",(0,o.jsx)(n.a,{href:"./conditional-actions",children:"Conditional Actions"})," using RepeatUntilConfig"]}),"\n",(0,o.jsxs)(n.li,{children:["See ",(0,o.jsx)(n.a,{href:"./form-automation",children:"Form Automation"})," for practical examples"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
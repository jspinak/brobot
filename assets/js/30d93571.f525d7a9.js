"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3863],{17850:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"testing/testing-intro","title":"Testing Overview","description":"Brobot provides comprehensive testing capabilities designed for GUI automation reliability and maintainability. The framework supports multiple testing approaches, each serving specific purposes in the automation testing lifecycle.","source":"@site/docs/04-testing/testing-intro.md","sourceDirName":"04-testing","slug":"/testing/testing-intro","permalink":"/brobot/docs/testing/testing-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/testing-intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docSidebar","previous":{"title":"OpenCV Mock System Architecture","permalink":"/brobot/docs/core-library/opencv-mock-system/architecture"},"next":{"title":"Integration Testing","permalink":"/brobot/docs/testing/integration-testing"}}');var s=t(74848),r=t(28453);const o={sidebar_position:1},a="Testing Overview",l={},c=[{value:"Testing Types",id:"testing-types",level:2},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Action Recording",id:"action-recording",level:3},{value:"Configuration Architecture",id:"configuration-architecture",level:2},{value:"Modern Configuration System",id:"modern-configuration-system",level:3},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"Migration from Legacy API",id:"migration-from-legacy-api",level:3},{value:"Testing Workflow",id:"testing-workflow",level:2},{value:"1. Configuration Setup",id:"1-configuration-setup",level:3},{value:"2. Test Execution",id:"2-test-execution",level:3},{value:"3. Result Validation",id:"3-result-validation",level:3},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Assertion Strategies",id:"assertion-strategies",level:3},{value:"Framework Integration",id:"framework-integration",level:2},{value:"Spring Boot Integration",id:"spring-boot-integration",level:3},{value:"Profile-Based Configuration (Recommended)",id:"profile-based-configuration-recommended",level:4},{value:"Standard Configuration",id:"standard-configuration",level:4},{value:"JUnit 5 Support",id:"junit-5-support",level:3},{value:"CI/CD Pipeline Support",id:"cicd-pipeline-support",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Quick Performance Setup",id:"quick-performance-setup",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"testing-overview",children:"Testing Overview"})}),"\n",(0,s.jsx)(n.p,{children:"Brobot provides comprehensive testing capabilities designed for GUI automation reliability and maintainability. The framework supports multiple testing approaches, each serving specific purposes in the automation testing lifecycle."}),"\n",(0,s.jsx)(n.admonition,{title:"Advanced Testing Features",type:"tip",children:(0,s.jsxs)(n.p,{children:["For advanced mock testing capabilities including scenario-based configurations and failure patterns, see the ",(0,s.jsx)(n.a,{href:"/docs/core-library/testing/enhanced-mocking",children:"Enhanced Mock Testing System"})," in the Core Library documentation."]})}),"\n",(0,s.jsx)(n.h2,{id:"testing-types",children:"Testing Types"}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Validate complete automation workflows and system reliability"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Full workflow simulation"})," using mock execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stochastic modeling"})," of real-world variability and failure modes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State transition validation"})," across complex application flows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance and reliability assessment"})," for production readiness"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimized execution"})," with parallel testing and shared contexts"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Performance Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Parallel test execution using available CPU cores"}),"\n",(0,s.jsxs)(n.li,{children:["Shared Spring contexts via ",(0,s.jsx)(n.code,{children:"OptimizedIntegrationTestBase"})]}),"\n",(0,s.jsx)(n.li,{children:"Ultra-fast mock timings (0.005-0.015s per operation)"}),"\n",(0,s.jsx)(n.li,{children:"Smart JVM forking to prevent memory issues"}),"\n",(0,s.jsx)(n.li,{children:"Test result caching for faster re-runs"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": End-to-end workflow validation, reliability testing, CI/CD pipeline integration"]}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Test individual components with deterministic, reproducible results"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolated component testing"})," using static screenshots"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deterministic results"})," with known screen states"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast execution"})," with mocked actions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Regression detection"})," for code changes"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": Component validation, regression testing, development workflows"]}),"\n",(0,s.jsx)(n.h3,{id:"action-recording",children:"Action Recording"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Visual validation and debugging of automation behavior"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visual verification"})," of action execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interactive debugging"})," and development"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Screenshot-based validation"})," with real-time feedback"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manual testing support"})," for complex scenarios"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Best for"}),": Development debugging, manual verification, complex scenario validation"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-architecture",children:"Configuration Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"modern-configuration-system",children:"Modern Configuration System"}),"\n",(0,s.jsx)(n.p,{children:"Brobot uses Spring Boot's configuration properties system with clean architectural patterns:"}),"\n",(0,s.jsx)(n.admonition,{title:"New Test Logging Architecture",type:"info",children:(0,s.jsxs)(n.p,{children:["Brobot now includes a clean test logging architecture that follows Single Responsibility Principle and eliminates circular dependencies. See the ",(0,s.jsx)(n.a,{href:"/docs/core-library/testing/test-logging-architecture",children:"Test Logging Architecture"})," guide for details on using the TestLoggerFactory and related components."]})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# Core testing settings\nbrobot.core.mock=true\nbrobot.core.headless=false\nbrobot.core.image-path=images/\n\n# Screenshot management\nbrobot.screenshot.path=screenshots/\nbrobot.screenshot.save-snapshots=false\nbrobot.screenshot.save-history=true\n\n# Mock execution timings\nbrobot.mock.time-find-first=0.1\nbrobot.mock.time-click=0.05\nbrobot.mock.time-drag=0.3\n\n# Testing behavior\nbrobot.testing.iteration=1\nbrobot.testing.send-logs=true\n"})}),"\n",(0,s.jsx)(n.p,{children:"Or using YAML format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  core:\n    mock: true\n    headless: false\n    image-path: images/\n  screenshot:\n    path: screenshots/\n    save-snapshots: false\n    save-history: true\n  mock:\n    time-find-first: 0.1\n    time-click: 0.05\n    time-drag: 0.3\n  testing:\n    iteration: 1\n    send-logs: true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"migration-from-legacy-api",children:"Migration from Legacy API"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Legacy (Deprecated)"}),(0,s.jsx)(n.th,{children:"Modern Equivalent"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BrobotSettings.mock"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"brobot.core.mock=true"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BrobotSettings.screenshotPath"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"brobot.screenshot.path"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"BrobotSettings.screenshots"})}),(0,s.jsx)(n.td,{children:"Configure via properties"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ActionOptions"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"ActionConfig"})," (e.g., ",(0,s.jsx)(n.code,{children:"PatternFindOptions"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"MatchSnapshot"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ActionResult"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"testing-workflow",children:"Testing Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"1-configuration-setup",children:"1. Configuration Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@TestPropertySource(properties = {\n    "brobot.core.mock=true",\n    "brobot.screenshot.path=src/test/resources/screenshots/"\n})\nclass AutomationTest {\n    \n    @Autowired\n    private Action action;\n    \n    @Autowired\n    private StateService stateService;\n    \n    // No manual configuration needed - handled by properties\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-test-execution",children:"2. Test Execution"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testAutomationFlow() {\n    // Create action configuration\n    PatternFindOptions findOptions = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.85)\n        .build();\n    \n    // Create state object\n    StateImage loginButton = new StateImage.Builder()\n        .addPattern("login_button")  // No .png extension needed\n        .build();\n    \n    // Execute automation with mock/real behavior based on configuration\n    ActionResult result = action.perform(findOptions, loginButton);\n    \n    // Modern assertion patterns\n    assertTrue(result.isSuccess());\n    assertFalse(result.isEmpty());\n    assertEquals(1, result.size());\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-result-validation",children:"3. Result Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\nvoid validateResults() {\n    // Perform find action\n    PatternFindOptions findOptions = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .build();\n    \n    StateImage buttonsImage = stateImageRepo.get("buttons");\n    ActionResult result = action.perform(findOptions, buttonsImage);\n    \n    // Test ActionResult properties\n    Optional<Match> bestMatch = result.getBestMatch();\n    assertTrue(bestMatch.isPresent());\n    assertTrue(bestMatch.get().getScore() > 0.8);\n    \n    // Test regions and coordinates\n    List<Region> regions = result.getMatchRegions();\n    assertThat(regions).hasSize(2);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separate test configurations"})," for different testing types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use descriptive test names"})," that indicate the scenario being tested"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Organize screenshots"})," in logical directory structures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version control test assets"})," including screenshots and configurations"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use properties files"})," for environment-specific settings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage Spring profiles"})," for different testing scenarios"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document configuration"})," requirements for each test type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate configuration"})," in test setup methods"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"assertion-strategies",children:"Assertion Strategies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test positive and negative cases"})," for comprehensive coverage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use appropriate assertion granularity"})," (component vs. workflow level)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement custom matchers"})," for domain-specific validations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Include timing and performance assertions"})," where relevant"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-integration",children:"Spring Boot Integration"}),"\n",(0,s.jsx)(n.h4,{id:"profile-based-configuration-recommended",children:"Profile-Based Configuration (Recommended)"}),"\n",(0,s.jsxs)(n.p,{children:["For conflict-free test configuration, use ",(0,s.jsx)(n.a,{href:"/docs/testing/profile-based-testing",children:"Profile-Based Testing"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(classes = IntegrationTestMinimalConfig.class)\n@ActiveProfiles("integration-minimal")\n@TestPropertySource(locations = "classpath:application-integration.properties")\nclass IntegrationTest extends IntegrationTestBase {\n    // Isolated test configuration without bean conflicts\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"standard-configuration",children:"Standard Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")\nclass IntegrationTest {\n    // Full Spring context with Brobot configuration\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"junit-5-support",children:"JUnit 5 Support"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@ExtendWith(MockitoExtension.class)\nclass UnitTest {\n    @Mock\n    private SomeService mockService;\n    \n    // Standard JUnit 5 patterns with Brobot\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cicd-pipeline-support",children:"CI/CD Pipeline Support"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Headless execution"})," for automated environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configurable timeouts"})," for different environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test result reporting"})," with detailed logs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Screenshot archival"})," for test failure analysis"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose your testing approach"})," based on requirements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure properties"})," for your testing environment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set up test screenshots"})," or mock data as needed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement test cases"})," using modern APIs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validate and iterate"})," based on test results"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-performance-setup",children:"Quick Performance Setup"}),"\n",(0,s.jsx)(n.p,{children:"To enable optimized test execution for integration tests:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Add to ",(0,s.jsx)(n.code,{children:"library-test/gradle.properties"})]}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"org.gradle.parallel=true\norg.gradle.caching=true\nsystemProp.junit.jupiter.execution.parallel.enabled=true\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Update ",(0,s.jsx)(n.code,{children:"library-test/build.gradle"})]}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:"test {\n    timeout = Duration.ofMinutes(10)\n    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2)\n    forkEvery = 20\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use optimized base class"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class MyTest extends OptimizedIntegrationTestBase {\n    // Automatic performance optimizations\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"For detailed examples and advanced patterns, see the specific testing type documentation."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
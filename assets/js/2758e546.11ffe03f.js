"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5325],{12329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/guides/multi-state-transitions-guide","title":"Multi-State Transitions Guide","description":"Quick Reference","source":"@site/docs/03-core-library/guides/multi-state-transitions-guide.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/multi-state-transitions-guide","permalink":"/brobot/docs/core-library/guides/multi-state-transitions-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/multi-state-transitions-guide.md","tags":[],"version":"current","sidebarPosition":25,"frontMatter":{"sidebar_position":25,"title":"Multi-State Transitions Guide"},"sidebar":"docSidebar","previous":{"title":"ActionHistory Migration Plan","permalink":"/brobot/docs/core-library/guides/actionhistory-migration-plan"},"next":{"title":"Brobot API Documentation Template","permalink":"/brobot/docs/core-library/guides/API_DOCUMENTATION_TEMPLATE"}}');var a=t(74848),s=t(28453);const r={sidebar_position:25,title:"Multi-State Transitions Guide"},l="Multi-State Transitions Developer Guide",o={},c=[{value:"Quick Reference",id:"quick-reference",level:2},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Code Patterns",id:"code-patterns",level:3},{value:"Defining Multi-State Transitions",id:"defining-multi-state-transitions",level:4},{value:"Using @TransitionSet Pattern",id:"using-transitionset-pattern",level:4},{value:"Common Scenarios",id:"common-scenarios",level:2},{value:"1. Login Opens Entire Application",id:"1-login-opens-entire-application",level:3},{value:"2. Tab Switching with Persistent Navigation",id:"2-tab-switching-with-persistent-navigation",level:3},{value:"3. Modal Dialog Over Content",id:"3-modal-dialog-over-content",level:3},{value:"4. Contextual State Activation",id:"4-contextual-state-activation",level:3},{value:"Pathfinding Examples",id:"pathfinding-examples",level:2},{value:"Understanding Path Discovery",id:"understanding-path-discovery",level:3},{value:"Testing Multiple Paths",id:"testing-multiple-paths",level:3},{value:"Verification Patterns",id:"verification-patterns",level:2},{value:"Complete Activation Verification",id:"complete-activation-verification",level:3},{value:"Partial Activation Tolerance",id:"partial-activation-tolerance",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"DO \u2705",id:"do-",level:3},{value:"DON&#39;T \u274c",id:"dont-",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Enable Transition Logging",id:"enable-transition-logging",level:3},{value:"Debug Output",id:"debug-output",level:3},{value:"Summary Checklist",id:"summary-checklist",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"multi-state-transitions-developer-guide",children:"Multi-State Transitions Developer Guide"})}),"\n",(0,a.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,a.jsx)(n.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Concept"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"No Primary Target"})}),(0,a.jsxs)(n.td,{children:["All states in ",(0,a.jsx)(n.code,{children:"activate"})," set are equal"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Path Node Eligibility"})}),(0,a.jsx)(n.td,{children:"ANY activated state can be a path node"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Path Success"})}),(0,a.jsx)(n.td,{children:"Only next path node needs activation"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"IncomingTransition Execution"})}),(0,a.jsx)(n.td,{children:"ALL activated states verify arrival"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"code-patterns",children:"Code Patterns"}),"\n",(0,a.jsx)(n.h4,{id:"defining-multi-state-transitions",children:"Defining Multi-State Transitions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Using JavaStateTransition Builder\r\nJavaStateTransition multiActivation = new JavaStateTransition.Builder()\r\n    .setFunction(() -> action.click(loginButton).isSuccess())\r\n    .addToActivate("Dashboard")      // All four states\r\n    .addToActivate("NavigationBar")   // are activated\r\n    .addToActivate("StatusPanel")     // equally - no\r\n    .addToActivate("NotificationArea") // primary target\r\n    .build();\n'})}),"\n",(0,a.jsx)(n.h4,{id:"using-transitionset-pattern",children:"Using @TransitionSet Pattern"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@TransitionSet(state = LoginState.class)\r\npublic class LoginTransitions {\r\n\r\n    @OutgoingTransition(to = ApplicationState.class)\r\n    public boolean openApplication() {\r\n        // This click activates multiple states defined in ApplicationState\r\n        return action.click(loginState.getLoginButton()).isSuccess();\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"common-scenarios",children:"Common Scenarios"}),"\n",(0,a.jsx)(n.h3,{id:"1-login-opens-entire-application",children:"1. Login Opens Entire Application"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Scenario"}),": Login button opens dashboard, navigation, sidebar, and status bar simultaneously."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Transition definition\r\nJavaStateTransition loginToApp = new JavaStateTransition.Builder()\r\n    .setFunction(() -> action.click(loginButton).isSuccess())\r\n    .addToActivate("Dashboard")\r\n    .addToActivate("Navigation")\r\n    .addToActivate("Sidebar")\r\n    .addToActivate("StatusBar")\r\n    .addToExit("LoginScreen")  // Login screen disappears\r\n    .build();\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Pathfinding Impact"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// After login, these paths become available:\r\n// Login \u2192 Dashboard \u2192 AnyDashboardChild\r\n// Login \u2192 Navigation \u2192 AnyNavChild\r\n// Login \u2192 Sidebar \u2192 AnySidebarChild\r\n// Login \u2192 StatusBar \u2192 AnyStatusChild\r\n\r\n// Example: Reaching Settings via different routes\r\nnavigator.openState("Settings");\r\n// Might use: Login \u2192 Navigation \u2192 Settings\r\n// Or: Login \u2192 Sidebar \u2192 Settings\r\n// Whichever path exists and is shortest\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-tab-switching-with-persistent-navigation",children:"2. Tab Switching with Persistent Navigation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Scenario"}),": Switching tabs changes content but keeps navigation active."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Tab1 to Tab2 transition\r\nJavaStateTransition switchToTab2 = new JavaStateTransition.Builder()\r\n    .setFunction(() -> action.click(tab2Button).isSuccess())\r\n    .addToActivate("Tab2Content")\r\n    .addToActivate("Tab2Sidebar")  // Tab2 specific sidebar\r\n    .addToExit("Tab1Content")       // Remove Tab1 content\r\n    .addToExit("Tab1Sidebar")       // Remove Tab1 sidebar\r\n    // Note: Navigation NOT in exit list - stays active\r\n    .build();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-modal-dialog-over-content",children:"3. Modal Dialog Over Content"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Scenario"}),": Settings modal appears over dashboard without hiding it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Open modal keeping background visible\r\nJavaStateTransition openSettings = new JavaStateTransition.Builder()\r\n    .setFunction(() -> action.click(settingsIcon).isSuccess())\r\n    .addToActivate("SettingsModal")\r\n    .addToActivate("ModalOverlay")\r\n    // Dashboard NOT in exit list - remains visible\r\n    .setStaysVisibleAfterTransition(StaysVisible.TRUE)\r\n    .build();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-contextual-state-activation",children:"4. Contextual State Activation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Scenario"}),": Different states activate based on user role or context."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public class ContextualTransition {\r\n\r\n    public Set<String> determineActivatedStates() {\r\n        Set<String> toActivate = new HashSet<>();\r\n\r\n        // Always activate base dashboard\r\n        toActivate.add("Dashboard");\r\n\r\n        // Role-specific panels\r\n        if (userRole.isAdmin()) {\r\n            toActivate.add("AdminPanel");\r\n            toActivate.add("SystemMonitor");\r\n        }\r\n\r\n        if (userRole.hasNotifications()) {\r\n            toActivate.add("NotificationPanel");\r\n        }\r\n\r\n        return toActivate;\r\n    }\r\n\r\n    public JavaStateTransition buildTransition() {\r\n        JavaStateTransition.Builder builder = new JavaStateTransition.Builder()\r\n            .setFunction(() -> action.click(enterButton).isSuccess());\r\n\r\n        // Add all contextual states\r\n        determineActivatedStates().forEach(builder::addToActivate);\r\n\r\n        return builder.build();\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"pathfinding-examples",children:"Pathfinding Examples"}),"\n",(0,a.jsx)(n.h3,{id:"understanding-path-discovery",children:"Understanding Path Discovery"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Given this state structure:\r\n// StateA \u2192 activates [B, C, D]\r\n// StateB \u2192 activates [E]\r\n// StateC \u2192 activates [F]\r\n// StateD \u2192 activates [G]\r\n// StateE \u2192 activates [Target]\r\n\r\n// When navigating to Target:\r\nnavigator.openState("Target");\r\n\r\n// Pathfinder explores:\r\n// From A: Can reach B, C, D\r\n// From B: Can reach E\r\n// From E: Can reach Target \u2713\r\n// Path found: A \u2192 B \u2192 E \u2192 Target\r\n\r\n// Even though A also activated C and D,\r\n// the path only needs B to continue\n'})}),"\n",(0,a.jsx)(n.h3,{id:"testing-multiple-paths",children:"Testing Multiple Paths"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Test\r\npublic void testMultiplePathsToTarget() {\r\n    // Setup: Login activates [Dashboard, Menu]\r\n    // Dashboard can reach Settings\r\n    // Menu can also reach Settings\r\n\r\n    // Path 1: Via Dashboard\r\n    stateMemory.clear();\r\n    stateMemory.addActiveState("Login");\r\n    Paths paths = pathFinder.getPathsToState(\r\n        Set.of("Login"), "Settings"\r\n    );\r\n\r\n    // Should find both paths:\r\n    // Login \u2192 Dashboard \u2192 Settings\r\n    // Login \u2192 Menu \u2192 Settings\r\n    assertEquals(2, paths.getPaths().size());\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"verification-patterns",children:"Verification Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"complete-activation-verification",children:"Complete Activation Verification"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@TransitionSet(state = WorkspaceState.class)\r\npublic class WorkspaceTransitions {\r\n\r\n    @IncomingTransition\r\n    public boolean verifyCompleteActivation() {\r\n        // Check ALL expected components\r\n        boolean dashboardVisible = action.find(dashboard).isSuccess();\r\n        boolean navVisible = action.find(navigation).isSuccess();\r\n        boolean sidebarVisible = action.find(sidebar).isSuccess();\r\n        boolean statusVisible = action.find(statusBar).isSuccess();\r\n\r\n        if (!dashboardVisible || !navVisible || !sidebarVisible || !statusVisible) {\r\n            log.error("Workspace activation incomplete: " +\r\n                "Dashboard={}, Nav={}, Sidebar={}, Status={}",\r\n                dashboardVisible, navVisible, sidebarVisible, statusVisible);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"partial-activation-tolerance",children:"Partial Activation Tolerance"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@IncomingTransition\r\npublic boolean verifyWithTolerance() {\r\n    // Required components\r\n    boolean coreVisible = action.find(mainContent).isSuccess();\r\n    if (!coreVisible) {\r\n        log.error("Core content not visible - failing");\r\n        return false;\r\n    }\r\n\r\n    // Optional components\r\n    boolean sidebarVisible = action.find(sidebar).isSuccess();\r\n    if (!sidebarVisible) {\r\n        log.warn("Sidebar not visible - continuing anyway");\r\n    }\r\n\r\n    return coreVisible; // Accept partial success\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"do-",children:"DO \u2705"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Group Related States"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Good: Logical grouping\r\n.addToActivate("EmailEditor")\r\n.addToActivate("EmailToolbar")\r\n.addToActivate("RecipientPanel")\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Document Multi-Activation"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"/**\r\n * Opens email composer with all panels.\r\n * Activates: EmailEditor (main), EmailToolbar (top), RecipientPanel (side)\r\n */\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Test Path Variations"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Test that state can be reached via multiple paths\r\ntestPathViaMenu();\r\ntestPathViaDashboard();\r\ntestPathViaShortcut();\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Handle Activation Failures"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'if (!allStatesActivated()) {\r\n    log.warn("Partial activation - attempting recovery");\r\n    return attemptRecovery();\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"dont-",children:"DON'T \u274c"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Don't Assume Primary Target"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Wrong thinking:\r\n// "Dashboard is the main state, others are secondary"\r\n// Right thinking:\r\n// "All activated states are equal for pathfinding"\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Don't Activate Unrelated States"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Bad: Unrelated states\r\n.addToActivate("EmailComposer")\r\n.addToActivate("StockTicker")  // Unrelated!\r\n.addToActivate("WeatherWidget") // Unrelated!\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Don't Ignore Partial Activation"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Bad: Ignoring failures\r\nboolean result = action.click(button).isSuccess();\r\n// Should verify all expected states activated\n"})}),"\n",(0,a.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,a.jsx)(n.h3,{id:"enable-transition-logging",children:"Enable Transition Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-properties",children:"# application.properties\r\nlogging.level.io.github.jspinak.brobot.navigation.transition=TRACE\n"})}),"\n",(0,a.jsx)(n.h3,{id:"debug-output",children:"Debug Output"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Check what states a transition activates\r\nStateTransition transition = getTransition();\r\nSystem.out.println("Activates: " + transition.getActivate());\r\nSystem.out.println("Exits: " + transition.getExit());\r\n\r\n// Verify joint table indexing\r\nSet<Long> parents = jointTable.getIncomingTransitions(stateId);\r\nSystem.out.println("Can be reached from: " + parents);\r\n\r\n// Trace path finding\r\nPaths paths = pathFinder.getPathsToState(activeStates, target);\r\npaths.getPaths().forEach(System.out::println);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"summary-checklist",children:"Summary Checklist"}),"\n",(0,a.jsx)(n.p,{children:"When implementing multi-state transitions:"}),"\n",(0,a.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All activated states have IncomingTransition methods"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","States are logically related (appear together in UI)"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Documentation lists all activated states"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests verify all states activate correctly"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Pathfinding tested through different activated states"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Partial activation handled gracefully"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Exit states explicitly specified when needed"]}),"\n",(0,a.jsxs)(n.li,{className:"task-list-item",children:[(0,a.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Visibility behavior (staysVisible) set appropriately"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5154],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(96540);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}},70096:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/tutorials/tutorial-claude-automator/configuration","title":"Spring Configuration and Wiring","description":"Overview","source":"@site/docs/03-core-library/tutorials/tutorial-claude-automator/configuration.md","sourceDirName":"03-core-library/tutorials/tutorial-claude-automator","slug":"/core-library/tutorials/tutorial-claude-automator/configuration","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-claude-automator/configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Continuous Monitoring Automation","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/automation"},"next":{"title":"Claude Automator Tutorial","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/intro"}}');var r=n(74848),a=n(28453);const o={},s="Spring Configuration and Wiring",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Automatic Startup Verification (v1.1.0+)",id:"automatic-startup-verification-v110",level:2},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Benefits",id:"benefits",level:3},{value:"StateRegistrationListener.java (Recommended Approach)",id:"stateregistrationlistenerjava-recommended-approach",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"1. Why Use @EventListener Instead of @PostConstruct",id:"1-why-use-eventlistener-instead-of-postconstruct",level:3},{value:"2. Critical Framework Initialization",id:"2-critical-framework-initialization",level:3},{value:"3. Registration Order",id:"3-registration-order",level:3},{value:"Alternative Configuration Patterns",id:"alternative-configuration-patterns",level:2},{value:"Bean-Based Configuration",id:"bean-based-configuration",level:3},{value:"Conditional Configuration",id:"conditional-configuration",level:3},{value:"Profile-Based Configuration",id:"profile-based-configuration",level:3},{value:"Error Handling Strategies",id:"error-handling-strategies",level:2},{value:"Validation on Startup",id:"validation-on-startup",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Configuration Best Practices",id:"configuration-best-practices",level:2},{value:"Additional Configuration Files",id:"additional-configuration-files",level:2},{value:"Custom Properties",id:"custom-properties",level:3},{value:"Loading Custom Properties",id:"loading-custom-properties",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"spring-configuration-and-wiring",children:"Spring Configuration and Wiring"})}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.p,{children:"The configuration class brings everything together, registering states and transitions with the Brobot framework."}),"\n",(0,r.jsx)(t.h2,{id:"automatic-startup-verification-v110",children:"Automatic Startup Verification (v1.1.0+)"}),"\n",(0,r.jsx)(t.p,{children:"Brobot 1.1.0+ provides comprehensive automatic startup verification that handles both image and state verification:"}),"\n",(0,r.jsx)(t.h3,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'brobot:\n  startup:\n    # Enable automatic startup verification\n    auto-verify: true\n    \n    # States to verify (comma-separated)\n    verify-states: "Working,Prompt"\n    \n    # Image path configuration\n    image-path: images\n    fallback-paths:\n      - "/home/user/app/images"\n      - "${user.home}/Documents/app/images"\n    \n    # State verification options\n    clear-states-before-verify: true\n    ui-stabilization-delay: 2.0\n    \n    # Error handling\n    throw-on-failure: false\n    run-diagnostics-on-failure: true\n'})}),"\n",(0,r.jsx)(t.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Phase 1 - Image Verification"})," (ApplicationRunner):"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Automatically discovers required images from configured states"}),"\n",(0,r.jsx)(t.li,{children:"Verifies all images exist and are loadable"}),"\n",(0,r.jsx)(t.li,{children:"Uses intelligent fallback paths"}),"\n",(0,r.jsx)(t.li,{children:"Runs diagnostics on failure"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Phase 2 - State Verification"})," (StatesRegisteredEvent):"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Waits for UI stabilization"}),"\n",(0,r.jsx)(t.li,{children:"Verifies expected states are visible on screen"}),"\n",(0,r.jsx)(t.li,{children:"Updates StateMemory automatically"}),"\n",(0,r.jsx)(t.li,{children:"Provides detailed error reporting"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Zero Code"}),": No custom startup classes needed"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Auto-Discovery"}),": Images automatically found from state definitions"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Configuration-Driven"}),": Change behavior without recompiling"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Intelligent Defaults"}),": Common fallback paths included"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Comprehensive"}),": Handles both images and states"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"stateregistrationlistenerjava-recommended-approach",children:"StateRegistrationListener.java (Recommended Approach)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.claude.automator.config;\n\nimport com.claude.automator.states.PromptState;\nimport com.claude.automator.states.WorkingState;\nimport com.claude.automator.transitions.PromptTransitions;\nimport com.claude.automator.transitions.WorkingTransitions;\nimport io.github.jspinak.brobot.config.FrameworkInitializer;\nimport io.github.jspinak.brobot.model.transition.StateTransitionStore;\nimport io.github.jspinak.brobot.navigation.service.StateService;\nimport io.github.jspinak.brobot.statemanagement.StateMemory;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.context.event.ApplicationReadyEvent;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * Registers states and transitions after the application is fully ready.\n * This ensures the Brobot framework is initialized before states try to load images.\n */\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class StateRegistrationListener {\n\n    private final StateService stateService;\n    private final StateTransitionStore stateTransitionStore;\n    private final StateMemory stateMemory;\n    private final FrameworkInitializer frameworkInitializer;\n    private final WorkingState workingState;\n    private final PromptState promptState;\n    private final WorkingTransitions workingTransitions;\n    private final PromptTransitions promptTransitions;\n\n    @EventListener(ApplicationReadyEvent.class)\n    public void onApplicationReady() {\n        log.info("Application ready - registering states with StateService");\n        \n        try {\n            // Register states with the StateService\n            stateService.save(workingState.getState());\n            stateService.save(promptState.getState());\n            \n            // Register state transitions\n            stateTransitionStore.add(workingTransitions.getStateTransitions());\n            stateTransitionStore.add(promptTransitions.getStateTransitions());\n            \n            log.info("States and transitions registered successfully");\n            \n            // Important: Initialize the state structure after ALL states are registered\n            // This will properly set up the transitions joint table with all state IDs\n            // The first call in FrameworkLifecycleManager only had the Unknown state\n            frameworkInitializer.initializeStateStructure();\n            \n            log.info("State structure initialized with transitions joint table");\n            \n            // Note: With auto-verify enabled, initial states are set automatically\n            // based on what\'s actually visible on screen. No need to manually\n            // set initial states here.\n            log.info("State registration complete. Auto-verifier will handle initial states.");\n        } catch (Exception e) {\n            log.error("Error registering states: ", e);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsx)(t.h3,{id:"1-why-use-eventlistener-instead-of-postconstruct",children:"1. Why Use @EventListener Instead of @PostConstruct"}),"\n",(0,r.jsxs)(t.p,{children:["The recommended approach uses ",(0,r.jsx)(t.code,{children:"@EventListener(ApplicationReadyEvent.class)"})," instead of ",(0,r.jsx)(t.code,{children:"@PostConstruct"})," for several important reasons:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Framework Initialization Timing"}),": Ensures Brobot framework is fully initialized before states try to load images"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Dependency Resolution"}),": All Spring beans are completely wired and ready"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Error Prevention"}),": Avoids initialization order issues that can occur with @PostConstruct"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Better Integration"}),": Works seamlessly with Spring Boot's lifecycle"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"2-critical-framework-initialization",children:"2. Critical Framework Initialization"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// This MUST be called after ALL states are registered\nframeworkInitializer.initializeStateStructure();\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This second call to ",(0,r.jsx)(t.code,{children:"initializeStateStructure()"})," is crucial because:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The first call during framework startup only knows about the Unknown state"}),"\n",(0,r.jsx)(t.li,{children:"This call properly sets up the transitions joint table with all registered state IDs"}),"\n",(0,r.jsx)(t.li,{children:"Without this, state transitions may not work correctly"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"3-registration-order",children:"3. Registration Order"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"States first"}),": Must exist before transitions reference them"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Transitions second"}),": Need state IDs to function"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Framework structure initialization"}),": Sets up internal mappings"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Auto-verification"}),": Handles initial state detection automatically"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"alternative-configuration-patterns",children:"Alternative Configuration Patterns"}),"\n",(0,r.jsx)(t.h3,{id:"bean-based-configuration",children:"Bean-Based Configuration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"@Configuration\npublic class BeanConfiguration {\n    \n    @Bean\n    public StateTransitions promptTransitions(PromptState promptState, Action action) {\n        return new StateTransitions.Builder(PromptState.Name.PROMPT.toString())\n                // ... build transitions\n                .build();\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"conditional-configuration",children:"Conditional Configuration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'@Configuration\n@ConditionalOnProperty(name = "claude.automator.enabled", havingValue = "true")\npublic class ConditionalStateConfiguration {\n    // Only loads when property is set\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"profile-based-configuration",children:"Profile-Based Configuration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'@Configuration\n@Profile("claude-automation")\npublic class ClaudeAutomationConfiguration {\n    // Active only in specific profile\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"error-handling-strategies",children:"Error Handling Strategies"}),"\n",(0,r.jsx)(t.h3,{id:"validation-on-startup",children:"Validation on Startup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'@PostConstruct\npublic void validateConfiguration() {\n    // Verify all states are registered\n    if (stateService.getStateId(WorkingState.Name.WORKING.toString()) == null) {\n        throw new IllegalStateException("Working state not found!");\n    }\n    \n    // Verify transitions exist\n    if (stateTransitionStore.getTransitions(WorkingState.Name.WORKING.toString()) == null) {\n        throw new IllegalStateException("Working transitions not found!");\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'private void setInitialState() {\n    try {\n        Long stateId = stateService.getStateId(PromptState.Name.PROMPT.toString());\n        if (stateId != null) {\n            stateMemory.addActiveState(stateId);\n        }\n    } catch (Exception e) {\n        log.warn("Could not set initial state, continuing with defaults", e);\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"configuration-best-practices",children:"Configuration Best Practices"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Use constructor injection"})," (via @RequiredArgsConstructor)"]}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Log important configuration steps"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Validate critical components"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"Handle failures gracefully"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Keep configuration focused"})," on wiring, not business logic"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"additional-configuration-files",children:"Additional Configuration Files"}),"\n",(0,r.jsx)(t.h3,{id:"custom-properties",children:"Custom Properties"}),"\n",(0,r.jsxs)(t.p,{children:["Create ",(0,r.jsx)(t.code,{children:"src/main/resources/claude-automator.properties"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-properties",children:"# Claude Automator Settings\nclaude.automator.monitor.interval=2\nclaude.automator.monitor.initial-delay=5\nclaude.automator.icon.timeout=10.0\n"})}),"\n",(0,r.jsx)(t.h3,{id:"loading-custom-properties",children:"Loading Custom Properties"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "claude.automator")\n@Component\n@Getter\n@Setter\npublic class ClaudeAutomatorProperties {\n    private MonitorProperties monitor = new MonitorProperties();\n    private IconProperties icon = new IconProperties();\n    \n    @Getter\n    @Setter\n    public static class MonitorProperties {\n        private int interval = 2;\n        private int initialDelay = 5;\n    }\n    \n    @Getter\n    @Setter\n    public static class IconProperties {\n        private double timeout = 10.0;\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(t.p,{children:"With everything configured, let's run the application and see it in action!"})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5543],{13299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"testing/actionhistory-mock-snapshots","title":"ActionHistory and Mock Snapshots","description":"Overview","source":"@site/docs/04-testing/actionhistory-mock-snapshots.md","sourceDirName":"04-testing","slug":"/testing/actionhistory-mock-snapshots","permalink":"/brobot/docs/testing/actionhistory-mock-snapshots","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/actionhistory-mock-snapshots.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"ActionHistory and Mock Snapshots"},"sidebar":"docSidebar","previous":{"title":"Mock Mode Guide","permalink":"/brobot/docs/testing/mock-mode-guide"},"next":{"title":"Mock Mode Manager","permalink":"/brobot/docs/testing/mock-mode-manager"}}');var o=t(74848),r=t(28453);const s={sidebar_position:3,title:"ActionHistory and Mock Snapshots"},a="ActionHistory and Mock Snapshots",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"What is ActionHistory?",id:"what-is-actionhistory",level:3},{value:"Why ActionHistory is Required in Mock Mode",id:"why-actionhistory-is-required-in-mock-mode",level:3},{value:"New Builder Integration (v1.0.0+)",id:"new-builder-integration-v100",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"StateImage.Builder Methods",id:"stateimagebuilder-methods",level:3},{value:"1. Direct ActionHistory",id:"1-direct-actionhistory",level:4},{value:"2. Supplier Function (Lazy Initialization)",id:"2-supplier-function-lazy-initialization",level:4},{value:"3. Single ActionRecord",id:"3-single-actionrecord",level:4},{value:"MockActionHistoryBuilder",id:"mockactionhistorybuilder",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Preset Configurations",id:"preset-configurations",level:3},{value:"MockActionHistoryFactory",id:"mockactionhistoryfactory",level:2},{value:"UI Pattern Methods",id:"ui-pattern-methods",level:3},{value:"Screen Position Helpers",id:"screen-position-helpers",level:3},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Caching for Performance",id:"caching-for-performance",level:3},{value:"Complete Example: Claude Automator",id:"complete-example-claude-automator",level:2},{value:"Migration from Manual ActionHistory",id:"migration-from-manual-actionhistory",level:2},{value:"Old Approach (Pre-v1.0.0)",id:"old-approach-pre-v100",level:3},{value:"New Approach (v1.0.0+)",id:"new-approach-v100",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Set ActionHistory for Mock Mode",id:"1-always-set-actionhistory-for-mock-mode",level:3},{value:"2. Use Appropriate Factory Methods",id:"2-use-appropriate-factory-methods",level:3},{value:"3. Configure Realistic Success Rates",id:"3-configure-realistic-success-rates",level:3},{value:"4. Use Screen-Adaptive Regions",id:"4-use-screen-adaptive-regions",level:3},{value:"5. Leverage Caching for Performance",id:"5-leverage-caching-for-performance",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Patterns Not Found in Mock Mode",id:"patterns-not-found-in-mock-mode",level:3},{value:"Compilation Errors",id:"compilation-errors",level:3},{value:"Inconsistent Test Results",id:"inconsistent-test-results",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"actionhistory-and-mock-snapshots",children:"ActionHistory and Mock Snapshots"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["ActionHistory is a critical component for mock mode testing in Brobot. It provides historical data about pattern matches and actions, enabling realistic simulation of GUI interactions without actual screen access. This is ",(0,o.jsx)(n.strong,{children:"required"}),' for patterns to be "found" in mock mode.']}),"\n",(0,o.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,o.jsx)(n.h3,{id:"what-is-actionhistory",children:"What is ActionHistory?"}),"\n",(0,o.jsxs)(n.p,{children:["ActionHistory stores a collection of ",(0,o.jsx)(n.code,{children:"ActionRecord"})," objects that represent past interactions with GUI elements. Each record contains:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Match information (location, similarity score)"}),"\n",(0,o.jsx)(n.li,{children:"Action configuration (find options, strategies)"}),"\n",(0,o.jsx)(n.li,{children:"Success/failure status"}),"\n",(0,o.jsx)(n.li,{children:"Execution duration"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"why-actionhistory-is-required-in-mock-mode",children:"Why ActionHistory is Required in Mock Mode"}),"\n",(0,o.jsx)(n.p,{children:"In mock mode, Brobot doesn't perform real pattern matching. Instead, it uses ActionHistory to:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:'Determine if a pattern should be "found"'}),"\n",(0,o.jsx)(n.li,{children:"Provide realistic match locations and scores"}),"\n",(0,o.jsx)(n.li,{children:"Simulate timing and performance characteristics"}),"\n",(0,o.jsx)(n.li,{children:"Enable deterministic or probabilistic testing"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Important"}),": Without ActionHistory, patterns will never be found in mock mode, causing all find operations to fail."]}),"\n",(0,o.jsx)(n.h2,{id:"new-builder-integration-v100",children:"New Builder Integration (v1.0.0+)"}),"\n",(0,o.jsx)(n.p,{children:"Starting with Brobot v1.0.0, ActionHistory can be configured directly in the StateImage builder, eliminating the need for separate initialization methods."}),"\n",(0,o.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'import io.github.jspinak.brobot.model.state.StateImage;\nimport io.github.jspinak.brobot.model.element.Region;\nimport io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryFactory;\n\n// Create a StateImage with ActionHistory in one step\nStateImage button = new StateImage.Builder()\n    .addPatterns("button/ok-button.png")\n    .setName("OkButton")\n    .withActionHistory(MockActionHistoryFactory.reliableButton(\n        new Region(100, 200, 80, 30)))\n    .build();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"stateimagebuilder-methods",children:"StateImage.Builder Methods"}),"\n",(0,o.jsx)(n.p,{children:"The StateImage.Builder class provides three methods for setting ActionHistory:"}),"\n",(0,o.jsx)(n.h4,{id:"1-direct-actionhistory",children:"1. Direct ActionHistory"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ActionHistory history = createCustomHistory();\nStateImage image = new StateImage.Builder()\n    .addPatterns("pattern.png")\n    .withActionHistory(history)\n    .build();\n'})}),"\n",(0,o.jsx)(n.h4,{id:"2-supplier-function-lazy-initialization",children:"2. Supplier Function (Lazy Initialization)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'StateImage image = new StateImage.Builder()\n    .addPatterns("pattern.png")\n    .withActionHistory(() -> createComplexHistory())\n    .build();\n'})}),"\n",(0,o.jsx)(n.h4,{id:"3-single-actionrecord",children:"3. Single ActionRecord"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ActionRecord record = createSingleRecord();\nStateImage image = new StateImage.Builder()\n    .addPatterns("pattern.png")\n    .withActionHistory(record)\n    .build();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"mockactionhistorybuilder",children:"MockActionHistoryBuilder"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"MockActionHistoryBuilder"})," provides a fluent API for creating custom ActionHistory configurations."]}),"\n",(0,o.jsx)(n.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryBuilder;\n\nActionHistory history = MockActionHistoryBuilder.builder()\n    .successRate(0.95)           // 95% success rate\n    .matchRegion(region)          // Where matches occur\n    .minSimilarity(0.90)          // Minimum similarity score\n    .maxSimilarity(0.99)          // Maximum similarity score\n    .minDuration(30)              // Minimum execution time (ms)\n    .maxDuration(100)             // Maximum execution time (ms)\n    .recordCount(20)              // Number of records to generate\n    .build()\n    .build();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"preset-configurations",children:"Preset Configurations"}),"\n",(0,o.jsx)(n.p,{children:"MockActionHistoryBuilder provides preset methods for common scenarios:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Always found (100% success)\nActionHistory reliable = MockActionHistoryBuilder.Presets.alwaysFound(region);\n\n// Highly reliable (95% success)\nActionHistory good = MockActionHistoryBuilder.Presets.reliable(region);\n\n// Flaky element (70% success)\nActionHistory unstable = MockActionHistoryBuilder.Presets.flaky(region);\n\n// Never found (0% success)\nActionHistory missing = MockActionHistoryBuilder.Presets.neverFound();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mockactionhistoryfactory",children:"MockActionHistoryFactory"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"MockActionHistoryFactory"})," provides factory methods for common UI patterns and screen positions."]}),"\n",(0,o.jsx)(n.h3,{id:"ui-pattern-methods",children:"UI Pattern Methods"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryFactory;\n\n// Reliable button (98% success, quick response)\nActionHistory button = MockActionHistoryFactory.reliableButton(buttonRegion);\n\n// Dynamic text field (85% success, variable content)\nActionHistory textField = MockActionHistoryFactory.dynamicTextField(fieldRegion);\n\n// Loading indicator (60% success, appears/disappears)\nActionHistory loader = MockActionHistoryFactory.loadingIndicator(loaderRegion);\n\n// Menu item (90% success when visible)\nActionHistory menuItem = MockActionHistoryFactory.menuItem(menuRegion);\n\n// Modal dialog (100% success when present)\nActionHistory dialog = MockActionHistoryFactory.modalDialog(dialogRegion);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"screen-position-helpers",children:"Screen Position Helpers"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.model.element.Positions;\n\n// Element at specific screen position\nActionHistory centerElement = MockActionHistoryFactory.forScreenPosition(\n    Positions.Name.MIDDLEMIDDLE, 100, 50);  // width=100, height=50\n\n// Element in lower-left (common for status/chat)\nActionHistory lowerLeft = MockActionHistoryFactory.lowerLeftElement(200, 80);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Use custom configuration with lambda\nActionHistory custom = MockActionHistoryFactory.withConfig(config -> \n    config.successRate(0.85)\n          .recordCount(15)\n          .matchRegion(new Region(100, 100, 50, 50))\n          .minDuration(20)\n          .maxDuration(80));\n"})}),"\n",(0,o.jsx)(n.h3,{id:"caching-for-performance",children:"Caching for Performance"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Cache frequently used histories\nActionHistory cached = MockActionHistoryFactory.cached("main-button", \n    () -> MockActionHistoryFactory.reliableButton(buttonRegion));\n\n// Clear cache between test suites\nMockActionHistoryFactory.clearCache();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complete-example-claude-automator",children:"Complete Example: Claude Automator"}),"\n",(0,o.jsx)(n.p,{children:"Here's a real-world example showing how to use the new ActionHistory features in a state class:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'package com.claude.automator.states;\n\nimport io.github.jspinak.brobot.annotations.State;\nimport io.github.jspinak.brobot.model.element.Region;\nimport io.github.jspinak.brobot.model.state.StateImage;\nimport io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryFactory;\nimport lombok.Getter;\n\n@State(initial = true)\n@Getter\npublic class PromptState {\n    \n    private final StateImage claudePrompt;\n    \n    public PromptState() {\n        // Define search region for lower-left quarter of screen\n        Region lowerLeftQuarter = Region.builder()\n            .withScreenPercentage(0.0, 0.5, 0.5, 0.5)\n            .build();\n        \n        // Create StateImage with integrated ActionHistory for mock mode\n        claudePrompt = new StateImage.Builder()\n            .addPatterns("prompt/claude-prompt-1.png",\n                        "prompt/claude-prompt-2.png",\n                        "prompt/claude-prompt-3.png")\n            .setName("ClaudePrompt")\n            .setSearchRegionForAllPatterns(lowerLeftQuarter)\n            .setFixedForAllPatterns(true)\n            // ActionHistory is required for mock mode finds\n            .withActionHistory(MockActionHistoryFactory.lowerLeftElement(293, 83))\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"migration-from-manual-actionhistory",children:"Migration from Manual ActionHistory"}),"\n",(0,o.jsx)(n.h3,{id:"old-approach-pre-v100",children:"Old Approach (Pre-v1.0.0)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class MyState {\n    private final StateImage button;\n    \n    public MyState() {\n        button = new StateImage.Builder()\n            .addPatterns("button.png")\n            .build();\n        \n        // Separate method required\n        createMockActionHistory();\n    }\n    \n    private void createMockActionHistory() {\n        ActionHistory history = new ActionHistory();\n        // Manual creation of records...\n        for (Pattern pattern : button.getPatterns()) {\n            pattern.setMatchHistory(history);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"new-approach-v100",children:"New Approach (v1.0.0+)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class MyState {\n    private final StateImage button;\n    \n    public MyState() {\n        // Everything in one builder chain\n        button = new StateImage.Builder()\n            .addPatterns("button.png")\n            .withActionHistory(MockActionHistoryFactory.reliableButton(\n                new Region(100, 200, 80, 30)))\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-always-set-actionhistory-for-mock-mode",children:"1. Always Set ActionHistory for Mock Mode"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Check if mock mode is enabled\nif (FrameworkSettings.mock) {\n    stateImage = new StateImage.Builder()\n        .addPatterns("pattern.png")\n        .withActionHistory(MockActionHistoryFactory.reliable(region))\n        .build();\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-use-appropriate-factory-methods",children:"2. Use Appropriate Factory Methods"}),"\n",(0,o.jsx)(n.p,{children:"Match the factory method to your UI element type:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Buttons \u2192 ",(0,o.jsx)(n.code,{children:"reliableButton()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Text fields \u2192 ",(0,o.jsx)(n.code,{children:"dynamicTextField()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Loading indicators \u2192 ",(0,o.jsx)(n.code,{children:"loadingIndicator()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Menus \u2192 ",(0,o.jsx)(n.code,{children:"menuItem()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Dialogs \u2192 ",(0,o.jsx)(n.code,{children:"modalDialog()"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-configure-realistic-success-rates",children:"3. Configure Realistic Success Rates"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Critical elements should have high success rates\nStateImage saveButton = new StateImage.Builder()\n    .addPatterns("save.png")\n    .withActionHistory(MockActionHistoryBuilder.builder()\n        .successRate(0.98)  // Very reliable\n        .build().build())\n    .build();\n\n// Optional elements can have lower rates\nStateImage tooltip = new StateImage.Builder()\n    .addPatterns("tooltip.png")\n    .withActionHistory(MockActionHistoryBuilder.builder()\n        .successRate(0.70)  // Sometimes visible\n        .build().build())\n    .build();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-use-screen-adaptive-regions",children:"4. Use Screen-Adaptive Regions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Use percentage-based regions for resolution independence\nRegion adaptiveRegion = Region.builder()\n    .withScreenPercentage(0.4, 0.4, 0.2, 0.2)  // Center 20% of screen\n    .build();\n\nStateImage centerElement = new StateImage.Builder()\n    .addPatterns("center.png")\n    .withActionHistory(MockActionHistoryFactory.reliable(adaptiveRegion))\n    .build();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"5-leverage-caching-for-performance",children:"5. Leverage Caching for Performance"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Cache histories that are used multiple times\npublic class StateFactory {\n    private static final String BUTTON_CACHE_KEY = "main-button";\n    \n    public StateImage createButton() {\n        return new StateImage.Builder()\n            .addPatterns("button.png")\n            .withActionHistory(MockActionHistoryFactory.cached(\n                BUTTON_CACHE_KEY,\n                () -> MockActionHistoryFactory.reliableButton(buttonRegion)))\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"patterns-not-found-in-mock-mode",children:"Patterns Not Found in Mock Mode"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),': Find operations fail with "No matches found" despite mock mode being enabled.']}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Ensure ActionHistory is set:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// \u274c Wrong - No ActionHistory\nStateImage image = new StateImage.Builder()\n    .addPatterns("pattern.png")\n    .build();\n\n// \u2705 Correct - ActionHistory included\nStateImage image = new StateImage.Builder()\n    .addPatterns("pattern.png")\n    .withActionHistory(MockActionHistoryFactory.reliable(region))\n    .build();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"compilation-errors",children:"Compilation Errors"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),': "cannot find symbol: MockActionHistoryFactory"']}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Add the required import:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryFactory;\nimport io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryBuilder;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"inconsistent-test-results",children:"Inconsistent Test Results"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Tests pass/fail randomly in mock mode."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Use deterministic success rates:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// For deterministic tests, use 100% or 0% success rates\nActionHistory alwaysFound = MockActionHistoryBuilder.Presets.alwaysFound(region);\nActionHistory neverFound = MockActionHistoryBuilder.Presets.neverFound();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/testing/mock-mode-guide",children:"Mock Mode Guide"})," - Complete mock mode reference"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/testing/integration-testing",children:"Integration Testing"})," - Testing strategies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/testing/profile-based-architecture",children:"Profile-Based Architecture"})," - Test profile configuration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/guides/search-regions-and-fixed-locations",children:"StateImage API"})," - StateImage builder reference"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
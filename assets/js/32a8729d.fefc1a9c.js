"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1271],{28453:(n,t,e)=>{e.d(t,{R:()=>s,x:()=>a});var i=e(96540);const o={},r=i.createContext(o);function s(n){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function a(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(r.Provider,{value:t},n.children)}},31090:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/tutorials/tutorial-claude-automator/transitions","title":"Implementing Transitions with Annotations","description":"Overview","source":"@site/docs/03-core-library/tutorials/tutorial-claude-automator/transitions.md","sourceDirName":"03-core-library/tutorials/tutorial-claude-automator","slug":"/core-library/tutorials/tutorial-claude-automator/transitions","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/transitions","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-claude-automator/transitions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Creating States with Annotations","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/states"},"next":{"title":"Tutorial: Mr.doob","permalink":"/brobot/docs/core-library/tutorials/tutorial-mrdoob/intro"}}');var o=e(74848),r=e(28453);const s={},a="Implementing Transitions with Annotations",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Prompt to Working Transition",id:"prompt-to-working-transition",level:2},{value:"PromptToWorkingTransition.java",id:"prompttoworkingtransitionjava",level:3},{value:"Key Features:",id:"key-features",level:3},{value:"Comparison: Before and After",id:"comparison-before-and-after",level:2},{value:"Before (Manual Registration):",id:"before-manual-registration",level:3},{value:"After (With Annotations):",id:"after-with-annotations",level:3},{value:"Transition Annotation Options",id:"transition-annotation-options",level:2},{value:"Basic Transition",id:"basic-transition",level:3},{value:"Multiple Source States",id:"multiple-source-states",level:3},{value:"Multiple Target States",id:"multiple-target-states",level:3},{value:"Custom Method Name",id:"custom-method-name",level:3},{value:"Transition Priority",id:"transition-priority",level:3},{value:"Action Chaining Pattern",id:"action-chaining-pattern",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Benefits of Annotation Approach",id:"benefits-of-annotation-approach",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"implementing-transitions-with-annotations",children:"Implementing Transitions with Annotations"})}),"\n",(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(t.p,{children:["Transitions define how to navigate between states. With the new annotation system, transitions are dramatically simplified - just use ",(0,o.jsx)(t.code,{children:"@Transition"})," and let the framework handle registration automatically."]}),"\n",(0,o.jsx)(t.h2,{id:"prompt-to-working-transition",children:"Prompt to Working Transition"}),"\n",(0,o.jsx)(t.h3,{id:"prompttoworkingtransitionjava",children:"PromptToWorkingTransition.java"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'package com.claude.automator.transitions;\n\nimport com.claude.automator.states.PromptState;\nimport com.claude.automator.states.WorkingState;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.action.ActionResult;\nimport io.github.jspinak.brobot.action.ObjectCollection;\nimport io.github.jspinak.brobot.action.basic.click.ClickOptions;\nimport io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\nimport io.github.jspinak.brobot.action.basic.type.TypeOptions;\nimport io.github.jspinak.brobot.annotations.Transition;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n@Transition(from = PromptState.class, to = WorkingState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class PromptToWorkingTransition {\n\n    private final PromptState promptState;\n    private final Action action;\n\n    public boolean execute() {\n        try {\n            log.info("Executing transition from Prompt to Working state");\n            \n            // Using the fluent API to chain actions: find -> click -> type\n            PatternFindOptions findClickType = new PatternFindOptions.Builder()\n                    .setPauseAfterEnd(0.5) // Pause before clicking\n                    .then(new ClickOptions.Builder()\n                            .setPauseAfterEnd(0.5) // Pause before typing\n                            .build())\n                    .then(new TypeOptions.Builder()\n                            .build())\n                    .build();\n            \n            // Create target objects for the chained action\n            ObjectCollection target = new ObjectCollection.Builder()\n                    .withImages(promptState.getClaudePrompt()) // For find & click\n                    .withStrings(promptState.getContinueCommand()) // For type (continue with Enter)\n                    .build();\n            \n            // Execute the chained action\n            ActionResult result = action.perform(findClickType, target);\n            \n            if (result.isSuccess()) {\n                log.info("Successfully executed transition from Prompt to Working");\n                return true;\n            } else {\n                log.warn("Failed to execute transition: {}", result.getActionDescription());\n                return false;\n            }\n            \n        } catch (Exception e) {\n            log.error("Error during Prompt to Working transition", e);\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"key-features",children:"Key Features:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"@Transition Annotation"}),": Declares source and target states declaratively"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Automatic Registration"}),": No need for manual StateTransitions setup"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Action Chaining"}),": Uses ",(0,o.jsx)(t.code,{children:"then()"})," to chain find \u2192 click \u2192 type"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"State Component Usage"}),": Uses both StateImage and StateString from PromptState"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Simple Execute Method"}),": Just return true/false for success/failure"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Clean Structure"}),": Focus on transition logic, not framework setup"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"comparison-before-and-after",children:"Comparison: Before and After"}),"\n",(0,o.jsx)(t.h3,{id:"before-manual-registration",children:"Before (Manual Registration):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class PromptTransitions {\n    // Lots of setup code...\n    \n    public StateTransitions getStateTransitions() {\n        return new StateTransitions.Builder(PromptState.Name.PROMPT.toString())\n                .addTransition(getPromptToWorkingTransition())\n                .addTransitionFinish(() -> findPromptImage())\n                .build();\n    }\n    \n    private JavaStateTransition getPromptToWorkingTransition() {\n        return new JavaStateTransition.Builder()\n                .setFunction(() -> executePromptToWorking())\n                .addToActivate(WorkingState.Name.WORKING.toString())\n                .setStaysVisibleAfterTransition(true)\n                .build();\n    }\n    \n    // More boilerplate...\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"after-with-annotations",children:"After (With Annotations):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Transition(from = PromptState.class, to = WorkingState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class PromptToWorkingTransition {\n    // Just implement execute() method\n    public boolean execute() {\n        // Your transition logic\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"transition-annotation-options",children:"Transition Annotation Options"}),"\n",(0,o.jsx)(t.h3,{id:"basic-transition",children:"Basic Transition"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Transition(from = StateA.class, to = StateB.class)\npublic class SimpleTransition {\n    public boolean execute() {\n        // Transition logic\n        return true;\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"multiple-source-states",children:"Multiple Source States"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Transition(\n    from = {ErrorState.class, TimeoutState.class},\n    to = HomeState.class\n)\npublic class RecoveryTransition {\n    public boolean execute() {\n        // Recovery logic\n        return true;\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"multiple-target-states",children:"Multiple Target States"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Transition(\n    from = ProcessingState.class,\n    to = {SuccessState.class, ErrorState.class}\n)\npublic class ProcessingTransition {\n    public boolean execute() {\n        if (processSuccessful()) {\n            return true; // Goes to SuccessState\n        }\n        return false; // Goes to ErrorState\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h3,{id:"custom-method-name",children:"Custom Method Name"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'@Transition(\n    from = SearchState.class,\n    to = ResultsState.class,\n    method = "performSearch"\n)\npublic class SearchTransition {\n    public boolean performSearch() {\n        // Search logic\n        return true;\n    }\n}\n'})}),"\n",(0,o.jsx)(t.h3,{id:"transition-priority",children:"Transition Priority"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Transition(\n    from = MenuState.class,\n    to = SettingsState.class,\n    priority = 10  // Higher priority for path selection\n)\npublic class MenuToSettingsTransition {\n    public boolean execute() {\n        // Navigation logic\n        return true;\n    }\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"action-chaining-pattern",children:"Action Chaining Pattern"}),"\n",(0,o.jsx)(t.p,{children:"The fluent API enables elegant action sequences:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"// Chain multiple actions in sequence\nPatternFindOptions chainedAction = new PatternFindOptions.Builder()\n    .setPauseAfterEnd(0.5)              // Wait after finding\n    .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(0.5)       // Wait after clicking\n            .build())\n    .then(new TypeOptions.Builder()\n            .build())                     // Type text\n    .build();\n\n// Execute all actions in sequence\nActionResult result = action.perform(chainedAction, target);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Use Required Annotations"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Transition(from = X.class, to = Y.class)\n@RequiredArgsConstructor  // For dependency injection\n@Slf4j                   // For logging\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Keep Transitions Focused"}),": One transition = one navigation path"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Handle Failures Gracefully"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'public boolean execute() {\n    try {\n        // Transition logic\n        return action.click("button").isSuccess();\n    } catch (Exception e) {\n        log.error("Transition failed", e);\n        return false;\n    }\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Log Appropriately"}),": Info for success, warn for expected failures, error for exceptions"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Use Dependency Injection"}),": Inject states and actions via constructor"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"benefits-of-annotation-approach",children:"Benefits of Annotation Approach"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"80% Less Code"}),": Eliminate StateTransitions builders and manual wiring"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Clearer Intent"}),": ",(0,o.jsx)(t.code,{children:"@Transition(from = A.class, to = B.class)"})," is self-documenting"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Compile-Time Safety"}),": IDE immediately shows if states don't exist"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Better Organization"}),": Transitions are standalone classes, not nested methods"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Easier Testing"}),": Each transition can be unit tested independently"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(t.p,{children:"With states and transitions defined using annotations, the entire state machine is automatically configured. No manual registration, no complex setup - just focus on your automation logic!"})]})}function u(n={}){const{wrapper:t}={...(0,r.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);
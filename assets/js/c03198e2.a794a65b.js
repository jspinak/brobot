"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4080],{28453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>r});var a=n(96540);const i={},o=a.createContext(i);function s(t){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:s(t.components),a.createElement(o.Provider,{value:e},t.children)}},98692:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"introduction/core-features/state-management","title":"State Management","description":"Brobot actively maintains an awareness of which States are active at any","source":"@site/versioned_docs/version-1.0.6/introduction/core-features/state-management.md","sourceDirName":"introduction/core-features","slug":"/introduction/core-features/state-management","permalink":"/brobot/docs/1.0.6/introduction/core-features/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/introduction/core-features/state-management.md","tags":[],"version":"1.0.6","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docSidebar","previous":{"title":"Controlling the GUI","permalink":"/brobot/docs/1.0.6/introduction/core-features/controlling-the-GUI"},"next":{"title":"Using Color","permalink":"/brobot/docs/1.0.6/introduction/finding-objects/using-color"}}');var i=n(74848),o=n(28453);const s={sidebar_position:7},r="State Management",h={},d=[{value:"State Memory",id:"state-memory",level:2},{value:"Hidden States",id:"hidden-states",level:2},{value:"Transitions",id:"transitions",level:2},{value:"Paths",id:"paths",level:2},{value:"State Finder and the Unknown State",id:"state-finder-and-the-unknown-state",level:2}];function c(t){const e={h1:"h1",h2:"h2",header:"header",p:"p",...(0,o.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"state-management",children:"State Management"})}),"\n",(0,i.jsx)(e.p,{children:"Brobot actively maintains an awareness of which States are active at any\ntime. It does this by keeping track of which States have become active,\nwhich States have exited, and which States have been hidden as others have\nbecome active. Paths and Transitions allow Brobot to move from one State to\nanother with one line of code. It is not important which States are currently\nactive, as Brobot can find a path to the target State and follow it."}),"\n",(0,i.jsx)(e.h2,{id:"state-memory",children:"State Memory"}),"\n",(0,i.jsx)(e.p,{children:"The Find operation works together with the State Memory, which is\na class that holds the State currently active. When an image is found,\nits owner State is registered in State Memory. Similarly, when a State\nis exited, it is removed from State Memory."}),"\n",(0,i.jsx)(e.h2,{id:"hidden-states",children:"Hidden States"}),"\n",(0,i.jsx)(e.p,{children:"Imagine in the program you are controlling you have a menu that covers\npart of the screen. When it is opened, it covers any States in this area,\nand when it is closed these States reappear. Since the menu can be opened at\nany time while the program is running, you don't know beforehand which\nStates will be hidden. The easiest path to one of the hidden States is\nsimply closing the menu, but how can Brobot know this? The answer is through\nmanagement of hidden States, which are\nregistered for each State when the State is opened, and removed from the\nState's hidden States field when the State is closed. Transitions allow for\na variable State name called PREVIOUS to specify how to move to a hidden State."}),"\n",(0,i.jsx)(e.h2,{id:"transitions",children:"Transitions"}),"\n",(0,i.jsx)(e.p,{children:"Every State that is reachable needs to have an associated StateTransitions class.\nThe StateTransitions class comprises Transition objects, which provide a\nmeans to move from one State to another. Transitions are split into two types:\nFromTransitions and ToTransitions. FromTransitions handle the process of moving\nfrom the current State to another State, and ToTransitions end the process of\nmoving to the current State. For example, to go from State A to State B, first\nthe FromTransition A -> B will be called, and then the ToTransition -> B will\nbe called. It looks like this:"}),"\n",(0,i.jsx)("u",{children:"StateTransitions for State A"}),"\n",(0,i.jsx)(e.p,{children:"The FromTransition tells us what to do in State A in order to go to State B"}),"\n",(0,i.jsx)("u",{children:"StateTransitions for State B"}),"\n",(0,i.jsx)(e.p,{children:"The ToTransition tells us what to do in State B to finish opening the State,\nregardless of which State started the process. There can be multiple FromTransitions\ngoing to State B from different States, but there is only one ToTransition to State B."}),"\n",(0,i.jsx)(e.p,{children:"In the StateTransitions Builder, ToTransitions are created with the command 'addTransitionFinish'\nand FromTransitions are created with the command 'addTransition'. The method passed to\n'addTransitionFinish' is always called finishTransition(). The methods passed to\n'addTransition' can have any name."}),"\n",(0,i.jsx)(e.h2,{id:"paths",children:"Paths"}),"\n",(0,i.jsx)(e.p,{children:"Paths are State chains that show how to reach a target State from a start State.\nGoing to any State is as easy as writing 'open(State name)' and Brobot will\nfind Paths to that State and attempt to transition until the target State is reached\nor all Paths have been unsuccessfully attempted. Paths have scores associated with\nthem, corresponding to the sum of the scores of individual States. Paths with lower\nscores will be tried first, and State scores can be changed dynamically if necessary."}),"\n",(0,i.jsx)(e.h2,{id:"state-finder-and-the-unknown-state",children:"State Finder and the Unknown State"}),"\n",(0,i.jsx)(e.p,{children:"In case Brobot gets lost and cannot find any of the active States, there is\na State Finder that will search for active States. This is a costly operation\nbut will rebuild the list of active States in State Memory and allow the\nautomation to continue."}),"\n",(0,i.jsx)(e.p,{children:"There is also a possibility that something really unexpected happens and that\nno States are active. In this case the UNKNOWN State will become active. The UNKNOWN\nState also has Transitions and will attempt these Transitions in order to find its\nway back to the target State. Any code meant to deal with unexpected situations\nin which no States are visible should go into the UNKNOWN State's Transitions."})]})}function l(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(c,{...t})}):c(t)}}}]);
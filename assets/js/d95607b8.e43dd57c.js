"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[950],{28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var s=a(96540);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},82171:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"architecture-notes/database","title":"Database","description":"Why Use a Database?","source":"@site/versioned_docs/version-1.0.6/architecture-notes/database.md","sourceDirName":"architecture-notes","slug":"/architecture-notes/database","permalink":"/brobot/docs/1.0.6/architecture-notes/database","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/architecture-notes/database.md","tags":[],"version":"1.0.6","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docSidebar","previous":{"title":"Overview","permalink":"/brobot/docs/1.0.6/architecture-notes/overview"},"next":{"title":"BrobotApp","permalink":"/brobot/docs/1.0.6/architecture-notes/repositories"}}');var n=a(74848),i=a(28453);const o={sidebar_position:2},r="Database",l={},c=[{value:"Why Use a Database?",id:"why-use-a-database",level:2},{value:"Database Choice",id:"database-choice",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Multiple Projects",id:"multiple-projects",level:2}];function d(e){const t={h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"database",children:"Database"})}),"\n",(0,n.jsx)(t.h2,{id:"why-use-a-database",children:"Why Use a Database?"}),"\n",(0,n.jsx)(t.p,{children:"Brobot until version 1.0.6 does not use a database. The state structure is either programmed\nmanually or code is produced by the state structure builder. Producing code with the state\nstructure builder automates a large part of the process, but still requires manually cutting out\nimages from screenshots and naming them appropriately. This process can be time intensive and\nthe subjectivity of state definitions can make it more complex and confusing."}),"\n",(0,n.jsx)(t.p,{children:"Optimally, Brobot would be able to create a state structure without any preparation from the\nuser. Complete automation would require Brobot to identify states, cut out and name images, and\nsave the newly created state structure. Saving the state structure in a database instead of writing\nit in code has a few key advantages:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"It adapts more easily to changes to the Brobot library. Using JavaPoet to write the state structure\nin code requires a lot of work for even small changes to the underlying library classes."}),"\n",(0,n.jsx)(t.li,{children:"The user should to be able to view the state structure. This is best done by displaying the states and\ntheir elements visually, and this can be accomplished with a database, controller classes, and a\nReact front-end."}),"\n",(0,n.jsx)(t.li,{children:"Modifying the automatically generated state structure is easier with a front-end GUI tool. The\nReact front-end can provide functions to modify elements of the state structure, and changes can be\nsaved directly to the database."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"database-choice",children:"Database Choice"}),"\n",(0,n.jsx)(t.p,{children:"I initially chose JPA and created Data Transfer Objects for a relational database. Since I already knew\nJPA from my bachelor's courses, it seemed like the obvious choice. The data model is fairly complex\nand preparing the data with the correct annotations was not a simple task, but after all data\nconfiguration issues were resolved, JPA worked without issues."}),"\n",(0,n.jsx)(t.p,{children:"An LLM suggested I use a non-relational database since the data model (the state structure) is\ncreated dynamically at runtime. I considered MongoDB since it's well integrated with Spring Boot through\nSpring Data MongoDB and also has a large community."}),"\n",(0,n.jsx)(t.p,{children:"One of the benefits of non-relational databases is dynamic schema creation. However, since the relationship\nbetween elements in the state structure is clearly defined, I was unsure how Brobot would benefit from\nthe flexibility of dynamic schema design."}),"\n",(0,n.jsx)(t.p,{children:"MongoDB stores data as JSON, which is also the format I use to communicate with the React front-end\nwhen using JPA. Initial development with MongoDB may have been simpler than with JPA for this reason.\nWIth JPA, I needed to create DTO and Response classes, for transferring data to the database and\nReact front-end, for many data classes. However, my JPA solution is working and will require additional\nwork only if I add or modify data classes. JPA may also be more efficient; for example, the Image DTO\nclass stores a BufferedImage as a byte array and not a JSON object."}),"\n",(0,n.jsx)(t.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,n.jsx)(t.p,{children:"When states were defined with code, the state name was a enum. I changed this to a string since\nnames would be set during runtime."}),"\n",(0,n.jsx)(t.p,{children:"Many data types extended SikuliX data types. I removed this relationship to SikuliX classes since\nSikuliX classes are not serializable and caused issues with data transfer to the database and front-end.\nInitializing certain data types requires reading .png files from the file system, which was previously\nhandled by SikuliX. Doing this without SikuliX added a dependency to javacv-platform, which uses native\nfunctions to read image files and convert them to BufferedImage or Mat types."}),"\n",(0,n.jsx)(t.h2,{id:"multiple-projects",children:"Multiple Projects"}),"\n",(0,n.jsx)(t.p,{children:"The Brobot library is built to work with a single GUI automation project, but the BrobotApp\nshould allow for creating different state structures for different projects. BrobotApp should\nstore these state structures in a database for use with a client application. There are two\nways I can approach having multiple projects:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Load the project's states and associated Java objects to memory before working with it."}),"\n",(0,n.jsx)(t.li,{children:"Add a project ID to all data types and new service methods that return project-specific objects."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The second option introduces more code complexity but provides benefits for scalability and\nfuture project growth. Small state structures are practical to load into memory, but having very large\nstate structures in memory could cause performance issues. Concurrent access is more difficult\nif the entire state model is in memory, in case at some point a Brobot automation application\nwould be used by multiple users simultaneously. Also, using project IDs allows for working with\nmultiple projects together, which may be a desirable functionality. For example, smaller portions\nof a larger project could be developed as subprojects, and when they are working the overall\nproject could be activated."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);
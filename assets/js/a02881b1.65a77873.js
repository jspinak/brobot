"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5232],{2341:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"core-library/guides/persistence-user-guide","title":"Persistence Module User Guide","description":"Getting Started","source":"@site/docs/03-core-library/guides/persistence-user-guide.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/persistence-user-guide","permalink":"/brobot/docs/core-library/guides/persistence-user-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/persistence-user-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Multi-Monitor Configuration Guide","permalink":"/brobot/docs/core-library/guides/monitor-configuration"},"next":{"title":"Tutorials Overview","permalink":"/brobot/docs/core-library/tutorials/"}}');var t=s(74848),r=s(28453);const o={},a="Persistence Module User Guide",c={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:2},{value:"Maven",id:"maven",level:3},{value:"Gradle",id:"gradle",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"Minimal Setup (File-Based)",id:"minimal-setup-file-based",level:3},{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"File-Based Persistence",id:"file-based-persistence",level:3},{value:"In-Memory Persistence",id:"in-memory-persistence",level:3},{value:"Database Persistence (Spring Boot)",id:"database-persistence-spring-boot",level:3},{value:"Recording Actions",id:"recording-actions",level:2},{value:"Manual Recording",id:"manual-recording",level:3},{value:"Batch Recording",id:"batch-recording",level:3},{value:"Event-Based Recording (Spring)",id:"event-based-recording-spring",level:3},{value:"Session Management",id:"session-management",level:2},{value:"Starting Sessions",id:"starting-sessions",level:3},{value:"Controlling Recording",id:"controlling-recording",level:3},{value:"Querying Sessions",id:"querying-sessions",level:3},{value:"Import/Export",id:"importexport",level:2},{value:"Exporting Sessions",id:"exporting-sessions",level:3},{value:"Importing Sessions",id:"importing-sessions",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom File Paths",id:"custom-file-paths",level:3},{value:"Compression and Optimization",id:"compression-and-optimization",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Performance Tuning",id:"performance-tuning",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"JUnit Test Integration",id:"junit-test-integration",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Debugging Failed Automations",id:"debugging-failed-automations",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Session Naming",id:"1-session-naming",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Resource Management",id:"3-resource-management",level:3},{value:"4. Performance Monitoring",id:"4-performance-monitoring",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Issue: Out of Memory",id:"issue-out-of-memory",level:3},{value:"Issue: Slow Recording Performance",id:"issue-slow-recording-performance",level:3},{value:"Issue: Large File Sizes",id:"issue-large-file-sizes",level:3},{value:"Issue: Database Connection Pool Exhaustion",id:"issue-database-connection-pool-exhaustion",level:3},{value:"Support",id:"support",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"persistence-module-user-guide",children:"Persistence Module User Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.p,{children:"The Brobot Persistence Module allows you to record and analyze automation executions. This guide covers installation, configuration, and usage for different scenarios."}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.h3,{id:"maven",children:"Maven"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.github.jspinak</groupId>\n    <artifactId>brobot-persistence</artifactId>\n    <version>1.2.0</version>\n</dependency>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gradle",children:"Gradle"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:"implementation 'io.github.jspinak:brobot-persistence:1.2.0'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"minimal-setup-file-based",children:"Minimal Setup (File-Based)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import io.github.jspinak.brobot.persistence.*;\n\n// Create provider with default settings\nPersistenceProvider persistence = PersistenceProviderFactory.createDefault();\n\n// Start recording\nString sessionId = persistence.startSession("My First Session", "TestApp", null);\n\n// Your automation code here\n// ...\n\n// Stop and export\npersistence.stopSession();\nActionHistory history = persistence.exportSession(sessionId);\nSystem.out.println("Recorded " + history.getSnapshots().size() + " actions");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,t.jsx)(n.h3,{id:"file-based-persistence",children:"File-Based Persistence"}),"\n",(0,t.jsx)(n.p,{children:"Perfect for standalone applications and testing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'PersistenceConfiguration config = new PersistenceConfiguration();\nconfig.setType(PersistenceConfiguration.PersistenceType.FILE);\nconfig.getFile().setBasePath("./my-recordings");\nconfig.getFile().setFormat(PersistenceConfiguration.FileFormat.JSON);\nconfig.getFile().setPrettyPrint(true);\n\nPersistenceProvider provider = PersistenceProviderFactory.create(config);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"in-memory-persistence",children:"In-Memory Persistence"}),"\n",(0,t.jsx)(n.p,{children:"Ideal for unit tests and temporary sessions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"PersistenceConfiguration config = PersistenceConfiguration.memoryDefault();\nconfig.getMemory().setMaxSessions(5);\nconfig.getMemory().setMaxRecordsPerSession(100);\n\nPersistenceProvider provider = PersistenceProviderFactory.create(config);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"database-persistence-spring-boot",children:"Database Persistence (Spring Boot)"}),"\n",(0,t.jsx)(n.p,{children:"For enterprise applications with Spring Boot."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nbrobot:\n  persistence:\n    enabled: true\n    type: DATABASE\n    database:\n      url: jdbc:postgresql://localhost:5432/brobot\n      username: brobot_user\n      password: ${DB_PASSWORD}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\npublic class AutomationService {\n    @Autowired\n    private PersistenceProvider persistence;\n    \n    public void runAutomation() {\n        String sessionId = persistence.startSession(\n            "Daily Report Generation",\n            "ReportingSystem",\n            "Automated daily report at 9 AM"\n        );\n        \n        try {\n            // Your automation logic\n            generateReport();\n        } finally {\n            persistence.stopSession();\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"recording-actions",children:"Recording Actions"}),"\n",(0,t.jsx)(n.h3,{id:"manual-recording",children:"Manual Recording"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Create an ActionRecord for each action\nActionRecord record = new ActionRecord.Builder()\n    .setActionConfig(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.85)\n        .build())\n    .setActionSuccess(true)\n    .setDuration(250)\n    .setText("Clicked submit button")\n    .addMatch(new Match.Builder()\n        .setRegion(100, 200, 50, 30)\n        .setSimScore(0.92)\n        .build())\n    .build();\n\n// Record with optional state context\npersistence.recordAction(record, currentStateObject);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"batch-recording",children:"Batch Recording"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"List<ActionRecord> batch = new ArrayList<>();\n\nfor (DataRow row : dataRows) {\n    ActionRecord record = processRow(row);\n    batch.add(record);\n    \n    // Flush batch periodically\n    if (batch.size() >= 100) {\n        persistence.recordBatch(batch);\n        batch.clear();\n    }\n}\n\n// Record remaining\nif (!batch.isEmpty()) {\n    persistence.recordBatch(batch);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"event-based-recording-spring",children:"Event-Based Recording (Spring)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\npublic class ActionRecorder {\n    @Autowired\n    private PersistenceProvider persistence;\n    \n    @EventListener\n    public void onActionExecuted(ActionExecutedEvent event) {\n        if (persistence.isRecording()) {\n            persistence.recordAction(\n                event.getRecord(), \n                event.getStateObject()\n            );\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"session-management",children:"Session Management"}),"\n",(0,t.jsx)(n.h3,{id:"starting-sessions",children:"Starting Sessions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Basic session\nString sessionId = persistence.startSession("Test Run", "MyApp", null);\n\n// With metadata\nString metadata = "Environment: staging, Version: 1.2.3, User: john";\nString sessionId = persistence.startSession("Integration Test", "MyApp", metadata);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"controlling-recording",children:"Controlling Recording"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Pause recording temporarily\npersistence.pauseRecording();\nperformMaintenanceTask();  // Won\'t be recorded\npersistence.resumeRecording();\n\n// Check recording status\nif (persistence.isRecording()) {\n    System.out.println("Currently recording session: " + \n                      persistence.getCurrentSessionId());\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"querying-sessions",children:"Querying Sessions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// List all sessions\nList<String> sessions = persistence.getAllSessions();\n\n// Get session details\nSessionMetadata metadata = persistence.getSessionMetadata(sessionId);\nSystem.out.println("Session: " + metadata.getName());\nSystem.out.println("Duration: " + \n    Duration.between(metadata.getStartTime(), metadata.getEndTime()));\nSystem.out.println("Success Rate: " + metadata.getSuccessRate() + "%");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"importexport",children:"Import/Export"}),"\n",(0,t.jsx)(n.h3,{id:"exporting-sessions",children:"Exporting Sessions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Export to ActionHistory\nActionHistory history = persistence.exportSession(sessionId);\n\n// Save to file\nObjectMapper mapper = new ObjectMapper();\nmapper.registerModule(new JavaTimeModule());\nmapper.writeValue(new File("session-export.json"), history);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"importing-sessions",children:"Importing Sessions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// From ActionHistory object\nActionHistory history = loadFromFile("session-export.json");\nString newSessionId = persistence.importSession(history, "Imported Session");\n\n// From another provider\nPersistenceProvider source = createFileProvider();\nPersistenceProvider target = createDatabaseProvider();\n\nfor (String sessionId : source.getAllSessions()) {\n    ActionHistory history = source.exportSession(sessionId);\n    target.importSession(history, "Migrated_" + sessionId);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"custom-file-paths",children:"Custom File Paths"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Organize by date\nLocalDate today = LocalDate.now();\nString basePath = String.format("./recordings/%d/%02d/%02d",\n    today.getYear(), today.getMonthValue(), today.getDayOfMonth());\n\nPersistenceConfiguration config = new PersistenceConfiguration();\nconfig.getFile().setBasePath(basePath);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"compression-and-optimization",children:"Compression and Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"PersistenceConfiguration config = new PersistenceConfiguration();\nconfig.getFile().setCompressExports(true);  // GZIP compression\nconfig.getFile().setPrettyPrint(false);      // Smaller files\nconfig.getPerformance().setAsyncRecording(true);\nconfig.getPerformance().setBufferSize(500);  // Larger buffer\n"})}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// For in-memory provider\nPersistenceConfiguration config = new PersistenceConfiguration();\nconfig.setType(PersistenceConfiguration.PersistenceType.MEMORY);\nconfig.getMemory().setMaxSessions(10);\nconfig.getMemory().setMaxRecordsPerSession(1000);\nconfig.getMemory().setPersistOnShutdown(true);\nconfig.getMemory().setShutdownExportPath("./emergency-export");\n\n// Monitor memory usage\nif (provider instanceof InMemoryPersistenceProvider memory) {\n    var stats = memory.getMemoryStatistics();\n    System.out.println("Memory usage: " + stats);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"PersistenceConfiguration config = new PersistenceConfiguration();\n\n// Async recording for better performance\nconfig.getPerformance().setAsyncRecording(true);\nconfig.getPerformance().setThreadPoolSize(5);\nconfig.getPerformance().setQueueCapacity(2000);\n\n// Batching for database\nconfig.getDatabase().setBatchSize(200);\n\n// Buffering for files\nconfig.getPerformance().setBufferSize(100);\nconfig.getPerformance().setFlushIntervalSeconds(30);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,t.jsx)(n.h3,{id:"junit-test-integration",children:"JUnit Test Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass AutomationTest {\n    private PersistenceProvider persistence;\n    private String sessionId;\n    \n    @BeforeAll\n    void setupPersistence() {\n        persistence = PersistenceProviderFactory.createInMemory();\n    }\n    \n    @BeforeEach\n    void startRecording(TestInfo testInfo) {\n        sessionId = persistence.startSession(\n            testInfo.getDisplayName(),\n            "TestSuite",\n            testInfo.getTags().toString()\n        );\n    }\n    \n    @AfterEach\n    void stopRecording(TestInfo testInfo) {\n        persistence.stopSession();\n        \n        // Export failed tests for analysis\n        if (testInfo.getTags().contains("failed")) {\n            ActionHistory history = persistence.exportSession(sessionId);\n            saveFailedTest(testInfo.getDisplayName(), history);\n        }\n    }\n    \n    @Test\n    void testLoginFlow() {\n        // Test with automatic recording\n        login("user", "pass");\n        verifyDashboard();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class CIPersistenceConfig {\n    public static PersistenceProvider createForCI() {\n        String buildNumber = System.getenv("BUILD_NUMBER");\n        String branch = System.getenv("GIT_BRANCH");\n        \n        PersistenceConfiguration config = new PersistenceConfiguration();\n        config.setType(PersistenceConfiguration.PersistenceType.FILE);\n        config.getFile().setBasePath("./test-results/automation/" + buildNumber);\n        \n        PersistenceProvider provider = PersistenceProviderFactory.create(config);\n        \n        // Start session with CI metadata\n        provider.startSession(\n            "CI Build #" + buildNumber,\n            "AutomationSuite",\n            "Branch: " + branch + ", Commit: " + System.getenv("GIT_COMMIT")\n        );\n        \n        return provider;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"debugging-failed-automations",children:"Debugging Failed Automations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class AutomationDebugger {\n    private final PersistenceProvider persistence;\n    \n    public void analyzeFailure(String sessionId) {\n        ActionHistory history = persistence.exportSession(sessionId);\n        \n        // Find failed actions\n        List<ActionRecord> failures = history.getSnapshots().stream()\n            .filter(record -> !record.isActionSuccess())\n            .toList();\n        \n        System.out.println("Found " + failures.size() + " failed actions:");\n        \n        for (ActionRecord failure : failures) {\n            System.out.println("Failed: " + failure.getActionConfig());\n            System.out.println("Duration: " + failure.getDuration() + "ms");\n            \n            // Analyze patterns\n            if (failure.getDuration() > 5000) {\n                System.out.println("\u26a0\ufe0f Timeout detected");\n            }\n            if (failure.getMatches().isEmpty()) {\n                System.out.println("\u26a0\ufe0f No matches found");\n            }\n        }\n        \n        // Calculate statistics\n        double successRate = history.getSnapshots().stream()\n            .filter(ActionRecord::isActionSuccess)\n            .count() * 100.0 / history.getSnapshots().size();\n        \n        System.out.println("Overall success rate: " + successRate + "%");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-session-naming",children:"1. Session Naming"}),"\n",(0,t.jsx)(n.p,{children:"Use descriptive session names with context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String sessionName = String.format("%s_%s_%s",\n    testSuiteName,\n    LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),\n    environment\n);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"Always stop sessions in finally blocks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'String sessionId = persistence.startSession("Critical Process", "App", null);\ntry {\n    runCriticalProcess();\n} catch (Exception e) {\n    // Record error\n    ActionRecord errorRecord = new ActionRecord.Builder()\n        .setActionSuccess(false)\n        .setText("Error: " + e.getMessage())\n        .build();\n    persistence.recordAction(errorRecord, null);\n    throw e;\n} finally {\n    persistence.stopSession();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"3-resource-management",children:"3. Resource Management"}),"\n",(0,t.jsx)(n.p,{children:"Clean up old sessions periodically:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Scheduled(cron = "0 0 2 * * ?")  // 2 AM daily\npublic void cleanupOldSessions() {\n    LocalDateTime cutoff = LocalDateTime.now().minusDays(30);\n    \n    for (String sessionId : persistence.getAllSessions()) {\n        SessionMetadata metadata = persistence.getSessionMetadata(sessionId);\n        if (metadata.getEndTime() != null && \n            metadata.getEndTime().isBefore(cutoff)) {\n            persistence.deleteSession(sessionId);\n            log.info("Deleted old session: {}", sessionId);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-performance-monitoring",children:"4. Performance Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"Monitor recording overhead:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class PerformanceMonitor {\n    private final PersistenceProvider persistence;\n    private final AtomicLong totalRecordTime = new AtomicLong();\n    private final AtomicInteger recordCount = new AtomicInteger();\n    \n    public void recordWithMonitoring(ActionRecord record) {\n        long start = System.nanoTime();\n        persistence.recordAction(record, null);\n        long duration = System.nanoTime() - start;\n        \n        totalRecordTime.addAndGet(duration);\n        recordCount.incrementAndGet();\n        \n        if (recordCount.get() % 100 == 0) {\n            double avgMs = totalRecordTime.get() / recordCount.get() / 1_000_000.0;\n            log.info("Avg recording time: {} ms", avgMs);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"issue-out-of-memory",children:"Issue: Out of Memory"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Configure limits and enable persistence on shutdown"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"config.getMemory().setMaxSessions(5);\nconfig.getMemory().setMaxRecordsPerSession(500);\nconfig.getMemory().setPersistOnShutdown(true);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"issue-slow-recording-performance",children:"Issue: Slow Recording Performance"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Enable async recording and increase buffer"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"config.getPerformance().setAsyncRecording(true);\nconfig.getPerformance().setBufferSize(500);\nconfig.getPerformance().setThreadPoolSize(5);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"issue-large-file-sizes",children:"Issue: Large File Sizes"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Enable compression and disable pretty printing"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"config.getFile().setCompressExports(true);\nconfig.getFile().setPrettyPrint(false);\nconfig.getFile().setFormat(PersistenceConfiguration.FileFormat.CSV);  // Smaller than JSON\n"})}),"\n",(0,t.jsx)(n.h3,{id:"issue-database-connection-pool-exhaustion",children:"Issue: Database Connection Pool Exhaustion"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Configure connection pool and batch size"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"config.getDatabase().setConnectionPoolSize(10);\nconfig.getDatabase().setBatchSize(100);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(n.p,{children:"For issues and questions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["GitHub Issues: ",(0,t.jsx)(n.a,{href:"https://github.com/jspinak/brobot/issues",children:"https://github.com/jspinak/brobot/issues"})]}),"\n",(0,t.jsxs)(n.li,{children:["Documentation: ",(0,t.jsx)(n.a,{href:"https://github.com/jspinak/brobot/docs",children:"https://github.com/jspinak/brobot/docs"})]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(96540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);
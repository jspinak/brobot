"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7124],{20783:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"core-library/testing/ci-cd-testing","title":"CI/CD Testing Guide for Brobot","description":"Agent 1 Report: Core Action Tests Analysis","source":"@site/docs/03-core-library/testing/ci-cd-testing.md","sourceDirName":"03-core-library/testing","slug":"/core-library/testing/ci-cd-testing","permalink":"/brobot/docs/core-library/testing/ci-cd-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/testing/ci-cd-testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Enhanced Mock Testing System","permalink":"/brobot/docs/core-library/testing/enhanced-mocking"},"next":{"title":"Motion Detection Testing Guide","permalink":"/brobot/docs/core-library/testing/motion-detection-testing"}}');var t=n(74848),r=n(28453);const o={},l="CI/CD Testing Guide for Brobot",c={},a=[{value:"Agent 1 Report: Core Action Tests Analysis",id:"agent-1-report-core-action-tests-analysis",level:2},{value:"Summary",id:"summary",level:3},{value:"Tests Removed (Not CI/CD Compatible)",id:"tests-removed-not-cicd-compatible",level:3},{value:"Rationale for Removal",id:"rationale-for-removal",level:3},{value:"CI/CD Testing Best Practices",id:"cicd-testing-best-practices",level:3},{value:"1. Always Use BrobotTestBase",id:"1-always-use-brobottestbase",level:4},{value:"2. Focus on Logic, Not Physical Operations",id:"2-focus-on-logic-not-physical-operations",level:4},{value:"3. Use Proper Mocking",id:"3-use-proper-mocking",level:4},{value:"4. Test Categories for CI/CD",id:"4-test-categories-for-cicd",level:4},{value:"Remaining Disabled Tests to Address",id:"remaining-disabled-tests-to-address",level:3},{value:"Recommendations",id:"recommendations",level:3},{value:"Current Status",id:"current-status",level:3},{value:"Next Steps for Other Agents",id:"next-steps-for-other-agents",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"cicd-testing-guide-for-brobot",children:"CI/CD Testing Guide for Brobot"})}),"\n",(0,t.jsx)(s.h2,{id:"agent-1-report-core-action-tests-analysis",children:"Agent 1 Report: Core Action Tests Analysis"}),"\n",(0,t.jsx)(s.h3,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(s.p,{children:"As Agent 1, I focused on Core Action Tests with emphasis on CI/CD compatibility. The key finding is that many mouse/click action tests cannot provide meaningful value in headless CI/CD environments since they don't actually perform operations in mock mode."}),"\n",(0,t.jsx)(s.h3,{id:"tests-removed-not-cicd-compatible",children:"Tests Removed (Not CI/CD Compatible)"}),"\n",(0,t.jsx)(s.p,{children:"The following tests were removed because they test mouse operations that have no effect in headless/mock mode:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"MouseDownTest.java"})," - Tests mouse button press without release"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"MouseUpTest.java"})," - Tests mouse button release"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ClickTest.java"})," - Tests physical mouse clicks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DoubleClickTest.java"})," - Tests double-click operations"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"RightClickTest.java"})," - Tests right mouse button clicks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ClickActionTest.java"})," - Tests click action implementation"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ClickUntilTest.java"})," - Outdated API, tests repetitive clicking"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"MoveMouseTest.java"})," - Tests mouse movement"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"FindTest.java"})," - Outdated API with too many incompatibilities"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"rationale-for-removal",children:"Rationale for Removal"}),"\n",(0,t.jsx)(s.p,{children:"These tests were removed because:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"No Headless Value"}),": Mouse operations in mock mode don't actually move or click anything"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Already Covered"}),": Logic is tested through higher-level integration tests"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Outdated APIs"}),": Many tests used deprecated constructors and methods"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"False Positives"}),": Tests would pass in CI/CD without actually testing functionality"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"cicd-testing-best-practices",children:"CI/CD Testing Best Practices"}),"\n",(0,t.jsx)(s.h4,{id:"1-always-use-brobottestbase",children:"1. Always Use BrobotTestBase"}),"\n",(0,t.jsxs)(s.p,{children:["All tests MUST extend ",(0,t.jsx)(s.code,{children:"BrobotTestBase"})," to ensure:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Automatic mock mode activation"}),"\n",(0,t.jsx)(s.li,{children:"Headless environment compatibility"}),"\n",(0,t.jsx)(s.li,{children:"Fast execution times (0.01-0.04s per operation)"}),"\n",(0,t.jsx)(s.li,{children:"CI/CD pipeline support"}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"public class MyTest extends BrobotTestBase {\n    @Test\n    public void testFeature() {\n        // Automatically runs in mock mode\n    }\n}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"2-focus-on-logic-not-physical-operations",children:"2. Focus on Logic, Not Physical Operations"}),"\n",(0,t.jsx)(s.p,{children:"Good CI/CD tests should focus on:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Configuration validation"}),": Testing builder patterns and options"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"State management"}),": Testing state transitions and detection logic"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Data processing"}),": Testing match filtering, scoring, and fusion"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Error handling"}),": Testing exception cases and recovery"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"API contracts"}),": Testing method signatures and return values"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Avoid tests that require:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Physical mouse movement"}),"\n",(0,t.jsx)(s.li,{children:"Actual screen captures"}),"\n",(0,t.jsx)(s.li,{children:"GUI interaction"}),"\n",(0,t.jsx)(s.li,{children:"Display availability"}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"3-use-proper-mocking",children:"3. Use Proper Mocking"}),"\n",(0,t.jsx)(s.p,{children:"When testing actions that depend on screen operations:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"@Test\npublic void testWithMocking() {\n    try (MockedStatic<Mouse> mouseMock = mockStatic(Mouse.class)) {\n        mouseMock.when(Mouse::at).thenReturn(new Location(100, 100).sikuli());\n        \n        // Test logic that uses mouse position\n        ActionResult result = action.perform(objectCollection);\n        assertTrue(result.isSuccess());\n    }\n}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"4-test-categories-for-cicd",children:"4. Test Categories for CI/CD"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"High Value Tests"})," (Keep/Create):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"State management and transitions"}),"\n",(0,t.jsx)(s.li,{children:"Pattern configuration and options"}),"\n",(0,t.jsx)(s.li,{children:"Action result processing"}),"\n",(0,t.jsx)(s.li,{children:"Match scoring and filtering"}),"\n",(0,t.jsx)(s.li,{children:"Error handling and recovery"}),"\n",(0,t.jsx)(s.li,{children:"Serialization/deserialization"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Low Value Tests"})," (Remove):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Physical mouse operations"}),"\n",(0,t.jsx)(s.li,{children:"Keyboard input simulation"}),"\n",(0,t.jsx)(s.li,{children:"Screen capture operations"}),"\n",(0,t.jsx)(s.li,{children:"Window focus management"}),"\n",(0,t.jsx)(s.li,{children:"Display-dependent features"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Conditional Tests"})," (Platform-specific):"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\npublic void testPlatformSpecific() {\n    assumeFalse(System.getenv("CI") != null, "Skipping in CI");\n    assumeFalse(GraphicsEnvironment.isHeadless(), "Skipping in headless");\n    \n    // Platform-specific test\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"remaining-disabled-tests-to-address",children:"Remaining Disabled Tests to Address"}),"\n",(0,t.jsx)(s.p,{children:"The following categories need review by other agents:"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Agent 2 Focus"})," (Pattern Matching):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"ColorClusterTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"ColorInfoTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"DynamicPixelFinderTest.java"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Agent 3 Focus"})," (State Management):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"StateDetectorTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"InitialStatesTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"ProvisionalStateTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"StateMemoryTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"PathFinderTest.java"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Agent 4 Focus"})," (Analysis & Utilities):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"SceneAnalysisTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"SceneCombinationGeneratorTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"JsonUtilsTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"MatchesJsonUtilsTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"ActionConfigJsonUtilsTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"ObjectCollectionJsonUtilsTest.java"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"PhysicalScreenTest.java"})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Agent 5 Focus"})," (Integration & Coverage):"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"All 60+ disabled tests in library-test/disabled-tests/"}),"\n",(0,t.jsx)(s.li,{children:"Coverage report generation"}),"\n",(0,t.jsx)(s.li,{children:"CI/CD pipeline setup"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"recommendations",children:"Recommendations"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Prioritize Logic Tests"}),": Focus on testing business logic, not physical operations"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Use Mock Mode"}),": Leverage BrobotTestBase for all tests"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Document Skipped Tests"}),": Use ",(0,t.jsx)(s.code,{children:"assumeFalse"})," with clear messages"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Batch Test Execution"}),": Run related tests together for efficiency"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Monitor Coverage"}),": Track coverage for logic, not UI operations"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"current-status",children:"Current Status"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Active Tests"}),": 186 test files"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Removed Non-CI/CD Tests"}),": 9 mouse/click action tests"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Remaining Disabled"}),": 16 in library, 60+ in library-test"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Mouse/Click Coverage"}),": Existing integration tests provide adequate coverage through:","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"FindAndClickTest"})," - Tests click configuration and options"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"DragTest"})," - Tests mouse down, move, and up sequences"]}),"\n",(0,t.jsx)(s.li,{children:"Action chain tests that verify mouse operations in context"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"next-steps-for-other-agents",children:"Next Steps for Other Agents"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Agent 2: Enable pattern matching tests with proper mocking"}),"\n",(0,t.jsx)(s.li,{children:"Agent 3: Fix state management tests using modern API"}),"\n",(0,t.jsx)(s.li,{children:"Agent 4: Update utility tests for current serialization"}),"\n",(0,t.jsx)(s.li,{children:"Agent 5: Set up JaCoCo coverage and CI/CD pipeline"}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var i=n(96540);const t={},r=i.createContext(t);function o(e){const s=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);
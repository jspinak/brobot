"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2168],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},68098:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"logging/logging-quick-reference","title":"Logging Quick Reference","description":"A concise reference for the Brobot Unified Logging System.","source":"@site/docs/07-logging/logging-quick-reference.md","sourceDirName":"07-logging","slug":"/logging/logging-quick-reference","permalink":"/brobot/docs/logging/logging-quick-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/07-logging/logging-quick-reference.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"docSidebar","previous":{"title":"Unified Logging System","permalink":"/brobot/docs/logging/unified-logging-system"},"next":{"title":"Enhanced Action Logging with Console Output and Visual Feedback","permalink":"/brobot/docs/logging/action-logging-console-visual"}}');var o=t(74848),s=t(28453);const r={sidebar_position:6},l="Logging Quick Reference",a={},c=[{value:"Basic Logging",id:"basic-logging",level:2},{value:"Session Management",id:"session-management",level:2},{value:"Builder Pattern",id:"builder-pattern",level:2},{value:"Context &amp; Metadata",id:"context--metadata",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Test Execution",id:"test-execution",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Performance Tracking",id:"performance-tracking",level:3},{value:"Async Operations",id:"async-operations",level:3},{value:"Output Examples",id:"output-examples",level:2},{value:"Console Output",id:"console-output",level:3},{value:"Structured (JSON)",id:"structured-json",level:3},{value:"Console Levels",id:"console-levels",level:2},{value:"Event Types",id:"event-types",level:2},{value:"Metadata Keys",id:"metadata-keys",level:2},{value:"Color Codes",id:"color-codes",level:2},{value:"Pattern Matching Diagnostics",id:"pattern-matching-diagnostics",level:2},{value:"DiagnosticLogger",id:"diagnosticlogger",level:3},{value:"Diagnostic Output Examples",id:"diagnostic-output-examples",level:3},{value:"Configuration for Diagnostics",id:"configuration-for-diagnostics",level:3},{value:"Enhanced Action Logging",id:"enhanced-action-logging",level:2},{value:"Console Output Configuration",id:"console-output-configuration",level:3},{value:"Visual Feedback",id:"visual-feedback",level:3},{value:"Console Output Examples",id:"console-output-examples",level:3},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"Visual Feedback Presets",id:"visual-feedback-presets",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"logging-quick-reference",children:"Logging Quick Reference"})}),"\n",(0,o.jsx)(n.p,{children:"A concise reference for the Brobot Unified Logging System."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"}),": For action-specific logging with configurable output formats (QUIET, NORMAL, VERBOSE), see the ",(0,o.jsx)(n.a,{href:"/brobot/docs/logging/modular-logging-guide",children:"Modular Logging Guide"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"New"}),": For automatic action logging without boilerplate code, see the ",(0,o.jsx)(n.a,{href:"/brobot/docs/logging/automatic-action-logging",children:"Automatic Action Logging Guide"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"basic-logging",children:"Basic Logging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Autowired\nprivate BrobotLogger logger;\n\n// Simple actions\nlogger.action("CLICK", button);\nlogger.action("TYPE", textField, result);\n\n// State transitions\nlogger.transition(fromState, toState);\nlogger.transition(fromState, toState, success, duration);\n\n// Observations\nlogger.observation("Validation passed");\nlogger.observation("Warning: Slow response", "WARNING");\n\n// Errors\nlogger.error("Element not found", exception);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"session-management",children:"Session Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Session scope (recommended)\ntry (var session = logger.session("test-123")) {\n    // All logs include session ID\n}\n\n// Operation scope (with timing)\ntry (var op = logger.operation("ComplexTask")) {\n    // Duration logged on close\n}\n\n// Manual timer\ntry (var timer = logger.startTimer("Process")) {\n    // Timer stops on close\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"builder-pattern",children:"Builder Pattern"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'logger.log()\n    .action("CLICK")\n    .target(element)\n    .success(true)\n    .duration(250)\n    .screenshot("/tmp/screen.png")\n    .metadata("retry", 2)\n    .log();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"context--metadata",children:"Context & Metadata"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Add persistent metadata\nlogger.getContext().addMetadata("env", "staging");\nlogger.getContext().addMetadata("suite", "regression");\n\n// Set current context\nlogger.getContext().setCurrentState(state);\nlogger.getContext().setCurrentAction("CLICK");\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Console output level\nlogger.setConsoleLevel(OutputLevel.HIGH);  // HIGH, LOW, NONE\n\n// Structured logging\nlogger.enableStructuredLogging(true);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"test-execution",children:"Test Execution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testLogin() {\n    try (var session = logger.session(getTestId())) {\n        logger.observation("Starting login test");\n        \n        LoginPage loginPage = new LoginPage();\n        logger.action("NAVIGATE", loginPage);\n        \n        ActionResult result = loginPage.login(user, pass);\n        logger.action("LOGIN", loginPage, result);\n        \n        if (!result.isSuccess()) {\n            logger.error("Login failed", null);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'try {\n    performAction();\n} catch (Exception e) {\n    logger.log()\n        .error(e)\n        .screenshot(captureScreenshot())\n        .metadata("lastAction", getLastAction())\n        .log();\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"performance-tracking",children:"Performance Tracking"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'try (var timer = logger.startTimer("DataLoad")) {\n    List<Data> data = loadData();\n    logger.observation("Loaded " + data.size() + " records");\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"async-operations",children:"Async Operations"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'var snapshot = logger.getContext().snapshot();\nCompletableFuture.runAsync(() -> {\n    logger.getContext().restore(snapshot);\n    logger.action("ASYNC_TASK", target);\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"output-examples",children:"Output Examples"}),"\n",(0,o.jsx)(n.h3,{id:"console-output",children:"Console Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"[abc-123] CLICK \u2192 LoginButton (success) [250ms]\n[abc-123] STATE: Login \u2192 Dashboard [1.5s]\n[abc-123] OBSERVE: 5 records loaded\n[abc-123] ERROR: Timeout waiting for element\n"})}),"\n",(0,o.jsx)(n.h3,{id:"structured-json",children:"Structured (JSON)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": 1704067200000,\n  "sessionId": "abc-123",\n  "type": "ACTION",\n  "action": "CLICK",\n  "target": "LoginButton",\n  "success": true,\n  "duration": 250\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"console-levels",children:"Console Levels"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Level"}),(0,o.jsx)(n.th,{children:"Shows"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"NONE"}),(0,o.jsx)(n.td,{children:"No output"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"LOW"}),(0,o.jsx)(n.td,{children:"Actions, transitions, errors"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"HIGH"}),(0,o.jsx)(n.td,{children:"All logs including observations"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"event-types",children:"Event Types"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Usage"}),(0,o.jsx)(n.th,{children:"Method"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"ACTION"}),(0,o.jsx)(n.td,{children:"User interactions"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"logger.action()"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"TRANSITION"}),(0,o.jsx)(n.td,{children:"State changes"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"logger.transition()"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"OBSERVATION"}),(0,o.jsx)(n.td,{children:"General info"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"logger.observation()"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"PERFORMANCE"}),(0,o.jsx)(n.td,{children:"Timing data"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"logger.operation()"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"ERROR"}),(0,o.jsx)(n.td,{children:"Failures"}),(0,o.jsx)(n.td,{children:(0,o.jsx)(n.code,{children:"logger.error()"})})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"metadata-keys",children:"Metadata Keys"}),"\n",(0,o.jsx)(n.p,{children:"Common metadata keys used by the framework:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"screenshot"})," - Path to screenshot file"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"matchCount"})," - Number of pattern matches found"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"retryCount"})," - Number of retry attempts"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"elementLocation"})," - Coordinates of element"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"validationErrors"})," - List of validation failures"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"formData"})," - Submitted form data (sanitized)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"responseTime"})," - Server response time"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"browser"})," - Browser name and version"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"viewport"})," - Screen dimensions"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"color-codes",children:"Color Codes"}),"\n",(0,o.jsx)(n.p,{children:"When console colors are enabled:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udfe2 ",(0,o.jsx)(n.strong,{children:"Green"})," - Successful actions"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd35 ",(0,o.jsx)(n.strong,{children:"Blue"})," - State transitions"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udfe1 ",(0,o.jsx)(n.strong,{children:"Yellow"})," - Failed actions (non-error)"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd34 ",(0,o.jsx)(n.strong,{children:"Red"})," - Errors and exceptions"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udfe6 ",(0,o.jsx)(n.strong,{children:"Cyan"})," - Performance metrics"]}),"\n",(0,o.jsxs)(n.li,{children:["\u26aa ",(0,o.jsx)(n.strong,{children:"Default"})," - Observations and info"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"pattern-matching-diagnostics",children:"Pattern Matching Diagnostics"}),"\n",(0,o.jsx)(n.h3,{id:"diagnosticlogger",children:"DiagnosticLogger"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Autowired\nprivate DiagnosticLogger diagnosticLogger;\n\n// Automatic logging in ScenePatternMatcher\n// Provides verbosity-aware output:\n// - QUIET: Only \u2713/\u2717 symbols\n// - NORMAL: [SEARCH], [RESULT], [FOUND] prefixes\n// - VERBOSE: Full details with caching info\n\n// Manual diagnostic logging\ndiagnosticLogger.logPatternSearch(pattern, scene, 0.7);\ndiagnosticLogger.logPatternResult(pattern, matchCount, bestScore);\ndiagnosticLogger.logImageAnalysis(patternImg, sceneImg, "button");\ndiagnosticLogger.logSimilarityAnalysis("button", thresholds, foundAt, score);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"diagnostic-output-examples",children:"Diagnostic Output Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"# NORMAL Mode:\n[SEARCH] Pattern: 'login-button' (64x32) | Similarity: 0.70 | Scene: 1920x1080\n[FOUND #1] Score: 0.852 at (450, 320)\n[RESULT] 2 matches for 'login-button' | Best score: 0.852\n\n# VERBOSE Mode adds:\n  [Pattern.sikuli()] Using CACHED SikuliX Pattern for: login-button\n  [FOUND #4] Score: 0.743 at (450, 720)\n  [METADATA] matchCount=2, cacheHit=true, searchTime=234ms\n\n# Failed Match Analysis:\n[RESULT] NO MATCHES for 'submit-button'\n  [IMAGE ANALYSIS]\n    Pattern: 128x48 type=RGB bytes=24KB\n    Pattern content: 2.3% black, 45.6% white, avg RGB=(127,189,210)\n    Scene: 1920x1080 type=RGB bytes=8MB\n    Scene content: 95.2% black, 0.1% white, avg RGB=(5,5,5)\n    WARNING: Scene is mostly BLACK - possible capture failure!\n  [SIMILARITY ANALYSIS]\n    Threshold 0.7: No match\n    Threshold 0.6: FOUND with score 0.624\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configuration-for-diagnostics",children:"Configuration for Diagnostics"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  logging:\n    verbosity: VERBOSE  # QUIET, NORMAL, or VERBOSE\n  console:\n    actions:\n      level: VERBOSE\nlogging:\n  level:\n    io.github.jspinak.brobot.logging.DiagnosticLogger: DEBUG\n"})}),"\n",(0,o.jsx)(n.h2,{id:"enhanced-action-logging",children:"Enhanced Action Logging"}),"\n",(0,o.jsx)(n.h3,{id:"console-output-configuration",children:"Console Output Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Enable enhanced console output\n@Autowired\nprivate EnhancedActionLogger logger;\n\n// Set verbosity\nlogger.setConsoleVerbosity("VERBOSE");  // QUIET, NORMAL, VERBOSE\n\n// Check GUI access\nlogger.checkAndLogGuiAccess();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"visual-feedback",children:"Visual Feedback"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Log with visual highlighting\nlogger.logActionWithVisuals(\n    "FIND", \n    target, \n    result,\n    VisualFeedbackOptions.debug()\n);\n\n// Custom visual options\nVisualFeedbackOptions options = VisualFeedbackOptions.builder()\n    .highlightFinds(true)\n    .findHighlightColor(Color.GREEN)\n    .findHighlightDuration(3.0)\n    .showMatchScore(true)\n    .build();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"console-output-examples",children:"Console Output Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\ud83d\udd0d FIND: login-button \u2192 \u2713 FOUND (234ms)\n   \u2514\u2500 Location: (450,320) Score: 98.5%\n\n\u2717 FIND submit-button (2003ms)\n   \u2514\u2500 Search regions: 3 areas checked\n\n\u274c GUI Problem: No DISPLAY environment variable set\n\ud83d\udca1 Solution: Set DISPLAY=:0 or run with X11 forwarding\n\n\u26a0\ufe0f Performance Warning: FIND took 2003ms (threshold: 1000ms)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'brobot:\n  console:\n    actions:\n      enabled: true\n      level: NORMAL\n      show-match-details: true\n      use-icons: true\n  highlight:\n    enabled: true\n    auto-highlight-finds: true\n    find:\n      color: "#00FF00"\n      duration: 2.0\n'})}),"\n",(0,o.jsx)(n.h3,{id:"visual-feedback-presets",children:"Visual Feedback Presets"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Debug mode - everything visible\nVisualFeedbackOptions.debug()\n\n// Production - no visual distractions  \nVisualFeedbackOptions.none()\n\n// Finds only\nVisualFeedbackOptions.findsOnly()\n"})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
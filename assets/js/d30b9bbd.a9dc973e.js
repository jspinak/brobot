"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9985],{14792:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core-library/guides/processes-as-objects","title":"Processes as Objects","description":"Interacting with the GUI is not as simple as \'find\' and \'click\'. There are a lot of parameters involved. For example, a \'find\' operation depends on settings such as the minimum similarity required for the match to be accepted, the max amount of time to search before giving up, and the region in which to search, as well as other parameters. Building a library such as Brobot while using processes as functions would create either an","source":"@site/versioned_docs/version-1.0.7/03-core-library/guides/processes-as-objects.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/processes-as-objects","permalink":"/brobot/docs/1.0.7/core-library/guides/processes-as-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.7/03-core-library/guides/processes-as-objects.md","tags":[],"version":"1.0.7","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"Data Structure for Color Analysis","permalink":"/brobot/docs/1.0.7/core-library/guides/labeling/color-analysis"},"next":{"title":"Dynamic Transitions","permalink":"/brobot/docs/1.0.7/core-library/guides/dynamic-transitions"}}');var i=o(74848),n=o(28453);const a={sidebar_position:5},r="Processes as Objects",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"processes-as-objects",children:"Processes as Objects"})}),"\n",(0,i.jsx)(t.p,{children:"Interacting with the GUI is not as simple as 'find' and 'click'. There are a lot of parameters involved. For example, a 'find' operation depends on settings such as the minimum similarity required for the match to be accepted, the max amount of time to search before giving up, and the region in which to search, as well as other parameters. Building a library such as Brobot while using processes as functions would create either an\nexploding web of methods or methods with extremely long parameter lists. It would be unwieldy to use and complicated to develop."}),"\n",(0,i.jsx)(t.p,{children:"Processes as objects has an additional advantage in that it allows a interactive process to be treated as the combination of building blocks. This is important because brobot allows for the development of complex applications that react to their environments, in which the sequences of paths and actions taken are not known before the application is run."}),"\n",(0,i.jsx)(t.p,{children:"A good example of how this has affected the design choices taken is how pauses are used. Brobot makes a set of actions available to be used to create  applications. Pause, or wait, is not one of them. Instead, pauses can be selected as part of the action's options. Including pauses as options and not as a separate action was a deliberate design choice. Having a pause method allows the programmer to think in a more procedural manner: for example, do A and then wait a bit and then do B. Brobot's design incentivizes the programmer to think about the process as discrete process objects that can be combined and recombined in different configurations. Brobot provides a framework for a semi-intelligent automation and not just for automating a static process flow."}),"\n",(0,i.jsx)(t.p,{children:"Treating processes as objects also simplifies the creation of new composite actions out of the more basic process building blocks. For example, the composite action ClickUntil, which performs clicks until a condition is reached, is much simpler to create with the standard process objects in Brobot."}),"\n",(0,i.jsx)(t.p,{children:"The main classes enabling this are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"ActionOptions: a collection of options that can be applied to any action (for example, min similarity). This object includes options for the action to take (i.e. FIND, CLICK, DRAG)."}),"\n",(0,i.jsx)(t.li,{children:"ObjectCollection: a collection of state objects that are used with the action."}),"\n",(0,i.jsx)(t.li,{children:"Action: takes ActionOptions and ObjectCollections as parameters and executes the action specified in ActionOptions."}),"\n",(0,i.jsx)(t.li,{children:"Matches: contains all the results of the action linked to the corresponding objects in the ObjectCollection."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"An example (this defines a region around a match):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"ActionOptions defineRegion = new ActionOptions.Builder()\n.setAction(ActionOptions.Action.DEFINE)\n.setDefineAs(ActionOptions.DefineAs.MATCH)\n.setMinSimilarity(.6)\n.setAddX(-5)\n.setAddY(-1)\n.setAbsoluteWidthOfDefinedRegion(296)\n.setAbsoluteHeightOfDefinedRegion(255)\n.build();\n\nObjectCollection mapImage = new ObjectCollection.Builder()\n.withImages(miniMap.getMap())\n.build();\n\nMatches matches = action.perform(defineRegion, mapImage);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>r});var s=o(96540);const i={},n=s.createContext(i);function a(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3990],{4999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"logging/logging-migration-guide","title":"Logging Migration Guide","description":"This guide helps you migrate from Brobot\'s legacy logging systems to the new Unified Logging System.","source":"@site/docs/07-logging/logging-migration-guide.md","sourceDirName":"07-logging","slug":"/logging/logging-migration-guide","permalink":"/brobot/docs/logging/logging-migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/07-logging/logging-migration-guide.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docSidebar","previous":{"title":"Enhanced Action Logging with Console Output and Visual Feedback","permalink":"/brobot/docs/logging/action-logging-console-visual"},"next":{"title":"Automatic Action Logging","permalink":"/brobot/docs/logging/automatic-action-logging"}}');var i=t(74848),s=t(28453);const r={sidebar_position:7},a="Logging Migration Guide",l={},g=[{value:"Overview",id:"overview",level:2},{value:"Migration Checklist",id:"migration-checklist",level:2},{value:"Step-by-Step Migration",id:"step-by-step-migration",level:2},{value:"Step 1: Add BrobotLogger Injection",id:"step-1-add-brobotlogger-injection",level:3},{value:"Step 2: Migrate ConsoleReporter Calls",id:"step-2-migrate-consolereporter-calls",level:3},{value:"Basic Output",id:"basic-output",level:4},{value:"Level-based Output",id:"level-based-output",level:4},{value:"Action Reporting",id:"action-reporting",level:4},{value:"Formatted Output",id:"formatted-output",level:4},{value:"Colored Output",id:"colored-output",level:4},{value:"Step 3: Migrate ActionLogger Usage",id:"step-3-migrate-actionlogger-usage",level:3},{value:"Action Logging",id:"action-logging",level:4},{value:"State Transitions",id:"state-transitions",level:4},{value:"Observations",id:"observations",level:4},{value:"Performance Metrics",id:"performance-metrics",level:4},{value:"Error Logging",id:"error-logging",level:4},{value:"Step 4: Migrate SLF4J Usage",id:"step-4-migrate-slf4j-usage",level:3},{value:"Basic Logging",id:"basic-logging",level:4},{value:"Conditional Logging",id:"conditional-logging",level:4},{value:"Step 5: Add Session Management",id:"step-5-add-session-management",level:3},{value:"Step 6: Update Test Classes",id:"step-6-update-test-classes",level:3},{value:"Configuration Migration",id:"configuration-migration",level:2},{value:"Application Properties",id:"application-properties",level:3},{value:"Logback Configuration",id:"logback-configuration",level:3},{value:"Common Migration Patterns",id:"common-migration-patterns",level:2},{value:"Pattern 1: Action with Retry",id:"pattern-1-action-with-retry",level:3},{value:"Pattern 2: State Validation",id:"pattern-2-state-validation",level:3},{value:"Pattern 3: Performance Tracking",id:"pattern-3-performance-tracking",level:3},{value:"Gradual Migration Strategy",id:"gradual-migration-strategy",level:2},{value:"Phase 1: Add Unified Logger Alongside Existing",id:"phase-1-add-unified-logger-alongside-existing",level:3},{value:"Phase 2: Create Adapter Methods",id:"phase-2-create-adapter-methods",level:3},{value:"Phase 3: Replace Usage Incrementally",id:"phase-3-replace-usage-incrementally",level:3},{value:"Phase 4: Clean Up",id:"phase-4-clean-up",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Issue: Lost Session Context",id:"issue-lost-session-context",level:3},{value:"Issue: No Console Output",id:"issue-no-console-output",level:3},{value:"Issue: Lombok Compilation Errors",id:"issue-lombok-compilation-errors",level:3},{value:"Issue: Missing Metadata",id:"issue-missing-metadata",level:3},{value:"Verification",id:"verification",level:2},{value:"Benefits After Migration",id:"benefits-after-migration",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"logging-migration-guide",children:"Logging Migration Guide"})}),"\n",(0,i.jsx)(n.p,{children:"This guide helps you migrate from Brobot's legacy logging systems to the new Unified Logging System."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Unified Logging System replaces three separate logging mechanisms:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SLF4J direct usage"}),"\n",(0,i.jsx)(n.li,{children:"ActionLogger for structured logs"}),"\n",(0,i.jsx)(n.li,{children:"ConsoleReporter for console output"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All functionality is now available through a single ",(0,i.jsx)(n.code,{children:"BrobotLogger"})," interface."]}),"\n",(0,i.jsx)(n.h2,{id:"migration-checklist",children:"Migration Checklist"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add BrobotLogger dependency injection"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Replace ConsoleReporter static calls"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update ActionLogger usage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Migrate SLF4J logger statements"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add session scoping to tests"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update configuration files"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Remove legacy logger imports"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-migration",children:"Step-by-Step Migration"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-add-brobotlogger-injection",children:"Step 1: Add BrobotLogger Injection"}),"\n",(0,i.jsx)(n.p,{children:"Replace static logger declarations with injected BrobotLogger:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Old way - multiple loggers\npublic class MyAutomation {\n    private static final Logger log = LoggerFactory.getLogger(MyAutomation.class);\n    @Autowired\n    private ActionLogger actionLogger;\n    \n    // ...\n}\n\n// New way - single logger\npublic class MyAutomation {\n    @Autowired\n    private BrobotLogger logger;\n    \n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-migrate-consolereporter-calls",children:"Step 2: Migrate ConsoleReporter Calls"}),"\n",(0,i.jsx)(n.p,{children:"ConsoleReporter static methods should be replaced with BrobotLogger instance methods:"}),"\n",(0,i.jsx)(n.h4,{id:"basic-output",children:"Basic Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nConsoleReporter.print("Processing started");\nConsoleReporter.println("Processing complete");\n\n// New way\nlogger.observation("Processing started");\nlogger.observation("Processing complete");\n'})}),"\n",(0,i.jsx)(n.h4,{id:"level-based-output",children:"Level-based Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nConsoleReporter.print(OutputLevel.HIGH, "Detailed info");\nConsoleReporter.println(OutputLevel.LOW, "Important message");\n\n// New way\nlogger.observation("Detailed info"); // Respects console level setting\nlogger.observation("Important message", "WARNING"); // Always shown at LOW\n'})}),"\n",(0,i.jsx)(n.h4,{id:"action-reporting",children:"Action Reporting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Old way\nConsoleReporter.print(match, stateObject, actionOptions);\n\n// New way\nlogger.action(actionOptions.getAction().toString(), stateObject);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"formatted-output",children:"Formatted Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nConsoleReporter.format("Found %d matches in %.2f seconds", count, time);\n\n// New way\nlogger.observation(String.format("Found %d matches in %.2f seconds", count, time));\n// Or with metadata\nlogger.log()\n    .observation("Search complete")\n    .metadata("matchCount", count)\n    .metadata("duration", time)\n    .log();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"colored-output",children:"Colored Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nConsoleReporter.println("Success!", AnsiColor.GREEN);\nConsoleReporter.print("Error!", AnsiColor.RED);\n\n// New way\nlogger.log()\n    .observation("Success!")\n    .color(AnsiColor.GREEN)\n    .log();\n\nlogger.log()\n    .error(new Exception("Error!"))\n    .color(AnsiColor.RED)\n    .log();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-migrate-actionlogger-usage",children:"Step 3: Migrate ActionLogger Usage"}),"\n",(0,i.jsx)(n.p,{children:"Replace ActionLogger method calls with BrobotLogger equivalents:"}),"\n",(0,i.jsx)(n.h4,{id:"action-logging",children:"Action Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nactionLogger.logAction(sessionId, actionResult, objectCollection);\n\n// New way\nlogger.action("CLICK", stateObject, actionResult);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"state-transitions",children:"State Transitions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Old way\nSet<State> from = Set.of(currentState);\nSet<State> to = Set.of(targetState);\nactionLogger.logStateTransition(sessionId, from, to, from, true, 1500);\n\n// New way\nlogger.transition(currentState, targetState, true, 1500);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"observations",children:"Observations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nactionLogger.logObservation(sessionId, "UI_CHECK", \n    "Button is enabled", "INFO");\n\n// New way\nlogger.observation("Button is enabled", "INFO");\n// Or with more context\nlogger.log()\n    .observation("Button is enabled")\n    .metadata("elementType", "UI_CHECK")\n    .log();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nactionLogger.logPerformanceMetrics(sessionId, \n    actionDuration, pageLoadTime, totalDuration);\n\n// New way\nlogger.log()\n    .performanceLog()\n    .message("Test execution metrics")\n    .metadata("actionDuration", actionDuration)\n    .metadata("pageLoadTime", pageLoadTime)\n    .metadata("totalDuration", totalDuration)\n    .log();\n\n// Or use built-in timing\ntry (var timer = logger.startTimer("TestExecution")) {\n    // Perform test\n} // Duration logged automatically\n'})}),"\n",(0,i.jsx)(n.h4,{id:"error-logging",children:"Error Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Old way\nactionLogger.logError(sessionId, errorMessage, screenshotPath);\n\n// New way\nlogger.log()\n    .error(exception)\n    .message(errorMessage)\n    .screenshot(screenshotPath)\n    .log();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"step-4-migrate-slf4j-usage",children:"Step 4: Migrate SLF4J Usage"}),"\n",(0,i.jsx)(n.p,{children:"Replace direct SLF4J logger calls:"}),"\n",(0,i.jsx)(n.h4,{id:"basic-logging",children:"Basic Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nlog.info("Starting automation");\nlog.debug("Current state: {}", state);\nlog.warn("Retry attempt {} of {}", attempt, maxRetries);\nlog.error("Failed to find element", exception);\n\n// New way\nlogger.observation("Starting automation");\nlogger.observation("Current state: " + state); \nlogger.observation("Retry attempt " + attempt + " of " + maxRetries, "WARNING");\nlogger.error("Failed to find element", exception);\n'})}),"\n",(0,i.jsx)(n.h4,{id:"conditional-logging",children:"Conditional Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nif (log.isDebugEnabled()) {\n    log.debug("Expensive computation: {}", computeDebugInfo());\n}\n\n// New way\nif (logger.getConsoleLevel() == OutputLevel.HIGH) {\n    logger.observation("Expensive computation: " + computeDebugInfo());\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-5-add-session-management",children:"Step 5: Add Session Management"}),"\n",(0,i.jsx)(n.p,{children:"Wrap test and automation code in sessions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\npublic void runTest() {\n    String sessionId = UUID.randomUUID().toString();\n    // Pass sessionId to every log call\n    actionLogger.logAction(sessionId, result, collection);\n}\n\n// New way\npublic void runTest() {\n    try (var session = logger.session(UUID.randomUUID().toString())) {\n        // Session ID automatically included in all logs\n        logger.action("START", testCase);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-6-update-test-classes",children:"Step 6: Update Test Classes"}),"\n",(0,i.jsx)(n.p,{children:"Migrate test class logging:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\n@Test\npublic class LoginTest {\n    private static final Logger log = LoggerFactory.getLogger(LoginTest.class);\n    @Autowired\n    private ActionLogger actionLogger;\n    \n    @Test\n    public void testLogin() {\n        log.info("Starting login test");\n        String sessionId = "test-" + System.currentTimeMillis();\n        \n        // Perform test\n        ActionResult result = performLogin();\n        actionLogger.logAction(sessionId, result, null);\n        \n        if (!result.isSuccess()) {\n            log.error("Login failed");\n        }\n    }\n}\n\n// New way\n@Test\npublic class LoginTest {\n    @Autowired\n    private BrobotLogger logger;\n    \n    @Test\n    public void testLogin() {\n        try (var session = logger.session("test-" + System.currentTimeMillis())) {\n            logger.observation("Starting login test");\n            \n            // Perform test\n            ActionResult result = performLogin();\n            logger.action("LOGIN", loginPage, result);\n            \n            if (!result.isSuccess()) {\n                logger.error("Login failed", null);\n            }\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-migration",children:"Configuration Migration"}),"\n",(0,i.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,i.jsx)(n.p,{children:"Update your application.yml or application.properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Old configuration\nlogging:\n  level:\n    io.github.jspinak.brobot: DEBUG\n    \nconsole:\n  reporter:\n    level: HIGH\n\n# New configuration\nbrobot:\n  logging:\n    console:\n      level: HIGH\n      colors: true\n    structured:\n      enabled: true\n    slf4j:\n      level: DEBUG\n"})}),"\n",(0,i.jsx)(n.h3,{id:"logback-configuration",children:"Logback Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The unified logger still uses SLF4J internally, so your logback.xml continues to work:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'\x3c!-- This still works with unified logging --\x3e\n<configuration>\n    <appender name="FILE" class="ch.qos.logback.core.FileAppender">\n        <file>logs/brobot.log</file>\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    \n    <logger name="io.github.jspinak.brobot" level="DEBUG"/>\n    \n    <root level="INFO">\n        <appender-ref ref="FILE"/>\n    </root>\n</configuration>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-migration-patterns",children:"Common Migration Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"pattern-1-action-with-retry",children:"Pattern 1: Action with Retry"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nfor (int i = 0; i < maxRetries; i++) {\n    log.debug("Attempt {} of {}", i + 1, maxRetries);\n    ActionResult result = performAction();\n    \n    ConsoleReporter.print(match, stateObject, actionOptions);\n    actionLogger.logAction(sessionId, result, objectCollection);\n    \n    if (result.isSuccess()) {\n        log.info("Action succeeded on attempt {}", i + 1);\n        break;\n    }\n    \n    if (i == maxRetries - 1) {\n        log.error("Action failed after {} attempts", maxRetries);\n        actionLogger.logError(sessionId, "Max retries exceeded", screenshot);\n    }\n}\n\n// New way\nfor (int i = 0; i < maxRetries; i++) {\n    logger.log()\n        .action("CLICK")\n        .target(stateObject)\n        .metadata("attempt", i + 1)\n        .metadata("maxRetries", maxRetries)\n        .log();\n    \n    ActionResult result = performAction();\n    logger.action("CLICK", stateObject, result);\n    \n    if (result.isSuccess()) {\n        logger.observation("Action succeeded on attempt " + (i + 1));\n        break;\n    }\n    \n    if (i == maxRetries - 1) {\n        logger.log()\n            .error(new Exception("Max retries exceeded"))\n            .screenshot(screenshot)\n            .metadata("attempts", maxRetries)\n            .log();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-2-state-validation",children:"Pattern 2: State Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nlog.info("Validating state: {}", expectedState.getName());\nSet<State> currentStates = detectStates();\n\nif (currentStates.contains(expectedState)) {\n    ConsoleReporter.println("State validation passed", AnsiColor.GREEN);\n    actionLogger.logObservation(sessionId, "STATE_CHECK", \n        "Correct state detected", "INFO");\n} else {\n    ConsoleReporter.println("State validation failed", AnsiColor.RED);\n    log.error("Expected state {} but found {}", expectedState, currentStates);\n    actionLogger.logError(sessionId, "Wrong state detected", screenshot);\n}\n\n// New way\nlogger.observation("Validating state: " + expectedState.getName());\nSet<State> currentStates = detectStates();\n\nif (currentStates.contains(expectedState)) {\n    logger.log()\n        .observation("State validation passed")\n        .color(AnsiColor.GREEN)\n        .metadata("expectedState", expectedState.getName())\n        .metadata("actualStates", currentStates)\n        .log();\n} else {\n    logger.log()\n        .error(new Exception("Wrong state detected"))\n        .screenshot(screenshot)\n        .metadata("expected", expectedState)\n        .metadata("actual", currentStates)\n        .color(AnsiColor.RED)\n        .log();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-3-performance-tracking",children:"Pattern 3: Performance Tracking"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Old way\nlong startTime = System.currentTimeMillis();\nlog.info("Starting batch process");\n\nprocessBatch();\n\nlong duration = System.currentTimeMillis() - startTime;\nConsoleReporter.format("Batch completed in %d ms", duration);\nactionLogger.logPerformanceMetrics(sessionId, 0, 0, duration);\n\n// New way\ntry (var timer = logger.startTimer("BatchProcess")) {\n    logger.observation("Starting batch process");\n    processBatch();\n    logger.observation("Batch completed");\n} // Duration automatically logged\n'})}),"\n",(0,i.jsx)(n.h2,{id:"gradual-migration-strategy",children:"Gradual Migration Strategy"}),"\n",(0,i.jsx)(n.p,{children:"If you need to migrate gradually:"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-add-unified-logger-alongside-existing",children:"Phase 1: Add Unified Logger Alongside Existing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class MyClass {\n    // Keep existing loggers temporarily\n    private static final Logger log = LoggerFactory.getLogger(MyClass.class);\n    @Autowired\n    private ActionLogger actionLogger;\n    \n    // Add new logger\n    @Autowired\n    private BrobotLogger logger;\n    \n    // Use both during transition\n    public void myMethod() {\n        log.info("Old style logging");\n        logger.observation("New style logging");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-create-adapter-methods",children:"Phase 2: Create Adapter Methods"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class LoggingAdapter {\n    @Autowired\n    private BrobotLogger logger;\n    \n    // Adapter for ConsoleReporter\n    public static void print(String message) {\n        // Get singleton instance and delegate\n        getInstance().logger.observation(message);\n    }\n    \n    // Adapter for ActionLogger\n    public void logAction(String sessionId, ActionResult result) {\n        try (var session = logger.session(sessionId)) {\n            logger.action("LEGACY", null, result);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-replace-usage-incrementally",children:"Phase 3: Replace Usage Incrementally"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Start with new code - use only BrobotLogger"}),"\n",(0,i.jsx)(n.li,{children:"Migrate test classes one at a time"}),"\n",(0,i.jsx)(n.li,{children:"Update utility classes"}),"\n",(0,i.jsx)(n.li,{children:"Migrate core automation classes"}),"\n",(0,i.jsx)(n.li,{children:"Remove legacy logger declarations"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-clean-up",children:"Phase 4: Clean Up"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Remove legacy logger imports"}),"\n",(0,i.jsx)(n.li,{children:"Delete adapter methods"}),"\n",(0,i.jsx)(n.li,{children:"Remove old configuration"}),"\n",(0,i.jsx)(n.li,{children:"Update documentation"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"issue-lost-session-context",children:"Issue: Lost Session Context"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": Session ID not appearing in logs"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure code is wrapped in session scope"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'try (var session = logger.session("test-123")) {\n    // All logging here includes session ID\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"issue-no-console-output",children:"Issue: No Console Output"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": Logs appear in files but not console"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Check console level setting"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"logger.setConsoleLevel(OutputLevel.HIGH);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"issue-lombok-compilation-errors",children:"Issue: Lombok Compilation Errors"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": IDE shows errors for getName(), isSuccess() methods"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure Lombok plugin is installed"}),"\n",(0,i.jsx)(n.li,{children:"Enable annotation processing"}),"\n",(0,i.jsx)(n.li,{children:"Clean and rebuild project"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"issue-missing-metadata",children:"Issue: Missing Metadata"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": Custom metadata not appearing in logs"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Add metadata to context or use builder"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Context metadata (persistent)\nlogger.getContext().addMetadata("env", "test");\n\n// Per-log metadata\nlogger.log()\n    .observation("Test")\n    .metadata("custom", value)\n    .log();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"verification",children:"Verification"}),"\n",(0,i.jsx)(n.p,{children:"After migration, verify:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Console Output"}),": Run tests and check console formatting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Log Files"}),": Verify SLF4J file output still works"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Structured Logs"}),": Check ActionLogger compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Ensure no significant overhead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thread Safety"}),": Test concurrent execution"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"benefits-after-migration",children:"Benefits After Migration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cleaner Code"}),": Single logger injection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better Context"}),": Automatic session tracking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Richer Logs"}),": Easy metadata addition"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Built-in timing utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexibility"}),": Fluent API for complex scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future Proof"}),": Ready for new logging features"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1428],{3213:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/StateImageObject-45bd122420a058502b347b22adec52ca.png"},20464:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/mock-output-bbf01b746faa2a943ceb2a1493bd04a5.png"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}},66930:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/test-output-119935642b17468a61b8cceee31a50d6.png"},76359:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/wrappers-8f5e2e7afa7fb9b1452c20daaa9e6e83.jpeg"},76614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"testing/integration-testing","title":"Integration Testing","description":"Integration testing is performed by simulating the environment the application runs in","source":"@site/versioned_docs/version-1.0.7/04-testing/integration-testing.md","sourceDirName":"04-testing","slug":"/testing/integration-testing","permalink":"/brobot/docs/1.0.7/testing/integration-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.7/04-testing/integration-testing.md","tags":[],"version":"1.0.7","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docSidebar","previous":{"title":"Overview","permalink":"/brobot/docs/1.0.7/testing/testing-intro"},"next":{"title":"Unit Testing","permalink":"/brobot/docs/1.0.7/testing/unit-testing"}}');var s=n(74848),o=n(28453);const a={sidebar_position:2},r="Integration Testing",c={},l=[{value:"Mocking",id:"mocking",level:2},{value:"Match Histories",id:"match-histories",level:2},{value:"Console Output",id:"console-output",level:2},{value:"Assertions",id:"assertions",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"integration-testing",children:"Integration Testing"})}),"\n",(0,s.jsxs)(t.p,{children:["Integration testing is performed by simulating the environment the application runs in\nand the results of actions taken on objects in this environment. The model of the environment\nis represented by a sample distribution of action-results pairs for state objects, as well\nas probabilities that determine the success or failure of state transitions when the\napplication is run as a test. Running the app as a test is typically referred to as\nmocking. Mocking is the process of simulating actions instead of executing them in a real run.\nAn integration test in Brobot runs the entire application in a mock run, and is\ndone by simply setting the variable ",(0,s.jsx)(t.code,{children:"BrobotSettings.mock"})," to true."]}),"\n",(0,s.jsx)(t.h2,{id:"mocking",children:"Mocking"}),"\n",(0,s.jsx)(t.p,{children:"Mocking is used for application testing when making calls to a third-party API that the\ndeveloper cannot control. For example, calls to an external database can be mocked in the\ntest methods in order to simulate real data. Mocking in brobot is similar to this idea.\nBrobot uses Sikuli for interacting with the GUI and wraps every Sikuli method that it\ncalls to be able to produce a mock instead of a real action. A Brobot application can then\nbe mocked to produce text outputs and is run exactly as it would otherwise. The higher level\ncode in a brobot application does not know if it is running live or in a mock. The mocks\nhappen only at the wrapper level and the wrappers return the same outputs as they would\nduring a real run (plus some additional logging when enabled). Stochastisticity is modeled\nby sampling from the potential outcomes saved with state objects, and from the\nprobabilities given to the success or failure of state transitions."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"wrappers",src:n(76359).A+"",width:"1920",height:"1080"})}),"\n",(0,s.jsx)(t.p,{children:"Mocking can uncover errors in the code in the same way that traditional testing, for\nexample JUnit testing, does. You don't have to wait 30 minutes to realize that you\nforgot to name the new image you saved, and your application can't find it. This\nhappens instantly."}),"\n",(0,s.jsx)(t.p,{children:"Mocking also provides insight into how robust your code is. Parts of the code with\nnarrow paths (little redundancy in making a transition from state A to state B)\nmay perform poorly if a state has a low probability of appearing. You can introduce\nprocess flow errors into the mocks, including sending your process to an unknown state,\nto see how your app will behave."}),"\n",(0,s.jsx)(t.h2,{id:"match-histories",children:"Match Histories"}),"\n",(0,s.jsx)(t.p,{children:"Adding the code to guide the mock involves initializing state objects either with\na history of action results (matches produced by different actions on this object)\nor with probabilities. It is recommended to initialize\nwith action results since they typically lead to more realistic mock runs. When\nusing the state structure builder, states are built by Brobot using match histories.\nThe state structure builder does the following:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"saves screenshots of the target environment"}),"\n",(0,s.jsx)(t.li,{children:"analyzes all selected images on these screenshots"}),"\n",(0,s.jsx)(t.li,{children:"writes Java code to build the state structure, and initializes state objects with match histories taken from the image analysis"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The below example was created by the state structure builder. It initializes the\nimage with a history of Find.ALL operations that were performed during image analysis\non screenshots of the target environment."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"StateImageObject",src:n(3213).A+"",width:"624",height:"555"})}),"\n",(0,s.jsx)(t.h2,{id:"console-output",children:"Console Output"}),"\n",(0,s.jsx)(t.p,{children:"Detailed process output allows the user to follow the process flow and find\nthe sources of potential errors. All the output provided by real runs,\nincluded java console output, are also provided by mock runs. Discovering\na hidden null pointer exception can take place almost immediately as opposed to\nhours into a real run."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"console output",src:n(20464).A+"",width:"1521",height:"1194"})}),"\n",(0,s.jsx)(t.h2,{id:"assertions",children:"Assertions"}),"\n",(0,s.jsx)(t.p,{children:"Brobot has testing capabilities that allow the programmer to compare expected\nresults to the results obtained in a mock run, giving color coded feedback on\nsuccess or failure of the mock run."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"test output",src:n(66930).A+"",width:"1639",height:"1144"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
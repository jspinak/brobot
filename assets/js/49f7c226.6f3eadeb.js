"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1240],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(96540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},43164:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>g,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"testing/fail-safe-image-loading","title":"Fail-Safe Image Loading Strategy","description":"Overview","source":"@site/docs/04-testing/fail-safe-image-loading.md","sourceDirName":"04-testing","slug":"/testing/fail-safe-image-loading","permalink":"/brobot/docs/testing/fail-safe-image-loading","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/fail-safe-image-loading.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Brobot Testing Strategy","permalink":"/brobot/docs/testing/TESTING_STRATEGY"},"next":{"title":"Mat Testing Utilities","permalink":"/brobot/docs/testing/mat-testing-utilities"}}');var s=i(74848),r=i(28453);const l={},a="Fail-Safe Image Loading Strategy",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Core Philosophy",id:"core-philosophy",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Pattern Constructor Behavior",id:"pattern-constructor-behavior",level:3},{value:"Spring Initialization Handling",id:"spring-initialization-handling",level:3},{value:"Error Handling Strategy",id:"error-handling-strategy",level:2},{value:"What Happens When Images Are Missing",id:"what-happens-when-images-are-missing",level:3},{value:"Example Recovery Pattern",id:"example-recovery-pattern",level:3},{value:"Benefits of This Approach",id:"benefits-of-this-approach",level:2},{value:"1. Development Flexibility",id:"1-development-flexibility",level:3},{value:"2. Production Resilience",id:"2-production-resilience",level:3},{value:"3. Testing Advantages",id:"3-testing-advantages",level:3},{value:"4. Clear Debugging",id:"4-clear-debugging",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Check ActionResults",id:"1-always-check-actionresults",level:3},{value:"2. Provide Fallback Patterns",id:"2-provide-fallback-patterns",level:3},{value:"3. Use Descriptive Image Names",id:"3-use-descriptive-image-names",level:3},{value:"4. Monitor Logs in Production",id:"4-monitor-logs-in-production",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Logging Levels",id:"logging-levels",level:3},{value:"Mock Mode Configuration",id:"mock-mode-configuration",level:3},{value:"Testing Considerations",id:"testing-considerations",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Example Test",id:"example-test",level:3},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fail-safe-image-loading-strategy",children:"Fail-Safe Image Loading Strategy"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Brobot implements a fail-safe approach to image loading that ensures automation continues even when images are missing or cannot be loaded. This strategy prioritizes robustness and continuous execution over strict validation."}),"\n",(0,s.jsx)(n.h2,{id:"core-philosophy",children:"Core Philosophy"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Missing images should never break automation execution."})," Instead, they should:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Log clear error messages for debugging"}),"\n",(0,s.jsx)(n.li,{children:"Result in failed pattern matches (not exceptions)"}),"\n",(0,s.jsx)(n.li,{children:"Allow the automation to continue and potentially recover"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach is essential for GUI automation where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Images might be temporarily unavailable during development"}),"\n",(0,s.jsx)(n.li,{children:"Network issues might prevent loading remote images"}),"\n",(0,s.jsx)(n.li,{children:"File system permissions might block access"}),"\n",(0,s.jsx)(n.li,{children:"Images might be intentionally removed or renamed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h3,{id:"pattern-constructor-behavior",children:"Pattern Constructor Behavior"}),"\n",(0,s.jsx)(n.p,{children:"When creating a Pattern with an image path:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Pattern pattern = new Pattern("button.png");\n'})}),"\n",(0,s.jsx)(n.p,{children:"The constructor follows these rules:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"In Mock Mode"}),": Image loading is skipped entirely"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern.getImage()"})," returns ",(0,s.jsx)(n.code,{children:"null"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern.getNameWithoutExtension()"})," returns ",(0,s.jsx)(n.code,{children:'"button"'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern.getImgpath()"})," returns ",(0,s.jsx)(n.code,{children:'"button.png"'})]}),"\n",(0,s.jsx)(n.li,{children:"No file system access occurs"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"In Live Mode - Image Found"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Image is loaded into memory"}),"\n",(0,s.jsx)(n.li,{children:"Pattern is fully functional"}),"\n",(0,s.jsx)(n.li,{children:"Debug log confirms successful loading"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"In Live Mode - Image Missing"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"No exception is thrown"})}),"\n",(0,s.jsxs)(n.li,{children:["Error is logged: ",(0,s.jsx)(n.code,{children:'"Failed to load image: button.png. Pattern will have null image and find operations will fail."'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pattern.getImage()"})," returns ",(0,s.jsx)(n.code,{children:"null"})]}),"\n",(0,s.jsx)(n.li,{children:"Pattern object is still created"}),"\n",(0,s.jsx)(n.li,{children:"Find operations using this pattern will fail gracefully"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"spring-initialization-handling",children:"Spring Initialization Handling"}),"\n",(0,s.jsx)(n.p,{children:"During Spring context initialization, image loading is automatically deferred to avoid unnecessary failures:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"if (isSpringContextInitializing()) {\r\n    // Defer loading until Spring context is ready\r\n    this.needsDelayedLoading = true;\r\n    this.image = null;\r\n    return;\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Images are loaded lazily on first use after Spring initialization completes."}),"\n",(0,s.jsx)(n.h2,{id:"error-handling-strategy",children:"Error Handling Strategy"}),"\n",(0,s.jsx)(n.h3,{id:"what-happens-when-images-are-missing",children:"What Happens When Images Are Missing"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pattern Creation"}),": Succeeds with null image"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Find Operations"}),": Return empty/failed results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Click/Type Actions"}),": Fail gracefully with appropriate ActionResult"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Transitions"}),": May fail if dependent on missing images"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automation Flow"}),": Continues, allowing for recovery logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-recovery-pattern",children:"Example Recovery Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Pattern with potentially missing image\r\nPattern submitButton = new Pattern("submit.png");\r\n\r\n// Find operation handles null image gracefully\r\nActionResult result = action.find(submitButton);\r\n\r\nif (!result.isSuccess()) {\r\n    // Recovery logic\r\n    logger.warn("Submit button not found, trying alternative approach");\r\n    // Try alternative pattern or fallback action\r\n    result = action.find(alternativeSubmitPattern);\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"benefits-of-this-approach",children:"Benefits of This Approach"}),"\n",(0,s.jsx)(n.h3,{id:"1-development-flexibility",children:"1. Development Flexibility"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start writing automation before all images are captured"}),"\n",(0,s.jsx)(n.li,{children:"Test automation logic without complete image sets"}),"\n",(0,s.jsx)(n.li,{children:"Iterate quickly without image dependency blocks"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-production-resilience",children:"2. Production Resilience"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Temporary file system issues don't crash automation"}),"\n",(0,s.jsx)(n.li,{children:"Network failures for remote images are handled gracefully"}),"\n",(0,s.jsx)(n.li,{children:"Partial image sets still allow partial functionality"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-testing-advantages",children:"3. Testing Advantages"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Mock mode tests run without any image files"}),"\n",(0,s.jsx)(n.li,{children:"Unit tests don't require image resources"}),"\n",(0,s.jsx)(n.li,{children:"CI/CD pipelines work without image assets"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-clear-debugging",children:"4. Clear Debugging"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Error logs pinpoint exactly which images failed to load"}),"\n",(0,s.jsx)(n.li,{children:"Automation continues, showing full execution path"}),"\n",(0,s.jsx)(n.li,{children:"Easy to identify and fix missing image issues"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-always-check-actionresults",children:"1. Always Check ActionResults"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"ActionResult result = action.click(pattern);\r\nif (!result.isSuccess()) {\r\n    // Handle the failure appropriately\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-provide-fallback-patterns",children:"2. Provide Fallback Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<Pattern> submitVariations = Arrays.asList(\r\n    new Pattern("submit-button.png"),\r\n    new Pattern("submit-text.png"),\r\n    new Pattern("ok-button.png")\r\n);\r\n\r\n// Try each pattern until one succeeds\r\nfor (Pattern p : submitVariations) {\r\n    if (action.find(p).isSuccess()) {\r\n        action.click(p);\r\n        break;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-use-descriptive-image-names",children:"3. Use Descriptive Image Names"}),"\n",(0,s.jsx)(n.p,{children:"Image names should be self-documenting since they appear in error logs:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.code,{children:"login-submit-button.png"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.code,{children:"main-menu-file-option.png"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c ",(0,s.jsx)(n.code,{children:"img1.png"})]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c ",(0,s.jsx)(n.code,{children:"button.png"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-monitor-logs-in-production",children:"4. Monitor Logs in Production"}),"\n",(0,s.jsx)(n.p,{children:"Set up log monitoring to catch image loading failures:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# application.properties\r\nlogging.level.io.github.jspinak.brobot.model.element.Pattern=ERROR\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(n.h3,{id:"logging-levels",children:"Logging Levels"}),"\n",(0,s.jsx)(n.p,{children:"Control how image loading failures are reported:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# Show all image loading attempts\r\nlogging.level.io.github.jspinak.brobot.model.element.Pattern=DEBUG\r\n\r\n# Show only failures (recommended for production)\r\nlogging.level.io.github.jspinak.brobot.model.element.Pattern=ERROR\r\n\r\n# Suppress image loading logs entirely\r\nlogging.level.io.github.jspinak.brobot.model.element.Pattern=OFF\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mock-mode-configuration",children:"Mock Mode Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# Enable mock mode - no images are loaded\r\nbrobot.mock=true\r\n\r\n# Disable mock mode - images are loaded from disk\r\nbrobot.mock=false\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-considerations",children:"Testing Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Mock mode automatically skips image loading"}),"\n",(0,s.jsx)(n.li,{children:"Tests run without any image files present"}),"\n",(0,s.jsx)(n.li,{children:"Focus on logic, not image availability"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Can verify image loading behavior"}),"\n",(0,s.jsx)(n.li,{children:"Test both success and failure paths"}),"\n",(0,s.jsx)(n.li,{children:"Ensure proper error logging occurs"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-test",children:"Example Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\r\nvoid shouldHandleMissingImageGracefully() {\r\n    // Create pattern with non-existent image\r\n    Pattern pattern = new Pattern("non-existent.png");\r\n\r\n    // Pattern creation succeeds\r\n    assertNotNull(pattern);\r\n\r\n    // But image is null\r\n    assertNull(pattern.getImage());\r\n\r\n    // And name is correctly parsed\r\n    assertEquals("non-existent", pattern.getNameWithoutExtension());\r\n\r\n    // Find operations fail gracefully\r\n    ActionResult result = action.find(pattern);\r\n    assertFalse(result.isSuccess());\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"The fail-safe image loading strategy ensures that Brobot automations are robust, maintainable, and production-ready. By handling missing images gracefully rather than failing fast, automations can:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Continue execution despite missing resources"}),"\n",(0,s.jsx)(n.li,{children:"Provide clear diagnostic information"}),"\n",(0,s.jsx)(n.li,{children:"Support gradual development and deployment"}),"\n",(0,s.jsx)(n.li,{children:"Maintain stability in production environments"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This approach aligns with the reality of GUI automation where image availability cannot always be guaranteed, and partial functionality is often better than complete failure."})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);
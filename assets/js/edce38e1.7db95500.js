"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[307],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},93390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"theoretical-foundations/overall-model","title":"The Overall Model","description":"The paper presents a formal mathematical model of GUI automation that provides a rigorous foundation for the framework. This model unifies the core components into a cohesive system, specifying how the system perceives the GUI, manages state, performs actions, and navigates the interface.","source":"@site/docs/05-theoretical-foundations/overall-model.md","sourceDirName":"05-theoretical-foundations","slug":"/theoretical-foundations/overall-model","permalink":"/brobot/docs/theoretical-foundations/overall-model","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/05-theoretical-foundations/overall-model.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"The Overall Model"},"sidebar":"docSidebar","previous":{"title":"Core Concepts of the Model-Based Approach","permalink":"/brobot/docs/theoretical-foundations/core-concepts"},"next":{"title":"States","permalink":"/brobot/docs/theoretical-foundations/states"}}');var o=n(74848),i=n(28453);const r={sidebar_position:3,title:"The Overall Model"},a="The Overall Model",l={},c=[{value:"Formal Definition",id:"formal-definition",level:2},{value:"Architecture and Data Flow",id:"architecture-and-data-flow",level:2}];function d(e){const t={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"the-overall-model",children:"The Overall Model"})}),"\n",(0,o.jsx)(t.p,{children:"The paper presents a formal mathematical model of GUI automation that provides a rigorous foundation for the framework. This model unifies the core components into a cohesive system, specifying how the system perceives the GUI, manages state, performs actions, and navigates the interface."}),"\n",(0,o.jsx)(t.h2,{id:"formal-definition",children:"Formal Definition"}),"\n",(0,o.jsxs)(t.p,{children:["The overall model of GUI automation is defined as a tuple ",(0,o.jsx)(t.strong,{children:"(\u039e, \u03a9, a, M, \u03c4, \xa7)"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"The components are:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"\u039e"}),": The ",(0,o.jsx)(t.strong,{children:"visible GUI"}),", representing the current pixel output of the screen. This is the real-time data the system uses to perceive and interact with the interface."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"\u03a9"}),": The ",(0,o.jsx)(t.strong,{children:"state structure"}),", which is an abstraction of the GUI environment. This is the developer-defined map of all relevant elements, states, and transitions."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"a"}),": The ",(0,o.jsx)(t.strong,{children:"action model"}),", for performing individual, atomic operations on the GUI like clicking or typing."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"M"}),": The ",(0,o.jsx)(t.strong,{children:"state management system"}),", responsible for maintaining the set of currently active states."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"\u03c4"}),": The ",(0,o.jsx)(t.strong,{children:"transition model"}),", for executing sequences of actions (processes) that lead to changes between states."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"\xa7"}),": The ",(0,o.jsx)(t.strong,{children:"path traversal model"}),", used for finding and executing a path through the state graph to reach a target state."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"architecture-and-data-flow",children:"Architecture and Data Flow"}),"\n",(0,o.jsx)(t.p,{children:"The architecture separates environment representation (Domain Knowledge) from interaction mechanisms (Strategic Knowledge)."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.strong,{children:"Action Model (a)"})," bridges both domains. It receives input from the user's defined state elements, acts on the visible GUI (\u039e), and provides results that inform the State Management System (M)."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.strong,{children:"State Management System (M)"})," tracks the set of active states based on information from actions and transitions."]}),"\n",(0,o.jsxs)(t.li,{children:["The ",(0,o.jsx)(t.strong,{children:"Path Traversal Model (\xa7)"})," takes the current active states from M and uses the map provided by the State Structure (\u03a9) to find and execute a path to a target state."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"This architecture allows the framework to handle the complex, reusable strategic logic while the user's application focuses only on domain knowledge and business logic."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6899],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var o=i(96540);const t={},r=o.createContext(t);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},51424:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"core-library/opencv-mock-system/architecture","title":"OpenCV Mock System Architecture","description":"Overview","source":"@site/docs/03-core-library/opencv-mock-system/architecture.md","sourceDirName":"03-core-library/opencv-mock-system","slug":"/core-library/opencv-mock-system/architecture","permalink":"/brobot/docs/core-library/opencv-mock-system/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/opencv-mock-system/architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Initial State Configuration Guide","permalink":"/brobot/docs/core-library/configuration/initial-states"},"next":{"title":"Screenshot Capture Methods Comparison Study","permalink":"/brobot/docs/core-library/tools/capture-methods-comparison"}}');var t=i(74848),r=i(28453);const a={},l="OpenCV Mock System Architecture",s={},c=[{value:"Overview",id:"overview",level:2},{value:"Architectural Principles",id:"architectural-principles",level:2},{value:"1. Separation of Concerns",id:"1-separation-of-concerns",level:3},{value:"2. Result-Oriented Design",id:"2-result-oriented-design",level:3},{value:"3. Dependency Injection",id:"3-dependency-injection",level:3},{value:"Core Components",id:"core-components",level:2},{value:"Result Objects",id:"result-objects",level:3},{value:"MotionResult",id:"motionresult",level:4},{value:"ColorAnalysisResult",id:"coloranalysisresult",level:4},{value:"Analyzer Interfaces",id:"analyzer-interfaces",level:3},{value:"PixelAnalyzer",id:"pixelanalyzer",level:4},{value:"MotionAnalyzer",id:"motionanalyzer",level:4},{value:"Implementation Classes",id:"implementation-classes",level:3},{value:"MockPixelAnalyzer",id:"mockpixelanalyzer",level:4},{value:"OpenCVPixelAnalyzer",id:"opencvpixelanalyzer",level:4},{value:"Configuration",id:"configuration",level:2},{value:"Spring Configuration",id:"spring-configuration",level:3},{value:"Properties Configuration",id:"properties-configuration",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Production Mode",id:"production-mode",level:3},{value:"Mock Mode",id:"mock-mode",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Contract Testing",id:"contract-testing",level:3},{value:"Performance Testing",id:"performance-testing",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Parallel Implementation",id:"phase-1-parallel-implementation",level:3},{value:"Phase 2: Gradual Migration",id:"phase-2-gradual-migration",level:3},{value:"Phase 3: Deprecation",id:"phase-3-deprecation",level:3},{value:"Phase 4: Removal",id:"phase-4-removal",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Use Abstractions",id:"1-always-use-abstractions",level:3},{value:"2. Configure Mock Behavior",id:"2-configure-mock-behavior",level:3},{value:"3. Use Result Objects",id:"3-use-result-objects",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Mock Data Not Realistic",id:"mock-data-not-realistic",level:4},{value:"Performance Degradation",id:"performance-degradation",level:4},{value:"Test Failures",id:"test-failures",level:4},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"opencv-mock-system-architecture",children:"OpenCV Mock System Architecture"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The OpenCV Mock System provides a comprehensive abstraction layer for OpenCV operations in Brobot, enabling full testability in mock mode while maintaining production functionality."}),"\n",(0,t.jsx)(n.h2,{id:"architectural-principles",children:"Architectural Principles"}),"\n",(0,t.jsx)(n.h3,{id:"1-separation-of-concerns",children:"1. Separation of Concerns"}),"\n",(0,t.jsx)(n.p,{children:"The system separates OpenCV operations into three distinct layers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Abstraction Layer"}),": Interfaces and result objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implementation Layer"}),": Mock and real implementations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration Layer"}),": Spring-based conditional loading"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-result-oriented-design",children:"2. Result-Oriented Design"}),"\n",(0,t.jsx)(n.p,{children:"All OpenCV operations return result objects instead of raw Mat objects:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public interface MotionAnalyzer {\n    MotionResult analyzeMotion(List<BufferedImage> images);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-dependency-injection",children:"3. Dependency Injection"}),"\n",(0,t.jsx)(n.p,{children:"Spring's conditional beans enable seamless switching between mock and real modes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Bean\n@ConditionalOnProperty(name = "brobot.mock", havingValue = "true")\npublic MotionAnalyzer mockMotionAnalyzer() {\n    return new MockMotionAnalyzer();\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(n.h3,{id:"result-objects",children:"Result Objects"}),"\n",(0,t.jsx)(n.h4,{id:"motionresult",children:"MotionResult"}),"\n",(0,t.jsx)(n.p,{children:"Encapsulates motion detection results:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value\n@Builder\n@JsonDeserialize(builder = MotionResult.Builder.class)\npublic class MotionResult implements Serializable {\n    private final boolean motionDetected;\n    private final List<Region> motionRegions;\n    private final double confidenceScore;\n    private final byte[] changeMask;\n    private final MotionMetadata metadata;\n    \n    @JsonPOJOBuilder(withPrefix = "")\n    public static class Builder {\n        // Lombok generates implementation\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"coloranalysisresult",children:"ColorAnalysisResult"}),"\n",(0,t.jsx)(n.p,{children:"Encapsulates color analysis results:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value\n@Builder\n@JsonDeserialize(builder = ColorAnalysisResult.Builder.class)\npublic class ColorAnalysisResult implements Serializable {\n    private final Map<String, Double> colorHistogram;\n    private final List<DominantColor> dominantColors;\n    private final List<ColorRegion> colorRegions;\n    private final ColorStatistics statistics;\n    \n    @JsonPOJOBuilder(withPrefix = "")\n    public static class Builder {\n        // Lombok generates implementation\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"analyzer-interfaces",children:"Analyzer Interfaces"}),"\n",(0,t.jsx)(n.h4,{id:"pixelanalyzer",children:"PixelAnalyzer"}),"\n",(0,t.jsx)(n.p,{children:"Base interface for pixel-level operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public interface PixelAnalyzer {\n    MotionResult detectChanges(List<BufferedImage> images, AnalysisOptions options);\n    ColorAnalysisResult analyzeColors(BufferedImage image, ColorOptions options);\n    ContourResult findContours(BufferedImage image, ContourOptions options);\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"motionanalyzer",children:"MotionAnalyzer"}),"\n",(0,t.jsx)(n.p,{children:"Specialized interface for motion detection:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public interface MotionAnalyzer {\n    MotionResult analyzeMotion(List<BufferedImage> images);\n    MotionResult analyzeMotionWithOptions(List<BufferedImage> images, MotionOptions options);\n    List<MotionEvent> trackMotion(List<BufferedImage> images, TrackingOptions options);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implementation-classes",children:"Implementation Classes"}),"\n",(0,t.jsx)(n.h4,{id:"mockpixelanalyzer",children:"MockPixelAnalyzer"}),"\n",(0,t.jsx)(n.p,{children:"Provides configurable mock responses:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\n@ConditionalOnProperty(name = "brobot.mock", havingValue = "true")\npublic class MockPixelAnalyzer implements PixelAnalyzer {\n    \n    private final MockDataGenerator dataGenerator;\n    private final MockConfiguration config;\n    \n    @Override\n    public MotionResult detectChanges(List<BufferedImage> images, AnalysisOptions options) {\n        // Generate realistic mock data based on configuration\n        return dataGenerator.generateMotionResult(images.size(), options);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"opencvpixelanalyzer",children:"OpenCVPixelAnalyzer"}),"\n",(0,t.jsx)(n.p,{children:"Executes real OpenCV operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\n@ConditionalOnProperty(name = "brobot.mock", havingValue = "false", matchIfMissing = true)\npublic class OpenCVPixelAnalyzer implements PixelAnalyzer {\n    \n    @Override\n    public MotionResult detectChanges(List<BufferedImage> images, AnalysisOptions options) {\n        // Convert to Mat objects\n        List<Mat> mats = images.stream()\n            .map(ImageConverter::bufferedImageToMat)\n            .collect(Collectors.toList());\n        \n        // Perform OpenCV operations\n        Mat changeMask = performChangeDetection(mats, options);\n        \n        // Convert to result object\n        return buildMotionResult(changeMask, options);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"spring-configuration",children:"Spring Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableConfigurationProperties(OpenCVMockProperties.class)\npublic class OpenCVMockConfiguration {\n    \n    @Bean\n    @ConditionalOnMissingBean\n    public MockDataGenerator mockDataGenerator(OpenCVMockProperties properties) {\n        return new MockDataGenerator(properties);\n    }\n    \n    @Bean\n    @ConditionalOnProperty(name = "brobot.mock", havingValue = "true")\n    public PixelAnalyzer mockPixelAnalyzer(MockDataGenerator generator) {\n        return new MockPixelAnalyzer(generator);\n    }\n    \n    @Bean\n    @ConditionalOnProperty(name = "brobot.mock", havingValue = "false", matchIfMissing = true)\n    public PixelAnalyzer openCVPixelAnalyzer() {\n        return new OpenCVPixelAnalyzer();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"properties-configuration",children:"Properties Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"# Enable mock mode\nbrobot.mock=true\n\n# Mock data generation settings\nbrobot.opencv.mock.motion.default-confidence=0.85\nbrobot.opencv.mock.motion.region-count=3\nbrobot.opencv.mock.motion.min-region-size=50\n\n# Record and replay settings\nbrobot.opencv.mock.replay.enabled=false\nbrobot.opencv.mock.replay.directory=src/test/resources/opencv-recordings\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,t.jsx)(n.h3,{id:"production-mode",children:"Production Mode"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Application calls analyzer interface method"}),"\n",(0,t.jsx)(n.li,{children:"OpenCVPixelAnalyzer receives request"}),"\n",(0,t.jsx)(n.li,{children:"Converts BufferedImages to Mat objects"}),"\n",(0,t.jsx)(n.li,{children:"Executes OpenCV operations"}),"\n",(0,t.jsx)(n.li,{children:"Converts results to result objects"}),"\n",(0,t.jsx)(n.li,{children:"Returns result to application"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mock-mode",children:"Mock Mode"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Application calls analyzer interface method"}),"\n",(0,t.jsx)(n.li,{children:"MockPixelAnalyzer receives request"}),"\n",(0,t.jsx)(n.li,{children:"Checks for recorded data (if replay enabled)"}),"\n",(0,t.jsx)(n.li,{children:"Generates mock data if no recording exists"}),"\n",(0,t.jsx)(n.li,{children:"Returns result to application"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,t.jsx)(n.h3,{id:"contract-testing",children:"Contract Testing"}),"\n",(0,t.jsx)(n.p,{children:"Ensures mock and real implementations maintain consistency:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@ParameterizedTest\n@ValueSource(booleans = {true, false})\nvoid testMotionDetectionContract(boolean useMock) {\n    FrameworkSettings.mock = useMock;\n    PixelAnalyzer analyzer = getAnalyzer();\n    \n    List<BufferedImage> images = loadTestImages();\n    MotionResult result = analyzer.detectChanges(images, defaultOptions());\n    \n    assertNotNull(result);\n    assertNotNull(result.getMotionRegions());\n    assertTrue(result.getConfidenceScore() >= 0 && result.getConfidenceScore() <= 1);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,t.jsx)(n.p,{children:"Validates mock performance characteristics:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testMockPerformance() {\n    FrameworkSettings.mock = true;\n    PixelAnalyzer analyzer = getAnalyzer();\n    \n    long startTime = System.currentTimeMillis();\n    for (int i = 0; i < 1000; i++) {\n        analyzer.detectChanges(images, options);\n    }\n    long duration = System.currentTimeMillis() - startTime;\n    \n    assertTrue(duration < 1000, "1000 operations should complete in under 1 second");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,t.jsx)(n.h3,{id:"phase-1-parallel-implementation",children:"Phase 1: Parallel Implementation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"New abstractions work alongside existing code"}),"\n",(0,t.jsx)(n.li,{children:"Feature flags control adoption"}),"\n",(0,t.jsx)(n.li,{children:"Monitoring compares results"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"phase-2-gradual-migration",children:"Phase 2: Gradual Migration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Components migrated one at a time"}),"\n",(0,t.jsx)(n.li,{children:"Extensive testing at each step"}),"\n",(0,t.jsx)(n.li,{children:"Rollback capability maintained"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"phase-3-deprecation",children:"Phase 3: Deprecation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Old direct OpenCV usage deprecated"}),"\n",(0,t.jsx)(n.li,{children:"Migration guides provided"}),"\n",(0,t.jsx)(n.li,{children:"Support period defined"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"phase-4-removal",children:"Phase 4: Removal"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Deprecated code removed"}),"\n",(0,t.jsx)(n.li,{children:"Full adoption of new system"}),"\n",(0,t.jsx)(n.li,{children:"Documentation updated"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-always-use-abstractions",children:"1. Always Use Abstractions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good\n@Autowired\nprivate MotionAnalyzer motionAnalyzer;\n\npublic void detectMotion() {\n    MotionResult result = motionAnalyzer.analyzeMotion(images);\n}\n\n// Bad\npublic void detectMotion() {\n    Mat mat = Imgcodecs.imread(path);  // Direct OpenCV usage\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-configure-mock-behavior",children:"2. Configure Mock Behavior"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@TestConfiguration\npublic class TestConfig {\n    @Bean\n    @Primary\n    public MockConfiguration mockConfiguration() {\n        return MockConfiguration.builder()\n            .defaultMotionConfidence(0.9)\n            .generateRealisticNoise(true)\n            .build();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-result-objects",children:"3. Use Result Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Process results through the abstraction\nMotionResult result = analyzer.detectMotion(images);\nif (result.isMotionDetected()) {\n    result.getMotionRegions().forEach(region -> {\n        // Process each motion region\n    });\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(n.h4,{id:"mock-data-not-realistic",children:"Mock Data Not Realistic"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adjust MockConfiguration parameters"}),"\n",(0,t.jsx)(n.li,{children:"Enable record/replay for real data"}),"\n",(0,t.jsx)(n.li,{children:"Use custom mock data generators"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"performance-degradation",children:"Performance Degradation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check circuit breaker status"}),"\n",(0,t.jsx)(n.li,{children:"Review fallback configurations"}),"\n",(0,t.jsx)(n.li,{children:"Monitor resource usage"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"test-failures",children:"Test Failures"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify mock mode settings"}),"\n",(0,t.jsx)(n.li,{children:"Check contract test results"}),"\n",(0,t.jsx)(n.li,{children:"Review configuration properties"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/brobot/docs/core-library/testing/motion-detection-testing",children:"Motion Detection Testing Guide"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);
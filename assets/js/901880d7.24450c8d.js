"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2364],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},68844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core-library/tutorials/tutorial-basics/get-island-type","title":"Get Island Type","description":"Here we determine the island type from the on-screen text.","source":"@site/versioned_docs/version-1.0.7/03-core-library/tutorials/tutorial-basics/get-island-type.md","sourceDirName":"03-core-library/tutorials/tutorial-basics","slug":"/core-library/tutorials/tutorial-basics/get-island-type","permalink":"/brobot/docs/1.0.7/core-library/tutorials/tutorial-basics/get-island-type","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.7/03-core-library/tutorials/tutorial-basics/get-island-type.md","tags":[],"version":"1.0.7","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docSidebar","previous":{"title":"Define the Capture Region","permalink":"/brobot/docs/1.0.7/core-library/tutorials/tutorial-basics/define-capture-region"},"next":{"title":"Save Labeled Images","permalink":"/brobot/docs/1.0.7/core-library/tutorials/tutorial-basics/save-labeled-image"}}');var a=n(74848),s=n(28453);const r={sidebar_position:7},o="Get Island Type",l={},d=[{value:"Go to a new Island and Get its Type",id:"go-to-a-new-island-and-get-its-type",level:2},{value:"Capturing Text",id:"capturing-text",level:2},{value:"Converting Text to Island Types",id:"converting-text-to-island-types",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"get-island-type",children:"Get Island Type"})}),"\n",(0,a.jsx)(t.p,{children:"Here we determine the island type from the on-screen text."}),"\n",(0,a.jsx)(t.h2,{id:"go-to-a-new-island-and-get-its-type",children:"Go to a new Island and Get its Type"}),"\n",(0,a.jsx)(t.p,{children:"Here we call the transition directly instead of using Brobot's state management system\nby calling StateTransitionsManagement.openState(ISLAND). Normally we would use the\nstate management system, which takes care of everything related to transitions, including\nfinding and traversing paths. In this case, the state management system would not do\nanything because the Island state is already active. In this special situation, we want to\nperform the transition activities from the World state to the Island state even though the\nIsland state is already present. The reason we want to do this is that this transition will\ntake us to a different island. The Island state does not know whether the specific island\nhas changed. It only recognizes that it is on an island."}),"\n",(0,a.jsx)(t.p,{children:"If the text we found on-screen contains any of these substrings,\nwe return the corresponding island type. Otherwise, we return an\nempty string."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public String getIsland() {\n    worldTransitions.goToIsland();\n    String textRead = getIslandType();\n    for (Map.Entry<String, String> type : islandTypes.entrySet()) {\n        if (textRead.contains(type.getKey())) return type.getValue();\n    }\n    return "";\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"capturing-text",children:"Capturing Text"}),"\n",(0,a.jsx)(t.p,{children:"With the following action we retrieve the text found where the island\nnames are. We know that at least one name was already found when\nthe state management system opened the Island state, since the IslandName\nvariable is the only StateImageObject that identifies the Island state.\nSince the IslandName has already been found once, its SearchRegion will be defined\nas the region where it was first found. We can then use this SearchRegion to retrieve\nthe name of the new island type."}),"\n",(0,a.jsx)(t.p,{children:"Text extraction is automatically included in Find operations as of version 1.0.7.\nWe use the ALL_WORDS find strategy to extract all text from the defined region."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'private String getIslandType() {\n    ActionOptions findText = new ActionOptions.Builder()\n            .setAction(ActionOptions.Action.FIND)\n            .setFind(ActionOptions.Find.ALL_WORDS)\n            .setGetTextUntil(ActionOptions.GetTextUntil.TEXT_APPEARS)\n            .setUseDefinedRegion(true)\n            .setMaxWait(3)\n            .setPauseBeforeBegin(3)\n            .build();\n    ObjectCollection islandName = new ObjectCollection.Builder()\n            .withRegions(island.getIslandName().getSearchRegion())\n            .build();\n    Matches matches = action.perform(findText, islandName);\n    // Combine all found words into a single string\n    return matches.getMatchList().stream()\n            .map(Match::getText)\n            .collect(Collectors.joining(" "));\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"converting-text-to-island-types",children:"Converting Text to Island Types"}),"\n",(0,a.jsx)(t.p,{children:'First, we create a variable that maps pieces of the island type\nwords that are representative of these words. For example, "Mine"\nis representative of the type Mines; if our text retrieval function\nfinds the word "Minez", we can assume that the real text is "Mines",\nsince the string "Mine" is part of "Minez".'}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'private Map<String, String> islandTypes = new HashMap<>();\n\n// Initialize the map\n{\n    islandTypes.put("Burg", "Castle");\n    islandTypes.put("Mine", "Mines");\n    islandTypes.put("Farm", "Farms");\n    islandTypes.put("Moun", "Mountains");\n    islandTypes.put("Fore", "Forest");\n    islandTypes.put("Lake", "Lakes");\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3665],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},61384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"testing/unit-testing","title":"Unit Testing","description":"Unit testing in Brobot ensures reproducible results by using static screenshots instead of live environments. This approach provides deterministic testing conditions where Find operations execute against known screen states while other actions are mocked.","source":"@site/docs/04-testing/unit-testing.md","sourceDirName":"04-testing","slug":"/testing/unit-testing","permalink":"/brobot/docs/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/unit-testing.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"Profile-Based Architecture","permalink":"/brobot/docs/testing/profile-based-architecture"},"next":{"title":"Action Recording","permalink":"/brobot/docs/testing/action-recording"}}');var i=t(74848),r=t(28453);const o={sidebar_position:3},a="Unit Testing",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Base Test Class",id:"base-test-class",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Automatic Mock Mode Configuration",id:"automatic-mock-mode-configuration",level:3},{value:"Manual Configuration via Properties",id:"manual-configuration-via-properties",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Testing with Multiple Screenshots",id:"testing-with-multiple-screenshots",level:3},{value:"Working with ActionResult",id:"working-with-actionresult",level:2},{value:"Mock Behavior Verification",id:"mock-behavior-verification",level:2},{value:"Advanced Testing Patterns",id:"advanced-testing-patterns",level:2},{value:"Pattern-Based Testing",id:"pattern-based-testing",level:3},{value:"Custom Assertions",id:"custom-assertions",level:3},{value:"API Migration Notes",id:"api-migration-notes",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"unit-testing",children:"Unit Testing"})}),"\n",(0,i.jsx)(n.p,{children:"Unit testing in Brobot ensures reproducible results by using static screenshots instead of live environments. This approach provides deterministic testing conditions where Find operations execute against known screen states while other actions are mocked."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Brobot unit testing combines:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Centralized mock mode management"})," via ",(0,i.jsx)(n.code,{children:"MockModeManager"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real Find operations"})," on static screenshots"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mocked actions"})," (click, drag, type, etc.) for safety and speed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Deterministic results"})," for reliable test assertions"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"base-test-class",children:"Base Test Class"}),"\n",(0,i.jsxs)(n.p,{children:["All Brobot unit tests should extend ",(0,i.jsx)(n.code,{children:"BrobotTestBase"})," for automatic mock mode configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\nimport org.junit.jupiter.api.Test;\n\npublic class MyUnitTest extends BrobotTestBase {\n    \n    @Test\n    public void testFeature() {\n        // Mock mode is automatically enabled\n        // Test runs safely in headless environments\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"BrobotTestBase"})," automatically:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Enables mock mode via ",(0,i.jsx)(n.code,{children:"MockModeManager"})]}),"\n",(0,i.jsx)(n.li,{children:"Configures fast mock timings (0.01-0.04s)"}),"\n",(0,i.jsx)(n.li,{children:"Ensures headless compatibility"}),"\n",(0,i.jsx)(n.li,{children:"Prevents AWTException errors"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"automatic-mock-mode-configuration",children:"Automatic Mock Mode Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["When extending ",(0,i.jsx)(n.code,{children:"BrobotTestBase"}),", mock mode is automatically configured via ",(0,i.jsx)(n.code,{children:"MockModeManager"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class LoginTest extends BrobotTestBase {\n    // No manual mock configuration needed!\n    \n    @Test\n    public void testLogin() {\n        // Mock mode is already enabled\n        assertTrue(MockModeManager.isMockMode());\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"manual-configuration-via-properties",children:"Manual Configuration via Properties"}),"\n",(0,i.jsxs)(n.p,{children:["If not using ",(0,i.jsx)(n.code,{children:"BrobotTestBase"}),", configure through ",(0,i.jsx)(n.code,{children:"application.properties"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"# Enable mock mode for unit testing\nbrobot.mock.mode=true\n# These are automatically synchronized by MockModeManager:\nbrobot.mock=true\nbrobot.mock=true\n\n# Screenshot configuration\nbrobot.screenshot.path=screenshots/\nbrobot.screenshot.filename=screen\n\n# Testing settings\nbrobot.testing.iteration=1\nbrobot.testing.send-logs=true\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or using YAML:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  core:\n    mock: true\n  screenshot:\n    path: screenshots/\n    filename: screen\n  testing:\n    iteration: 1\n    send-logs: true\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["For Spring Boot tests, extend ",(0,i.jsx)(n.code,{children:"BrobotTestBase"})," and use property configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@TestPropertySource(properties = {\n    "brobot.screenshot.path=src/test/resources/screenshots/"\n})\nclass UnitTest extends BrobotTestBase {\n    // Mock mode is automatically enabled by BrobotTestBase\n    // Additional properties are handled by Spring\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"For non-Spring tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class SimpleUnitTest extends BrobotTestBase {\n    \n    @BeforeEach\n    @Override\n    public void setupTest() {\n        super.setupTest(); // Enables mock mode via MockModeManager\n        // Add any additional setup\n    }\n}```\n\n## Test Structure\n\n### Basic Unit Test Example\n\n```java\n@SpringBootTest\n@TestPropertySource(properties = {\n    "brobot.screenshot.test-path=src/test/resources/screenshots/"\n})\nclass LoginAutomationTest extends BrobotTestBase {\n\n    @Autowired\n    private Action action;\n    \n    // Mock mode is automatically enabled by BrobotTestBase\n    \n    @Test\n    void testSuccessfulLogin() {\n        // Arrange - Create state objects\n        StateImage usernameField = new StateImage.Builder()\n            .addPattern("username_field")\n            .build();\n        StateImage passwordField = new StateImage.Builder()\n            .addPattern("password_field")\n            .build();\n        StateImage loginButton = new StateImage.Builder()\n            .addPattern("login_button")\n            .build();\n        \n        // Act - Perform actions\n        // Find and click username field\n        PatternFindOptions findOptions = new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.BEST)\n            .build();\n        ActionResult usernameResult = action.perform(findOptions, usernameField);\n        \n        // Type username\n        TypeOptions typeOptions = new TypeOptions.Builder()\n            .setTypeDelay(0.05)\n            .build();\n        action.perform(typeOptions, new ObjectCollection.Builder()\n            .withStrings("testuser")\n            .build());\n        \n        // Find and click password field\n        ActionResult passwordResult = action.perform(findOptions, passwordField);\n        action.perform(typeOptions, new ObjectCollection.Builder()\n            .withStrings("testpass")\n            .build());\n        \n        // Click login button\n        ClickOptions clickOptions = new ClickOptions.Builder()\n            .setClickType(ClickOptions.Type.LEFT)\n            .build();\n        ActionResult loginResult = action.perform(clickOptions, loginButton);\n        \n        // Assert\n        assertTrue(usernameResult.isSuccess());\n        assertTrue(passwordResult.isSuccess());\n        assertTrue(loginResult.isSuccess());\n        assertEquals(1, loginResult.size());\n        assertThat(loginResult.getBestMatch()).isPresent();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"testing-with-multiple-screenshots",children:"Testing with Multiple Screenshots"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testNavigationFlow() {\n    // Screenshots configured via properties file\n    // brobot.screenshot.path=src/test/resources/screenshots/\n    // Place files: step1_login.png, step2_dashboard.png, step3_settings.png\n    \n    // Create find options for navigation\n    PatternFindOptions findOptions = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.8)\n        .build();\n    \n    // Test navigation sequence\n    // Step 1: Login\n    StateImage loginButton = new StateImage.Builder()\n        .addPattern("login_button.png")\n        .build();\n    ActionResult loginResult = action.perform(findOptions, loginButton);\n    action.perform(new ClickOptions.Builder().build(), loginButton);\n    \n    // Step 2: Navigate to dashboard\n    StateImage dashboardLink = new StateImage.Builder()\n        .addPattern("dashboard_link")\n        .build();\n    ActionResult dashboardResult = action.perform(findOptions, dashboardLink);\n    action.perform(new ClickOptions.Builder().build(), dashboardLink);\n    \n    // Step 3: Open settings\n    StateImage settingsIcon = new StateImage.Builder()\n        .addPattern("settings_icon.png")\n        .build();\n    ActionResult settingsResult = action.perform(findOptions, settingsIcon);\n    action.perform(new ClickOptions.Builder().build(), settingsIcon);\n    \n    // Verify each step\n    assertTrue(loginResult.isSuccess());\n    assertTrue(dashboardResult.isSuccess());\n    assertTrue(settingsResult.isSuccess());\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-actionresult",children:"Working with ActionResult"}),"\n",(0,i.jsxs)(n.p,{children:["The modern API uses ",(0,i.jsx)(n.code,{children:"ActionResult"})," instead of the deprecated ",(0,i.jsx)(n.code,{children:"MatchSnapshot"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testFindOperations() {\n    // Create find configuration\n    PatternFindOptions findOptions = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.7)\n        .build();\n    \n    // Perform find action\n    StateImage submitButton = new StateImage.Builder()\n        .addPattern("submit_button.png")\n        .build();\n    ActionResult result = action.perform(findOptions, submitButton);\n    \n    // Test result properties\n    assertFalse(result.isEmpty());\n    assertEquals(2, result.size());\n    \n    // Access best match\n    Optional<Match> bestMatch = result.getBestMatch();\n    assertTrue(bestMatch.isPresent());\n    assertTrue(bestMatch.get().getScore() > 0.8);\n    \n    // Test specific regions\n    List<Region> regions = result.getMatchRegions();\n    assertThat(regions).hasSize(2);\n    \n    // Test filtering\n    ActionResult highScoreMatches = new ActionResult();\n    result.getMatchList().stream()\n        .filter(match -> match.getScore() > 0.9)\n        .forEach(highScoreMatches::add);\n    assertTrue(highScoreMatches.size() > 0);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"mock-behavior-verification",children:"Mock Behavior Verification"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@TestPropertySource(properties = {\n    "brobot.mock.time-click=0.1",\n    "brobot.mock.time-find-first=0.2"\n})\nvoid testMockTimings() {\n    long startTime = System.currentTimeMillis();\n    \n    // Perform mocked actions\n    PatternFindOptions findOptions = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.FIRST)\n        .build();\n    \n    StateImage button = new StateImage.Builder()\n        .addPattern("button.png")\n        .build();\n    ActionResult findResult = action.perform(findOptions, button);\n    \n    ClickOptions clickOptions = new ClickOptions.Builder().build();\n    ActionResult clickResult = action.perform(clickOptions, button);\n    \n    long duration = System.currentTimeMillis() - startTime;\n    \n    // Verify mock timing (should be approximately 300ms)\n    assertTrue(duration >= 250 && duration <= 350);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-testing-patterns",children:"Advanced Testing Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"pattern-based-testing",children:"Pattern-Based Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\nvoid testPatternMatching() {\n    // Test with different similarity thresholds\n    PatternFindOptions strictFind = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.95)\n        .build();\n    \n    PatternFindOptions relaxedFind = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.70)\n        .build();\n    \n    StateImage targetPattern = new StateImage.Builder()\n        .addPattern("target_button.png")\n        .build();\n    \n    // Test strict matching\n    ActionResult strictResult = action.perform(strictFind, targetPattern);\n    assertTrue(strictResult.size() <= 1, "Strict matching should find at most one match");\n    \n    // Test relaxed matching\n    ActionResult relaxedResult = action.perform(relaxedFind, targetPattern);\n    assertTrue(relaxedResult.size() >= strictResult.size(), \n        "Relaxed matching should find at least as many matches");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-assertions",children:"Custom Assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class BrobotAssertions {\n    \n    public static void assertFoundInRegion(ActionResult result, Region expectedRegion) {\n        assertTrue(result.isSuccess(), "Expected to find matches");\n        \n        boolean foundInRegion = result.getMatchList().stream()\n            .anyMatch(match -> expectedRegion.contains(match.getRegion()));\n            \n        assertTrue(foundInRegion, "No matches found in expected region");\n    }\n    \n    public static void assertMinimumScore(ActionResult result, double minScore) {\n        assertTrue(result.getBestMatch().isPresent(), "No matches found");\n        assertTrue(\n            result.getBestMatch().get().getScore() >= minScore,\n            String.format("Best match score %.3f below minimum %.3f", \n                result.getBestMatch().get().getScore(), minScore)\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"api-migration-notes",children:"API Migration Notes"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Important"}),": The Brobot testing framework is transitioning from legacy ",(0,i.jsx)(n.code,{children:"ActionOptions"})," to modern ",(0,i.jsx)(n.code,{children:"ActionConfig"})," classes. While the examples above show the recommended modern approach:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"PatternFindOptions"}),", ",(0,i.jsx)(n.code,{children:"ClickOptions"}),", etc. instead of ",(0,i.jsx)(n.code,{children:"ActionOptions"})]}),"\n",(0,i.jsx)(n.li,{children:"Configure via properties files rather than programmatic setup"}),"\n",(0,i.jsxs)(n.li,{children:["Some internal components (like ",(0,i.jsx)(n.code,{children:"ActionHistory"}),") still use legacy APIs during the transition"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This migration ensures better type safety, clearer separation of concerns, and more maintainable test code."}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Modern API Usage"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use ActionConfig subclasses (PatternFindOptions, ClickOptions) instead of ActionOptions"}),"\n",(0,i.jsx)(n.li,{children:"Configure tests through properties files"}),"\n",(0,i.jsxs)(n.li,{children:["Leverage action chaining with ",(0,i.jsx)(n.code,{children:".then()"})," for complex test scenarios"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Screenshot Management"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use descriptive filenames (e.g., ",(0,i.jsx)(n.code,{children:"login_page_chrome.png"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Keep screenshots in ",(0,i.jsx)(n.code,{children:"src/test/resources/screenshots/"})]}),"\n",(0,i.jsx)(n.li,{children:"Version control your test screenshots"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Isolation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Configure screenshots via properties rather than programmatic setup"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"@TestPropertySource"})," for test-specific settings"]}),"\n",(0,i.jsxs)(n.li,{children:["Avoid manual configuration in ",(0,i.jsx)(n.code,{children:"@BeforeEach"})," methods"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Assertions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test both positive and negative cases"}),"\n",(0,i.jsx)(n.li,{children:"Verify match scores and regions using ActionResult methods"}),"\n",(0,i.jsx)(n.li,{children:"Use custom assertion methods for common patterns"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mock Configuration"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Set realistic mock timings via properties"}),"\n",(0,i.jsx)(n.li,{children:"Test timeout scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Verify mock behavior in CI environments"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No matches found"}),": Verify screenshot path configuration in properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unexpected results"}),": Check mock mode is enabled (",(0,i.jsx)(n.code,{children:"brobot.mock=true"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slow tests"}),": Adjust mock timings in properties for faster execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flaky tests"}),": Ensure screenshots represent stable UI states"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API conflicts"}),": Use ActionConfig classes instead of deprecated ActionOptions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
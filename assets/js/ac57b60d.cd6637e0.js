"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1535],{27514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"introduction/core-features/testing/unit-testing","title":"Unit Testing","description":"In unit testing, it\'s important that","source":"@site/versioned_docs/version-1.0.6/introduction/core-features/testing/unit-testing.md","sourceDirName":"introduction/core-features/testing","slug":"/introduction/core-features/testing/unit-testing","permalink":"/brobot/docs/1.0.6/introduction/core-features/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/introduction/core-features/testing/unit-testing.md","tags":[],"version":"1.0.6","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"Integration Testing","permalink":"/brobot/docs/1.0.6/introduction/core-features/testing/integration-testing"},"next":{"title":"Action Recording","permalink":"/brobot/docs/1.0.6/introduction/core-features/testing/action-recording"}}');var i=n(74848),o=n(28453);const r={sidebar_position:3},c="Unit Testing",a={},d=[];function h(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"unit-testing",children:"Unit Testing"})}),"\n",(0,i.jsxs)(t.p,{children:["In unit testing, it's important that\nthe results are reproducible since they will be measured against pre-determined,\nexpected results. This is achieved in Brobot by using screenshots to represent\nan unchanging model of the environment. Unit testing is performed in Brobot as a\ncombination of a mock and a real run, and uses screenshots instead of a\nlive environment. Find operations are performed with real execution on the specified\nscreenshots. Setting ",(0,i.jsx)(t.code,{children:"BrobotSettings.mock"})," to ",(0,i.jsx)(t.code,{children:"true"})," will make sure that all other\nactions will be mocked. The screenshots do not have to be on screen to be used with\nFind operations; they will be taken from the folder specified by\n",(0,i.jsx)(t.code,{children:"BrobotSettings.screenshotPath"}),". The default is the folder\n",(0,i.jsx)(t.code,{children:"screenshots"})," in the root project directory.\nThis folder is the same used by the State Structure builder. The default filename in\nthis folder is ",(0,i.jsx)(t.code,{children:"screen"}),"; it can be changed with the variable\n",(0,i.jsx)(t.code,{children:"BrobotSettings.screenshotFilename"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Unit tests in Brobot are typically run with a separate Spring Boot executable, or\n",(0,i.jsx)(t.code,{children:"@SpringBootApplication"})," file. They also require their own classes, as in traditional\ntests such as JUnit. In the test class, the screenshot to be used should be specified\nin the code. The class TestOutput can be used to compare the results with the\nexpected results. Below is a simple example of a unit test in which the screenshot\nis set, one method is tested, and the results are compared with the expected results\nand printed to the console."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'BrobotSettings.screenshot = "screen1";\nclassToTest.methodToTest();\ntestOutput.assertTrue(...);\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);
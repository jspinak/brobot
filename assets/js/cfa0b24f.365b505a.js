"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6589],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},32371:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"testing/mock-mode-guide","title":"Mock Mode Guide","description":"Understanding Mock Mode in Brobot","source":"@site/docs/04-testing/mock-mode-guide.md","sourceDirName":"04-testing","slug":"/testing/mock-mode-guide","permalink":"/brobot/docs/testing/mock-mode-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/mock-mode-guide.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Mock Mode Guide"},"sidebar":"docSidebar","previous":{"title":"Integration Testing","permalink":"/brobot/docs/testing/integration-testing"},"next":{"title":"ActionHistory and Mock Snapshots","permalink":"/brobot/docs/testing/actionhistory-mock-snapshots"}}');var s=t(74848),o=t(28453);const a={sidebar_position:2,title:"Mock Mode Guide"},r="Mock Mode Guide",l={},c=[{value:"Understanding Mock Mode in Brobot",id:"understanding-mock-mode-in-brobot",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"What Mock Mode Does",id:"what-mock-mode-does",level:3},{value:"State Probabilities",id:"state-probabilities",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Enabling Mock Mode",id:"enabling-mock-mode",level:3},{value:"Property-Based Configuration (Recommended)",id:"property-based-configuration-recommended",level:4},{value:"Programmatic Configuration",id:"programmatic-configuration",level:4},{value:"Action Success Probability",id:"action-success-probability",level:3},{value:"Setting State Probabilities",id:"setting-state-probabilities",level:3},{value:"1. State-Level Configuration (Recommended)",id:"1-state-level-configuration-recommended",level:4},{value:"2. Centralized Configuration",id:"2-centralized-configuration",level:4},{value:"Testing State Transitions",id:"testing-state-transitions",level:2},{value:"Deterministic Flow Testing",id:"deterministic-flow-testing",level:3},{value:"Stochastic Testing",id:"stochastic-testing",level:3},{value:"Dynamic State Simulation",id:"dynamic-state-simulation",level:2},{value:"Simulating State Changes",id:"simulating-state-changes",level:3},{value:"Simulating Temporal Behaviors",id:"simulating-temporal-behaviors",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use 100% Probability for Flow Testing",id:"1-use-100-probability-for-flow-testing",level:3},{value:"2. Set Initial States Appropriately",id:"2-set-initial-states-appropriately",level:3},{value:"3. Document Mock Behavior",id:"3-document-mock-behavior",level:3},{value:"4. Separate Mock Configuration",id:"4-separate-mock-configuration",level:3},{value:"5. Clean State Between Tests",id:"5-clean-state-between-tests",level:3},{value:"Testing Patterns",id:"testing-patterns",level:2},{value:"Pattern 1: Simple Flow Test",id:"pattern-1-simple-flow-test",level:3},{value:"Pattern 2: Error Recovery Test",id:"pattern-2-error-recovery-test",level:3},{value:"Pattern 3: State Verification",id:"pattern-3-state-verification",level:3},{value:"Debugging Mock Tests",id:"debugging-mock-tests",level:2},{value:"Enable Verbose Logging",id:"enable-verbose-logging",level:3},{value:"Log State Transitions",id:"log-state-transitions",level:3},{value:"Verify Mock Configuration",id:"verify-mock-configuration",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:2},{value:"Issue: States Not Being Found",id:"issue-states-not-being-found",level:3},{value:"Issue: Wrong Initial State",id:"issue-wrong-initial-state",level:3},{value:"Issue: Transitions Not Working",id:"issue-transitions-not-working",level:3},{value:"Issue: Mock Mode Not Activating",id:"issue-mock-mode-not-activating",level:3},{value:"Enhanced Mock Infrastructure",id:"enhanced-mock-infrastructure",level:2},{value:"Grid Operations Support",id:"grid-operations-support",level:3},{value:"Scene and Color Analysis Mocking",id:"scene-and-color-analysis-mocking",level:3},{value:"Test Base Class - BrobotTestBase",id:"test-base-class---brobottestbase",level:3},{value:"Performance Benefits",id:"performance-benefits",level:2},{value:"Common Pitfalls and Solutions",id:"common-pitfalls-and-solutions",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mock-mode-guide",children:"Mock Mode Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"understanding-mock-mode-in-brobot",children:"Understanding Mock Mode in Brobot"}),"\n",(0,s.jsx)(n.p,{children:"Brobot's mock mode provides a powerful testing framework that simulates GUI automation without requiring actual screen interaction. This is essential for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD pipelines"})," where GUI access is unavailable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unit testing"})," automation logic without GUI dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development"})," when the target application is unavailable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing state transitions"})," and automation flow logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"what-mock-mode-does",children:"What Mock Mode Does"}),"\n",(0,s.jsxs)(n.p,{children:["When mock mode is enabled (via ",(0,s.jsx)(n.code,{children:"brobot.mock=true"})," property or ",(0,s.jsx)(n.code,{children:"MockModeManager.setMockMode(true)"}),"):"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No screen capture"})," - Brobot doesn't capture actual screens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No real pattern matching"})," - Image patterns aren't matched against real screens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Probabilistic simulation"}),' - States and patterns are "found" based on configured probabilities']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State-based testing"})," - Focus on testing state transitions and automation logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"state-probabilities",children:"State Probabilities"}),"\n",(0,s.jsx)(n.p,{children:'State probabilities determine how often a state\'s objects (images, regions, etc.) are "found" during mock execution:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"100% probability"}),": State objects are always found (deterministic testing)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"0% probability"}),": State objects are never found (failure testing)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1-99% probability"}),": Stochastic testing for robustness"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"enabling-mock-mode",children:"Enabling Mock Mode"}),"\n",(0,s.jsx)(n.h4,{id:"property-based-configuration-recommended",children:"Property-Based Configuration (Recommended)"}),"\n",(0,s.jsx)(n.p,{children:"Brobot uses simplified mock configuration properties:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# application.properties\n# Single master switch for mock mode\nbrobot.mock=true\n\n# Probability of action success (0.0 to 1.0, default 1.0)\nbrobot.mock.action.success.probability=0.95\n"})}),"\n",(0,s.jsx)(n.h4,{id:"programmatic-configuration",children:"Programmatic Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.config.mock.MockModeManager;\n\n// Enable mock mode globally\nMockModeManager.setMockMode(true);\n\n// Check if mock mode is enabled\nif (MockModeManager.isMockMode()) {\n    // Mock-specific logic\n}\n\n// Log current mock mode state across all components\nMockModeManager.logMockModeState();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MockModeManager"})," automatically synchronizes mock mode across:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["System properties (",(0,s.jsx)(n.code,{children:"brobot.mock"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ExecutionEnvironment"})," (for runtime behavior)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"FrameworkSettings.mock"})," (for compatibility)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"action-success-probability",children:"Action Success Probability"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"brobot.mock.action.success.probability"})," property controls how often simulated actions succeed:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1.0"})," (default): All actions always succeed - ideal for deterministic testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"0.95"}),": 95% success rate - simulates realistic conditions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"0.5"}),": 50% success rate - stress testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"0.0"}),": All actions always fail - failure path testing"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This applies to actions like click, type, and drag. Find operations still require ActionSnapshots for proper match simulation."}),"\n",(0,s.jsx)(n.h3,{id:"setting-state-probabilities",children:"Setting State Probabilities"}),"\n",(0,s.jsx)(n.p,{children:"There are two approaches to configure state probabilities:"}),"\n",(0,s.jsx)(n.h4,{id:"1-state-level-configuration-recommended",children:"1. State-Level Configuration (Recommended)"}),"\n",(0,s.jsx)(n.p,{children:"Configure probabilities directly in state classes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@State(initial = true)\n@Getter\n@Slf4j\npublic class LoginState {\n    \n    @Autowired(required = false)\n    private MockStateManagement mockStateManagement;\n    \n    // Define mock probability for this state\n    private static final int MOCK_PROBABILITY = 100;\n    \n    private final StateImage loginButton;\n    \n    public LoginState() {\n        loginButton = new StateImage.Builder()\n            .addPatterns("login-button")\n            .setName("LoginButton")\n            .build();\n    }\n    \n    @PostConstruct\n    public void configureMockProbability() {\n        if (FrameworkSettings.mock && mockStateManagement != null) {\n            mockStateManagement.setStateProbabilities(MOCK_PROBABILITY, "Login");\n            log.debug("Configured Login state mock probability to {}%", MOCK_PROBABILITY);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"2-centralized-configuration",children:"2. Centralized Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"MockStateManagement"})," to configure multiple states:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\n@ConditionalOnProperty(name = "brobot.mock", havingValue = "true")\npublic class MockConfiguration {\n    \n    @Autowired\n    private MockStateManagement mockStateManagement;\n    \n    @PostConstruct\n    public void configureMockStates() {\n        // Set initial state probabilities\n        mockStateManagement.setStateProbabilities(100, "Login");    // Always found\n        mockStateManagement.setStateProbabilities(0, "Dashboard");   // Initially not found\n        mockStateManagement.setStateProbabilities(50, "ErrorDialog"); // Sometimes found\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-state-transitions",children:"Testing State Transitions"}),"\n",(0,s.jsx)(n.h3,{id:"deterministic-flow-testing",children:"Deterministic Flow Testing"}),"\n",(0,s.jsx)(n.p,{children:"For testing automation flow (like claude-automator), use 100% probabilities to ensure reliable transitions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@State(initial = true)  // Mark as initial state\npublic class PromptState {\n    private static final int MOCK_PROBABILITY = 100;  // Always found\n    // ... state definition\n}\n\n@State  // Not initial - activated through transition\npublic class WorkingState {\n    private static final int MOCK_PROBABILITY = 100;  // Always found when active\n    // ... state definition\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This ensures:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Transitions always succeed when triggered"}),"\n",(0,s.jsx)(n.li,{children:"Focus on testing the automation logic, not robustness"}),"\n",(0,s.jsx)(n.li,{children:"Predictable test outcomes"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"stochastic-testing",children:"Stochastic Testing"}),"\n",(0,s.jsx)(n.p,{children:"For robustness testing, use variable probabilities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Simulate unreliable GUI element detection\nmockStateManagement.setStateProbabilities(70, "UnstableDialog");\n\n// Test retry logic\nfor (int i = 0; i < MAX_RETRIES; i++) {\n    ActionResult result = action.find(dialogElement);\n    if (result.isSuccess()) break;\n    Thread.sleep(1000);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"dynamic-state-simulation",children:"Dynamic State Simulation"}),"\n",(0,s.jsx)(n.h3,{id:"simulating-state-changes",children:"Simulating State Changes"}),"\n",(0,s.jsx)(n.p,{children:"Adjust probabilities during test execution to simulate state transitions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testLoginFlow() {\n    // Initial state: Login visible, Dashboard not\n    mockStateManagement.setStateProbabilities(100, "Login");\n    mockStateManagement.setStateProbabilities(0, "Dashboard");\n    \n    // Perform login action\n    stateNavigator.openState("Dashboard");\n    \n    // Simulate successful login: Dashboard appears, Login disappears\n    mockStateManagement.setStateProbabilities(0, "Login");\n    mockStateManagement.setStateProbabilities(100, "Dashboard");\n    \n    // Verify transition\n    assertTrue(stateMemory.getActiveStateNames().contains("Dashboard"));\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"simulating-temporal-behaviors",children:"Simulating Temporal Behaviors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public void simulateLoadingSequence() {\n    // Loading appears\n    mockStateManagement.setStateProbabilities(100, "LoadingSpinner");\n    \n    // Simulate loading time\n    Thread.sleep(2000);\n    \n    // Loading disappears, content appears\n    mockStateManagement.setStateProbabilities(0, "LoadingSpinner");\n    mockStateManagement.setStateProbabilities(100, "ContentLoaded");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-use-100-probability-for-flow-testing",children:"1. Use 100% Probability for Flow Testing"}),"\n",(0,s.jsx)(n.p,{children:"When testing automation logic (not robustness):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// All states should be reliably findable\nprivate static final int MOCK_PROBABILITY = 100;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-set-initial-states-appropriately",children:"2. Set Initial States Appropriately"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@State(initial = true)  // Only the starting state(s)\npublic class InitialState { }\n\n@State  // Subsequent states reached through transitions\npublic class SubsequentState { }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-document-mock-behavior",children:"3. Document Mock Behavior"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"/**\n * Login state - always visible at application start.\n * Mock probability: 100% (deterministic for flow testing)\n */\n@State(initial = true)\npublic class LoginState { }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-separate-mock-configuration",children:"4. Separate Mock Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Keep mock-specific configuration separate:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"# application.properties\nbrobot.mock=false  # Production\n\n# application-test.properties\nbrobot.mock=true   # Testing\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-clean-state-between-tests",children:"5. Clean State Between Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@AfterEach\npublic void cleanup() {\n    stateMemory.getActiveStates().clear();\n    // Reset probabilities if needed\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-patterns",children:"Testing Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"pattern-1-simple-flow-test",children:"Pattern 1: Simple Flow Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testBasicFlow() {\n    // All states 100% for deterministic testing\n    mockStateManagement.setStateProbabilities(100, "Start", "Middle", "End");\n    \n    // Test the flow\n    assertTrue(stateNavigator.openState("Middle"));\n    assertTrue(stateNavigator.openState("End"));\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pattern-2-error-recovery-test",children:"Pattern 2: Error Recovery Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testErrorRecovery() {\n    // Normal states always found\n    mockStateManagement.setStateProbabilities(100, "Normal");\n    // Error appears intermittently\n    mockStateManagement.setStateProbabilities(30, "Error");\n    \n    // Test should handle both cases\n    ActionResult result = action.find(element);\n    if (!result.isSuccess()) {\n        // Handle error case\n        handleError();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pattern-3-state-verification",children:"Pattern 3: State Verification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void verifyStateConfiguration() {\n    // Verify initial states\n    var initialStates = stateService.getInitialStates();\n    assertEquals(1, initialStates.size());\n    assertEquals("Login", initialStates.get(0).getName());\n    \n    // Verify all states registered\n    assertTrue(stateService.getAllStates().stream()\n        .anyMatch(s -> s.getName().equals("Dashboard")));\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"debugging-mock-tests",children:"Debugging Mock Tests"}),"\n",(0,s.jsx)(n.h3,{id:"enable-verbose-logging",children:"Enable Verbose Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"logging.level.io.github.jspinak.brobot.tools.testing.mock=DEBUG\nlogging.level.com.yourapp.states=DEBUG\n"})}),"\n",(0,s.jsx)(n.h3,{id:"log-state-transitions",children:"Log State Transitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@EventListener\npublic void handleStateTransition(StateTransitionEvent event) {\n    log.info("Transition: {} -> {}", \n        event.getFromState(), event.getToState());\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"verify-mock-configuration",children:"Verify Mock Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void verifyMockSetup() {\n    assertTrue(FrameworkSettings.mock, "Mock mode should be enabled");\n    assertNotNull(mockStateManagement, "MockStateManagement should be available");\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsx)(n.h3,{id:"issue-states-not-being-found",children:"Issue: States Not Being Found"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Verify probability is set > 0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'mockStateManagement.setStateProbabilities(100, "StateName");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"issue-wrong-initial-state",children:"Issue: Wrong Initial State"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Ensure only one state has ",(0,s.jsx)(n.code,{children:"initial = true"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@State(initial = true)  // Only one state should have this\n"})}),"\n",(0,s.jsx)(n.h3,{id:"issue-transitions-not-working",children:"Issue: Transitions Not Working"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Check state registration and transition definitions. Use the unified transition format:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@TransitionSet(state = TargetState.class)\n@Component\npublic class TargetStateTransitions {\n    \n    @FromTransition(from = SourceState.class, priority = 1)\n    public boolean fromSource() {\n        if (FrameworkSettings.mock) return true;\n        return action.click(sourceState.getButton()).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        return action.find(targetState.getElement()).isSuccess();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"issue-mock-mode-not-activating",children:"Issue: Mock Mode Not Activating"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),": Verify configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"brobot.mock=true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"enhanced-mock-infrastructure",children:"Enhanced Mock Infrastructure"}),"\n",(0,s.jsx)(n.h3,{id:"grid-operations-support",children:"Grid Operations Support"}),"\n",(0,s.jsx)(n.p,{children:"Mock mode now provides full support for grid operations without requiring SikuliX:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.tools.testing.mock.grid.MockGridConfig;\n\n@Test\npublic void testGridNavigation() {\n    // Configure grid for testing\n    MockGridConfig.setDefaultGrid(3, 3); // 3x3 grid\n    \n    Region screen = new Region(0, 0, 900, 900);\n    \n    // Test grid navigation\n    for (int i = 0; i < 9; i++) {\n        Region gridCell = screen.getGridRegion(i);\n        assertNotNull(gridCell);\n        assertEquals(300, gridCell.w());\n        assertEquals(300, gridCell.h());\n    }\n    \n    // Test location to grid mapping\n    Location centerOfTopRight = new Location(750, 150);\n    Optional<Integer> gridNum = RegionUtils.getGridNumber(screen, centerOfTopRight);\n    assertTrue(gridNum.isPresent());\n    assertEquals(2, gridNum.get()); // Top-right is index 2 in 3x3 grid\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"scene-and-color-analysis-mocking",children:"Scene and Color Analysis Mocking"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"MockSceneBuilder"})," provides comprehensive test data for color-based operations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.tools.testing.mock.builders.MockSceneBuilder;\n\n@Test\npublic void testColorMatching() {\n    // Create mock scene with proper image initialization\n    Scene scene = MockSceneBuilder.createMockScene();\n    \n    // Create scene analysis with color profiles\n    SceneAnalysis analysis = MockSceneBuilder.sceneAnalysis()\n        .withPixelProfile(0)\n        .withPixelProfile(1)\n        .build();\n    \n    // Color operations work in mock mode\n    ColorClassifier classifier = new ColorClassifier();\n    Mat result = classifier.getImageIndices(analysis, ColorCluster.ColorSchemaName.BGR);\n    assertNotNull(result);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-base-class---brobottestbase",children:"Test Base Class - BrobotTestBase"}),"\n",(0,s.jsxs)(n.p,{children:["All tests should extend ",(0,s.jsx)(n.code,{children:"BrobotTestBase"})," for proper mock configuration:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\n\npublic class MyAutomationTest extends BrobotTestBase {\n    \n    @Test\n    public void testWithMockMode() {\n        // Mock mode is automatically enabled\n        // No headless exceptions\n        // Fast execution times\n        \n        ActionResult result = action.find(targetElement);\n        assertTrue(result.isSuccess());\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Key benefits of ",(0,s.jsx)(n.code,{children:"BrobotTestBase"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Automatic mock mode activation"}),"\n",(0,s.jsx)(n.li,{children:"CI/CD pipeline compatibility"}),"\n",(0,s.jsx)(n.li,{children:"Fast operation timings (0.01-0.04s)"}),"\n",(0,s.jsx)(n.li,{children:"No display server required"}),"\n",(0,s.jsx)(n.li,{children:"Consistent test environment"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-benefits",children:"Performance Benefits"}),"\n",(0,s.jsx)(n.p,{children:"Mock mode operations are significantly faster:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Operation"}),(0,s.jsx)(n.th,{children:"Mock Mode"}),(0,s.jsx)(n.th,{children:"Real Mode"}),(0,s.jsx)(n.th,{children:"Speedup"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Find operation"}),(0,s.jsx)(n.td,{children:"~0.01s"}),(0,s.jsx)(n.td,{children:"0.5-2s"}),(0,s.jsx)(n.td,{children:"50-200x"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Grid calculation"}),(0,s.jsx)(n.td,{children:"~0.01s"}),(0,s.jsx)(n.td,{children:"0.5s"}),(0,s.jsx)(n.td,{children:"50x"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Color analysis"}),(0,s.jsx)(n.td,{children:"~0.02s"}),(0,s.jsx)(n.td,{children:"1-2s"}),(0,s.jsx)(n.td,{children:"50-100x"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"State transition"}),(0,s.jsx)(n.td,{children:"~0.01s"}),(0,s.jsx)(n.td,{children:"0.2-1s"}),(0,s.jsx)(n.td,{children:"20-100x"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls-and-solutions",children:"Common Pitfalls and Solutions"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Issue"}),(0,s.jsx)(n.th,{children:"Solution"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Tests fail in CI/CD"}),(0,s.jsxs)(n.td,{children:["Extend ",(0,s.jsx)(n.code,{children:"BrobotTestBase"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Grid operations return empty"}),(0,s.jsxs)(n.td,{children:["Configure ",(0,s.jsx)(n.code,{children:"MockGridConfig.setDefaultGrid()"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Color tests throw NPE"}),(0,s.jsxs)(n.td,{children:["Use ",(0,s.jsx)(n.code,{children:"MockSceneBuilder"})," for test data"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"SikuliX mocking errors"}),(0,s.jsx)(n.td,{children:"Use real SikuliX objects or Brobot mocks"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Inconsistent test results"}),(0,s.jsx)(n.td,{children:"Ensure mock mode is enabled in setup"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"Mock mode in Brobot enables:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deterministic testing"})," with 100% probabilities for flow validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Stochastic testing"})," with variable probabilities for robustness"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD integration"})," without GUI dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rapid development"})," without target application availability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Grid operations"})," without SikuliX dependency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Color analysis"})," without real images"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"50-200x faster"})," test execution"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Choose probability settings based on your testing goals:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"100%"})," for automation flow testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Variable"})," for robustness and error handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic"})," for simulating complex scenarios"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use the enhanced mock infrastructure for:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Grid-based navigation"})," testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Color matching"})," validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Headless environment"})," compatibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast CI/CD"})," pipeline execution"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6669],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var i=t(96540);const o={},s=i.createContext(o);function r(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(s.Provider,{value:e},n.children)}},46087:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"testing/actionhistory-integration-testing","title":"ActionHistory Integration Testing","description":"Overview","source":"@site/docs/04-testing/actionhistory-integration-testing.md","sourceDirName":"04-testing","slug":"/testing/actionhistory-integration-testing","permalink":"/brobot/docs/testing/actionhistory-integration-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/actionhistory-integration-testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"ActionHistory Integration Testing","sidebar_position":4},"sidebar":"docSidebar","previous":{"title":"Action Recording","permalink":"/brobot/docs/testing/action-recording"},"next":{"title":"Mixed-Mode Execution","permalink":"/brobot/docs/testing/mixed-mode-execution"}}');var o=t(74848),s=t(28453);const r={title:"ActionHistory Integration Testing",sidebar_position:4},a="ActionHistory Integration Testing",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Understanding ActionHistory",id:"understanding-actionhistory",level:2},{value:"What is ActionHistory?",id:"what-is-actionhistory",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Modern API Usage",id:"modern-api-usage",level:2},{value:"Creating ActionHistory with ActionConfig",id:"creating-actionhistory-with-actionconfig",level:3},{value:"Recording Different Action Types",id:"recording-different-action-types",level:3},{value:"Click Actions",id:"click-actions",level:4},{value:"Type Actions with Text",id:"type-actions-with-text",level:4},{value:"Vanish Actions",id:"vanish-actions",level:4},{value:"Integration Testing Setup",id:"integration-testing-setup",level:2},{value:"1. Configure Mock Execution",id:"1-configure-mock-execution",level:3},{value:"2. Initialize State Objects with ActionHistory",id:"2-initialize-state-objects-with-actionhistory",level:3},{value:"3. Write Integration Tests",id:"3-write-integration-tests",level:3},{value:"Advanced Testing Patterns",id:"advanced-testing-patterns",level:2},{value:"State-Specific ActionHistory",id:"state-specific-actionhistory",level:3},{value:"Simulating Failures",id:"simulating-failures",level:3},{value:"Text Extraction Testing",id:"text-extraction-testing",level:3},{value:"Data-Driven Testing",id:"data-driven-testing",level:2},{value:"Loading ActionHistory from Files",id:"loading-actionhistory-from-files",level:3},{value:"Using ActionHistory from Brobot Runner",id:"using-actionhistory-from-brobot-runner",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Measuring Action Performance",id:"measuring-action-performance",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Realistic Data Generation",id:"1-realistic-data-generation",level:3},{value:"2. Isolation Between Tests",id:"2-isolation-between-tests",level:3},{value:"3. Deterministic Testing",id:"3-deterministic-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Logging",id:"debug-logging",level:3},{value:"Migration from Legacy API",id:"migration-from-legacy-api",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"actionhistory-integration-testing",children:"ActionHistory Integration Testing"})}),"\n",(0,o.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(e.p,{children:"ActionHistory is the core component of Brobot's mock testing framework, enabling realistic simulation of GUI automation without requiring the actual application. It maintains a statistical model of how GUI elements behave, capturing not just whether elements were found but also when, where, and under what conditions."}),"\n",(0,o.jsx)(e.h2,{id:"understanding-actionhistory",children:"Understanding ActionHistory"}),"\n",(0,o.jsx)(e.h3,{id:"what-is-actionhistory",children:"What is ActionHistory?"}),"\n",(0,o.jsxs)(e.p,{children:["ActionHistory is a data structure that accumulates ",(0,o.jsx)(e.code,{children:"ActionRecord"})," snapshots over time, building a probabilistic model of GUI behavior. This historical data serves two critical purposes:"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Mock Execution"}),": Enables realistic testing without the target application"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Pattern Learning"}),": Provides empirical data for optimizing automation strategies"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"key-components",children:"Key Components"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"public class ActionHistory {\n    private int timesSearched = 0;      // Total search attempts\n    private int timesFound = 0;         // Successful finds\n    private List<ActionRecord> snapshots = new ArrayList<>();  // Historical records\n}\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Each ",(0,o.jsx)(e.code,{children:"ActionRecord"})," contains:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"ActionConfig"}),": The action configuration (modern API)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Match Results"}),": Screenshot regions where patterns were found"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Success Status"}),": Whether the action succeeded"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Timing Data"}),": Duration and timestamps"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Context"}),": State and environment information"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"modern-api-usage",children:"Modern API Usage"}),"\n",(0,o.jsx)(e.h3,{id:"creating-actionhistory-with-actionconfig",children:"Creating ActionHistory with ActionConfig"}),"\n",(0,o.jsxs)(e.p,{children:["The modern API uses strongly-typed ",(0,o.jsx)(e.code,{children:"ActionConfig"})," classes instead of the deprecated ",(0,o.jsx)(e.code,{children:"ActionOptions"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.model.action.ActionHistory;\nimport io.github.jspinak.brobot.model.action.ActionRecord;\nimport io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\nimport io.github.jspinak.brobot.model.match.Match;\n\n// Create an ActionHistory\nActionHistory history = new ActionHistory();\n\n// Add a find action record\nActionRecord findRecord = new ActionRecord.Builder()\n    .setActionConfig(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.95)\n        .build())\n    .addMatch(new Match.Builder()\n        .setRegion(100, 200, 50, 30)  // x, y, width, height\n        .setSimScore(0.96)\n        .build())\n    .setActionSuccess(true)\n    .setDuration(250)  // milliseconds\n    .build();\n\nhistory.addSnapshot(findRecord);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"recording-different-action-types",children:"Recording Different Action Types"}),"\n",(0,o.jsx)(e.h4,{id:"click-actions",children:"Click Actions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.action.basic.click.ClickOptions;\n\nActionRecord clickRecord = new ActionRecord.Builder()\n    .setActionConfig(new ClickOptions.Builder()\n        .setClickType(ClickOptions.Type.DOUBLE)\n        .setNumberOfClicks(2)\n        .setPauseBeforeMouseDown(100)\n        .setPauseAfterMouseUp(100)\n        .build())\n    .addMatch(new Match.Builder()\n        .setRegion(150, 250, 40, 20)\n        .setSimScore(0.92)\n        .build())\n    .setActionSuccess(true)\n    .build();\n\nhistory.addSnapshot(clickRecord);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"type-actions-with-text",children:"Type Actions with Text"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.action.basic.type.TypeOptions;\n\nActionRecord typeRecord = new ActionRecord.Builder()\n    .setActionConfig(new TypeOptions.Builder()\n        .setPauseBeforeBegin(200)\n        .setPauseAfterEnd(100)\n        .build())\n    .setText("Hello World")\n    .setActionSuccess(true)\n    .build();\n\nhistory.addSnapshot(typeRecord);\n'})}),"\n",(0,o.jsx)(e.h4,{id:"vanish-actions",children:"Vanish Actions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.action.basic.vanish.VanishOptions;\n\nActionRecord vanishRecord = new ActionRecord.Builder()\n    .setActionConfig(new VanishOptions.Builder()\n        .setWaitTime(5.0)  // seconds\n        .build())\n    .setActionSuccess(true)  // Element disappeared\n    .setDuration(3500)  // Vanished after 3.5 seconds\n    .build();\n\nhistory.addSnapshot(vanishRecord);\n"})}),"\n",(0,o.jsx)(e.h2,{id:"integration-testing-setup",children:"Integration Testing Setup"}),"\n",(0,o.jsx)(e.h3,{id:"1-configure-mock-execution",children:"1. Configure Mock Execution"}),"\n",(0,o.jsx)(e.p,{children:"Enable mock mode in your test configuration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"# application-test.yml\nbrobot:\n  mock:\n    enabled: true\n    use-real-screenshots: false\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Note"}),": ActionHistory persistence is handled by the Brobot Runner application, not the library itself. During live automation, the Runner captures and stores ActionRecords in its database. For testing, ActionHistory is maintained in memory or loaded from exported files."]}),"\n",(0,o.jsx)(e.h3,{id:"2-initialize-state-objects-with-actionhistory",children:"2. Initialize State Objects with ActionHistory"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.model.state.stateObject.StateImage;\nimport io.github.jspinak.brobot.model.action.ActionHistory;\n\n@Component\npublic class LoginStateInitializer {\n    \n    public StateImage createLoginButton() {\n        StateImage loginButton = new StateImage.Builder()\n            .withPattern("login-button.png")\n            .build();\n        \n        // Add historical data for realistic mocking\n        ActionHistory history = new ActionHistory();\n        \n        // Simulate 90% success rate\n        for (int i = 0; i < 100; i++) {\n            boolean success = i < 90;  // 90% success\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder()\n                    .setStrategy(PatternFindOptions.Strategy.BEST)\n                    .build())\n                .setActionSuccess(success)\n                .addMatch(success ? createMatch() : null)\n                .build();\n            \n            history.addSnapshot(record);\n        }\n        \n        loginButton.setActionHistory(history);\n        return loginButton;\n    }\n    \n    private Match createMatch() {\n        return new Match.Builder()\n            .setRegion(500, 400, 100, 40)\n            .setSimScore(0.85 + Math.random() * 0.1)  // 0.85-0.95\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-write-integration-tests",children:"3. Write Integration Tests"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.TestPropertySource;\n\n@SpringBootTest\n@TestPropertySource(properties = {\n    "brobot.mock.enabled=true",\n    "brobot.action-history.source=database"\n})\npublic class LoginWorkflowIntegrationTest {\n    \n    @Autowired\n    private LoginState loginState;\n    \n    @Autowired\n    private ActionHistory actionHistory;\n    \n    @Test\n    public void testLoginWorkflow() {\n        // Pre-populate ActionHistory with realistic data\n        prepareActionHistory();\n        \n        // Execute the workflow - will use ActionHistory for mocking\n        boolean loginSuccess = loginState.execute();\n        \n        assertTrue(loginSuccess, "Login should succeed based on ActionHistory");\n        \n        // Verify action was recorded\n        assertEquals(actionHistory.getTimesSearched(), \n                    actionHistory.getTimesFound() + 1);\n    }\n    \n    private void prepareActionHistory() {\n        // Add successful login button click\n        ActionRecord loginClick = new ActionRecord.Builder()\n            .setActionConfig(new ClickOptions.Builder().build())\n            .addMatch(new Match.Builder()\n                .setRegion(500, 400, 100, 40)\n                .setSimScore(0.92)\n                .build())\n            .setActionSuccess(true)\n            .build();\n        \n        actionHistory.addSnapshot(loginClick);\n        \n        // Add successful username field interaction\n        ActionRecord usernameType = new ActionRecord.Builder()\n            .setActionConfig(new TypeOptions.Builder().build())\n            .setText("testuser@example.com")\n            .setActionSuccess(true)\n            .build();\n        \n        actionHistory.addSnapshot(usernameType);\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-testing-patterns",children:"Advanced Testing Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"state-specific-actionhistory",children:"State-Specific ActionHistory"}),"\n",(0,o.jsx)(e.p,{children:"Different states can have different success patterns:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"public class StateSpecificTesting {\n    \n    @Test\n    public void testStateTransitions() {\n        Long loginStateId = 1L;\n        Long mainStateId = 2L;\n        \n        // Add state-specific records\n        ActionRecord loginRecord = new ActionRecord.Builder()\n            .setActionConfig(new PatternFindOptions.Builder().build())\n            .setStateId(loginStateId)\n            .setActionSuccess(true)\n            .addMatch(createLoginMatch())\n            .build();\n        \n        ActionRecord mainRecord = new ActionRecord.Builder()\n            .setActionConfig(new PatternFindOptions.Builder().build())\n            .setStateId(mainStateId)\n            .setActionSuccess(true)\n            .addMatch(createMainMatch())\n            .build();\n        \n        actionHistory.addSnapshot(loginRecord);\n        actionHistory.addSnapshot(mainRecord);\n        \n        // Query state-specific snapshots\n        Optional<ActionRecord> loginSnapshot = actionHistory.getRandomSnapshot(\n            new PatternFindOptions.Builder().build(),\n            loginStateId\n        );\n        \n        assertTrue(loginSnapshot.isPresent());\n        assertEquals(loginStateId, loginSnapshot.get().getStateId());\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"simulating-failures",children:"Simulating Failures"}),"\n",(0,o.jsx)(e.p,{children:"Test error handling with failure scenarios:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'public class FailureSimulation {\n    \n    public ActionHistory createFlakeyButtonHistory() {\n        ActionHistory history = new ActionHistory();\n        Random random = new Random(42);  // Deterministic for testing\n        \n        for (int i = 0; i < 20; i++) {\n            boolean success = random.nextDouble() < 0.7;  // 70% success\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new ClickOptions.Builder().build())\n                .setActionSuccess(success)\n                .addMatch(success ? createMatch() : null)\n                .setDuration(success ? 200 : 5000)  // Timeout on failure\n                .build();\n            \n            history.addSnapshot(record);\n        }\n        \n        return history;\n    }\n    \n    @Test\n    public void testRetryMechanism() {\n        StateImage flakeyButton = new StateImage.Builder()\n            .withPattern("flakey-button.png")\n            .build();\n        \n        flakeyButton.setActionHistory(createFlakeyButtonHistory());\n        \n        // Test retry logic\n        int attempts = 0;\n        boolean success = false;\n        \n        while (!success && attempts < 3) {\n            Optional<ActionRecord> result = flakeyButton.getActionHistory()\n                .getRandomSnapshot(new ClickOptions.Builder().build());\n            \n            success = result.map(ActionRecord::isActionSuccess).orElse(false);\n            attempts++;\n        }\n        \n        // Should eventually succeed with retries\n        assertTrue(success || attempts == 3, \n            "Should succeed with retries or reach max attempts");\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"text-extraction-testing",children:"Text Extraction Testing"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'public class TextExtractionTest {\n    \n    @Test\n    public void testOCRResults() {\n        ActionHistory ocrHistory = new ActionHistory();\n        \n        // Add OCR results with varying accuracy\n        String[] expectedTexts = {\n            "Username:",\n            "Password:",\n            "Login"\n        };\n        \n        for (String text : expectedTexts) {\n            ActionRecord ocrRecord = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder().build())\n                .setText(text)\n                .addMatch(new Match.Builder()\n                    .setRegion(100, 100 + ocrHistory.getSnapshots().size() * 50, 200, 30)\n                    .setSimScore(0.95)\n                    .build())\n                .setActionSuccess(true)\n                .build();\n            \n            ocrHistory.addSnapshot(ocrRecord);\n        }\n        \n        // Test random text retrieval\n        String randomText = ocrHistory.getRandomText();\n        assertTrue(Arrays.asList(expectedTexts).contains(randomText));\n        \n        // Test all texts are accessible\n        Set<String> retrievedTexts = new HashSet<>();\n        for (int i = 0; i < 100; i++) {\n            retrievedTexts.add(ocrHistory.getRandomText());\n        }\n        \n        assertEquals(expectedTexts.length, retrievedTexts.size(),\n            "All texts should be retrievable");\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"data-driven-testing",children:"Data-Driven Testing"}),"\n",(0,o.jsx)(e.h3,{id:"loading-actionhistory-from-files",children:"Loading ActionHistory from Files"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'import com.fasterxml.jackson.databind.ObjectMapper;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\npublic class DataDrivenTests {\n    \n    private final ObjectMapper objectMapper = new ObjectMapper();\n    \n    @Test\n    public void testWithHistoricalData() throws IOException {\n        // Load pre-recorded ActionHistory\n        Path historyFile = Path.of("src/test/resources/action-histories/login-flow.json");\n        String json = Files.readString(historyFile);\n        ActionHistory history = objectMapper.readValue(json, ActionHistory.class);\n        \n        // Use historical data for testing\n        StateImage loginButton = new StateImage.Builder()\n            .withPattern("login.png")\n            .build();\n        loginButton.setActionHistory(history);\n        \n        // Run tests with real historical data\n        Optional<ActionRecord> snapshot = history.getRandomSnapshot(\n            new ClickOptions.Builder().build()\n        );\n        \n        assertTrue(snapshot.isPresent());\n        assertTrue(snapshot.get().isActionSuccess());\n    }\n    \n    public void saveActionHistory(ActionHistory history, Path outputPath) \n            throws IOException {\n        String json = objectMapper.writerWithDefaultPrettyPrinter()\n            .writeValueAsString(history);\n        Files.writeString(outputPath, json);\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"using-actionhistory-from-brobot-runner",children:"Using ActionHistory from Brobot Runner"}),"\n",(0,o.jsx)(e.p,{children:"The Brobot Runner application provides persistence for ActionHistory:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Export ActionHistory from Runner\n// 1. Run automation with recording enabled in Runner UI\n// 2. Export session as JSON file\n// 3. Load in your tests:\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n@Service\npublic class ActionHistoryLoader {\n    \n    private final ObjectMapper objectMapper = new ObjectMapper();\n    \n    public ActionHistory loadFromRunnerExport(String filename) throws IOException {\n        Path path = Path.of("test-data/runner-exports", filename);\n        return objectMapper.readValue(path.toFile(), ActionHistory.class);\n    }\n    \n    public Map<String, ActionHistory> loadAllExports() throws IOException {\n        Map<String, ActionHistory> histories = new HashMap<>();\n        Path exportDir = Path.of("test-data/runner-exports");\n        \n        Files.list(exportDir)\n            .filter(p -> p.toString().endsWith(".json"))\n            .forEach(path -> {\n                try {\n                    String name = path.getFileName().toString().replace(".json", "");\n                    histories.put(name, loadFromRunnerExport(path.getFileName().toString()));\n                } catch (IOException e) {\n                    log.error("Failed to load {}", path, e);\n                }\n            });\n        \n        return histories;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Workflow for Using Runner-Recorded Data:"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Record in Runner"}),": Enable recording in the Runner UI during live automation"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Export Sessions"}),": Export recorded sessions as JSON files"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Import in Tests"}),": Load exported ActionHistory in your integration tests"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Replay Behavior"}),": Use the recorded data for realistic mock testing"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,o.jsx)(e.h3,{id:"measuring-action-performance",children:"Measuring Action Performance"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'public class PerformanceTest {\n    \n    @Test\n    public void testActionPerformance() {\n        ActionHistory performanceHistory = new ActionHistory();\n        \n        // Simulate various response times\n        for (int i = 0; i < 100; i++) {\n            long duration = 100 + (long)(Math.random() * 900);  // 100-1000ms\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder().build())\n                .setDuration(duration)\n                .setActionSuccess(duration < 800)  // Timeout at 800ms\n                .build();\n            \n            performanceHistory.addSnapshot(record);\n        }\n        \n        // Analyze performance\n        double avgDuration = performanceHistory.getSnapshots().stream()\n            .mapToLong(ActionRecord::getDuration)\n            .average()\n            .orElse(0);\n        \n        long maxDuration = performanceHistory.getSnapshots().stream()\n            .mapToLong(ActionRecord::getDuration)\n            .max()\n            .orElse(0);\n        \n        assertTrue(avgDuration < 600, "Average duration should be under 600ms");\n        assertTrue(maxDuration < 1000, "Max duration should be under 1000ms");\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(e.h3,{id:"1-realistic-data-generation",children:"1. Realistic Data Generation"}),"\n",(0,o.jsx)(e.p,{children:"Create ActionHistory that reflects real-world patterns:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"public class RealisticDataGenerator {\n    \n    public ActionHistory generateRealisticHistory() {\n        ActionHistory history = new ActionHistory();\n        Random random = new Random();\n        \n        // Morning hours - higher success rate\n        for (int hour = 9; hour < 12; hour++) {\n            addHourlyData(history, hour, 0.95);  // 95% success\n        }\n        \n        // Afternoon - slightly lower success\n        for (int hour = 12; hour < 17; hour++) {\n            addHourlyData(history, hour, 0.85);  // 85% success\n        }\n        \n        // Evening - degraded performance\n        for (int hour = 17; hour < 20; hour++) {\n            addHourlyData(history, hour, 0.70);  // 70% success\n        }\n        \n        return history;\n    }\n    \n    private void addHourlyData(ActionHistory history, int hour, double successRate) {\n        for (int i = 0; i < 10; i++) {\n            boolean success = Math.random() < successRate;\n            \n            ActionRecord record = new ActionRecord.Builder()\n                .setActionConfig(new PatternFindOptions.Builder().build())\n                .setActionSuccess(success)\n                .setTimestamp(LocalDateTime.now()\n                    .withHour(hour)\n                    .withMinute(i * 6))\n                .build();\n            \n            history.addSnapshot(record);\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-isolation-between-tests",children:"2. Isolation Between Tests"}),"\n",(0,o.jsx)(e.p,{children:"Ensure tests don't interfere with each other:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@TestInstance(TestInstance.Lifecycle.PER_METHOD)\npublic class IsolatedActionHistoryTest {\n    \n    private ActionHistory history;\n    \n    @BeforeEach\n    void setUp() {\n        // Fresh ActionHistory for each test\n        history = new ActionHistory();\n    }\n    \n    @AfterEach\n    void tearDown() {\n        // Clear any persistent data\n        history = null;\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"3-deterministic-testing",children:"3. Deterministic Testing"}),"\n",(0,o.jsx)(e.p,{children:"Use seeded random for reproducible tests:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"public class DeterministicTest {\n    \n    @Test\n    @RepeatedTest(5)\n    public void testDeterministicBehavior() {\n        // Use fixed seed for reproducibility\n        Random random = new Random(12345);\n        ActionHistory history = createSeededHistory(random);\n        \n        // Results should be identical across runs\n        List<Boolean> results = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Optional<ActionRecord> snapshot = history.getRandomSnapshot(\n                new PatternFindOptions.Builder().build()\n            );\n            results.add(snapshot.map(ActionRecord::isActionSuccess).orElse(false));\n        }\n        \n        // Verify deterministic pattern\n        assertEquals(Arrays.asList(true, true, false, true, true, \n                                  false, true, true, true, false), \n                    results);\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Empty ActionHistory"}),": Ensure snapshots are added before querying"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Type Mismatches"}),": Use consistent ActionConfig types"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"State Context"}),": Verify state IDs match when using state-specific queries"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Text Snapshots"}),": Text-only snapshots need matches added automatically"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,o.jsx)(e.p,{children:"Enable detailed logging for troubleshooting:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"logging:\n  level:\n    io.github.jspinak.brobot.model.action: DEBUG\n    io.github.jspinak.brobot.mock: DEBUG\n"})}),"\n",(0,o.jsx)(e.h2,{id:"migration-from-legacy-api",children:"Migration from Legacy API"}),"\n",(0,o.jsxs)(e.p,{children:["If you have existing tests using ",(0,o.jsx)(e.code,{children:"ActionOptions"}),", see the ",(0,o.jsx)(e.a,{href:"/docs/core-library/migration/actionhistory-migration-guide",children:"ActionHistory Migration Guide"})," for detailed migration instructions."]}),"\n",(0,o.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Learn about ",(0,o.jsx)(e.a,{href:"/docs/core-library/testing/enhanced-mocking",children:"Enhanced Mocking"})," for advanced scenarios"]}),"\n",(0,o.jsxs)(e.li,{children:["Explore ",(0,o.jsx)(e.a,{href:"/docs/getting-started/states",children:"States"})," for complex workflows"]}),"\n",(0,o.jsxs)(e.li,{children:["Read about ",(0,o.jsx)(e.a,{href:"/docs/getting-started/core-concepts",children:"Core Concepts"})," for foundational understanding"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);
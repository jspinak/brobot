"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5123],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var i=a(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},56800:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core-library/tutorials/tutorial-basics/save-labeled-image","title":"Save Labeled Images","description":"This tutorial has been updated for Brobot 1.1.0. The code now uses StateNavigator for state navigation instead of the older StateTransitionsManagement class.","source":"@site/docs/03-core-library/tutorials/tutorial-basics/save-labeled-image.md","sourceDirName":"03-core-library/tutorials/tutorial-basics","slug":"/core-library/tutorials/tutorial-basics/save-labeled-image","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/save-labeled-image","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-basics/save-labeled-image.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"docSidebar","previous":{"title":"Get Island Type","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/get-island-type"},"next":{"title":"Mock Results","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/mock-results"}}');var t=a(74848),s=a(28453);const o={sidebar_position:8},r="Save Labeled Images",l={},d=[{value:"The SaveLabeledImages Class",id:"the-savelabeledimages-class",level:2},{value:"Key Changes from Previous Versions",id:"key-changes-from-previous-versions",level:2},{value:"State Navigation",id:"state-navigation",level:3},{value:"Image Utilities",id:"image-utilities",level:3},{value:"Region Definition",id:"region-definition",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"Run &#39;saveImages&#39; from the Main Application",id:"run-saveimages-from-the-main-application",level:2},{value:"Benefits of the Declarative Approach",id:"benefits-of-the-declarative-approach",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"save-labeled-images",children:"Save Labeled Images"})}),"\n",(0,t.jsx)(n.admonition,{title:"Version Note",type:"info",children:(0,t.jsxs)(n.p,{children:["This tutorial has been updated for Brobot 1.1.0. The code now uses ",(0,t.jsx)(n.code,{children:"StateNavigator"})," for state navigation instead of the older ",(0,t.jsx)(n.code,{children:"StateTransitionsManagement"})," class."]})}),"\n",(0,t.jsx)(n.h2,{id:"the-savelabeledimages-class",children:"The SaveLabeledImages Class"}),"\n",(0,t.jsx)(n.p,{children:"This class demonstrates how to capture and save labeled images. In a real application, this could be used to build training data or document different UI states."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.example.basics.automation;\n\nimport io.github.jspinak.brobot.navigation.transition.StateNavigator;\nimport org.springframework.stereotype.Component;\nimport lombok.extern.slf4j.Slf4j;\n\nimport static com.example.basics.StateNames.ISLAND;\n\n@Slf4j\n@Component\npublic class SaveLabeledImages {\n    \n    private StateNavigator stateNavigator;\n    private GetNewIsland getNewIsland;\n    private IslandRegion islandRegion;\n    \n    public SaveLabeledImages(StateNavigator stateNavigator,\n                             GetNewIsland getNewIsland,\n                             IslandRegion islandRegion) {\n        this.stateNavigator = stateNavigator;\n        this.getNewIsland = getNewIsland;\n        this.islandRegion = islandRegion;\n    }\n    \n    public void saveImages(int maxImages) {\n        String directory = "labeledImages/";\n        // Navigate to ISLAND state\n        stateNavigator.openState(ISLAND);\n        for (int i=0; i<maxImages; i++) {\n            String newIslandType = getNewIsland.getIsland();\n            log.info("text = {}", newIslandType);\n            if (!newIslandType.isEmpty() && islandRegion.ensureRegionReady()) {\n                // Capture the island image using the declarative region\n                islandRegion.captureIsland();\n                // In a real implementation, you would save the captured image to file here\n                log.info("Would save captured island to: {}{}", directory, newIslandType);\n            }\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"key-changes-from-previous-versions",children:"Key Changes from Previous Versions"}),"\n",(0,t.jsx)(n.h3,{id:"state-navigation",children:"State Navigation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Old (v1.0.7)"}),": Used ",(0,t.jsx)(n.code,{children:"StateTransitionsManagement.openState(ISLAND)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"New (v1.1.0)"}),": Uses ",(0,t.jsx)(n.code,{children:"StateNavigator.openState(ISLAND)"})," for navigation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"image-utilities",children:"Image Utilities"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Old"}),": Used ",(0,t.jsx)(n.code,{children:"ImageUtils.saveRegionToFile()"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"New"}),": Image capture is handled through the action framework"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"region-definition",children:"Region Definition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Old"}),": Used ",(0,t.jsx)(n.code,{children:"islandRegion.defined()"})," to check if region exists"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"New"}),": Uses ",(0,t.jsx)(n.code,{children:"islandRegion.ensureRegionReady()"})," with declarative regions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Loop through image captures"}),": The method iterates up to ",(0,t.jsx)(n.code,{children:"maxImages"})," times"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Get new island"}),": Calls ",(0,t.jsx)(n.code,{children:"getNewIsland.getIsland()"})," to navigate to a new island"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ensure region is ready"}),": Checks that the capture region can be calculated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Capture the image"}),": Uses the declarative region to capture the island"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Save (simulated)"}),": Logs where the image would be saved"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"run-saveimages-from-the-main-application",children:"Run 'saveImages' from the Main Application"}),"\n",(0,t.jsx)(n.p,{children:"After initializing the states in your main application class, you can run the image capture:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\npublic class TutorialRunner implements CommandLineRunner {\n    \n    @Autowired\n    private SaveLabeledImages saveLabeledImages;\n    \n    @Override\n    public void run(String... args) throws Exception {\n        // Save up to 100 labeled images\n        saveLabeledImages.saveImages(100);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"benefits-of-the-declarative-approach",children:"Benefits of the Declarative Approach"}),"\n",(0,t.jsxs)(n.p,{children:["With the declarative region definition in ",(0,t.jsx)(n.code,{children:"IslandState"}),", the capture region:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatically adjusts based on the search button's location"}),"\n",(0,t.jsx)(n.li,{children:"Handles different screen sizes and resolutions"}),"\n",(0,t.jsx)(n.li,{children:"Reduces manual region calculations"}),"\n",(0,t.jsx)(n.li,{children:"Makes the code more maintainable"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"That's it! Your application can now capture and label images based on dynamic UI elements."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
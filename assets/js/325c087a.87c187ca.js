"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5184],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(96540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},87424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"testing/mat-testing-utilities","title":"Mat Testing Utilities","description":"Overview","source":"@site/docs/04-testing/mat-testing-utilities.md","sourceDirName":"04-testing","slug":"/testing/mat-testing-utilities","permalink":"/brobot/docs/testing/mat-testing-utilities","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/mat-testing-utilities.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Brobot Testing Strategy","permalink":"/brobot/docs/testing/TESTING_STRATEGY"},"next":{"title":"Migration from FrameworkSettings to BrobotProperties","permalink":"/brobot/docs/migration/frameworksettings-to-brobotproperties"}}');var i=n(74848),s=n(28453);const r={},l="Mat Testing Utilities",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Why Use MatTestUtils?",id:"why-use-mattestutils",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Import the Utilities",id:"import-the-utilities",level:3},{value:"Creating Safe Mats",id:"creating-safe-mats",level:3},{value:"Validation",id:"validation",level:3},{value:"Safe Cleanup",id:"safe-cleanup",level:3},{value:"Pattern Generation",id:"pattern-generation",level:2},{value:"Checkerboard Pattern",id:"checkerboard-pattern",level:3},{value:"Gradient Pattern",id:"gradient-pattern",level:3},{value:"Geometric Shapes",id:"geometric-shapes",level:3},{value:"Noise Patterns",id:"noise-patterns",level:3},{value:"Motion Detection Testing",id:"motion-detection-testing",level:2},{value:"Creating Motion Sequences",id:"creating-motion-sequences",level:3},{value:"Creating Changed Regions",id:"creating-changed-regions",level:3},{value:"Mat Comparison",id:"mat-comparison",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Use Try-Finally for Cleanup",id:"1-always-use-try-finally-for-cleanup",level:3},{value:"2. Validate Before Operations",id:"2-validate-before-operations",level:3},{value:"3. Use Descriptive Context in Validation",id:"3-use-descriptive-context-in-validation",level:3},{value:"4. Create MatVectors Safely",id:"4-create-matvectors-safely",level:3},{value:"Example Test",id:"example-test",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"JVM Crashes (Exit Code 134)",id:"jvm-crashes-exit-code-134",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Integration with PixelChangeDetector",id:"integration-with-pixelchangedetector",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"mat-testing-utilities",children:"Mat Testing Utilities"})}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"MatTestUtils"})," class provides comprehensive utilities for creating, managing, and testing OpenCV Mat objects in Brobot tests. These utilities help prevent JVM crashes caused by invalid Mat operations and ensure consistent test data creation."]}),"\n",(0,i.jsx)(t.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Safe Mat Creation"}),": Guaranteed valid Mat objects with proper initialization"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pattern Generation"}),": Pre-built patterns for testing image processing"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Validation"}),": Built-in validation to catch issues before crashes occur"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Memory Management"}),": Safe cleanup utilities to prevent memory leaks"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Data Helpers"}),": Convenient methods for common test scenarios"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"why-use-mattestutils",children:"Why Use MatTestUtils?"}),"\n",(0,i.jsx)(t.p,{children:"OpenCV Mat operations can cause JVM crashes (SIGSEGV) when:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Mats are uninitialized or empty"}),"\n",(0,i.jsx)(t.li,{children:"Mats are already released"}),"\n",(0,i.jsx)(t.li,{children:"Dimensions are invalid"}),"\n",(0,i.jsx)(t.li,{children:"Native memory is corrupted"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"MatTestUtils prevents these issues by:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Always creating properly initialized Mats"}),"\n",(0,i.jsx)(t.li,{children:"Validating Mats before operations"}),"\n",(0,i.jsx)(t.li,{children:"Providing safe cleanup methods"}),"\n",(0,i.jsx)(t.li,{children:"Offering defensive programming patterns"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(t.h3,{id:"import-the-utilities",children:"Import the Utilities"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.utils.MatTestUtils;\nimport static org.bytedeco.opencv.global.opencv_core.*;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"creating-safe-mats",children:"Creating Safe Mats"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create a properly initialized Mat\nMat mat = MatTestUtils.createSafeMat(100, 100, CV_8UC3);\n\n// Create a filled Mat with specific color\nMat redMat = MatTestUtils.createColorMat(100, 100, 0, 0, 255); // BGR format\n\n// Create a grayscale Mat\nMat grayMat = MatTestUtils.createGrayMat(100, 100, 128); // Gray value 0-255\n"})}),"\n",(0,i.jsx)(t.h3,{id:"validation",children:"Validation"}),"\n",(0,i.jsx)(t.p,{children:"Always validate Mats before risky operations:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'Mat mat = someOperation();\nMatTestUtils.validateMat(mat, "operation result");  // Throws if invalid\n'})}),"\n",(0,i.jsx)(t.h3,{id:"safe-cleanup",children:"Safe Cleanup"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Single Mat\nMatTestUtils.safeRelease(mat);\n\n// Multiple Mats\nMatTestUtils.safeReleaseAll(mat1, mat2, mat3);\n\n// MatVector\nMatTestUtils.safeRelease(matVector);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"pattern-generation",children:"Pattern Generation"}),"\n",(0,i.jsx)(t.h3,{id:"checkerboard-pattern",children:"Checkerboard Pattern"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"Mat checkerboard = MatTestUtils.createCheckerboardMat(200, 200, 25);\n// Creates 200x200 image with 25-pixel squares\n"})}),"\n",(0,i.jsx)(t.h3,{id:"gradient-pattern",children:"Gradient Pattern"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Horizontal gradient\nMat horizontalGradient = MatTestUtils.createGradientMat(100, 100, true);\n\n// Vertical gradient\nMat verticalGradient = MatTestUtils.createGradientMat(100, 100, false);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"geometric-shapes",children:"Geometric Shapes"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Rectangle\nMat rectangle = MatTestUtils.createShapeMat(100, 100, 0);\n\n// Circle\nMat circle = MatTestUtils.createShapeMat(100, 100, 1);\n\n// Line\nMat line = MatTestUtils.createShapeMat(100, 100, 2);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"noise-patterns",children:"Noise Patterns"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Random noise for testing filters\nMat noisyImage = MatTestUtils.createNoiseMat(100, 100, CV_8UC3);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"motion-detection-testing",children:"Motion Detection Testing"}),"\n",(0,i.jsx)(t.h3,{id:"creating-motion-sequences",children:"Creating Motion Sequences"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Gradually changing images (for motion detection)\nMatVector motionSequence = MatTestUtils.createMotionMatVector(\n    5,      // frame count\n    100,    // height\n    100,    // width\n    50      // change amount per frame\n);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"creating-changed-regions",children:"Creating Changed Regions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Create sequence with specific changed region\nMatVector withChange = MatTestUtils.createMatVectorWithChange(\n    100, 100,   // dimensions\n    1,          // which frame has change\n    40, 40,     // change position\n    20          // change size\n);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"mat-comparison",children:"Mat Comparison"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// Compare two Mats with tolerance\nboolean similar = MatTestUtils.areMatsEqual(mat1, mat2, 5.0);\n// Returns true if average pixel difference is <= 5.0\n"})}),"\n",(0,i.jsx)(t.h2,{id:"debugging",children:"Debugging"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Get human-readable Mat description\nString description = MatTestUtils.describeMat(mat, "test_mat");\n// Output: "test_mat: 100x100, type=16, channels=3"\n'})}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(t.h3,{id:"1-always-use-try-finally-for-cleanup",children:"1. Always Use Try-Finally for Cleanup"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'Mat mat1 = null;\nMat mat2 = null;\ntry {\n    mat1 = MatTestUtils.createColorMat(100, 100, 255, 0, 0);\n    mat2 = MatTestUtils.createColorMat(100, 100, 0, 255, 0);\n    \n    // Test operations\n    MatTestUtils.validateMat(mat1, "mat1 before operation");\n    performOperation(mat1, mat2);\n    \n} finally {\n    MatTestUtils.safeReleaseAll(mat1, mat2);\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"2-validate-before-operations",children:"2. Validate Before Operations"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\nvoid testImageProcessing() {\n    Mat input = MatTestUtils.createGrayMat(100, 100, 128);\n    MatTestUtils.validateMat(input, "input");\n    \n    Mat output = processImage(input);\n    MatTestUtils.validateMat(output, "output");\n    \n    assertTrue(MatTestUtils.areMatsEqual(input, output, 10.0));\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"3-use-descriptive-context-in-validation",children:"3. Use Descriptive Context in Validation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'MatTestUtils.validateMat(mat, "after dilation");  // Good\nMatTestUtils.validateMat(mat, "mat");            // Less helpful\n'})}),"\n",(0,i.jsx)(t.h3,{id:"4-create-matvectors-safely",children:"4. Create MatVectors Safely"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Validate all Mats before creating MatVector\nMat mat1 = MatTestUtils.createColorMat(100, 100, 100, 100, 100);\nMat mat2 = MatTestUtils.createColorMat(100, 100, 150, 150, 150);\nMat mat3 = MatTestUtils.createColorMat(100, 100, 200, 200, 200);\n\nMatTestUtils.validateMat(mat1, "mat1");\nMatTestUtils.validateMat(mat2, "mat2");\nMatTestUtils.validateMat(mat3, "mat3");\n\nMatVector vector = new MatVector(mat1, mat2, mat3);\n'})}),"\n",(0,i.jsx)(t.h2,{id:"example-test",children:"Example Test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'public class MyImageProcessorTest extends BrobotTestBase {\n    \n    @Test\n    void testEdgeDetection() {\n        // Create test image with shape\n        Mat input = MatTestUtils.createShapeMat(200, 200, 1); // Circle\n        \n        try {\n            // Validate input\n            MatTestUtils.validateMat(input, "circle input");\n            \n            // Process\n            Mat edges = detectEdges(input);\n            \n            // Validate output\n            MatTestUtils.validateMat(edges, "edge detection result");\n            assertFalse(edges.empty());\n            \n            // Check that edges were found\n            double edgeSum = sumElems(edges).get(0);\n            assertTrue(edgeSum > 0, "Should detect circle edges");\n            \n        } finally {\n            MatTestUtils.safeRelease(input);\n        }\n    }\n    \n    @Test\n    void testMotionDetection() {\n        // Create motion sequence\n        MatVector frames = MatTestUtils.createMotionMatVector(3, 100, 100, 50);\n        \n        try {\n            // Build detector\n            MotionDetector detector = new MotionDetector.Builder()\n                .setFrames(frames)\n                .build();\n            \n            // Check motion detected\n            Mat motionMask = detector.getMotionMask();\n            MatTestUtils.validateMat(motionMask, "motion mask");\n            \n            double motion = sumElems(motionMask).get(0);\n            assertTrue(motion > 0, "Should detect motion between frames");\n            \n        } finally {\n            MatTestUtils.safeRelease(frames);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(t.h3,{id:"jvm-crashes-exit-code-134",children:"JVM Crashes (Exit Code 134)"}),"\n",(0,i.jsx)(t.p,{children:"If you still experience crashes:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Check Mat dimensions"}),": Ensure rows and cols are positive"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Verify Mat types match"}),": Operations may require specific types"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Check native memory"}),": Use smaller Mats in tests"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Enable logging"}),": Add debug output before operations"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'// Debug helper\nSystem.out.println(MatTestUtils.describeMat(mat, "before_operation"));\n'})}),"\n",(0,i.jsx)(t.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Issue"}),(0,i.jsx)(t.th,{children:"Solution"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"Mat.isNull()"})," returns true"]}),(0,i.jsxs)(t.td,{children:["Use ",(0,i.jsx)(t.code,{children:"createSafeMat()"})," instead of ",(0,i.jsx)(t.code,{children:"new Mat()"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"Mat.empty()"})," returns true"]}),(0,i.jsx)(t.td,{children:"Ensure dimensions > 0 when creating"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SIGSEGV on release"}),(0,i.jsxs)(t.td,{children:["Use ",(0,i.jsx)(t.code,{children:"safeRelease()"})," which checks null/released state"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Operations fail silently"}),(0,i.jsxs)(t.td,{children:["Add ",(0,i.jsx)(t.code,{children:"validateMat()"})," calls before operations"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Memory leaks"}),(0,i.jsxs)(t.td,{children:["Always use try-finally with ",(0,i.jsx)(t.code,{children:"safeReleaseAll()"})]})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"integration-with-pixelchangedetector",children:"Integration with PixelChangeDetector"}),"\n",(0,i.jsxs)(t.p,{children:["When testing classes like ",(0,i.jsx)(t.code,{children:"PixelChangeDetector"})," that perform complex Mat operations:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Test\nvoid testPixelChangeDetection() {\n    // Create safe test images\n    Mat img1 = MatTestUtils.createColorMat(100, 100, 100, 100, 100);\n    Mat img2 = MatTestUtils.createColorMat(100, 100, 100, 100, 100);\n    \n    // Add change region\n    rectangle(img2, \n        new Point(40, 40), new Point(60, 60),\n        new Scalar(200, 200, 200, 0), -1, 8, 0);\n    \n    // Validate before use\n    MatTestUtils.validateMat(img1, "img1");\n    MatTestUtils.validateMat(img2, "img2 with change");\n    \n    MatVector frames = new MatVector(img1, img2);\n    \n    try {\n        PixelChangeDetector detector = new PixelChangeDetector.Builder()\n            .setMats(frames)\n            .useDilation(3, 3, CV_8U)  // Use safe kernel type\n            .build();\n        \n        Mat changeMask = detector.getChangeMask();\n        MatTestUtils.validateMat(changeMask, "change mask");\n        \n        // Verify changes detected\n        assertTrue(countNonZero(changeMask) > 0);\n        \n    } finally {\n        MatTestUtils.safeReleaseAll(img1, img2);\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/mock-mode-guide",children:"Mock Mode Testing"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/test-utilities",children:"Test Utilities"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/unit-testing",children:"Unit Testing"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"/brobot/docs/testing/integration-testing",children:"Integration Testing"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4123],{22198:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"testing/mock-mode-migration","title":"Mock Mode Migration Guide","description":"Migrating existing tests to use centralized MockModeManager","source":"@site/docs/04-testing/mock-mode-migration.md","sourceDirName":"04-testing","slug":"/testing/mock-mode-migration","permalink":"/brobot/docs/testing/mock-mode-migration","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/mock-mode-migration.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Mock Mode Migration Guide","description":"Migrating existing tests to use centralized MockModeManager"},"sidebar":"docSidebar","previous":{"title":"Test Utilities","permalink":"/brobot/docs/testing/test-utilities"},"next":{"title":"Brobot Testing Strategy","permalink":"/brobot/docs/testing/TESTING_STRATEGY"}}');var t=o(74848),i=o(28453);const r={sidebar_position:10,title:"Mock Mode Migration Guide",description:"Migrating existing tests to use centralized MockModeManager"},c="Mock Mode Migration Guide",a={},d=[{value:"Overview of Changes",id:"overview-of-changes",level:2},{value:"Quick Migration Steps",id:"quick-migration-steps",level:2},{value:"Step 1: Update Test Base Class",id:"step-1-update-test-base-class",level:3},{value:"Step 2: Replace Mock Mode Checks",id:"step-2-replace-mock-mode-checks",level:3},{value:"Step 3: Replace Mock Mode Settings",id:"step-3-replace-mock-mode-settings",level:3},{value:"Common Migration Scenarios",id:"common-migration-scenarios",level:2},{value:"Scenario 1: Spring Boot Tests",id:"scenario-1-spring-boot-tests",level:3},{value:"Scenario 2: Custom Test Setup",id:"scenario-2-custom-test-setup",level:3},{value:"Scenario 3: Conditional Mock Mode",id:"scenario-3-conditional-mock-mode",level:3},{value:"Scenario 4: Mode Switching During Test",id:"scenario-4-mode-switching-during-test",level:3},{value:"Debugging Migration Issues",id:"debugging-migration-issues",level:2},{value:"Verify Mock Mode State",id:"verify-mock-mode-state",level:3},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"Issue 1: Mock Mode Not Enabled",id:"issue-1-mock-mode-not-enabled",level:4},{value:"Issue 2: Inconsistent Mock Behavior",id:"issue-2-inconsistent-mock-behavior",level:4},{value:"Issue 3: Legacy Code Interference",id:"issue-3-legacy-code-interference",level:4},{value:"Benefits After Migration",id:"benefits-after-migration",level:2},{value:"Cleaner Test Code",id:"cleaner-test-code",level:3},{value:"Consistent Behavior",id:"consistent-behavior",level:3},{value:"Better Debugging",id:"better-debugging",level:3},{value:"Easier Maintenance",id:"easier-maintenance",level:3},{value:"Checklist",id:"checklist",level:2},{value:"Need Help?",id:"need-help",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mock-mode-migration-guide",children:"Mock Mode Migration Guide"})}),"\n",(0,t.jsxs)(n.p,{children:["This guide helps you migrate existing Brobot tests to use the new centralized ",(0,t.jsx)(n.code,{children:"MockModeManager"})," for consistent mock mode configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"overview-of-changes",children:"Overview of Changes"}),"\n",(0,t.jsxs)(n.p,{children:["The introduction of ",(0,t.jsx)(n.code,{children:"MockModeManager"})," simplifies mock mode management by providing:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single source of truth"})," for mock mode status"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic synchronization"})," across all components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplified test configuration"})," via ",(0,t.jsx)(n.code,{children:"BrobotTestBase"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-migration-steps",children:"Quick Migration Steps"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-update-test-base-class",children:"Step 1: Update Test Base Class"}),"\n",(0,t.jsxs)(n.p,{children:["Ensure your tests extend ",(0,t.jsx)(n.code,{children:"BrobotTestBase"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Note: BrobotProperties must be injected as a dependency\n@Autowired\nprivate BrobotProperties brobotProperties;\n\npublic class MyTest {\n    @BeforeEach\n    public void setup() {\n        System.setProperty("brobot.mock", "true");\n        // Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\n\npublic class MyTest extends BrobotTestBase {\n    // Mock mode is automatically configured!\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-replace-mock-mode-checks",children:"Step 2: Replace Mock Mode Checks"}),"\n",(0,t.jsx)(n.p,{children:"Update code that checks mock mode status:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'if (brobotProperties.getCore().isMock()) {\n    // mock logic\n}\n\n// OR\nif ("true".equals(System.getProperty("brobot.mock.mode"))) {\n    // mock logic\n}\n\n// OR\nif (ExecutionEnvironment.getInstance().isMockMode()) {\n    // mock logic\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.config.MockModeManager;\n\nif (brobotProperties.getCore().isMock()) {\n    // mock logic\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-3-replace-mock-mode-settings",children:"Step 3: Replace Mock Mode Settings"}),"\n",(0,t.jsx)(n.p,{children:"Update code that sets mock mode:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Multiple places to set\nSystem.setProperty("brobot.mock", "true");\nSystem.setProperty("brobot.mock.mode", "true");\n// Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\n\nExecutionEnvironment env = ExecutionEnvironment.builder()\n    .mockMode(true)\n    .build();\nExecutionEnvironment.setInstance(env);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Single method call\nMockModeManager.setMockMode(true);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-migration-scenarios",children:"Common Migration Scenarios"}),"\n",(0,t.jsx)(n.h3,{id:"scenario-1-spring-boot-tests",children:"Scenario 1: Spring Boot Tests"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\n@TestPropertySource(properties = {\n    "brobot.core.mock=true",\n    "brobot.core.mock=true"\n})\npublic class IntegrationTest {\n    @BeforeEach\n    public void setup() {\n        // Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@SpringBootTest\npublic class IntegrationTest extends BrobotTestBase {\n    // Mock mode automatically configured\n    // Properties are synchronized by MockModeManager\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"scenario-2-custom-test-setup",children:"Scenario 2: Custom Test Setup"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public abstract class CustomTestBase {\n    @BeforeEach\n    public void setupMockMode() {\n        System.setProperty("brobot.mock.mode", "true");\n        try {\n            Field mockField = BrobotProperties.class.getField("mock");\n            mockField.set(null, true);\n        } catch (Exception e) {\n            // Handle error\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\n\npublic abstract class CustomTestBase extends BrobotTestBase {\n    // Mock mode handled by parent class\n    \n    @BeforeEach\n    @Override\n    public void setupTest() {\n        super.setupTest(); // Ensures MockModeManager configuration\n        // Your custom setup here\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"scenario-3-conditional-mock-mode",children:"Scenario 3: Conditional Mock Mode"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testWithConditionalMock() {\n    boolean useMock = System.getenv("CI") != null;\n    \n    if (useMock) {\n        System.setProperty("brobot.mock", "true");\n        // Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\n    }\n    \n    // Test logic\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testWithConditionalMock() {\n    boolean useMock = System.getenv("CI") != null;\n    \n    if (useMock) {\n        MockModeManager.setMockMode(true);\n    }\n    \n    // Test logic\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"scenario-4-mode-switching-during-test",children:"Scenario 4: Mode Switching During Test"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testModeSwitch() {\n    // Start with mock\n    // Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\n    // ... mock tests ...\n    \n    // Switch to real\n    // Mock mode is now configured via application.properties:\n// brobot.core.mock=false;\n    System.setProperty("brobot.mock", "false");\n    // ... real tests ...\n    \n    // Back to mock\n    // Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\n    System.setProperty("brobot.mock", "true");\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Test\npublic void testModeSwitch() {\n    // Start with mock\n    MockModeManager.setMockMode(true);\n    // ... mock tests ...\n    \n    // Switch to real\n    MockModeManager.setMockMode(false);\n    try {\n        // ... real tests ...\n    } finally {\n        // Always restore mock mode\n        MockModeManager.setMockMode(true);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-migration-issues",children:"Debugging Migration Issues"}),"\n",(0,t.jsx)(n.h3,{id:"verify-mock-mode-state",children:"Verify Mock Mode State"}),"\n",(0,t.jsx)(n.p,{children:"If you're experiencing issues after migration, use the debug logging:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Test\npublic void debugMockState() {\n    // Log complete mock mode state\n    MockModeManager.logMockModeState();\n    \n    // This shows:\n    // - System properties\n    // - ExecutionEnvironment state\n    // - FrameworkSettings value\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,t.jsx)(n.h4,{id:"issue-1-mock-mode-not-enabled",children:"Issue 1: Mock Mode Not Enabled"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Symptom:"})," Tests fail with ",(0,t.jsx)(n.code,{children:"HeadlessException"})," or try to capture real screens"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class MyTest extends BrobotTestBase {\n    @BeforeEach\n    @Override\n    public void setupTest() {\n        super.setupTest(); // MUST call parent setup!\n        // Your setup here\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"issue-2-inconsistent-mock-behavior",children:"Issue 2: Inconsistent Mock Behavior"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Symptom:"})," Some components use mock mode, others don't"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Debug the state\nMockModeManager.logMockModeState();\n\n// Ensure using MockModeManager everywhere\nif (brobotProperties.getCore().isMock()) { // Not brobotProperties.getCore().isMock()\n    // mock logic\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"issue-3-legacy-code-interference",children:"Issue 3: Legacy Code Interference"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Symptom:"})," Mock mode changes unexpectedly"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution:"})," Search for and replace all direct mock settings:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Find direct brobotProperties.getCore().isMock() assignments\ngrep -r "brobotProperties.getCore().isMock()\\s*=" .\n\n# Find system property settings\ngrep -r "setProperty.*mock" .\n\n# Replace with MockModeManager.setMockMode()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"benefits-after-migration",children:"Benefits After Migration"}),"\n",(0,t.jsx)(n.h3,{id:"cleaner-test-code",children:"Cleaner Test Code"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Before:"})," Multiple setup lines\n",(0,t.jsx)(n.strong,{children:"After:"})," Single base class extension"]}),"\n",(0,t.jsx)(n.h3,{id:"consistent-behavior",children:"Consistent Behavior"}),"\n",(0,t.jsx)(n.p,{children:"All components synchronized automatically - no more partial mock states"}),"\n",(0,t.jsx)(n.h3,{id:"better-debugging",children:"Better Debugging"}),"\n",(0,t.jsx)(n.p,{children:"Single logging method shows complete mock state"}),"\n",(0,t.jsx)(n.h3,{id:"easier-maintenance",children:"Easier Maintenance"}),"\n",(0,t.jsx)(n.p,{children:"Changes to mock configuration only need updates in one place"}),"\n",(0,t.jsx)(n.h2,{id:"checklist",children:"Checklist"}),"\n",(0,t.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All test classes extend ",(0,t.jsx)(n.code,{children:"BrobotTestBase"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Replaced all ",(0,t.jsx)(n.code,{children:"brobotProperties.getCore().isMock()"})," checks with ",(0,t.jsx)(n.code,{children:"brobotProperties.getCore().isMock()"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Replaced all mock mode settings with ",(0,t.jsx)(n.code,{children:"MockModeManager.setMockMode()"})]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Removed redundant system property settings"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Verified tests pass in both local and CI environments"]}),"\n",(0,t.jsxs)(n.li,{className:"task-list-item",children:[(0,t.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Added ",(0,t.jsx)(n.code,{children:"super.setupTest()"})," call in overridden setup methods"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"need-help",children:"Need Help?"}),"\n",(0,t.jsx)(n.p,{children:"If you encounter issues during migration:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"MockModeManager.logMockModeState()"})," to debug"]}),"\n",(0,t.jsxs)(n.li,{children:["Check that ",(0,t.jsx)(n.code,{children:"BrobotTestBase"})," is properly extended"]}),"\n",(0,t.jsx)(n.li,{children:"Ensure no legacy code is directly setting mock flags"}),"\n",(0,t.jsxs)(n.li,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"/brobot/docs/testing/mock-mode-manager",children:"Mock Mode Manager"})," documentation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var s=o(96540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);
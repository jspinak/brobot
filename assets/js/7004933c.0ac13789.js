"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6808],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},30317:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-library/architecture/logging-architecture","title":"Logging Architecture","description":"Technical architecture documentation for the Brobot Unified Logging System.","source":"@site/docs/03-core-library/architecture/logging-architecture.md","sourceDirName":"03-core-library/architecture","slug":"/core-library/architecture/logging-architecture","permalink":"/brobot/docs/core-library/architecture/logging-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/architecture/logging-architecture.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"docSidebar","previous":{"title":"ActionResult Architecture","permalink":"/brobot/docs/core-library/architecture/actionresult-architecture"},"next":{"title":"Modular Logging System","permalink":"/brobot/docs/core-library/architecture/modular-logging-system"}}');var r=i(74848),s=i(28453);const o={sidebar_position:10},l="Logging Architecture",a={},c=[{value:"System Overview",id:"system-overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"BrobotLogger",id:"brobotlogger",level:3},{value:"LoggingContext",id:"loggingcontext",level:3},{value:"LogEvent",id:"logevent",level:3},{value:"MessageRouter",id:"messagerouter",level:3},{value:"DiagnosticLogger",id:"diagnosticlogger",level:3},{value:"LogBuilder",id:"logbuilder",level:3},{value:"Design Patterns",id:"design-patterns",level:2},{value:"1. Facade Pattern",id:"1-facade-pattern",level:3},{value:"2. Builder Pattern",id:"2-builder-pattern",level:3},{value:"3. Strategy Pattern",id:"3-strategy-pattern",level:3},{value:"4. Thread-Local Pattern",id:"4-thread-local-pattern",level:3},{value:"5. Template Method Pattern",id:"5-template-method-pattern",level:3},{value:"Integration Points",id:"integration-points",level:2},{value:"SLF4J Integration",id:"slf4j-integration",level:3},{value:"ConsoleReporter Integration",id:"consolereporter-integration",level:3},{value:"ActionLogger Integration",id:"actionlogger-integration",level:3},{value:"Extension Points",id:"extension-points",level:2},{value:"Custom Log Sinks",id:"custom-log-sinks",level:3},{value:"Custom Handlers",id:"custom-handlers",level:3},{value:"Event Processors",id:"event-processors",level:3},{value:"Performance Characteristics",id:"performance-characteristics",level:2},{value:"Memory Usage",id:"memory-usage",level:3},{value:"Processing Time",id:"processing-time",level:3},{value:"Optimization Strategies",id:"optimization-strategies",level:3},{value:"Configuration Architecture",id:"configuration-architecture",level:2},{value:"Hierarchical Configuration",id:"hierarchical-configuration",level:3},{value:"Dynamic Reconfiguration",id:"dynamic-reconfiguration",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Sensitive Data Handling",id:"sensitive-data-handling",level:3},{value:"Access Control",id:"access-control",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Performance Tests",id:"performance-tests",level:3},{value:"Migration Architecture",id:"migration-architecture",level:2},{value:"Compatibility Layer",id:"compatibility-layer",level:3},{value:"Gradual Migration",id:"gradual-migration",level:3},{value:"Future Architecture",id:"future-architecture",level:2},{value:"Planned Enhancements",id:"planned-enhancements",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"logging-architecture",children:"Logging Architecture"})}),"\n",(0,r.jsx)(n.p,{children:"Technical architecture documentation for the Brobot Unified Logging System."}),"\n",(0,r.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Unified Logging System consolidates three previously separate logging mechanisms into a cohesive architecture with clear separation of concerns and extensible design."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         BrobotLogger                             \u2502\n\u2502  (Unified Facade - Single Entry Point for All Logging)          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                      LoggingContext                             \u2502\n\u2502  (Thread-local: Session, State, Action, Performance)            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     MessageRouter                               \u2502\n\u2502  (Routes to appropriate handlers based on type/config)          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Console   \u2502  Structured \u2502   SLF4J     \u2502    Metrics          \u2502\n\u2502   Handler   \u2502   Handler   \u2502  Handler    \u2502    Handler          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                        Sinks/Appenders                           \u2502\n\u2502  (Console, File, Database, Cloud, Message Queue, etc.)          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.h3,{id:"brobotlogger",children:"BrobotLogger"}),"\n",(0,r.jsx)(n.p,{children:"The main facade that provides the unified API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class BrobotLogger {\n    // Simple logging methods\n    void action(String action, StateObject target);\n    void transition(State from, State to);\n    void observation(String observation);\n    void error(String message, Throwable cause);\n    \n    // Advanced features\n    LogBuilder log();\n    AutoCloseable session(String sessionId);\n    AutoCloseable operation(String operationName);\n    Timer startTimer(String timerName);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provide simple, intuitive API for common logging needs"}),"\n",(0,r.jsx)(n.li,{children:"Create LogEvent instances with proper context"}),"\n",(0,r.jsx)(n.li,{children:"Delegate routing to MessageRouter"}),"\n",(0,r.jsx)(n.li,{children:"Manage configuration settings"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"loggingcontext",children:"LoggingContext"}),"\n",(0,r.jsx)(n.p,{children:"Thread-local storage for contextual information:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class LoggingContext {\n    private static final ThreadLocal<Context> contextHolder;\n    \n    static class Context {\n        String sessionId;\n        State currentState;\n        String currentAction;\n        Deque<String> operationStack;\n        Map<String, Object> metadata;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Thread isolation for concurrent executions"}),"\n",(0,r.jsx)(n.li,{children:"Hierarchical operation tracking"}),"\n",(0,r.jsx)(n.li,{children:"Context snapshots for async operations"}),"\n",(0,r.jsx)(n.li,{children:"Automatic cleanup to prevent memory leaks"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"logevent",children:"LogEvent"}),"\n",(0,r.jsx)(n.p,{children:"Immutable data model for log entries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class LogEvent {\n    enum Type { ACTION, TRANSITION, OBSERVATION, PERFORMANCE, ERROR }\n    enum Level { DEBUG, INFO, WARNING, ERROR }\n    \n    // Core fields\n    private final Type type;\n    private final Level level;\n    private final String message;\n    private final long timestamp;\n    \n    // Contextual data\n    private final String sessionId;\n    private final String stateId;\n    private final Map<String, Object> metadata;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Design Principles:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Immutable for thread safety"}),"\n",(0,r.jsx)(n.li,{children:"Builder pattern for flexible construction"}),"\n",(0,r.jsx)(n.li,{children:"Rich metadata support"}),"\n",(0,r.jsx)(n.li,{children:"Self-contained (no external dependencies)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"messagerouter",children:"MessageRouter"}),"\n",(0,r.jsx)(n.p,{children:"Routes LogEvent instances to appropriate handlers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class MessageRouter {\n    void route(LogEvent event) {\n        routeToSlf4j(event);\n        routeToConsole(event);\n        if (structuredLoggingEnabled) {\n            routeToActionLogger(event);\n        }\n        routeToDiagnosticLogger(event);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Routing Rules:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All events \u2192 SLF4J (with appropriate levels)"}),"\n",(0,r.jsx)(n.li,{children:"Events \u2192 ConsoleReporter (based on output level)"}),"\n",(0,r.jsx)(n.li,{children:"Events \u2192 ActionLogger (if structured logging enabled)"}),"\n",(0,r.jsx)(n.li,{children:"Pattern matching events \u2192 DiagnosticLogger (verbosity-aware)"}),"\n",(0,r.jsx)(n.li,{children:"Future: Custom handlers via SPI"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"diagnosticlogger",children:"DiagnosticLogger"}),"\n",(0,r.jsx)(n.p,{children:"Specialized component for pattern matching diagnostics:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class DiagnosticLogger {\n    @Autowired(required = false)\n    private LoggingVerbosityConfig verbosityConfig;\n    \n    @Autowired(required = false)\n    private BrobotLogger brobotLogger;\n    \n    // Pattern search logging with verbosity awareness\n    void logPatternSearch(Pattern pattern, Scene scene, double similarity);\n    void logPatternResult(Pattern pattern, int matchCount, double bestScore);\n    void logImageAnalysis(BufferedImage pattern, BufferedImage scene, String name);\n    void logSimilarityAnalysis(String pattern, double[] thresholds, Double found, Double score);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verbosity-aware output (QUIET/NORMAL/VERBOSE)"}),"\n",(0,r.jsx)(n.li,{children:"Pattern caching diagnostics"}),"\n",(0,r.jsx)(n.li,{children:"Image content analysis (black screen detection)"}),"\n",(0,r.jsx)(n.li,{children:"Progressive similarity threshold testing"}),"\n",(0,r.jsx)(n.li,{children:"Integration with both ConsoleReporter and BrobotLogger"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"logbuilder",children:"LogBuilder"}),"\n",(0,r.jsx)(n.p,{children:"Fluent API for complex logging scenarios:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class LogBuilder {\n    LogBuilder level(Level level);\n    LogBuilder action(String action);\n    LogBuilder target(StateObject object);\n    LogBuilder result(ActionResult result);\n    LogBuilder screenshot(String path);\n    LogBuilder metadata(String key, Object value);\n    LogBuilder performance(String metric, long value);\n    void log();\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"design-patterns",children:"Design Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-facade-pattern",children:"1. Facade Pattern"}),"\n",(0,r.jsx)(n.p,{children:"BrobotLogger acts as a simplified interface to the complex logging subsystem."}),"\n",(0,r.jsx)(n.h3,{id:"2-builder-pattern",children:"2. Builder Pattern"}),"\n",(0,r.jsx)(n.p,{children:"LogEvent and LogBuilder use builders for flexible object construction."}),"\n",(0,r.jsx)(n.h3,{id:"3-strategy-pattern",children:"3. Strategy Pattern"}),"\n",(0,r.jsx)(n.p,{children:"MessageRouter implements different routing strategies based on configuration."}),"\n",(0,r.jsx)(n.h3,{id:"4-thread-local-pattern",children:"4. Thread-Local Pattern"}),"\n",(0,r.jsx)(n.p,{children:"LoggingContext uses ThreadLocal for thread-safe context management."}),"\n",(0,r.jsx)(n.h3,{id:"5-template-method-pattern",children:"5. Template Method Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Handlers follow a template for processing LogEvents."}),"\n",(0,r.jsx)(n.h2,{id:"integration-points",children:"Integration Points"}),"\n",(0,r.jsx)(n.h3,{id:"slf4j-integration",children:"SLF4J Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"private void routeToSlf4j(LogEvent event) {\n    String message = formatSlf4jMessage(event);\n    \n    switch (event.getLevel()) {\n        case DEBUG: slf4jLogger.debug(message); break;\n        case INFO: slf4jLogger.info(message); break;\n        case WARNING: slf4jLogger.warn(message); break;\n        case ERROR: slf4jLogger.error(message, event.getError()); break;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"consolereporter-integration",children:"ConsoleReporter Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"private void routeToConsole(LogEvent event) {\n    OutputLevel level = determineConsoleLevel(event);\n    if (ConsoleReporter.minReportingLevel(level)) {\n        String output = event.toFormattedString();\n        String[] colors = determineColors(event);\n        ConsoleReporter.println(output, colors);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"actionlogger-integration",children:"ActionLogger Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"private void routeToActionLogger(LogEvent event) {\n    switch (event.getType()) {\n        case ACTION:\n            actionLogger.logAction(sessionId, toActionResult(event), \n                                 toObjectCollection(event));\n            break;\n        case TRANSITION:\n            actionLogger.logStateTransition(sessionId, \n                                          extractStates(event));\n            break;\n        // ... other types\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,r.jsx)(n.h3,{id:"custom-log-sinks",children:"Custom Log Sinks"}),"\n",(0,r.jsx)(n.p,{children:"Implement the LogSink interface for custom persistence:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@FunctionalInterface\npublic interface LogSink {\n    void save(LogData logData);\n}\n\n// Example implementation\npublic class ElasticsearchLogSink implements LogSink {\n    @Override\n    public void save(LogData logData) {\n        // Send to Elasticsearch\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-handlers",children:"Custom Handlers"}),"\n",(0,r.jsx)(n.p,{children:"Add new handlers to MessageRouter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface LogHandler {\n    void handle(LogEvent event);\n    boolean canHandle(LogEvent event);\n}\n\n@Component\npublic class MetricsHandler implements LogHandler {\n    @Override\n    public void handle(LogEvent event) {\n        if (event.getType() == PERFORMANCE) {\n            // Export to Prometheus/Grafana\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"event-processors",children:"Event Processors"}),"\n",(0,r.jsx)(n.p,{children:"Pre-process events before routing:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface EventProcessor {\n    LogEvent process(LogEvent event);\n}\n\n@Component\npublic class SanitizationProcessor implements EventProcessor {\n    @Override\n    public LogEvent process(LogEvent event) {\n        // Remove sensitive data from metadata\n        return sanitize(event);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-characteristics",children:"Performance Characteristics"}),"\n",(0,r.jsx)(n.h3,{id:"memory-usage",children:"Memory Usage"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ThreadLocal Context"}),": ~1KB per thread"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"LogEvent"}),": ~500 bytes average (depends on metadata)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Buffer Size"}),": Configurable, default 1000 events"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"processing-time",children:"Processing Time"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simple Log"}),": < 100 microseconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"With Routing"}),": < 500 microseconds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"With Persistence"}),": Depends on sink (async recommended)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"optimization-strategies",children:"Optimization Strategies"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Lazy Evaluation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"logger.log()\n    .message(() -> expensiveComputation())\n    .log();\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Async Processing"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Async\npublic void handleStructuredLog(LogEvent event) {\n    // Process in background thread\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Batch Operations"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class BatchingLogSink implements LogSink {\n    private final BlockingQueue<LogData> queue;\n    // Batch write every N events or T seconds\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-architecture",children:"Configuration Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"hierarchical-configuration",children:"Hierarchical Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  logging:\n    defaults:           # Global defaults\n      level: INFO\n      format: json\n    \n    console:           # Console-specific\n      inherit: defaults\n      level: HIGH\n      \n    structured:        # Structured logging\n      inherit: defaults\n      sinks:\n        - file\n        - elasticsearch\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-reconfiguration",children:"Dynamic Reconfiguration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class LoggingConfigManager {\n    @EventListener(ConfigChangeEvent.class)\n    public void onConfigChange(ConfigChangeEvent event) {\n        // Update logging configuration without restart\n        reconfigureLoggers(event.getNewConfig());\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"sensitive-data-handling",children:"Sensitive Data Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class SensitiveDataFilter {\n    private final Set<String> sensitiveKeys = Set.of(\n        "password", "token", "apiKey", "ssn"\n    );\n    \n    public LogEvent filter(LogEvent event) {\n        Map<String, Object> filtered = new HashMap<>();\n        event.getMetadata().forEach((k, v) -> {\n            if (sensitiveKeys.contains(k.toLowerCase())) {\n                filtered.put(k, "***REDACTED***");\n            } else {\n                filtered.put(k, v);\n            }\n        });\n        return event.withMetadata(filtered);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"access-control",children:"Access Control"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Component\npublic class LogAccessController {\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public List<LogEvent> getSecurityLogs() {\n        // Only admins can access security logs\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Test each component in isolation"}),"\n",(0,r.jsx)(n.li,{children:"Mock dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Verify routing logic"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Test full logging pipeline"}),"\n",(0,r.jsx)(n.li,{children:"Verify handler interactions"}),"\n",(0,r.jsx)(n.li,{children:"Check configuration loading"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-tests",children:"Performance Tests"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Measure logging overhead"}),"\n",(0,r.jsx)(n.li,{children:"Test under high concurrency"}),"\n",(0,r.jsx)(n.li,{children:"Validate memory usage"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"migration-architecture",children:"Migration Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"compatibility-layer",children:"Compatibility Layer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Component\npublic class LegacyLoggerAdapter {\n    private final BrobotLogger logger;\n    \n    // Adapts old ActionLogger calls\n    public void logAction(String sessionId, ActionResult result) {\n        try (var session = logger.session(sessionId)) {\n            logger.action("LEGACY", null, result);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"gradual-migration",children:"Gradual Migration"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Phase 1"}),": Deploy unified logger alongside existing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Phase 2"}),": Route existing loggers through unified system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Phase 3"}),": Migrate code to use unified API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Phase 4"}),": Remove legacy logging code"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"future-architecture",children:"Future Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"planned-enhancements",children:"Planned Enhancements"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Distributed Tracing"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OpenTelemetry integration"}),"\n",(0,r.jsx)(n.li,{children:"Trace ID propagation"}),"\n",(0,r.jsx)(n.li,{children:"Span management"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Real-time Streaming"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"WebSocket log streaming"}),"\n",(0,r.jsx)(n.li,{children:"Server-sent events"}),"\n",(0,r.jsx)(n.li,{children:"Log tailing API"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Machine Learning"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Anomaly detection"}),"\n",(0,r.jsx)(n.li,{children:"Pattern recognition"}),"\n",(0,r.jsx)(n.li,{children:"Predictive alerts"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cloud Native"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Kubernetes operator"}),"\n",(0,r.jsx)(n.li,{children:"Service mesh integration"}),"\n",(0,r.jsx)(n.li,{children:"Multi-cluster support"}),"\n"]}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8466],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var s=i(96540);const o={},l=s.createContext(o);function r(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(l.Provider,{value:n},e.children)}},63020:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"logging/options-logging-guide","title":"Options Logging Methods Guide","description":"Overview","source":"@site/docs/07-logging/options-logging-guide.md","sourceDirName":"07-logging","slug":"/logging/options-logging-guide","permalink":"/brobot/docs/logging/options-logging-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/07-logging/options-logging-guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Modular Logging System Guide","permalink":"/brobot/docs/logging/modular-logging-guide"}}');var o=i(74848),l=i(28453);const r={},t="Options Logging Methods Guide",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Available Logging Methods",id:"available-logging-methods",level:2},{value:"Core Logging Methods",id:"core-logging-methods",level:3},{value:"Advanced Logging Configuration",id:"advanced-logging-configuration",level:3},{value:"Available in All Options Classes",id:"available-in-all-options-classes",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Descriptive Messages",id:"1-use-descriptive-messages",level:3},{value:"2. Include Context in Failure Messages",id:"2-include-context-in-failure-messages",level:3},{value:"3. Use Placeholders for Dynamic Values",id:"3-use-placeholders-for-dynamic-values",level:3},{value:"4. Combine with Timing Options",id:"4-combine-with-timing-options",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Log Levels",id:"log-levels",level:2},{value:"Configuration via application.properties",id:"configuration-via-applicationproperties",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"options-logging-methods-guide",children:"Options Logging Methods Guide"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"Brobot provides powerful embedded logging capabilities directly in all Options builder classes. This allows you to add contextual logging without cluttering your code with separate logging statements."}),"\n",(0,o.jsx)(n.h2,{id:"available-logging-methods",children:"Available Logging Methods"}),"\n",(0,o.jsxs)(n.p,{children:["All Options classes that extend ",(0,o.jsx)(n.code,{children:"ActionConfig"})," inherit the following logging methods in their builders:"]}),"\n",(0,o.jsx)(n.h3,{id:"core-logging-methods",children:"Core Logging Methods"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"withBeforeActionLog(String message)"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Logs a message before the action is executed"}),"\n",(0,o.jsx)(n.li,{children:"Useful for indicating what the system is attempting to do"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'PatternFindOptions options = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Searching for submit button...")\r\n    .build();\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"withSuccessLog(String message)"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Logs a message when the action completes successfully"}),"\n",(0,o.jsxs)(n.li,{children:["Can include placeholders like ",(0,o.jsx)(n.code,{children:"{location}"})," that are replaced with actual values"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ClickOptions options = new ClickOptions.Builder()\r\n    .withSuccessLog("Successfully clicked button at {location}")\r\n    .build();\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"withFailureLog(String message)"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Logs a message when the action fails"}),"\n",(0,o.jsx)(n.li,{children:"Essential for debugging and understanding automation failures"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'TypeOptions options = new TypeOptions.Builder()\r\n    .withFailureLog("Failed to type text - check if field is accessible")\r\n    .build();\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"withAfterActionLog(String message)"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Logs a message after the action completes, regardless of success/failure"}),"\n",(0,o.jsx)(n.li,{children:"Useful for debugging action completion timing"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'ScrollOptions options = new ScrollOptions.Builder()\r\n    .withAfterActionLog("Scroll action completed")\r\n    .build();\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"advanced-logging-configuration",children:"Advanced Logging Configuration"}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"withLogging(Consumer<LoggingOptionsBuilder> configurator)"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Provides full control over all logging settings"}),"\n",(0,o.jsx)(n.li,{children:"Allows customization of log levels and conditions"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'PatternFindOptions options = new PatternFindOptions.Builder()\r\n    .withLogging(log -> log\r\n        .beforeActionMessage("Starting search...")\r\n        .successMessage("Found match!")\r\n        .failureMessage("No match found")\r\n        .logOnSuccess(true)\r\n        .logOnFailure(true)\r\n        .successLevel(LogEventType.ACTION)\r\n        .failureLevel(LogEventType.ERROR)\r\n    )\r\n    .build();\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"withNoLogging()"})})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Disables all automatic logging for this action"}),"\n",(0,o.jsx)(n.li,{children:"Useful for repetitive actions where logging would be excessive"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"MouseMoveOptions options = new MouseMoveOptions.Builder()\r\n    .withNoLogging()  // Disable logging for mouse movement\r\n    .build();\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"available-in-all-options-classes",children:"Available in All Options Classes"}),"\n",(0,o.jsxs)(n.p,{children:["The logging methods are available in all Options classes that extend ",(0,o.jsx)(n.code,{children:"ActionConfig"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Find Operations"}),": ",(0,o.jsx)(n.code,{children:"PatternFindOptions"}),", ",(0,o.jsx)(n.code,{children:"ColorFindOptions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Click Operations"}),": ",(0,o.jsx)(n.code,{children:"ClickOptions"}),", ",(0,o.jsx)(n.code,{children:"DoubleClickOptions"}),", ",(0,o.jsx)(n.code,{children:"RightClickOptions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Type Operations"}),": ",(0,o.jsx)(n.code,{children:"TypeOptions"}),", ",(0,o.jsx)(n.code,{children:"KeyDownOptions"}),", ",(0,o.jsx)(n.code,{children:"KeyUpOptions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Mouse Operations"}),": ",(0,o.jsx)(n.code,{children:"MouseMoveOptions"}),", ",(0,o.jsx)(n.code,{children:"MouseDownOptions"}),", ",(0,o.jsx)(n.code,{children:"MouseUpOptions"}),", ",(0,o.jsx)(n.code,{children:"ScrollOptions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Drag Operations"}),": ",(0,o.jsx)(n.code,{children:"DragOptions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Region Operations"}),": ",(0,o.jsx)(n.code,{children:"DefineRegionOptions"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Visual Operations"}),": ",(0,o.jsx)(n.code,{children:"HighlightOptions"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-use-descriptive-messages",children:"1. Use Descriptive Messages"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Good\r\n.withBeforeActionLog("Opening Black Spirit\'s Adventure window...")\r\n.withSuccessLog("Black Spirit\'s Adventure window opened successfully")\r\n.withFailureLog("Failed to open Black Spirit\'s Adventure - die icon not found")\r\n\r\n// Less descriptive\r\n.withBeforeActionLog("Opening...")\r\n.withSuccessLog("Opened")\r\n.withFailureLog("Failed")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-include-context-in-failure-messages",children:"2. Include Context in Failure Messages"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'.withFailureLog("Submit button not found - check if page loaded completely")\r\n.withFailureLog("Failed to type in field - ensure field is visible and not disabled")\r\n.withFailureLog("Storage Keeper dialog not opened - make sure you\'re near the NPC")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-use-placeholders-for-dynamic-values",children:"3. Use Placeholders for Dynamic Values"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'.withSuccessLog("Found {count} matches at {location}")\r\n.withSuccessLog("Clicked at position {x}, {y}")\r\n.withSuccessLog("Typed \'{text}\' successfully")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-combine-with-timing-options",children:"4. Combine with Timing Options"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'PatternFindOptions options = new PatternFindOptions.Builder()\r\n    .withBeforeActionLog("Searching for save button...")\r\n    .withSuccessLog("Save button found and ready")\r\n    .withFailureLog("Save button not found - document may not be ready")\r\n    .setPauseBeforeBegin(0.5)  // Wait before searching\r\n    .setPauseAfterEnd(1.0)      // Wait after finding\r\n    .setWaitTime(5.0)           // Maximum time to search\r\n    .build();\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@TransitionSet(state = MainScreenState.class)\r\n@RequiredArgsConstructor\r\n@Slf4j\r\npublic class MainScreenTransitions {\r\n\r\n    private final MainScreenState mainScreenState;\r\n    private final Action action;\r\n\r\n    @OutgoingTransition(to = BlackSpiritsAdventureState.class, priority = 1)\r\n    public boolean toBlackSpiritsAdventure() {\r\n        // Clean, embedded logging - no separate log statements needed\r\n        ClickOptions clickOptions = new ClickOptions.Builder()\r\n            .withBeforeActionLog("Opening Black Spirit\'s Adventure...")\r\n            .withSuccessLog("Black Spirit\'s Adventure opened successfully")\r\n            .withFailureLog("Failed to open Black Spirit\'s Adventure - die icon not found")\r\n            .setPauseBeforeBegin(0.5)\r\n            .setPauseAfterEnd(1.5)\r\n            .build();\r\n\r\n        return action.click(mainScreenState.getDie(), clickOptions).isSuccess();\r\n    }\r\n\r\n    @IncomingTransition\r\n    public boolean verifyArrival() {\r\n        // Verification with detailed logging\r\n        PatternFindOptions findOptions = new PatternFindOptions.Builder()\r\n            .withBeforeActionLog("Verifying arrival at MainScreen...")\r\n            .withSuccessLog("Successfully arrived at MainScreen")\r\n            .withFailureLog("Failed to verify MainScreen - check if game is running")\r\n            .setWaitTime(5.0)\r\n            .setPauseAfterEnd(0.5)\r\n            .build();\r\n\r\n        return action.find(mainScreenState.getDie(), findOptions).isSuccess() ||\r\n               action.find(mainScreenState.getProcessing(), findOptions).isSuccess();\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"log-levels",children:"Log Levels"}),"\n",(0,o.jsx)(n.p,{children:"The logging system supports different log levels for different scenarios:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogEventType.ACTION"})," - Standard action logging (default for most messages)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogEventType.ERROR"})," - Error conditions (default for failure messages)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogEventType.DEBUG"})," - Detailed debugging information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogEventType.INFO"})," - General information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LogEventType.WARN"})," - Warning conditions"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["You can customize log levels using the ",(0,o.jsx)(n.code,{children:"withLogging()"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:".withLogging(log -> log\r\n    .beforeActionLevel(LogEventType.DEBUG)\r\n    .successLevel(LogEventType.INFO)\r\n    .failureLevel(LogEventType.ERROR)\r\n)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration-via-applicationproperties",children:"Configuration via application.properties"}),"\n",(0,o.jsxs)(n.p,{children:["Global logging behavior can be configured in ",(0,o.jsx)(n.code,{children:"application.properties"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-properties",children:"# Enable verbose logging for all actions\r\nbrobot.logging.verbosity=VERBOSE\r\n\r\n# Enable console action logging\r\nbrobot.console.actions.enabled=true\r\nbrobot.console.actions.level=VERBOSE\r\n\r\n# Control specific log types\r\nbrobot.logging.before-action=true\r\nbrobot.logging.after-action=false\r\nbrobot.logging.success=true\r\nbrobot.logging.failure=true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"The embedded logging methods in Options builders provide:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Clean code"})," - No separate logging statements cluttering your logic"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Contextual messages"})," - Logging tied directly to the action being performed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Automatic timing"})," - Logs appear at the right moment in the action lifecycle"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consistent format"})," - All actions log in a standardized way"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easy debugging"})," - Clear messages help identify exactly where automation fails"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
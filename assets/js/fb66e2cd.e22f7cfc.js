"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2479],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},72976:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"no-code-automation/desktop-runner/action-recording","title":"Action Recording and Persistence","description":"Overview","source":"@site/docs/02-no-code-automation/desktop-runner/action-recording.md","sourceDirName":"02-no-code-automation/desktop-runner","slug":"/no-code-automation/desktop-runner/action-recording","permalink":"/brobot/docs/no-code-automation/desktop-runner/action-recording","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/02-no-code-automation/desktop-runner/action-recording.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Action Recording and Persistence","sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"Brobot Runner: Desktop Automation Execution Environment","permalink":"/brobot/docs/no-code-automation/desktop-runner/runner-overview"},"next":{"title":"floranext-automation","permalink":"/brobot/docs/no-code-automation/desktop-runner/example-configuration/floranext-automation"}}');var r=i(74848),t=i(28453);const o={title:"Action Recording and Persistence",sidebar_position:3},c="Action Recording and Persistence",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Separation of Concerns",id:"separation-of-concerns",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"Using Action Recording",id:"using-action-recording",level:2},{value:"Enabling Recording in the UI",id:"enabling-recording-in-the-ui",level:3},{value:"Recording Sessions",id:"recording-sessions",level:3},{value:"Session Management",id:"session-management",level:3},{value:"Exporting ActionHistory",id:"exporting-actionhistory",level:2},{value:"Export Formats",id:"export-formats",level:3},{value:"JSON Export (Default)",id:"json-export-default",level:4},{value:"CSV Export",id:"csv-export",level:4},{value:"Export Process",id:"export-process",level:3},{value:"Importing ActionHistory",id:"importing-actionhistory",level:2},{value:"For Testing",id:"for-testing",level:3},{value:"For Analysis",id:"for-analysis",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Recording Sessions Table",id:"recording-sessions-table",level:3},{value:"Action Records Table",id:"action-records-table",level:3},{value:"Matches Table",id:"matches-table",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Runner Configuration",id:"runner-configuration",level:3},{value:"Performance Tuning",id:"performance-tuning",level:3},{value:"UI Components",id:"ui-components",level:2},{value:"Recording Control Panel",id:"recording-control-panel",level:3},{value:"Action History Viewer",id:"action-history-viewer",level:3},{value:"Filtering and Search",id:"filtering-and-search",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Recording Strategy",id:"recording-strategy",level:3},{value:"Data Management",id:"data-management",level:3},{value:"Testing with Recorded Data",id:"testing-with-recorded-data",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Logging",id:"debug-logging",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Recording Service API",id:"recording-service-api",level:3},{value:"Event API",id:"event-api",level:3},{value:"Migration from Library Persistence",id:"migration-from-library-persistence",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"action-recording-and-persistence",children:"Action Recording and Persistence"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Brobot Runner application provides comprehensive ActionRecord persistence capabilities, allowing you to capture, store, and replay automation execution history. This feature enables:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Recording live automation sessions"}),"\n",(0,r.jsx)(n.li,{children:"Building test data from real executions"}),"\n",(0,r.jsx)(n.li,{children:"Analyzing automation patterns and performance"}),"\n",(0,r.jsx)(n.li,{children:"Exporting ActionHistory for mock testing"}),"\n",(0,r.jsx)(n.li,{children:"Debugging and troubleshooting automation issues"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"separation-of-concerns",children:"Separation of Concerns"}),"\n",(0,r.jsx)(n.p,{children:"The Brobot architecture maintains clear separation between execution and persistence:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Library (brobot)"}),": Focuses on automation execution, pattern matching, and action performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Runner (brobot/runner)"}),": Handles persistence, UI, recording, and session management"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This design ensures the library remains lightweight while the Runner provides rich data management features."}),"\n",(0,r.jsx)(n.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph LR\n    A[Brobot Library] --\x3e|ActionExecutedEvent| B[Runner Event Listener]\n    B --\x3e|ActionRecord| C[Recording Service]\n    C --\x3e|Entity| D[H2 Database]\n    D --\x3e|Query| E[UI Components]\n    E --\x3e|Export| F[JSON Files]\n    F --\x3e|Import| G[Test Framework]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-action-recording",children:"Using Action Recording"}),"\n",(0,r.jsx)(n.h3,{id:"enabling-recording-in-the-ui",children:"Enabling Recording in the UI"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Start Recording"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Click the Record button in the Runner toolbar"}),"\n",(0,r.jsx)(n.li,{children:'Enter a session name (e.g., "Login Flow Test")'}),"\n",(0,r.jsx)(n.li,{children:"Recording indicator turns red"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"During Recording"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All executed actions are automatically captured"}),"\n",(0,r.jsx)(n.li,{children:"Real-time statistics display in the status bar"}),"\n",(0,r.jsx)(n.li,{children:"Success rate updates dynamically"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Stop Recording"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Click the Record button again"}),"\n",(0,r.jsx)(n.li,{children:"Session is saved to the database"}),"\n",(0,r.jsx)(n.li,{children:"Statistics summary is displayed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recording-sessions",children:"Recording Sessions"}),"\n",(0,r.jsx)(n.p,{children:"Each recording session captures:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Action Details"}),": Type, configuration, timing, success/failure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Match Data"}),": Found regions, similarity scores, screenshots"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State Context"}),": Current state, transitions, state IDs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Metrics"}),": Duration, resource usage, timing patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Application Context"}),": Application under test, environment"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,r.jsx)(n.p,{children:"The Runner provides comprehensive session management:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Sessions are managed through the UI, but can be accessed programmatically\npublic interface RecordingSessionRepository {\n    List<RecordingSessionEntity> findAll();\n    List<RecordingSessionEntity> findByApplication(String app);\n    List<RecordingSessionEntity> findByDateRange(LocalDateTime from, LocalDateTime to);\n    RecordingSessionEntity findByName(String name);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"exporting-actionhistory",children:"Exporting ActionHistory"}),"\n",(0,r.jsx)(n.h3,{id:"export-formats",children:"Export Formats"}),"\n",(0,r.jsx)(n.p,{children:"The Runner supports multiple export formats:"}),"\n",(0,r.jsx)(n.h4,{id:"json-export-default",children:"JSON Export (Default)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "timesSearched": 150,\n  "timesFound": 142,\n  "snapshots": [\n    {\n      "actionConfig": {\n        "@type": "PatternFindOptions",\n        "strategy": "BEST",\n        "similarity": 0.85\n      },\n      "actionSuccess": true,\n      "duration": 245,\n      "matchList": [\n        {\n          "x": 100,\n          "y": 200,\n          "w": 50,\n          "h": 30,\n          "simScore": 0.92\n        }\n      ],\n      "timestamp": "2024-01-15T10:30:45"\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"csv-export",children:"CSV Export"}),"\n",(0,r.jsx)(n.p,{children:"For data analysis and spreadsheet tools:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csv",children:"timestamp,action_type,success,duration_ms,similarity,x,y,width,height\n2024-01-15T10:30:45,FIND,true,245,0.92,100,200,50,30\n2024-01-15T10:30:46,CLICK,true,150,0.88,100,200,50,30\n"})}),"\n",(0,r.jsx)(n.h3,{id:"export-process",children:"Export Process"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"From UI"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select session in the History panel"}),"\n",(0,r.jsx)(n.li,{children:"Click Export button"}),"\n",(0,r.jsx)(n.li,{children:"Choose format and location"}),"\n",(0,r.jsx)(n.li,{children:"File is saved with session metadata"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Bulk Export"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select multiple sessions"}),"\n",(0,r.jsx)(n.li,{children:"Export as batch"}),"\n",(0,r.jsx)(n.li,{children:"Creates zip archive with all sessions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Automated Export"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Configure auto-export in application.yml\nbrobot:\n  runner:\n    recording:\n      auto-export: true\n      export-path: /data/exports\n      export-format: JSON\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"importing-actionhistory",children:"Importing ActionHistory"}),"\n",(0,r.jsx)(n.h3,{id:"for-testing",children:"For Testing"}),"\n",(0,r.jsx)(n.p,{children:"Import recorded sessions into your test framework:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@SpringBootTest\npublic class RecordedDataTest {\n    \n    @Test\n    public void testWithRecordedData() throws IOException {\n        // Load exported ActionHistory\n        ObjectMapper mapper = new ObjectMapper();\n        ActionHistory history = mapper.readValue(\n            new File("exports/login-flow-2024-01-15.json"),\n            ActionHistory.class\n        );\n        \n        // Apply to StateImage for mock testing\n        StateImage loginButton = new StateImage.Builder()\n            .withPattern("login-button.png")\n            .build();\n        loginButton.setActionHistory(history);\n        \n        // Run tests with real recorded data\n        Optional<ActionRecord> snapshot = history.getRandomSnapshot(\n            new PatternFindOptions.Builder().build()\n        );\n        \n        assertTrue(snapshot.isPresent());\n        assertTrue(snapshot.get().isActionSuccess());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"for-analysis",children:"For Analysis"}),"\n",(0,r.jsx)(n.p,{children:"Load sessions for pattern analysis:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class SessionAnalyzer {\n    \n    public void analyzeSession(File exportFile) throws IOException {\n        ActionHistory history = loadHistory(exportFile);\n        \n        // Calculate success rate\n        double successRate = history.getTimesFound() * 100.0 / \n                           history.getTimesSearched();\n        \n        // Analyze timing patterns\n        DoubleSummaryStatistics timingStats = history.getSnapshots().stream()\n            .filter(ActionRecord::isActionSuccess)\n            .mapToDouble(ActionRecord::getDuration)\n            .summaryStatistics();\n        \n        System.out.println("Success Rate: " + successRate + "%");\n        System.out.println("Avg Duration: " + timingStats.getAverage() + "ms");\n        System.out.println("Max Duration: " + timingStats.getMax() + "ms");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,r.jsx)(n.p,{children:"The Runner uses an H2 database with the following schema:"}),"\n",(0,r.jsx)(n.h3,{id:"recording-sessions-table",children:"Recording Sessions Table"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE recording_sessions (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    session_name VARCHAR(255),\n    start_time TIMESTAMP,\n    end_time TIMESTAMP,\n    total_actions INT,\n    successful_actions INT,\n    application VARCHAR(255),\n    description TEXT,\n    exported BOOLEAN DEFAULT FALSE,\n    export_path VARCHAR(500)\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"action-records-table",children:"Action Records Table"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE action_records (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    session_id BIGINT,\n    action_config_type VARCHAR(100),\n    action_config_json TEXT,\n    action_success BOOLEAN,\n    duration_ms BIGINT,\n    text_result TEXT,\n    timestamp TIMESTAMP,\n    state_id BIGINT,\n    state_name VARCHAR(255),\n    object_name VARCHAR(255),\n    FOREIGN KEY (session_id) REFERENCES recording_sessions(id)\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"matches-table",children:"Matches Table"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE matches (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    action_record_id BIGINT,\n    x INT,\n    y INT,\n    width INT,\n    height INT,\n    similarity_score DOUBLE,\n    screenshot_path VARCHAR(500),\n    FOREIGN KEY (action_record_id) REFERENCES action_records(id)\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"runner-configuration",children:"Runner Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Configure recording behavior in ",(0,r.jsx)(n.code,{children:"application.yml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'brobot:\n  runner:\n    recording:\n      # Recording settings\n      enabled: false                    # Default recording state\n      auto-save: true                   # Auto-save during recording\n      save-interval: 60                 # Seconds between auto-saves\n      \n      # Storage limits\n      max-records-per-session: 10000    # Maximum records per session\n      max-sessions: 100                 # Maximum stored sessions\n      \n      # Export settings\n      export-format: JSON               # Default export format\n      compress-exports: true            # Compress large exports\n      \n      # Database maintenance\n      retention-days: 30                # Keep sessions for 30 days\n      cleanup-enabled: true             # Auto-cleanup old sessions\n      cleanup-schedule: "0 0 2 * * ?"   # Run at 2 AM daily\n      \n      # Performance\n      batch-size: 100                   # Batch insert size\n      async-recording: true             # Non-blocking recording\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,r.jsx)(n.p,{children:"For high-volume recording:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  runner:\n    recording:\n      # Optimize for performance\n      async-recording: true\n      batch-size: 500\n      save-interval: 300  # 5 minutes\n      \n      # Reduce storage\n      store-screenshots: false\n      compress-matches: true\n      \n      # Memory management\n      max-memory-buffer: 1000  # Records in memory\n      flush-on-memory-pressure: true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"ui-components",children:"UI Components"}),"\n",(0,r.jsx)(n.h3,{id:"recording-control-panel",children:"Recording Control Panel"}),"\n",(0,r.jsx)(n.p,{children:"The Recording Control Panel provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Record Button"}),": Start/stop recording"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Selector"}),": Choose active session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Statistics Display"}),": Live action counts and success rate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Export Controls"}),": Quick export of current session"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"action-history-viewer",children:"Action History Viewer"}),"\n",(0,r.jsx)(n.p,{children:"View and analyze recorded actions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Table View"}),": Sortable, filterable action list"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Timeline View"}),": Visual representation of actions over time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Detail View"}),": Deep dive into specific actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Comparison View"}),": Compare multiple sessions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"filtering-and-search",children:"Filtering and Search"}),"\n",(0,r.jsx)(n.p,{children:"Advanced filtering options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By Success"}),": Show only successful/failed actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By Type"}),": Filter by action type (FIND, CLICK, TYPE, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By State"}),": Show actions from specific states"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By Time"}),": Date/time range filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"By Pattern"}),": Text search in action details"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"recording-strategy",children:"Recording Strategy"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Focused Sessions"}),": Record specific workflows separately"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean Environments"}),": Ensure consistent test conditions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple Runs"}),": Record the same workflow multiple times"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Failure Scenarios"}),": Intentionally record failures for testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Baselines"}),": Record during different load conditions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-management",children:"Data Management"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regular Exports"}),": Export important sessions before cleanup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version Control"}),": Store exports with your test code"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Descriptive Names"}),": Use clear, searchable session names"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metadata"}),": Add descriptions to sessions for context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleanup Policy"}),": Configure retention based on your needs"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"testing-with-recorded-data",children:"Testing with Recorded Data"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deterministic Tests"}),": Use seeded random for reproducibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Validation"}),": Verify imported data integrity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Benchmarks"}),": Compare against recorded baselines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Edge Cases"}),": Include failure scenarios in test data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Regular Updates"}),": Refresh test data periodically"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Recording Not Starting"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check Runner is connected to automation"}),"\n",(0,r.jsx)(n.li,{children:"Verify database is accessible"}),"\n",(0,r.jsx)(n.li,{children:"Ensure sufficient disk space"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Missing Actions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify event listeners are registered"}),"\n",(0,r.jsx)(n.li,{children:"Check action execution is generating events"}),"\n",(0,r.jsx)(n.li,{children:"Review log files for errors"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Export Failures"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Validate export path permissions"}),"\n",(0,r.jsx)(n.li,{children:"Check disk space"}),"\n",(0,r.jsx)(n.li,{children:"Verify session exists in database"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Issues"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Increase batch size"}),"\n",(0,r.jsx)(n.li,{children:"Enable async recording"}),"\n",(0,r.jsx)(n.li,{children:"Reduce screenshot storage"}),"\n",(0,r.jsx)(n.li,{children:"Configure cleanup schedule"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,r.jsx)(n.p,{children:"Enable detailed logging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"logging:\n  level:\n    io.github.jspinak.brobot.runner.recording: DEBUG\n    io.github.jspinak.brobot.runner.persistence: DEBUG\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"recording-service-api",children:"Recording Service API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface ActionRecordingService {\n    // Session management\n    void startRecording(String sessionName, String application);\n    void stopRecording();\n    boolean isRecording();\n    \n    // Action recording\n    void recordAction(ActionRecord record, StateImage stateImage);\n    void recordBatch(List<ActionRecord> records);\n    \n    // Export/Import\n    ActionHistory exportSession(Long sessionId);\n    void importSession(ActionHistory history, String sessionName);\n    \n    // Query\n    List<RecordingSessionEntity> getAllSessions();\n    RecordingSessionEntity getSession(Long sessionId);\n    List<ActionRecordEntity> getSessionRecords(Long sessionId);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"event-api",children:"Event API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Events published by the recording system\npublic class RecordingStartedEvent {\n    private RecordingSessionEntity session;\n}\n\npublic class RecordingStoppedEvent {\n    private RecordingSessionEntity session;\n    private int totalRecorded;\n}\n\npublic class ActionRecordedEvent {\n    private ActionRecordEntity record;\n    private RecordingSessionEntity session;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-from-library-persistence",children:"Migration from Library Persistence"}),"\n",(0,r.jsx)(n.p,{children:"If you were previously using persistence in the library:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Export existing data"})," from your database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Import into Runner"})," using the import feature"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update test configuration"})," to load from Runner exports"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remove library persistence"})," configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The Runner provides superior persistence capabilities with UI management, making it the recommended approach for ActionHistory persistence."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
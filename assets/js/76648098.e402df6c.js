"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3785],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var s=t(96540);const a={},i=s.createContext(a);function r(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(i.Provider,{value:e},n.children)}},99563:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"no-code-automation/configuration-website/configuration-schema/automation-dsl-schema","title":"Automation DSL Schema","description":"The Automation DSL (Domain-Specific Language) Schema defines a programming language for creating automation logic in Brobot Runner. This schema represents the \\"how\\" of your automation - the functions, statements, and expressions that control behavior.","source":"@site/versioned_docs/version-1.0.7/02-no-code-automation/configuration-website/configuration-schema/automation-dsl-schema.md","sourceDirName":"02-no-code-automation/configuration-website/configuration-schema","slug":"/no-code-automation/configuration-website/configuration-schema/automation-dsl-schema","permalink":"/brobot/docs/1.0.7/no-code-automation/configuration-website/configuration-schema/automation-dsl-schema","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.7/02-no-code-automation/configuration-website/configuration-schema/automation-dsl-schema.md","tags":[],"version":"1.0.7","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"Project Schema","permalink":"/brobot/docs/1.0.7/no-code-automation/configuration-website/configuration-schema/project-schema"},"next":{"title":"Combining Find Operations","permalink":"/brobot/docs/1.0.7/core-library/guides/finding-objects/combining-finds"}}');var a=t(74848),i=t(28453);const r={sidebar_position:5},o="Automation DSL Schema",l={},c=[{value:"Automation Functions",id:"automation-functions",level:2}];function p(n){const e={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"automation-dsl-schema",children:"Automation DSL Schema"})}),"\n",(0,a.jsx)(e.p,{children:'The Automation DSL (Domain-Specific Language) Schema defines a programming language for creating automation logic in Brobot Runner. This schema represents the "how" of your automation - the functions, statements, and expressions that control behavior.'}),"\n",(0,a.jsx)(e.h2,{id:"automation-functions",children:"Automation Functions"}),"\n",(0,a.jsx)(e.p,{children:"Automation functions are the main building blocks of the DSL. They contain sequences of statements that perform actions:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "id": 1,\n  "name": "performLogin",\n  "returnType": "boolean",\n  "parameters": [\n    {\n      "name": "username",\n      "type": "string"\n    },\n    {\n      "name": "password",\n      "type": "string"\n    }\n  ],\n  "statements": [\n    {\n      "statementType": "variableDeclaration",\n      "name": "options",\n      "type": "actionOptions",\n      "value": {\n        "expressionType": "builder",\n        "builderType": "actionOptions",\n        "methods": [\n          {\n            "method": "setAction",\n            "arguments": [\n              {\n                "expressionType": "literal",\n                "valueType": "string",\n                "value": "CLICK"\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      "statementType": "methodCall",\n      "object": "action",\n      "method": "perform",\n      "arguments": [\n        {\n          "expressionType": "variable",\n          "name": "options"\n        },\n        {\n          "expressionType": "variable",\n          "name": "loginButton"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"Function Properties"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"Property"}),(0,a.jsx)(e.th,{children:"Type"}),(0,a.jsx)(e.th,{children:"Description"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"id"}),(0,a.jsx)(e.td,{children:"integer"}),(0,a.jsx)(e.td,{children:"Unique identifier for the function"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"name"}),(0,a.jsx)(e.td,{children:"string"}),(0,a.jsx)(e.td,{children:"Name of the function"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"description"}),(0,a.jsx)(e.td,{children:"string"}),(0,a.jsx)(e.td,{children:"Description of what the function does"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"returnType"}),(0,a.jsx)(e.td,{children:"string"}),(0,a.jsx)(e.td,{children:"Return type of the function"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"parameters"}),(0,a.jsx)(e.td,{children:"array"}),(0,a.jsx)(e.td,{children:"Parameters accepted by the function"})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:"statements"}),(0,a.jsx)(e.td,{children:"array"}),(0,a.jsx)(e.td,{children:"Statements that make up the function body"})]})]})]}),"\n",(0,a.jsx)(e.p,{children:"Return Types"}),"\n",(0,a.jsx)(e.p,{children:"The DSL supports the following return types:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"void"})," - No return value"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"boolean"})," - True or false value"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"string"})," - Text value"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"int"})," - Integer value"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"double"})," - Floating-point value"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"region"})," - GUI region"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"matches"})," - Results of a find operation"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"stateImage"})," - Reference to a state image"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"stateRegion"})," - Reference to a state region"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"object"})," - Generic object"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Statements"}),"\n",(0,a.jsxs)(e.p,{children:["Variable Declaration",(0,a.jsx)(e.br,{}),"\n","Defines a new variable:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "statementType": "variableDeclaration",\n  "name": "maxAttempts",\n  "type": "int",\n  "value": {\n    "expressionType": "literal",\n    "valueType": "integer",\n    "value": 5\n  }\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Assignment",(0,a.jsx)(e.br,{}),"\n","Assigns a value to an existing variable:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "statementType": "assignment",\n  "variable": "maxAttempts",\n  "value": {\n    "expressionType": "literal",\n    "valueType": "integer",\n    "value": 10\n  }\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["If Statement",(0,a.jsx)(e.br,{}),"\n","Conditional execution:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "statementType": "if",\n  "condition": {\n    "expressionType": "binaryOperation",\n    "operator": ">",\n    "left": {\n      "expressionType": "variable",\n      "name": "attempts"\n    },\n    "right": {\n      "expressionType": "literal",\n      "valueType": "integer",\n      "value": 3\n    }\n  },\n  "thenStatements": [\n    {\n      "statementType": "return",\n      "value": {\n        "expressionType": "literal",\n        "valueType": "boolean",\n        "value": false\n      }\n    }\n  ],\n  "elseStatements": [\n    {\n      "statementType": "assignment",\n      "variable": "attempts",\n      "value": {\n        "expressionType": "binaryOperation",\n        "operator": "+",\n        "left": {\n          "expressionType": "variable",\n          "name": "attempts"\n        },\n        "right": {\n          "expressionType": "literal",\n          "valueType": "integer",\n          "value": 1\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["ForEach Loop",(0,a.jsx)(e.br,{}),"\n","Iterates through a collection:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "statementType": "forEach",\n  "variable": "image",\n  "variableType": "stateImage",\n  "collection": {\n    "expressionType": "variable",\n    "name": "images"\n  },\n  "statements": [\n    {\n      "statementType": "methodCall",\n      "object": "action",\n      "method": "perform",\n      "arguments": [\n        {\n          "expressionType": "variable",\n          "name": "options"\n        },\n        {\n          "expressionType": "variable",\n          "name": "image"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Return Statement",(0,a.jsx)(e.br,{}),"\n","Returns a value from a function:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "statementType": "return",\n  "value": {\n    "expressionType": "literal",\n    "valueType": "boolean",\n    "value": true\n  }\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Method Call",(0,a.jsx)(e.br,{}),"\n","Calls a method:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "statementType": "methodCall",\n  "object": "action",\n  "method": "perform",\n  "arguments": [\n    {\n      "expressionType": "variable",\n      "name": "options"\n    },\n    {\n      "expressionType": "variable",\n      "name": "loginButton"\n    }\n  ]\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Expressions",(0,a.jsx)(e.br,{}),"\n","Expressions represent values:"]}),"\n",(0,a.jsxs)(e.p,{children:["Literal",(0,a.jsx)(e.br,{}),"\n","Represents a constant value:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "literal",\n  "valueType": "string",\n  "value": "Hello World"\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Variable",(0,a.jsx)(e.br,{}),"\n","References a variable:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "variable",\n  "name": "loginButton"\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Method Call Expression",(0,a.jsx)(e.br,{}),"\n","Calls a method and returns its result:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "methodCall",\n  "object": "action",\n  "method": "find",\n  "arguments": [\n    {\n      "expressionType": "variable",\n      "name": "options"\n    }\n  ]\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Binary Operation",(0,a.jsx)(e.br,{}),"\n","Performs an operation on two expressions:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "binaryOperation",\n  "operator": "+",\n  "left": {\n    "expressionType": "variable",\n    "name": "count"\n  },\n  "right": {\n    "expressionType": "literal",\n    "valueType": "integer",\n    "value": 1\n  }\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Builder Pattern",(0,a.jsx)(e.br,{}),"\n","The DSL extensively uses the builder pattern for creating complex objects like ActionOptions and ObjectCollection:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "builder",\n  "builderType": "actionOptions",\n  "methods": [\n    {\n      "method": "setAction",\n      "arguments": [\n        {\n          "expressionType": "literal",\n          "valueType": "string",\n          "value": "FIND"\n        }\n      ]\n    },\n    {\n      "method": "setMaxWait",\n      "arguments": [\n        {\n          "expressionType": "literal",\n          "valueType": "double",\n          "value": 5.0\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"Custom Objects"}),"\n",(0,a.jsxs)(e.p,{children:["ActionOptions",(0,a.jsx)(e.br,{}),"\n","Configures how actions are performed:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "builder",\n  "builderType": "actionOptions",\n  "methods": [\n    {\n      "method": "setAction",\n      "arguments": [\n        {\n          "expressionType": "literal",\n          "valueType": "string",\n          "value": "CLICK"\n        }\n      ]\n    },\n    {\n      "method": "setClickType",\n      "arguments": [\n        {\n          "expressionType": "literal",\n          "valueType": "string",\n          "value": "LEFT"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["ObjectCollection",(0,a.jsx)(e.br,{}),"\n","Groups objects for actions:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "expressionType": "builder",\n  "builderType": "objectCollection",\n  "methods": [\n    {\n      "method": "withImages",\n      "arguments": [\n        {\n          "expressionType": "variable",\n          "name": "loginButton"\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"Example Use Cases"}),"\n",(0,a.jsx)(e.p,{children:"Simple Login Automation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "name": "performLogin",\n  "returnType": "boolean",\n  "statements": [\n    {\n      "statementType": "variableDeclaration",\n      "name": "findOptions",\n      "type": "actionOptions",\n      "value": {\n        "expressionType": "builder",\n        "builderType": "actionOptions",\n        "methods": [\n          {\n            "method": "setAction",\n            "arguments": [\n              {\n                "expressionType": "literal",\n                "valueType": "string",\n                "value": "FIND"\n              }\n            ]\n          },\n          {\n            "method": "setMaxWait",\n            "arguments": [\n              {\n                "expressionType": "literal",\n                "valueType": "double",\n                "value": 5.0\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      "statementType": "variableDeclaration",\n      "name": "findResult",\n      "type": "matches",\n      "value": {\n        "expressionType": "methodCall",\n        "object": "action",\n        "method": "perform",\n        "arguments": [\n          {\n            "expressionType": "variable",\n            "name": "findOptions"\n          },\n          {\n            "expressionType": "variable",\n            "name": "loginButton"\n          }\n        ]\n      }\n    },\n    {\n      "statementType": "if",\n      "condition": {\n        "expressionType": "methodCall",\n        "object": "findResult",\n        "method": "isSuccess",\n        "arguments": []\n      },\n      "thenStatements": [\n        {\n          "statementType": "methodCall",\n          "object": "action",\n          "method": "perform",\n          "arguments": [\n            {\n              "expressionType": "builder",\n              "builderType": "actionOptions",\n              "methods": [\n                {\n                  "method": "setAction",\n                  "arguments": [\n                    {\n                      "expressionType": "literal",\n                      "valueType": "string",\n                      "value": "CLICK"\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              "expressionType": "variable",\n              "name": "loginButton"\n            }\n          ]\n        },\n        {\n          "statementType": "return",\n          "value": {\n            "expressionType": "literal",\n            "valueType": "boolean",\n            "value": true\n          }\n        }\n      ],\n      "elseStatements": [\n        {\n          "statementType": "return",\n          "value": {\n            "expressionType": "literal",\n            "valueType": "boolean",\n            "value": false\n          }\n        }\n      ]\n    }\n  ]\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}}}]);
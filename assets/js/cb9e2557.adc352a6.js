"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[921],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(96540);const a={},s=i.createContext(a);function r(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(s.Provider,{value:e},n.children)}},75405:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/guides/annotations","title":"Annotations API","description":"Brobot provides a powerful annotation system that simplifies state and transition configuration by using declarative annotations instead of manual registration code.","source":"@site/docs/03-core-library/guides/annotations.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/annotations","permalink":"/brobot/docs/core-library/guides/annotations","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/annotations.md","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Annotations API"},"sidebar":"docSidebar","previous":{"title":"Search Regions and Fixed Locations","permalink":"/brobot/docs/core-library/guides/search-regions-and-fixed-locations"},"next":{"title":"Runtime Delegation Migration Guide","permalink":"/brobot/docs/core-library/guides/runtime-delegation-migration"}}');var a=t(74848),s=t(28453);const r={sidebar_position:20,title:"Annotations API"},o="Annotations",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Benefits",id:"benefits",level:2},{value:"Before (Manual Registration)",id:"before-manual-registration",level:3},{value:"After (With Annotations)",id:"after-with-annotations",level:3},{value:"@State Annotation",id:"state-annotation",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Marking Initial States",id:"marking-initial-states",level:3},{value:"Custom State Names",id:"custom-state-names",level:3},{value:"Transition Annotations",id:"transition-annotations",level:2},{value:"@TransitionSet",id:"transitionset",level:3},{value:"Multi-State Transitions",id:"multi-state-transitions",level:3},{value:"@IncomingTransition",id:"incomingtransition",level:3},{value:"@OutgoingTransition Parameters",id:"outgoingtransition-parameters",level:3},{value:"Path Cost Strategy",id:"path-cost-strategy",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Include Required Lombok Annotations",id:"1-always-include-required-lombok-annotations",level:3},{value:"2. Use Descriptive Names",id:"2-use-descriptive-names",level:3},{value:"3. Keep Transitions Focused",id:"3-keep-transitions-focused",level:3},{value:"4. Handle Errors Gracefully",id:"4-handle-errors-gracefully",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"States Not Being Discovered",id:"states-not-being-discovered",level:3},{value:"Transitions Not Working",id:"transitions-not-working",level:3},{value:"Initial States Not Set",id:"initial-states-not-set",level:3},{value:"@CollectData Annotation",id:"collectdata-annotation",level:2},{value:"Basic Usage",id:"basic-usage-1",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Advanced Examples",id:"advanced-examples",level:3},{value:"Data Formats",id:"data-formats",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Summary",id:"summary",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"annotations",children:"Annotations"})}),"\n",(0,a.jsx)(e.p,{children:"Brobot provides a powerful annotation system that simplifies state and transition configuration by using declarative annotations instead of manual registration code."}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.p,{children:"The annotation system introduces key annotations:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"@State"})})," - Marks a class as a Brobot state"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"@TransitionSet"})})," - Marks a class as containing all transitions for a specific state"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"@IncomingTransition"})})," - Marks a method that verifies arrival at the state"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"@OutgoingTransition"})})," - Marks a method that navigates FROM the state TO another state"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"These annotations work with Spring's component scanning to automatically discover and register your states and transitions at application startup."}),"\n",(0,a.jsx)(e.h2,{id:"benefits",children:"Benefits"}),"\n",(0,a.jsx)(e.h3,{id:"before-manual-registration",children:"Before (Manual Registration)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"@Component\n@EventListener(ApplicationReadyEvent.class)\npublic class StateRegistrationListener {\n    private final StateService stateService;\n    private final ActionPipeline action;\n    private final StateTransitionsJointTable jointTable;\n    // ... 67 lines of manual registration code\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"after-with-annotations",children:"After (With Annotations)"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@State(initial = true)\n@Getter\n@Slf4j\npublic class PromptState {\n    private final StateImage submitButton = new StateImage.Builder()\n        .addPattern("submit")\n        .build();\n}\n\n@TransitionSet(state = PromptState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class PromptTransitions {\n    private final Action action;\n    private final PromptState promptState;\n\n    @IncomingTransition\n    public boolean verifyArrival() {\n        return action.find(promptState.getSubmitButton()).isSuccess();\n    }\n\n    @OutgoingTransition(to = WorkingState.class)\n    public boolean toWorking() {\n        return action.click(promptState.getSubmitButton()).isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"state-annotation",children:"@State Annotation"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"@State"})," annotation marks a class as a Brobot state and includes Spring's ",(0,a.jsx)(e.code,{children:"@Component"})," for automatic discovery."]}),"\n",(0,a.jsx)(e.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@State\n@Getter\n@Slf4j\npublic class LoginState {\n    private StateImage loginButton = new StateImage.Builder()\n        .addPattern("login-button")\n        .build();\n    \n    private StateImage usernameField = new StateImage.Builder()\n        .addPattern("username-field")\n        .build();\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"marking-initial-states",children:"Marking Initial States"}),"\n",(0,a.jsxs)(e.p,{children:["Use the ",(0,a.jsx)(e.code,{children:"initial"})," parameter to designate starting states:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"@State(initial = true)\n@Getter\n@Slf4j\npublic class HomeState {\n    // State definition\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"custom-state-names",children:"Custom State Names"}),"\n",(0,a.jsx)(e.p,{children:'By default, the state name is derived from the class name (removing "State" suffix if present). You can override this:'}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@State(name = "Dashboard", description = "Main application dashboard")\n@Getter\n@Slf4j\npublic class DashboardState {\n    // State definition\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"transition-annotations",children:"Transition Annotations"}),"\n",(0,a.jsx)(e.p,{children:"Brobot uses a cohesive annotation pattern where each state's transitions are grouped in one class."}),"\n",(0,a.jsx)(e.h3,{id:"transitionset",children:"@TransitionSet"}),"\n",(0,a.jsx)(e.p,{children:"Marks a class as containing all transitions for a specific state:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@TransitionSet(state = LoginState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class LoginTransitions {\n\n    private final Action action;\n    private final LoginState loginState;\n\n    @IncomingTransition\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at Login state");\n        return action.find(loginState.getUsernameField()).isSuccess();\n    }\n\n    @OutgoingTransition(to = DashboardState.class, pathCost = 0)\n    public boolean toDashboard() {\n        log.info("Transitioning from Login to Dashboard");\n        // Perform login actions\n        action.type(loginState.getUsernameField(), "user@example.com");\n        action.type(loginState.getPasswordField(), "password");\n        return action.click(loginState.getLoginButton()).isSuccess();\n    }\n\n    @OutgoingTransition(to = ForgotPasswordState.class, pathCost = 2)\n    public boolean toForgotPassword() {\n        return action.click(loginState.getForgotPasswordLink()).isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"multi-state-transitions",children:"Multi-State Transitions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"@TransitionSet(state = DashboardState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class DashboardTransitions {\n\n    private final Action action;\n    private final DashboardState dashboardState;\n\n    @IncomingTransition\n    public boolean verifyArrival() {\n        return action.find(dashboardState.getMainContent()).isSuccess();\n    }\n\n    // Complex transition with multiple state changes\n    @OutgoingTransition(\n        to = ReportsState.class,\n        activate = {SidebarState.class, FilterPanelState.class},\n        exit = {NotificationPanelState.class},\n        pathCost = 1\n    )\n    public boolean toReports() {\n        return action.click(dashboardState.getReportsButton()).isSuccess();\n    }\n\n    // Modal overlay - keep dashboard visible\n    @OutgoingTransition(\n        to = SettingsModalState.class,\n        staysVisible = true,  // Dashboard remains visible\n        pathCost = 2\n    )\n    public boolean openSettings() {\n        return action.click(dashboardState.getSettingsIcon()).isSuccess();\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"incomingtransition",children:"@IncomingTransition"}),"\n",(0,a.jsx)(e.p,{children:"Verifies successful arrival at the state:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@IncomingTransition(description = "Verify settings modal is open", required = true)\npublic boolean verifyArrival() {\n    return action.find(settingsState.getCloseButton()).isSuccess() &&\n           action.find(settingsState.getSettingsTitle()).isSuccess();\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"outgoingtransition-parameters",children:"@OutgoingTransition Parameters"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"to"})})," (required): Target state class"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"activate"})}),": Additional states to activate"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"exit"})}),": States to deactivate"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"staysVisible"})}),": Whether originating state remains visible (default: false)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"pathCost"})}),": Path-finding cost - lower costs preferred (default: 0)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"description"})}),": Documentation for the transition"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"path-cost-strategy",children:"Path Cost Strategy"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"@TransitionSet(state = MainMenuState.class)\npublic class MainMenuTransitions {\n\n    // Direct navigation - lowest cost\n    @OutgoingTransition(\n        to = SettingsState.class,\n        pathCost = 0  // Preferred path\n    )\n    public boolean directToSettings() {\n        return action.click(mainMenu.getSettingsButton()).isSuccess();\n    }\n\n    // Indirect navigation - higher cost\n    @OutgoingTransition(\n        to = SettingsState.class,\n        activate = {HelpPanelState.class},\n        pathCost = 5  // Less preferred, only if direct fails\n    )\n    public boolean toSettingsViaHelp() {\n        action.click(mainMenu.getHelpButton());\n        return action.click(helpPanel.getSettingsLink()).isSuccess();\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(e.p,{children:"Here's a complete example showing how annotations simplify a typical automation flow:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'// Initial state\n@State(initial = true)\n@Getter\n@Slf4j\npublic class LoginPageState {\n    private final StateImage logo = new StateImage.Builder()\n        .addPattern("app-logo")\n        .build();\n    \n    private final StateImage usernameField = new StateImage.Builder()\n        .addPattern("username-field")\n        .build();\n    \n    private final StateImage passwordField = new StateImage.Builder()\n        .addPattern("password-field")\n        .build();\n    \n    private final StateImage loginButton = new StateImage.Builder()\n        .addPattern("login-button")\n        .build();\n}\n\n// Main application state\n@State\n@Getter\n@Slf4j\npublic class DashboardState {\n    private final StateImage dashboardHeader = new StateImage.Builder()\n        .addPattern("dashboard-header")\n        .build();\n    \n    private final StateImage menuButton = new StateImage.Builder()\n        .addPattern("menu-button")\n        .build();\n}\n\n// Login transition\n@Transition(from = LoginPageState.class, to = DashboardState.class)\n@RequiredArgsConstructor\n@Slf4j\npublic class LoginTransition {\n    \n    private final Action action;\n    private final LoginPageState loginState;\n    \n    public boolean execute() {\n        log.info("Performing login");\n        \n        // Click username field\n        if (!action.click(loginState.getUsernameField()).isSuccess()) return false;\n        \n        // Type username\n        if (!action.type(new ObjectCollection.Builder()\n                .withStrings("user@example.com")\n                .build()).isSuccess()) return false;\n        \n        // Click password field\n        if (!action.click(loginState.getPasswordField()).isSuccess()) return false;\n        \n        // Type password\n        if (!action.type(new ObjectCollection.Builder()\n                .withStrings("password123")\n                .build()).isSuccess()) return false;\n        \n        // Click login button\n        return action.click(loginState.getLoginButton()).isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Component Scanning"}),": Spring automatically discovers all classes annotated with ",(0,a.jsx)(e.code,{children:"@State"})," and ",(0,a.jsx)(e.code,{children:"@Transition"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Annotation Processing"}),": The ",(0,a.jsx)(e.code,{children:"AnnotationProcessor"})," processes these annotations at application startup"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"State Registration"}),": States are registered with the framework and initial states are marked"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Transition Wiring"}),": Transitions are created and connected between the appropriate states"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Automatic Configuration"}),": The state machine is fully configured without manual registration code"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(e.h3,{id:"1-always-include-required-lombok-annotations",children:"1. Always Include Required Lombok Annotations"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"@State\n@Getter  // Required for state objects\n@Slf4j   // Recommended for logging\npublic class MyState {\n    // State definition\n}\n\n@Transition(from = StateA.class, to = StateB.class)\n@RequiredArgsConstructor  // For dependency injection\n@Slf4j                   // For logging\npublic class MyTransition {\n    // Transition logic\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-use-descriptive-names",children:"2. Use Descriptive Names"}),"\n",(0,a.jsx)(e.p,{children:"While class names are used by default, consider adding descriptions for clarity:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@State(\n    name = "UserProfile",\n    description = "User profile page with account settings and preferences"\n)\n'})}),"\n",(0,a.jsx)(e.h3,{id:"3-keep-transitions-focused",children:"3. Keep Transitions Focused"}),"\n",(0,a.jsx)(e.p,{children:"Each transition class should handle one specific navigation path:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Good: Single responsibility\n@Transition(from = CartState.class, to = CheckoutState.class)\npublic class ProceedToCheckoutTransition { }\n\n// Avoid: Multiple unrelated transitions in one class\n"})}),"\n",(0,a.jsx)(e.h3,{id:"4-handle-errors-gracefully",children:"4. Handle Errors Gracefully"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@Transition(from = ProcessingState.class, to = {CompleteState.class, ErrorState.class})\npublic class ProcessingTransition {\n    public boolean execute() {\n        try {\n            // Processing logic\n            return processSuccessfully();\n        } catch (Exception e) {\n            log.error("Processing failed", e);\n            return false; // Will transition to ErrorState\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,a.jsx)(e.p,{children:"To migrate existing code to use annotations:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Remove StateRegistrationListener"}),": Delete manual registration classes"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add @State annotations"}),": Mark all state classes"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add @Transition annotations"}),": Mark transition classes"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add initial parameter"}),": Mark starting states with ",(0,a.jsx)(e.code,{children:"@State(initial = true)"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Add Lombok annotations"}),": Include @Getter and @Slf4j as needed"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Test the migration"}),": Verify all states and transitions are discovered"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(e.h3,{id:"states-not-being-discovered",children:"States Not Being Discovered"}),"\n",(0,a.jsx)(e.p,{children:"Ensure your states are in a package scanned by Spring:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Check your ",(0,a.jsx)(e.code,{children:"@ComponentScan"})," configuration"]}),"\n",(0,a.jsxs)(e.li,{children:["Verify ",(0,a.jsx)(e.code,{children:"@State"})," is properly imported"]}),"\n",(0,a.jsx)(e.li,{children:"Confirm the class is public"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"transitions-not-working",children:"Transitions Not Working"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Verify the transition method returns ",(0,a.jsx)(e.code,{children:"boolean"})]}),"\n",(0,a.jsx)(e.li,{children:"Check that source and target states exist"}),"\n",(0,a.jsx)(e.li,{children:"Review logs for registration errors"}),"\n",(0,a.jsxs)(e.li,{children:["Ensure ",(0,a.jsx)(e.code,{children:"@Transition"})," includes valid ",(0,a.jsx)(e.code,{children:"from"})," and ",(0,a.jsx)(e.code,{children:"to"})," classes"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"initial-states-not-set",children:"Initial States Not Set"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["At least one state must have ",(0,a.jsx)(e.code,{children:"@State(initial = true)"})]}),"\n",(0,a.jsx)(e.li,{children:'Check logs for "Marked X as initial state" messages'}),"\n",(0,a.jsx)(e.li,{children:"Verify the state class is being discovered"}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"collectdata-annotation",children:"@CollectData Annotation"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"@CollectData"})," annotation enables automatic dataset collection for machine learning applications. When applied to methods, it captures inputs, outputs, and execution context for training ML models."]}),"\n",(0,a.jsx)(e.h3,{id:"basic-usage-1",children:"Basic Usage"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'@Component\npublic class SmartAutomation {\n    \n    @CollectData(category = "click_accuracy")\n    public ActionResult performClick(StateImage target) {\n        return action.click(target);\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"category"})}),' (String, default: "general") - Category for organizing collected data']}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"features"})})," (String[], default: ",") - Specific features to collect (empty = all)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"captureScreenshots"})})," (boolean, default: true) - Capture before/after screenshots"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"captureIntermediateStates"})})," (boolean, default: false) - Capture multi-step operations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"samplingRate"})})," (double, default: 1.0) - Collection rate (0.0-1.0, where 1.0 = 100%)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"maxSamples"})})," (int, default: -1) - Maximum samples to collect (-1 = unlimited)"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"onlySuccess"})})," (boolean, default: false) - Collect only successful executions"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"includeTiming"})})," (boolean, default: true) - Include timing information"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"anonymize"})})," (boolean, default: true) - Anonymize sensitive data"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"format"})})," (DataFormat, default: JSON) - Storage format"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"labels"})})," (String[], default: ",") - Labels for supervised learning"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"compress"})})," (boolean, default: true) - Compress collected data"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'// Collect only 10% of executions with specific features\n@CollectData(\n    category = "text_recognition",\n    features = {"image", "location", "confidence"},\n    samplingRate = 0.1,\n    format = DataFormat.CSV\n)\npublic String extractText(Region region) {\n    // Text extraction logic\n}\n\n// Collect data for successful operations only\n@CollectData(\n    category = "form_submission",\n    onlySuccess = true,\n    captureIntermediateStates = true,\n    labels = {"form_type", "submission_time"}\n)\npublic boolean submitForm(FormData data) {\n    // Form submission logic\n}\n\n// High-volume data collection with limits\n@CollectData(\n    category = "mouse_movements",\n    maxSamples = 10000,\n    captureScreenshots = false,  // Save space\n    format = DataFormat.BINARY,   // Efficient storage\n    compress = true\n)\npublic void trackMouseMovement(Location from, Location to) {\n    // Movement tracking logic\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"data-formats",children:"Data Formats"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"JSON"})," - Human-readable, good for debugging"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"CSV"})," - Tabular data, easy to import into analysis tools"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"BINARY"})," - Efficient storage for large datasets"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"TFRECORD"})," - TensorFlow native format"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"PARQUET"})," - Apache Parquet for big data processing"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Training Click Accuracy Models"}),": Collect data about successful/failed clicks to improve pattern matching"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Text Recognition Improvement"}),": Gather OCR results with ground truth for model training"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Workflow Optimization"}),": Analyze action sequences to identify bottlenecks"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Error Pattern Detection"}),": Collect failure cases to improve error handling"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Performance Tuning"}),": Gather timing data to optimize action execution"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(e.p,{children:"The Brobot annotation system dramatically simplifies state machine configuration and enables advanced features:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"@State"})," - Automatic state registration with Spring integration"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"@Transition"})," - Declarative transition configuration"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"@CollectData"})," - Non-invasive ML dataset collection"]}),"\n",(0,a.jsx)(e.li,{children:"Eliminates boilerplate registration code"}),"\n",(0,a.jsx)(e.li,{children:"Provides clear, declarative configuration"}),"\n",(0,a.jsx)(e.li,{children:"Integrates seamlessly with Spring"}),"\n",(0,a.jsx)(e.li,{children:"Supports complex transition scenarios"}),"\n",(0,a.jsx)(e.li,{children:"Enables better code organization"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"By using these annotations, you can focus on your automation logic rather than framework setup, making your code more maintainable and easier to understand."})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);
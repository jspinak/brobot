"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1864],{28453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>a});var t=i(96540);const s={},o=t.createContext(s);function r(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),t.createElement(o.Provider,{value:e},n.children)}},95025:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"getting-started/quick-start","title":"Quick Start Guide","description":"This guide will help you get started with Brobot 1.1.0 using the new ActionConfig API.","source":"@site/docs/01-getting-started/quick-start.md","sourceDirName":"01-getting-started","slug":"/getting-started/quick-start","permalink":"/brobot/docs/getting-started/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/01-getting-started/quick-start.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Quick Start Guide"},"sidebar":"docSidebar","previous":{"title":"Installation","permalink":"/brobot/docs/getting-started/installation"},"next":{"title":"Pure Actions Quick Start Guide","permalink":"/brobot/docs/getting-started/pure-actions-quickstart"}}');var s=i(74848),o=i(28453);const r={sidebar_position:7,title:"Quick Start Guide"},a="Quick Start Guide",l={},c=[{value:"Installation",id:"installation",level:2},{value:"Your First Brobot Application",id:"your-first-brobot-application",level:2},{value:"Simplified Version Using Convenience Methods",id:"simplified-version-using-convenience-methods",level:3},{value:"Even More Concise",id:"even-more-concise",level:3},{value:"Minimal Complete Example",id:"minimal-complete-example",level:3},{value:"Understanding the New API",id:"understanding-the-new-api",level:2},{value:"1. Type-Safe Configuration",id:"1-type-safe-configuration",level:3},{value:"2. Action Execution Pattern",id:"2-action-execution-pattern",level:3},{value:"3. Common Actions",id:"3-common-actions",level:3},{value:"Finding Images",id:"finding-images",level:4},{value:"Clicking",id:"clicking",level:4},{value:"Typing Text",id:"typing-text",level:4},{value:"Dragging",id:"dragging",level:4},{value:"Working with States",id:"working-with-states",level:2},{value:"State Transitions",id:"state-transitions",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Getting Help",id:"getting-help",level:2},{value:"Tips for Success",id:"tips-for-success",level:2},{value:"Important: Pausing in Brobot",id:"important-pausing-in-brobot",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,s.jsx)(e.p,{children:"This guide will help you get started with Brobot 1.1.0 using the new ActionConfig API."}),"\n",(0,s.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(e.p,{children:"Add Brobot to your project:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"\x3c!-- Maven --\x3e\n<dependency>\n    <groupId>io.github.jspinak</groupId>\n    <artifactId>brobot</artifactId>\n    <version>1.1.0</version>\n</dependency>\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-gradle",children:"// Gradle\nimplementation 'io.github.jspinak:brobot:1.1.0'\n"})}),"\n",(0,s.jsx)(e.h2,{id:"your-first-brobot-application",children:"Your First Brobot Application"}),"\n",(0,s.jsx)(e.p,{children:"Here's a simple example that demonstrates the core concepts:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.action.ActionResult;\nimport io.github.jspinak.brobot.action.ObjectCollection;\nimport io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\nimport io.github.jspinak.brobot.action.basic.click.ClickOptions;\nimport io.github.jspinak.brobot.model.state.State;\nimport io.github.jspinak.brobot.model.state.StateImage;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j  // Add logging support\npublic class SimpleAutomation {\n    \n    @Autowired\n    private Action action;\n    \n    public void clickButton() {\n        // 1. Define what to look for\n        StateImage buttonImage = new StateImage.Builder()\n                .setName("submit-button")\n                .addPatterns("submit-button")\n                .build();\n        \n        // 2. Configure how to find it\n        PatternFindOptions findOptions = new PatternFindOptions.Builder()\n                .setStrategy(PatternFindOptions.Strategy.FIRST)\n                .setSimilarity(0.9)\n                .build();\n        \n        // 3. Add the button to the objects to find\n        ObjectCollection objects = new ObjectCollection.Builder()\n                .withImages(buttonImage)\n                .build();\n        \n        // 4. Find the button\n        ActionResult findResult = action.perform(findOptions, objects);\n        \n        // 4. Click the found button\n        if (findResult.isSuccess()) {\n            ClickOptions clickOptions = new ClickOptions.Builder()\n                    .setClickType(ClickOptions.Type.LEFT)\n                    .build();\n            \n            // Click on the same objects we found\n            ActionResult clickResult = action.perform(clickOptions, objects);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"simplified-version-using-convenience-methods",children:"Simplified Version Using Convenience Methods"}),"\n",(0,s.jsx)(e.p,{children:"The above example can be greatly simplified using Brobot's convenience methods and default settings:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Component\n@Slf4j\npublic class SimpleAutomation {\n    \n    @Autowired\n    private Action action;\n    \n    public void clickButtonSimplified() {\n        // 1. Define the button image\n        StateImage buttonImage = new StateImage.Builder()\n                .setName("submit-button")\n                .addPatterns("submit-button")\n                .build();\n        \n        // 2. Find and click in one line\n        action.click(buttonImage);\n        \n        // That\'s it! \ud83c\udf89\n    }\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"What happens behind the scenes:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Uses default similarity of 0.7 (70% match)"}),"\n",(0,s.jsx)(e.li,{children:"Automatically finds the image first, then clicks if found"}),"\n",(0,s.jsxs)(e.li,{children:["Uses ",(0,s.jsx)(e.code,{children:"PatternFindOptions.Strategy.FIRST"})," (clicks first match)"]}),"\n",(0,s.jsx)(e.li,{children:"Uses standard left click with no delays"}),"\n",(0,s.jsx)(e.li,{children:"No need to create ObjectCollections manually"}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"even-more-concise",children:"Even More Concise"}),"\n",(0,s.jsx)(e.p,{children:"For quick prototyping or simple cases:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'// Find an image on screen\nActionResult found = action.find(submitButton);\n\n// Click an image (finds it first automatically)\naction.click(submitButton);\n\n// Type text (with automatic focus)\naction.type(new ObjectCollection.Builder().withStrings("Hello World").build());\n\n// Chain find and click with fluent API\nnew PatternFindOptions.Builder()\n    .then(new ClickOptions.Builder().build())\n    .build();\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Default values used:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Similarity"}),": 0.7 (defined in Sikuli's ",(0,s.jsx)(e.code,{children:"Settings.MinSimilarity"}),")"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Search Strategy"}),": FIRST (find first match)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Search Duration"}),": 3 seconds timeout"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Click Type"}),": Single left click"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Search Region"}),": Entire screen"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"These convenience methods are perfect when:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"You're prototyping or testing"}),"\n",(0,s.jsx)(e.li,{children:"Default settings work for your use case"}),"\n",(0,s.jsx)(e.li,{children:"You want minimal, readable code"}),"\n",(0,s.jsx)(e.li,{children:"You don't need fine-grained control"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"For production code requiring specific settings (higher similarity, custom timeouts, logging), use the full builder pattern shown in the first example."}),"\n",(0,s.jsx)(e.h3,{id:"minimal-complete-example",children:"Minimal Complete Example"}),"\n",(0,s.jsx)(e.p,{children:"Here's the absolute minimum code needed for a working Brobot application:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.model.state.StateImage;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ApplicationContext;\n\n@SpringBootApplication\npublic class MinimalBrobot {\n    \n    public static void main(String[] args) {\n        // Start Spring context\n        ApplicationContext context = SpringApplication.run(MinimalBrobot.class, args);\n        \n        // Get the Action bean\n        Action action = context.getBean(Action.class);\n        \n        // Create an image to find\n        StateImage button = new StateImage.Builder()\n                .addPatterns("button")  // No .png extension needed\n                .build();\n        \n        // Find and click it\n        action.click(button);\n        \n        // Done!\n    }\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"That's all you need!"})," Brobot handles:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Image loading from resources"}),"\n",(0,s.jsx)(e.li,{children:"Screen capture"}),"\n",(0,s.jsx)(e.li,{children:"Pattern matching with 70% similarity"}),"\n",(0,s.jsx)(e.li,{children:"Mouse movement and clicking"}),"\n",(0,s.jsx)(e.li,{children:"Error handling if image not found"}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"understanding-the-new-api",children:"Understanding the New API"}),"\n",(0,s.jsx)(e.h3,{id:"1-type-safe-configuration",children:"1. Type-Safe Configuration"}),"\n",(0,s.jsxs)(e.p,{children:["Instead of the generic ",(0,s.jsx)(e.code,{children:"ActionOptions"}),", Brobot 1.1.0 uses specific configuration classes:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'// Find operations\nPatternFindOptions patternFind = new PatternFindOptions.Builder()\n    .setStrategy(PatternFindOptions.Strategy.ALL)\n    .setSimilarity(0.85)\n    .build();\n\n// Click operations\nClickOptions click = new ClickOptions.Builder()\n    .setClickType(ClickOptions.Type.DOUBLE_LEFT)\n    .build();\n\n// Text/OCR operations\nTextFindOptions textFind = new TextFindOptions.Builder()\n    .setLanguage("eng")\n    .setMinScore(0.8)\n    .build();\n'})}),"\n",(0,s.jsx)(e.h3,{id:"2-action-execution-pattern",children:"2. Action Execution Pattern"}),"\n",(0,s.jsx)(e.p,{children:"The new API follows a consistent pattern:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"// 1. Create configuration\nActionConfig config = new SomeOptions.Builder().build();\n\n// 2. Create object collection\nObjectCollection objects = new ObjectCollection.Builder()\n    .withImages(images)\n    .build();\n\n// 3. Execute action\nActionResult result = action.perform(config, objects);\n\n// 4. Check results\nif (result.isSuccess()) {\n    // Handle success\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"3-common-actions",children:"3. Common Actions"}),"\n",(0,s.jsx)(e.h4,{id:"finding-images",children:"Finding Images"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"PatternFindOptions findOptions = PatternFindOptions.forPreciseSearch();\n// or\nPatternFindOptions findOptions = PatternFindOptions.forQuickSearch();\n"})}),"\n",(0,s.jsx)(e.h4,{id:"clicking",children:"Clicking"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"ClickOptions clickOptions = new ClickOptions.Builder()\n    .setClickType(ClickOptions.Type.RIGHT)\n    .setPauseAfterEnd(0.5)\n    .build();\n"})}),"\n",(0,s.jsx)(e.h4,{id:"typing-text",children:"Typing Text"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"TypeOptions typeOptions = new TypeOptions.Builder()\n    .setModifierDelay(0.05)\n    .setClearFieldFirst(true)\n    .build();\n"})}),"\n",(0,s.jsx)(e.h4,{id:"dragging",children:"Dragging"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"DragOptions dragOptions = new DragOptions.Builder()\n    .setFromIndex(0)  // First match\n    .setToIndex(1)    // Second match\n    .setDragDuration(1.0)\n    .build();\n"})}),"\n",(0,s.jsx)(e.h2,{id:"working-with-states",children:"Working with States"}),"\n",(0,s.jsx)(e.p,{children:"Define states to model your application:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@State(initial = true)  // Mark as initial state, includes @Component\n@Getter  // Generate getters\n@Slf4j   // Add logging\npublic class LoginState {\n    \n    private final State state;\n    \n    public LoginState(StateService stateService) {\n        StateImage usernameField = new StateImage.Builder()\n                .setName("username-field.png")\n                .build();\n        \n        StateImage passwordField = new StateImage.Builder()\n                .setName("password-field.png")\n                .build();\n        \n        StateImage loginButton = new StateImage.Builder()\n                .setName("login-button.png")\n                .build();\n        \n        state = new State.Builder("LOGIN")\n                .withImages(usernameField, passwordField, loginButton)\n                .build();\n        \n        stateService.save(state);\n    }\n    \n    // Getters...\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"state-transitions",children:"State Transitions"}),"\n",(0,s.jsx)(e.p,{children:"Define transitions between states:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Component\npublic class LoginTransitions {\n    \n    @Autowired\n    private Action action;\n    \n    @Autowired\n    private LoginState loginState;\n    \n    public LoginTransitions(StateTransitionsRepository repo) {\n        StateTransitions transitions = new StateTransitions.Builder("LOGIN")\n                .addTransition(this::performLogin, "DASHBOARD")\n                .build();\n        repo.add(transitions);\n    }\n    \n    private boolean performLogin() {\n        // Click username field\n        if (!clickElement(loginState.getUsernameField())) return false;\n        \n        // Type username\n        if (!typeText("user@example.com")) return false;\n        \n        // Click password field\n        if (!clickElement(loginState.getPasswordField())) return false;\n        \n        // Type password\n        if (!typeText("password123")) return false;\n        \n        // Click login button\n        return clickElement(loginState.getLoginButton());\n    }\n    \n    // Helper methods...\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explore the Examples"}),": Check out the ",(0,s.jsx)(e.a,{href:"https://github.com/jspinak/brobot/tree/main/examples/LoginAutomationExample.java",children:"LoginAutomationExample"})," for a complete working example"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Read the Migration Guide"}),": If upgrading from Brobot 1.x, see the ",(0,s.jsx)(e.a,{href:"/docs/core-library/guides/migration-guide",children:"Migration Guide"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Learn State Management"}),": Deep dive into ",(0,s.jsx)(e.a,{href:"/brobot/docs/getting-started/states",children:"States"})," and ",(0,s.jsx)(e.a,{href:"/brobot/docs/getting-started/transitions",children:"Transitions"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Advanced Features"}),": Explore ",(0,s.jsx)(e.a,{href:"/docs/core-library/guides/finding-objects/using-color",children:"color-based finding"}),", ",(0,s.jsx)(e.a,{href:"/docs/core-library/guides/finding-objects/movement",children:"motion detection"}),", and ",(0,s.jsx)(e.a,{href:"/docs/core-library/guides/screen-adaptive-regions",children:"screen-adaptive regions"})," for resolution-independent automation"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Documentation"}),": Browse the full documentation at ",(0,s.jsx)(e.a,{href:"https://jspinak.github.io/brobot/",children:"jspinak.github.io/brobot"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Examples"}),": Find more examples in the ",(0,s.jsx)(e.code,{children:"/examples"})," directory"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Community"}),": Join discussions and ask questions on GitHub"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"tips-for-success",children:"Tips for Success"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Start Simple"}),": Begin with basic find and click operations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use Type-Safe Builders"}),": Let your IDE guide you with auto-completion"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Model Your Application"}),": Think in terms of states and transitions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Handle Failures"}),": Always check ",(0,s.jsx)(e.code,{children:"ActionResult.isSuccess()"})]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Enable History"}),": Use ",(0,s.jsx)(e.code,{children:"BrobotSettings.saveHistory = true"})," for debugging"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Avoid Thread.sleep()"}),": Use ",(0,s.jsx)(e.code,{children:"setPauseBeforeBegin()"})," or ",(0,s.jsx)(e.code,{children:"setPauseAfterEnd()"})," in action options instead"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"important-pausing-in-brobot",children:"Important: Pausing in Brobot"}),"\n",(0,s.jsxs)(e.p,{children:["Never use ",(0,s.jsx)(e.code,{children:"Thread.sleep()"})," in Brobot code. Instead, use the built-in pause options:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"// \u274c Don't do this:\naction.click(button);\nThread.sleep(1000);  // Bad practice in Brobot\n\n// \u2705 Do this instead:\nClickOptions clickWithPause = new ClickOptions.Builder()\n    .setPauseAfterEnd(1.0)  // 1 second pause after clicking\n    .build();\naction.perform(clickWithPause, button);\n\n// Or for pauses before actions:\nPatternFindOptions findWithPause = new PatternFindOptions.Builder()\n    .setPauseBeforeBegin(0.5)  // 500ms pause before searching\n    .build();\n"})}),"\n",(0,s.jsx)(e.p,{children:"This approach keeps pauses as part of the action configuration, making them mockable, testable, and part of the action history."}),"\n",(0,s.jsx)(e.p,{children:"Happy automating with Brobot 1.1.0!"})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);
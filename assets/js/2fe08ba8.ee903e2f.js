"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[737],{16054:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"core-library/architecture/persistence-module","title":"Persistence Module Architecture","description":"Overview","source":"@site/docs/03-core-library/architecture/persistence-module.md","sourceDirName":"03-core-library/architecture","slug":"/core-library/architecture/persistence-module","permalink":"/brobot/docs/core-library/architecture/persistence-module","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/architecture/persistence-module.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Initial State Handling in Brobot Framework","permalink":"/brobot/docs/core-library/architecture/initial-state-handling"},"next":{"title":"ActionConfig API","permalink":"/brobot/docs/category/actionconfig-api"}}');var s=i(74848),t=i(28453);const o={},c="Persistence Module Architecture",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Architecture Design",id:"architecture-design",level:2},{value:"Three-Module Architecture",id:"three-module-architecture",level:3},{value:"Key Design Principles",id:"key-design-principles",level:3},{value:"Module Structure",id:"module-structure",level:2},{value:"Core Components",id:"core-components",level:3},{value:"Interface Design",id:"interface-design",level:3},{value:"Persistence Backends",id:"persistence-backends",level:2},{value:"1. File-Based Persistence",id:"1-file-based-persistence",level:3},{value:"2. Database Persistence",id:"2-database-persistence",level:3},{value:"3. In-Memory Persistence",id:"3-in-memory-persistence",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Spring Boot Auto-Configuration",id:"spring-boot-auto-configuration",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"1. Java Project with File Persistence",id:"1-java-project-with-file-persistence",level:3},{value:"2. Spring Boot Application",id:"2-spring-boot-application",level:3},{value:"3. Runner Application",id:"3-runner-application",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Asynchronous Recording",id:"asynchronous-recording",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"For Java Projects",id:"for-java-projects",level:3},{value:"For Runner Application",id:"for-runner-application",level:3},{value:"Testing",id:"testing",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Future Enhancements",id:"future-enhancements",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"persistence-module-architecture",children:"Persistence Module Architecture"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Brobot Persistence Module provides a flexible, pluggable architecture for recording and persisting action execution data during automation runs. This module enables:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recording of action executions for debugging and analysis"}),"\n",(0,s.jsx)(n.li,{children:"Multiple persistence backends (file, database, in-memory)"}),"\n",(0,s.jsx)(n.li,{children:"Session management and replay capabilities"}),"\n",(0,s.jsx)(n.li,{children:"Export/import of action histories"}),"\n",(0,s.jsx)(n.li,{children:"Integration with both Java projects and the JavaFX runner"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture-design",children:"Architecture Design"}),"\n",(0,s.jsx)(n.h3,{id:"three-module-architecture",children:"Three-Module Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"brobot-parent/\n\u251c\u2500\u2500 brobot-library/        # Core automation (no persistence)\n\u251c\u2500\u2500 brobot-persistence/    # Optional persistence module\n\u2514\u2500\u2500 brobot-runner/        # JavaFX UI application\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-design-principles",children:"Key Design Principles"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Separation of Concerns"}),": The library remains pure automation functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optional Integration"}),": Projects can choose whether to include persistence"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pluggable Backends"}),": Different storage mechanisms without code changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero Dependencies"}),": File-based persistence requires no database"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spring Integration"}),": Seamless integration with Spring Boot applications"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"module-structure",children:"Module Structure"}),"\n",(0,s.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"brobot-persistence/\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 PersistenceConfiguration.java    # Configuration model\n\u251c\u2500\u2500 provider/\n\u2502   \u251c\u2500\u2500 AbstractPersistenceProvider.java # Base implementation\n\u2502   \u251c\u2500\u2500 FileBasedPersistenceProvider.java\n\u2502   \u251c\u2500\u2500 InMemoryPersistenceProvider.java\n\u2502   \u2514\u2500\u2500 DatabasePersistenceProvider.java\n\u251c\u2500\u2500 database/\n\u2502   \u251c\u2500\u2500 entity/                          # JPA entities\n\u2502   \u2514\u2500\u2500 repository/                      # Spring Data repositories\n\u251c\u2500\u2500 spring/\n\u2502   \u251c\u2500\u2500 PersistenceAutoConfiguration.java\n\u2502   \u2514\u2500\u2500 PersistenceEventListener.java\n\u2514\u2500\u2500 PersistenceProviderFactory.java      # Factory for creating providers\n"})}),"\n",(0,s.jsx)(n.h3,{id:"interface-design",children:"Interface Design"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PersistenceProvider"})," interface in the library module defines the contract:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public interface PersistenceProvider {\n    // Session management\n    String startSession(String sessionName, String application, String metadata);\n    String stopSession();\n    void pauseRecording();\n    void resumeRecording();\n    boolean isRecording();\n    \n    // Recording\n    void recordAction(ActionRecord record, StateObject stateObject);\n    void recordBatch(List<ActionRecord> records);\n    \n    // Export/Import\n    ActionHistory exportSession(String sessionId);\n    String importSession(ActionHistory history, String sessionName);\n    \n    // Query\n    List<String> getAllSessions();\n    SessionMetadata getSessionMetadata(String sessionId);\n    void deleteSession(String sessionId);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"persistence-backends",children:"Persistence Backends"}),"\n",(0,s.jsx)(n.h3,{id:"1-file-based-persistence",children:"1. File-Based Persistence"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": Projects that need persistence without database dependencies"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JSON and CSV format support"}),"\n",(0,s.jsx)(n.li,{children:"Optional compression (GZIP)"}),"\n",(0,s.jsx)(n.li,{children:"Organized directory structure"}),"\n",(0,s.jsx)(n.li,{children:"Automatic file rotation"}),"\n",(0,s.jsx)(n.li,{children:"No external dependencies"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Storage Structure"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"brobot-history/\n\u2514\u2500\u2500 sessions/\n    \u2514\u2500\u2500 20250807_143022_MySession/\n        \u251c\u2500\u2500 metadata.json\n        \u251c\u2500\u2500 records_20250807_143022.json\n        \u2514\u2500\u2500 records_20250807_144512.json.gz\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-database-persistence",children:"2. Database Persistence"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": Enterprise applications requiring robust querying and analysis"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JPA/Hibernate integration"}),"\n",(0,s.jsx)(n.li,{children:"Support for any JPA-compatible database"}),"\n",(0,s.jsx)(n.li,{children:"Rich querying capabilities"}),"\n",(0,s.jsx)(n.li,{children:"Transaction support"}),"\n",(0,s.jsx)(n.li,{children:"Relationship management"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Entities"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"RecordingSessionEntity"}),": Session metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ActionRecordEntity"}),": Individual action records"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MatchEntity"}),": Match results from find operations"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-in-memory-persistence",children:"3. In-Memory Persistence"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Case"}),": Testing and temporary sessions"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Zero configuration"}),"\n",(0,s.jsx)(n.li,{children:"Fast performance"}),"\n",(0,s.jsx)(n.li,{children:"Session limits to prevent memory issues"}),"\n",(0,s.jsx)(n.li,{children:"Optional persistence on shutdown"}),"\n",(0,s.jsx)(n.li,{children:"Memory statistics"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  persistence:\n    enabled: true\n    type: FILE  # FILE, DATABASE, MEMORY\n    \n    file:\n      base-path: ./brobot-history\n      format: JSON  # JSON, CSV\n      compress-exports: false\n      pretty-print: true\n      max-file-size-mb: 100\n      \n    database:\n      url: jdbc:h2:file:./data/brobot\n      username: sa\n      password: \n      batch-size: 100\n      \n    memory:\n      max-sessions: 10\n      max-records-per-session: 1000\n      persist-on-shutdown: true\n      \n    performance:\n      async-recording: true\n      buffer-size: 100\n      flush-interval-seconds: 60\n      thread-pool-size: 3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"spring-boot-auto-configuration",children:"Spring Boot Auto-Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The module provides auto-configuration for Spring Boot applications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication\n@Import(PersistenceAutoConfiguration.class)\npublic class MyApplication {\n    // Persistence is automatically configured\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"1-java-project-with-file-persistence",children:"1. Java Project with File Persistence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Create persistence provider\nPersistenceConfiguration config = PersistenceConfiguration.fileDefault();\nconfig.getFile().setBasePath("./automation-history");\nPersistenceProvider persistence = PersistenceProviderFactory.create(config);\n\n// Start recording\nString sessionId = persistence.startSession("TestRun", "MyApp", null);\n\n// Your automation code\naction.click(stateImage);  // Actions are recorded automatically if integrated\n\n// Stop and export\npersistence.stopSession();\nActionHistory history = persistence.exportSession(sessionId);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-spring-boot-application",children:"2. Spring Boot Application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class AutomationService {\n    @Autowired\n    private PersistenceProvider persistence;\n    \n    @Autowired\n    private Action action;\n    \n    public void runAutomation() {\n        persistence.startSession("Automated Test", "WebApp", null);\n        \n        // Automation with automatic recording\n        action.click(loginButton);\n        action.type(usernameField, "user");\n        action.click(submitButton);\n        \n        persistence.stopSession();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-runner-application",children:"3. Runner Application"}),"\n",(0,s.jsx)(n.p,{children:"The runner uses the persistence module internally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Service\npublic class PersistenceAdapterService {\n    @Autowired\n    private PersistenceProvider persistenceProvider;\n    \n    public void startRecording(String name, String app) {\n        persistenceProvider.startSession(name, app, null);\n        updateUI();  // Runner-specific UI updates\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"asynchronous-recording",children:"Asynchronous Recording"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Actions are queued and persisted in background threads"}),"\n",(0,s.jsx)(n.li,{children:"Configurable buffer sizes and flush intervals"}),"\n",(0,s.jsx)(n.li,{children:"Automatic fallback to synchronous on queue overflow"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Configurable limits for in-memory storage"}),"\n",(0,s.jsx)(n.li,{children:"Automatic session eviction (LRU)"}),"\n",(0,s.jsx)(n.li,{children:"File rotation for large sessions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Batch inserts for database persistence"}),"\n",(0,s.jsx)(n.li,{children:"Buffered writes for file persistence"}),"\n",(0,s.jsx)(n.li,{children:"Configurable batch sizes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsx)(n.h3,{id:"for-java-projects",children:"For Java Projects"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add Dependency"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.github.jspinak</groupId>\n    <artifactId>brobot-persistence</artifactId>\n    <version>1.1.0</version>\n</dependency>\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure Persistence"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"PersistenceConfiguration config = new PersistenceConfiguration();\nconfig.setType(PersistenceConfiguration.PersistenceType.FILE);\nPersistenceProvider provider = PersistenceProviderFactory.create(config);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integrate with Automation"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Option 1: Manual recording\nprovider.startSession("Test", "App", null);\nActionRecord record = // ... execute action\nprovider.recordAction(record, stateObject);\n\n// Option 2: Event-based (if using Spring)\n@EventListener\npublic void onActionExecuted(ActionExecutedEvent event) {\n    provider.recordAction(event.getRecord(), event.getStateObject());\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"for-runner-application",children:"For Runner Application"}),"\n",(0,s.jsxs)(n.p,{children:["The runner has been updated to use the persistence module automatically. Configuration is done through ",(0,s.jsx)(n.code,{children:"application.yml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"brobot:\n  persistence:\n    type: DATABASE\n    enabled: true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.p,{children:"The module includes comprehensive test coverage:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unit tests for each provider implementation"}),"\n",(0,s.jsx)(n.li,{children:"Integration tests with Spring context"}),"\n",(0,s.jsx)(n.li,{children:"Performance benchmarks"}),"\n",(0,s.jsx)(n.li,{children:"Memory leak detection"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Run tests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd brobot/persistence\n./gradlew test\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Out of Memory with In-Memory Provider"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Solution: Configure session and record limits"}),"\n",(0,s.jsx)(n.li,{children:"Enable persist-on-shutdown"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"File Permission Errors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Solution: Ensure write permissions for base-path"}),"\n",(0,s.jsx)(n.li,{children:"Check disk space availability"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Database Connection Issues"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Solution: Verify JDBC URL and credentials"}),"\n",(0,s.jsx)(n.li,{children:"Check database is running"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance Degradation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Solution: Enable async recording"}),"\n",(0,s.jsx)(n.li,{children:"Increase buffer sizes"}),"\n",(0,s.jsx)(n.li,{children:"Use batch operations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cloud storage backends (S3, Azure Blob)"}),"\n",(0,s.jsx)(n.li,{children:"Real-time streaming to external systems"}),"\n",(0,s.jsx)(n.li,{children:"Advanced query API"}),"\n",(0,s.jsx)(n.li,{children:"Compression algorithms"}),"\n",(0,s.jsx)(n.li,{children:"Encryption support"}),"\n",(0,s.jsx)(n.li,{children:"GraphQL API for querying"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(96540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);
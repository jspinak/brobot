"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5055],{466:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>r,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"API/state and state objects/state-image-object","title":"StateImageObject","description":"implements StateObject","source":"@site/versioned_docs/version-1.0.6/API/state and state objects/state-image-object.md","sourceDirName":"API/state and state objects","slug":"/API/state and state objects/state-image-object","permalink":"/brobot/docs/1.0.6/API/state and state objects/state-image-object","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/API/state and state objects/state-image-object.md","tags":[],"version":"1.0.6","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"StateObject","permalink":"/brobot/docs/1.0.6/API/state and state objects/state-object"},"next":{"title":"SearchRegions","permalink":"/brobot/docs/1.0.6/API/state and state objects/search-regions"}}');var s=t(74848),a=t(28453);const o={sidebar_position:3},d="StateImageObject",r={},c=[{value:"Fields",id:"fields",level:2},{value:"Methods",id:"methods",level:2},{value:"Builder Methods",id:"builder-methods",level:2}];function h(e){const i={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"stateimageobject",children:"StateImageObject"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"implements StateObject"})}),"\n",(0,s.jsx)(i.p,{children:"StateImageObject represents an Image that exists in the owner State. Unless\nit has shared images (that appear also in other States), this StateImageObject\nis representative of the State and will be\nused to find it in case Brobot is lost. All StateImageObjects, including those with shared\nimages, are used to find a State during StateTransitions and with Find Actions. When a\nStateImageObject is found, its owner State is registered as an active State in\nStateMemory."}),"\n",(0,s.jsx)(i.p,{children:"StateImageObjects can have either an Image or a RegionImagePairs. RegionImagePairs are for\nImages with fixed locations and are specified by the 'isFixed' option in the Builder."}),"\n",(0,s.jsx)(i.h2,{id:"fields",children:"Fields"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"private String name"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private StateEnum ownerStateName"})," is set by the State when the object is added to the State."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private int timesActedOn"})," is reset after each Action."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private MatchHistory matchHistory"})," is used to produce results during mock runs."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private SearchRegions searchRegionsObject"})," provides search regions for Find operations.\nThese regions can be superseded temporarily by the SearchRegions in an ActionOptions object."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private boolean fixed"}),(0,s.jsx)(i.br,{}),"\n","When 'true', it activates the RegionImagePairs field. Otherwise, the\nImage field is used."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"private Image image"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"private RegionImagePairs regionImagePairs"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private int baseProbabilityExists"}),(0,s.jsx)(i.br,{}),"\n","The probability that a StateImageObject will be found\ncan be influenced by events during a mock run. The base probability is used to reset the\nactive probability value used with Find operations. Having lower base probabilities can\nintroduce more variability into the results. Probabilities are only used in the absence of\nan applicable Match Snapshot in the MatchHistory."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private int probabilityExists"})," is the active probability used in Find operations."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private Position position"})," is used to convert a Match to a Location. When a Match is found,\nthe MatchObject created is passed this position to be available for clicking and other\noperations requiring a Location. The beginning value is ",(0,s.jsx)(i.code,{children:"Position(50,50)"}),", or in the\nmiddle of the Match."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private boolean shared"})," specifies if the same image is used in other StateImageObjects. If\nso, it will be excluded from StateFinder operations, which attempt to find the set of\nactive States after the current position is lost."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"private Anchors anchors"})," are used for defining regions with the Match of this StateImageObject."]}),"\n",(0,s.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public Region getSearchRegion()"})," returns a single search region when needed."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public void setSearchRegion(Region region)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public List<Region> getAllSearchRegions()"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public void setSearchRegionsObject(List<Region> regions)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public void addSearchRegions(List<Region> regions)"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public boolean defined()"})," For fixed-location images, we assume that the StateImageObject\nis found when one of the images in the RegionImagePairs is found. For variable-location\nimages, the StateImageObject is defined when the Image's search region is explicitly\ndefined."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public Optional<Region> getDefinedRegion()"})," returns an empty Optional when the result of\ndefined() is false. When the StateImageObject is defined, the appropriate Region is\nreturned: for fixed-location images, the Region defined by the last Match; for\nvariable-location images, the result of getSearchRegion(), which returns an explicitly-\ndefined search region."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public void setProbabilityToBaseProbability()"})}),"\n",(0,s.jsxs)(i.p,{children:["Adding anchors enables defining Regions with a Match from this StateImageObject.",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.code,{children:"public void addAnchor(Position.Name definedRegionBorder, Position positionInMatch)"}),(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.code,{children:"public void addAnchor(Position.Name definedRegionBorder, Position.Name positionInMatch)"})]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public ObjectCollection asObjectCollection()"})," is a convenience method that creates a new\nObjectCollection and add this StateImageObject to it as the only object."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public void addTimesActedOn()"})," increments the times acted on during a specific Action by 1."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public void addSnapshot(MatchSnapshot matchSnapshot)"})," adds a Snapshot to its MatchHistory."]}),"\n",(0,s.jsx)(i.h2,{id:"builder-methods",children:"Builder Methods"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder called(String name)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder withSearchRegion(Region searchRegion)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder inState(StateEnum stateName)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder isFixed()"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public Builder withImage(String... imageNames)"})," adds a single Image with the given Patterns\nspecified by the imageNames parameter."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public Builder withImages(String... imageNames)"})," adds one Image per Pattern."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public Builder withImage(Image... images)"})," adds a single Image with all the Patterns\nfrom all the images passed to it."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"public Builder withImages(Image... images)"})," adds the Images passed as parameters."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder setBaseProbabilityExists(int prob)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder setProbabilityExists(int prob)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder withPosition(Position position)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder isShared()"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder addAnchor(Position.Name borderOfRegionToDefine, Position positionInMatch)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder addAnchor(Position.Name borderOfRegionToDefine, Position.Name positionInMatch)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public Builder addSnapshot(MatchSnapshot matchSnapshot)"})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"public StateImageObject build()"})})]})}function l(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>d});var n=t(96540);const s={},a=n.createContext(s);function o(e){const i=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);
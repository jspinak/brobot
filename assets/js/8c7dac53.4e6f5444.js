"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[97],{28453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>s});var i=r(96540);const t={},o=i.createContext(t);function a(n){const e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),i.createElement(o.Provider,{value:e},n.children)}},57093:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/automation-runner","title":"AutomationRunner - Graceful Failure Handling","description":"Overview","source":"@site/docs/03-core-library/automation-runner.md","sourceDirName":"03-core-library","slug":"/core-library/automation-runner","permalink":"/brobot/docs/core-library/automation-runner","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/automation-runner.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"AspectJ Usage Guide for Brobot","permalink":"/brobot/docs/core-library/advanced/ASPECTJ_USAGE_GUIDE"},"next":{"title":"Auto-Configuration in Brobot","permalink":"/brobot/docs/core-library/configuration/auto-configuration"}}');var t=r(74848),o=r(28453);const a={},s="AutomationRunner - Graceful Failure Handling",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Key Benefits",id:"key-benefits",level:2},{value:"1. <strong>Application Resilience</strong>",id:"1-application-resilience",level:3},{value:"2. <strong>Automatic Retry Logic</strong>",id:"2-automatic-retry-logic",level:3},{value:"3. <strong>Comprehensive Logging</strong>",id:"3-comprehensive-logging",level:3},{value:"4. <strong>Configuration-Driven</strong>",id:"4-configuration-driven",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Simple Example",id:"simple-example",level:3},{value:"Spring Boot Application Example",id:"spring-boot-application-example",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Task with Context",id:"custom-task-with-context",level:3},{value:"Handling Different Failure Scenarios",id:"handling-different-failure-scenarios",level:3},{value:"Scheduled Automation Service",id:"scheduled-automation-service",level:3},{value:"Integration with StateNavigator",id:"integration-with-statenavigator",level:2},{value:"Exception Handling",id:"exception-handling",level:2},{value:"Using AutomationException",id:"using-automationexception",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. <strong>Always Use AutomationRunner for Main Tasks</strong>",id:"1-always-use-automationrunner-for-main-tasks",level:3},{value:"2. <strong>Configure for Your Environment</strong>",id:"2-configure-for-your-environment",level:3},{value:"3. <strong>Use Descriptive Task Names</strong>",id:"3-use-descriptive-task-names",level:3},{value:"4. <strong>Implement Proper Cleanup</strong>",id:"4-implement-proper-cleanup",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From Direct Execution to AutomationRunner",id:"from-direct-execution-to-automationrunner",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Summary",id:"summary",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"automationrunner---graceful-failure-handling",children:"AutomationRunner - Graceful Failure Handling"})}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"AutomationRunner"})," is a robust wrapper for automation tasks that provides enterprise-grade error handling, retry logic, and configuration-based behavior control. It ensures your automation applications can handle failures gracefully without crashing."]}),"\n",(0,t.jsx)(e.h2,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,t.jsxs)(e.h3,{id:"1-application-resilience",children:["1. ",(0,t.jsx)(e.strong,{children:"Application Resilience"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"No More Crashes"}),": Automation failures don't terminate your application"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Graceful Degradation"}),": Continue with cleanup or alternative paths after failures"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Service Continuity"}),": Perfect for long-running automation services"]}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{id:"2-automatic-retry-logic",children:["2. ",(0,t.jsx)(e.strong,{children:"Automatic Retry Logic"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Configurable Retries"}),": Set retry attempts via properties"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Smart Delays"}),": Add delays between retry attempts"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Reduced Flakiness"}),": Handle transient failures automatically"]}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{id:"3-comprehensive-logging",children:["3. ",(0,t.jsx)(e.strong,{children:"Comprehensive Logging"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Structured Logs"}),": Track attempts, failures, and successes"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Debug Control"}),": Toggle stack traces for production vs development"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Audit Trail"}),": Complete record of automation execution"]}),"\n"]}),"\n",(0,t.jsxs)(e.h3,{id:"4-configuration-driven",children:["4. ",(0,t.jsx)(e.strong,{children:"Configuration-Driven"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Environment-Specific"}),": Different behaviors for dev/test/prod"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"No Code Changes"}),": Modify behavior through properties"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Runtime Flexibility"}),": Change settings without recompilation"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(e.h3,{id:"simple-example",children:"Simple Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@Service\r\npublic class MyAutomation {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    @Autowired\r\n    private StateNavigator navigator;\r\n    \r\n    public void runMyAutomation() {\r\n        boolean success = runner.run(() -> {\r\n            // Your automation logic here\r\n            return navigator.openState("TargetState");\r\n        });\r\n        \r\n        if (success) {\r\n            log.info("Automation succeeded!");\r\n        } else {\r\n            log.error("Automation failed but app continues");\r\n            // Handle failure gracefully\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"spring-boot-application-example",children:"Spring Boot Application Example"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@Slf4j\r\n@SpringBootApplication\r\npublic class AutomationApplication {\r\n    \r\n    public static void main(String[] args) {\r\n        ConfigurableApplicationContext context = SpringApplication.run(AutomationApplication.class, args);\r\n        \r\n        AutomationRunner runner = context.getBean(AutomationRunner.class);\r\n        MyAutomationService service = context.getBean(MyAutomationService.class);\r\n        \r\n        // Run with automatic retry and error handling\r\n        boolean success = runner.run(\r\n            service::performAutomation,\r\n            "Main Automation Task"\r\n        );\r\n        \r\n        if (!success) {\r\n            // Application continues running - no System.exit()!\r\n            log.warn("Automation failed but application remains active");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,t.jsxs)(e.p,{children:["Configure behavior via ",(0,t.jsx)(e.code,{children:"application.properties"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-properties",children:"# Don't exit application on failure (default: false)\r\nbrobot.automation.exit-on-failure=false\r\n\r\n# Exit code if exit-on-failure is true (default: 1)\r\nbrobot.automation.failure-exit-code=1\r\n\r\n# Throw exceptions for programmatic handling (default: false)\r\nbrobot.automation.throw-on-failure=false\r\n\r\n# Log full stack traces (default: true)\r\nbrobot.automation.log-stack-traces=true\r\n\r\n# Number of retry attempts (default: 0)\r\nbrobot.automation.max-retries=3\r\n\r\n# Delay between retries in milliseconds (default: 1000)\r\nbrobot.automation.retry-delay-ms=2000\r\n\r\n# Continue with remaining steps after failure (default: false)\r\nbrobot.automation.continue-on-failure=false\r\n\r\n# Overall timeout in seconds (default: 0 = no timeout)\r\nbrobot.automation.timeout-seconds=300\n"})}),"\n",(0,t.jsx)(e.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(e.h3,{id:"custom-task-with-context",children:"Custom Task with Context"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'public class AdvancedAutomation {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    public void runWithContext() {\r\n        // Define a complex task\r\n        AutomationRunner.AutomationTask task = () -> {\r\n            try {\r\n                // Step 1: Initialize\r\n                if (!initialize()) return false;\r\n                \r\n                // Step 2: Navigate\r\n                if (!navigateToTarget()) return false;\r\n                \r\n                // Step 3: Perform actions\r\n                if (!performActions()) return false;\r\n                \r\n                // Step 4: Verify results\r\n                return verifyResults();\r\n                \r\n            } catch (Exception e) {\r\n                log.error("Task failed with exception", e);\r\n                throw e; // Let runner handle it\r\n            }\r\n        };\r\n        \r\n        // Run with custom name for better logging\r\n        boolean success = runner.run(task, "ComplexWorkflow");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"handling-different-failure-scenarios",children:"Handling Different Failure Scenarios"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@Service\r\npublic class RobustAutomation {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    @Autowired\r\n    private AutomationConfig config;\r\n    \r\n    public void executeWithFallback() {\r\n        // Primary automation\r\n        boolean primarySuccess = runner.run(this::primaryPath, "Primary Path");\r\n        \r\n        if (!primarySuccess && !config.isExitOnFailure()) {\r\n            log.info("Primary path failed, trying fallback");\r\n            \r\n            // Fallback automation\r\n            boolean fallbackSuccess = runner.run(this::fallbackPath, "Fallback Path");\r\n            \r\n            if (!fallbackSuccess) {\r\n                // Both failed - perform cleanup\r\n                performCleanup();\r\n            }\r\n        }\r\n    }\r\n    \r\n    private boolean primaryPath() {\r\n        // Primary automation logic\r\n        return true;\r\n    }\r\n    \r\n    private boolean fallbackPath() {\r\n        // Alternative automation logic\r\n        return true;\r\n    }\r\n    \r\n    private void performCleanup() {\r\n        // Cleanup resources\r\n        log.info("Performing cleanup after automation failure");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"scheduled-automation-service",children:"Scheduled Automation Service"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@Service\r\n@Slf4j\r\npublic class ScheduledAutomationService {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    @Scheduled(fixedDelay = 60000) // Run every minute\r\n    public void runScheduledAutomation() {\r\n        log.info("Starting scheduled automation");\r\n        \r\n        boolean success = runner.run(() -> {\r\n            // Your periodic automation logic\r\n            return performScheduledTasks();\r\n        }, "Scheduled Task");\r\n        \r\n        if (!success) {\r\n            // Log failure but don\'t crash\r\n            // Next scheduled run will try again\r\n            log.warn("Scheduled automation failed, will retry on next schedule");\r\n        }\r\n    }\r\n    \r\n    private boolean performScheduledTasks() {\r\n        // Implementation\r\n        return true;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"integration-with-statenavigator",children:"Integration with StateNavigator"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"AutomationRunner"})," works seamlessly with Brobot's ",(0,t.jsx)(e.code,{children:"StateNavigator"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@Service\r\npublic class NavigationAutomation {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    @Autowired\r\n    private StateNavigator navigator;\r\n    \r\n    public void navigateWithRetry() {\r\n        // Navigator failures are handled gracefully\r\n        boolean success = runner.run(() -> {\r\n            // Navigate to multiple states\r\n            if (!navigator.openState("LoginPage")) return false;\r\n            if (!navigator.openState("Dashboard")) return false;\r\n            if (!navigator.openState("Settings")) return false;\r\n            return true;\r\n        }, "Multi-State Navigation");\r\n        \r\n        // Application continues even if navigation fails\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,t.jsx)(e.h3,{id:"using-automationexception",children:"Using AutomationException"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'public class ExceptionHandlingExample {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    public void handleExceptions() {\r\n        try {\r\n            // Configure to throw exceptions\r\n            runner.getConfig().setThrowOnFailure(true);\r\n            \r\n            boolean success = runner.run(() -> {\r\n                // This might throw AutomationException\r\n                return riskyOperation();\r\n            });\r\n            \r\n        } catch (AutomationException e) {\r\n            // Handle structured exception\r\n            log.error("Automation failed in state: {}, operation: {}", \r\n                     e.getStateName(), e.getOperation());\r\n            \r\n            if (e.isRecoverable()) {\r\n                // Try recovery\r\n                attemptRecovery();\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(e.h3,{id:"1-always-use-automationrunner-for-main-tasks",children:["1. ",(0,t.jsx)(e.strong,{children:"Always Use AutomationRunner for Main Tasks"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"// \u274c Don't do this\r\npublic static void main(String[] args) {\r\n    boolean success = runAutomation();\r\n    System.exit(success ? 0 : 1); // App crashes on failure!\r\n}\r\n\r\n// \u2705 Do this instead\r\npublic static void main(String[] args) {\r\n    AutomationRunner runner = context.getBean(AutomationRunner.class);\r\n    boolean success = runner.run(this::runAutomation);\r\n    // App continues running\r\n}\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"2-configure-for-your-environment",children:["2. ",(0,t.jsx)(e.strong,{children:"Configure for Your Environment"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-properties",children:"# Development - verbose logging, no retries\r\nbrobot.automation.log-stack-traces=true\r\nbrobot.automation.max-retries=0\r\n\r\n# Production - less verbose, with retries\r\nbrobot.automation.log-stack-traces=false\r\nbrobot.automation.max-retries=3\r\nbrobot.automation.retry-delay-ms=5000\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"3-use-descriptive-task-names",children:["3. ",(0,t.jsx)(e.strong,{children:"Use Descriptive Task Names"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'// Helps with debugging and monitoring\r\nrunner.run(task, "User Registration Flow");\r\nrunner.run(task, "Data Export Process");\r\nrunner.run(task, "Nightly Cleanup Job");\n'})}),"\n",(0,t.jsxs)(e.h3,{id:"4-implement-proper-cleanup",children:["4. ",(0,t.jsx)(e.strong,{children:"Implement Proper Cleanup"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"public boolean automationWithCleanup() {\r\n    try {\r\n        return runner.run(() -> {\r\n            // Automation logic\r\n            return performTask();\r\n        });\r\n    } finally {\r\n        // Always cleanup, even on failure\r\n        cleanup();\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,t.jsx)(e.p,{children:"The AutomationRunner provides detailed logs for monitoring:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"INFO  Starting User Login Test (attempt 1 of 3)\r\nWARN  User Login Test failed on attempt 1 of 3\r\nINFO  Waiting 2000ms before retry\r\nINFO  Starting User Login Test (attempt 2 of 3)\r\nINFO  User Login Test completed successfully\n"})}),"\n",(0,t.jsx)(e.p,{children:"You can integrate with monitoring systems:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@Component\r\npublic class MonitoredAutomation {\r\n    \r\n    @Autowired\r\n    private AutomationRunner runner;\r\n    \r\n    @Autowired\r\n    private MeterRegistry meterRegistry; // Micrometer\r\n    \r\n    public void runWithMetrics() {\r\n        Timer.Sample sample = Timer.start(meterRegistry);\r\n        \r\n        boolean success = runner.run(this::automationTask);\r\n        \r\n        sample.stop(Timer.builder("automation.execution")\r\n            .tag("success", String.valueOf(success))\r\n            .register(meterRegistry));\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,t.jsx)(e.h3,{id:"from-direct-execution-to-automationrunner",children:"From Direct Execution to AutomationRunner"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Before:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"public class OldAutomation {\r\n    public static void main(String[] args) {\r\n        try {\r\n            boolean success = performAutomation();\r\n            System.exit(success ? 0 : 1);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"After:"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'public class NewAutomation {\r\n    public static void main(String[] args) {\r\n        ApplicationContext context = SpringApplication.run(NewAutomation.class);\r\n        AutomationRunner runner = context.getBean(AutomationRunner.class);\r\n        \r\n        runner.run(() -> performAutomation(), "Main Automation");\r\n        // No System.exit() - app continues or stops gracefully\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Application Still Exits on Failure"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Check ",(0,t.jsx)(e.code,{children:"brobot.automation.exit-on-failure"})," is set to ",(0,t.jsx)(e.code,{children:"false"})]}),"\n",(0,t.jsx)(e.li,{children:"Ensure you're using AutomationRunner, not direct execution"}),"\n",(0,t.jsxs)(e.li,{children:["Remove any ",(0,t.jsx)(e.code,{children:"System.exit()"})," calls from your code"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Retries Not Working"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Verify ",(0,t.jsx)(e.code,{children:"brobot.automation.max-retries"})," is greater than 0"]}),"\n",(0,t.jsxs)(e.li,{children:["Check that your task returns ",(0,t.jsx)(e.code,{children:"false"})," (not throwing exceptions)"]}),"\n",(0,t.jsxs)(e.li,{children:["Ensure ",(0,t.jsx)(e.code,{children:"brobot.automation.retry-delay-ms"})," is reasonable"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Too Verbose Logging"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Set ",(0,t.jsx)(e.code,{children:"brobot.automation.log-stack-traces=false"})," for production"]}),"\n",(0,t.jsxs)(e.li,{children:["Adjust Spring Boot logging levels in ",(0,t.jsx)(e.code,{children:"application.properties"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"AutomationRunner"})," transforms brittle automation scripts into robust, production-ready applications. By providing automatic retry logic, graceful failure handling, and configuration-based behavior, it ensures your automation can handle real-world conditions without crashing your application."]}),"\n",(0,t.jsx)(e.p,{children:"Key takeaways:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Never call ",(0,t.jsx)(e.code,{children:"System.exit()"})]})," in automation code"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Always wrap main automation tasks"})," with AutomationRunner"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Configure behavior"})," through properties, not code"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Handle failures gracefully"})," with fallback strategies"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Monitor and log"})," for observability"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"With AutomationRunner, your automation becomes more reliable, maintainable, and production-ready."})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2040],{28453:(n,t,e)=>{e.d(t,{R:()=>r,x:()=>s});var i=e(96540);const a={},o=i.createContext(a);function r(n){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(o.Provider,{value:t},n.children)}},28748:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"core-library/tutorials/tutorial-basics/transitions","title":"Transitions","description":"Transitions define how your automation moves between states. With Brobot\'s modern @Transition annotation, creating robust state transitions is simple and maintainable.","source":"@site/docs/03-core-library/tutorials/tutorial-basics/transitions.md","sourceDirName":"03-core-library/tutorials/tutorial-basics","slug":"/core-library/tutorials/tutorial-basics/transitions","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/transitions","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-basics/transitions.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"States","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/states"},"next":{"title":"Define the Capture Region","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/define-capture-region"}}');var a=e(74848),o=e(28453);const r={sidebar_position:5},s="Transitions",c={},l=[{value:"Modern Transition Definition with @Transition Annotation",id:"modern-transition-definition-with-transition-annotation",level:2},{value:"Key Features of Modern Transitions",id:"key-features-of-modern-transitions",level:2},{value:"1. Automatic Registration",id:"1-automatic-registration",level:3},{value:"2. Dependency Injection",id:"2-dependency-injection",level:3},{value:"3. Action Convenience Methods",id:"3-action-convenience-methods",level:3},{value:"Robust Error Handling with Sequential Actions",id:"robust-error-handling-with-sequential-actions",level:2},{value:"Transition Patterns",id:"transition-patterns",level:2},{value:"Simple Click Transition",id:"simple-click-transition",level:3},{value:"Multi-Step Transition",id:"multi-step-transition",level:3},{value:"Conditional Navigation",id:"conditional-navigation",level:3},{value:"Working with ActionConfig",id:"working-with-actionconfig",level:2},{value:"Transition with State Validation",id:"transition-with-state-validation",level:2},{value:"Complex Transition with Retry Logic",id:"complex-transition-with-retry-logic",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Single Responsibility",id:"1-single-responsibility",level:3},{value:"2. Logging",id:"2-logging",level:3},{value:"3. State Validation",id:"3-state-validation",level:3},{value:"4. Error Recovery",id:"4-error-recovery",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(n){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"transitions",children:"Transitions"})}),"\n",(0,a.jsxs)(t.p,{children:["Transitions define how your automation moves between states. With Brobot's modern ",(0,a.jsx)(t.code,{children:"@Transition"})," annotation, creating robust state transitions is simple and maintainable."]}),"\n",(0,a.jsx)(t.h2,{id:"modern-transition-definition-with-transition-annotation",children:"Modern Transition Definition with @Transition Annotation"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"@Transition"})," annotation automatically registers transitions between states:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = HomeState.class, to = WorldState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class HomeToWorldTransition {\n    private final HomeState homeState;\n    private final Action action;\n    \n    public boolean execute() {\n        log.info("Transitioning from Home to World");\n        return action.click(homeState.getToWorldButton()).isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"key-features-of-modern-transitions",children:"Key Features of Modern Transitions"}),"\n",(0,a.jsx)(t.h3,{id:"1-automatic-registration",children:"1. Automatic Registration"}),"\n",(0,a.jsx)(t.p,{children:"No manual transition setup needed - the annotation handles everything:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Transition(from = LoginState.class, to = DashboardState.class)\npublic class LoginToDashboardTransition {\n    // Automatically registered with state management\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"2-dependency-injection",children:"2. Dependency Injection"}),"\n",(0,a.jsx)(t.p,{children:"Transitions are Spring components with full DI support:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Transition(from = WorldState.class, to = IslandState.class)\n@Component\n@RequiredArgsConstructor\npublic class WorldToIslandTransition {\n    private final WorldState worldState;\n    private final IslandState islandState;\n    private final Action action;\n    private final DatabaseService databaseService;  // Any Spring bean\n    \n    public boolean execute() {\n        // Access any injected dependencies\n        return action.click(worldState.getCastle()).isSuccess();\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"3-action-convenience-methods",children:"3. Action Convenience Methods"}),"\n",(0,a.jsx)(t.p,{children:"Use fluent action methods for clean, readable code:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public boolean execute() {\n    return action\n        .click(loginState.getUsernameField())\n        .type("admin")\n        .click(loginState.getPasswordField())\n        .type("password123")\n        .click(loginState.getSubmitButton())\n        .isSuccess();\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"robust-error-handling-with-sequential-actions",children:"Robust Error Handling with Sequential Actions"}),"\n",(0,a.jsx)(t.p,{children:"Handle failures gracefully with sequential action patterns:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = MainMenuState.class, to = GameState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class MainMenuToGameTransition {\n    private final MainMenuState mainMenu;\n    private final GameState gameState;\n    private final Action action;\n    \n    public boolean execute() {\n        log.info("Starting game from main menu");\n        \n        // Try primary action first\n        ActionResult playResult = action.click(mainMenu.getPlayButton());\n        \n        if (!playResult.isSuccess()) {\n            log.warn("Play button not found, trying alternative");\n            playResult = action.click(mainMenu.getStartButton());\n        }\n        \n        if (!playResult.isSuccess()) {\n            log.error("Failed to start game");\n            return false;\n        }\n        \n        // Wait for game board to appear with timeout\n        ActionResult waitResult = action.findWithTimeout(gameState.getGameBoard(), 10);\n        \n        if (!waitResult.isSuccess()) {\n            log.error("Game failed to load");\n            return false;\n        }\n        \n        return true;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"transition-patterns",children:"Transition Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"simple-click-transition",children:"Simple Click Transition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Transition(from = HomeState.class, to = SettingsState.class)\n@Component\n@RequiredArgsConstructor\npublic class HomeToSettingsTransition {\n    private final HomeState homeState;\n    private final Action action;\n    \n    public boolean execute() {\n        return action.click(homeState.getSettingsIcon()).isSuccess();\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"multi-step-transition",children:"Multi-Step Transition"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = LoginState.class, to = DashboardState.class)\n@Component\n@RequiredArgsConstructor\npublic class LoginTransition {\n    private final LoginState loginState;\n    private final Action action;\n    \n    public boolean execute() {\n        ActionResult result = action\n            .click(loginState.getUsernameField())\n            .type("user@example.com")\n            .click(loginState.getPasswordField())\n            .type(System.getenv("APP_PASSWORD"))\n            .click(loginState.getLoginButton());\n            \n        if (result.isSuccess()) {\n            log.info("Login successful");\n            return true;\n        }\n        \n        log.error("Login failed: {}", result.getFailureReason());\n        return false;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"conditional-navigation",children:"Conditional Navigation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = ProductListState.class, to = ProductDetailsState.class)\n@Component\n@RequiredArgsConstructor\npublic class SelectProductTransition {\n    private final ProductListState productList;\n    private final Action action;\n    \n    public boolean execute() {\n        // Try to find and click a specific product\n        ActionResult specificProduct = action.click(\n            productList.getProductByName("Premium Widget")\n        );\n        \n        if (specificProduct.isSuccess()) {\n            return true;\n        }\n        \n        // Fallback: click the first available product\n        log.info("Specific product not found, selecting first available");\n        return action.click(productList.getFirstProduct()).isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"working-with-actionconfig",children:"Working with ActionConfig"}),"\n",(0,a.jsx)(t.p,{children:"Use modern ActionConfig classes for precise control:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = FormState.class, to = ConfirmationState.class)\n@Component\n@RequiredArgsConstructor\npublic class SubmitFormTransition {\n    private final FormState formState;\n    private final Action action;\n    \n    public boolean execute() {\n        // Configure specific action behaviors\n        ClickOptions doubleClick = new ClickOptions.Builder()\n            .setNumberOfClicks(2)\n            .setPauseAfterEnd(0.5)\n            .build();\n            \n        TypeTextOptions secureType = new TypeTextOptions.Builder()\n            .setPauseBeforeBegin(0.3)\n            .setModifierKeys(KeyEvent.VK_CONTROL)\n            .build();\n            \n        DragOptions preciseDrag = new DragOptions.Builder()\n            .setDragDuration(1.5)\n            .setPauseAfterEnd(0.2)\n            .build();\n        \n        return action\n            .click(formState.getNameField())\n            .type("John Doe")\n            .perform(formState.getSubmitButton(), doubleClick)\n            .isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"transition-with-state-validation",children:"Transition with State Validation"}),"\n",(0,a.jsx)(t.p,{children:"Ensure you've reached the correct state:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = HomeState.class, to = WorldState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class HomeToWorldWithValidation {\n    private final HomeState homeState;\n    private final WorldState worldState;\n    private final Action action;\n    \n    public boolean execute() {\n        // Perform the transition\n        ActionResult clickResult = action.click(homeState.getToWorldButton());\n        \n        if (!clickResult.isSuccess()) {\n            log.error("Failed to click world button");\n            return false;\n        }\n        \n        // Validate we reached the target state\n        ActionResult validation = action.findWithTimeout(worldState.getMinimap(), 5);\n        \n        if (validation.isSuccess()) {\n            log.info("Successfully transitioned to World state");\n            return true;\n        }\n        \n        log.error("Transition executed but World state not reached");\n        return false;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"complex-transition-with-retry-logic",children:"Complex Transition with Retry Logic"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = ConnectionState.class, to = ConnectedState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class ConnectWithRetryTransition {\n    private final ConnectionState connectionState;\n    private final ConnectedState connectedState;\n    private final Action action;\n    \n    private static final int MAX_RETRIES = 3;\n    private static final int RETRY_DELAY = 2000;\n    \n    public boolean execute() {\n        for (int attempt = 1; attempt <= MAX_RETRIES; attempt++) {\n            log.info("Connection attempt {} of {}", attempt, MAX_RETRIES);\n            \n            ActionResult connectResult = action.click(\n                connectionState.getConnectButton()\n            );\n            \n            if (!connectResult.isSuccess()) {\n                log.warn("Connect button click failed");\n                continue;\n            }\n            \n            // Wait for connection with timeout\n            ActionResult waitResult = action.findWithTimeout(\n                connectedState.getConnectionIndicator(), \n                10\n            );\n            \n            if (waitResult.isSuccess()) {\n                log.info("Successfully connected on attempt {}", attempt);\n                return true;\n            }\n            \n            if (attempt < MAX_RETRIES) {\n                log.info("Connection failed, retrying in {} ms", RETRY_DELAY);\n                try {\n                    Thread.sleep(RETRY_DELAY);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    return false;\n                }\n            }\n        }\n        \n        log.error("Failed to connect after {} attempts", MAX_RETRIES);\n        return false;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(t.h3,{id:"1-single-responsibility",children:"1. Single Responsibility"}),"\n",(0,a.jsx)(t.p,{children:"Each transition should handle one logical flow:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Good: Clear, single purpose\n@Transition(from = LoginState.class, to = DashboardState.class)\npublic class LoginTransition { }\n\n// Avoid: Multiple unrelated transitions\n@Transition(from = LoginState.class, to = DashboardState.class)\npublic class LoginAndSetupAndNavigateTransition { }\n"})}),"\n",(0,a.jsx)(t.h3,{id:"2-logging",children:"2. Logging"}),"\n",(0,a.jsx)(t.p,{children:"Add meaningful logs for debugging:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'public boolean execute() {\n    log.info("Starting transition from {} to {}", \n        homeState.getClass().getSimpleName(),\n        worldState.getClass().getSimpleName());\n    \n    ActionResult result = action.click(homeState.getToWorldButton());\n    \n    if (result.isSuccess()) {\n        log.info("Transition successful");\n    } else {\n        log.error("Transition failed: {}", result.getFailureReason());\n    }\n    \n    return result.isSuccess();\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"3-state-validation",children:"3. State Validation"}),"\n",(0,a.jsx)(t.p,{children:"Always validate you've reached the target state:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"public boolean execute() {\n    // Perform action\n    action.click(sourceState.getNavigationButton());\n    \n    // Validate arrival\n    return action.exists(targetState.getUniqueElement());\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"4-error-recovery",children:"4. Error Recovery"}),"\n",(0,a.jsx)(t.p,{children:"Use sequential actions with error checking for robust handling:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"public boolean execute() {\n    // Try primary button first\n    ActionResult primaryResult = action.click(primaryButton);\n    \n    if (!primaryResult.isSuccess()) {\n        primaryResult = action.click(fallbackButton);\n    }\n    \n    if (!primaryResult.isSuccess()) {\n        return false;\n    }\n    \n    // Wait for target element to appear\n    ActionResult waitResult = action.findWithTimeout(targetElement, 5);\n    return waitResult.isSuccess();\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(t.p,{children:"Here's a complete transition with all modern features:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Transition(from = ShoppingCartState.class, to = CheckoutState.class)\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class CartToCheckoutTransition {\n    private final ShoppingCartState cartState;\n    private final CheckoutState checkoutState;\n    private final Action action;\n    private final CartService cartService;\n    \n    public boolean execute() {\n        log.info("Proceeding to checkout");\n        \n        // Validate cart is not empty\n        if (cartService.isEmpty()) {\n            log.error("Cannot checkout with empty cart");\n            return false;\n        }\n        \n        // Use sequential execution for robust handling\n        // Try primary checkout button first\n        ActionResult checkoutResult = action.click(cartState.getCheckoutButton());\n        \n        if (!checkoutResult.isSuccess()) {\n            log.warn("Primary checkout button failed, trying alternative");\n            checkoutResult = action.click(cartState.getProceedButton());\n        }\n        \n        if (!checkoutResult.isSuccess()) {\n            log.error("Failed to click checkout button");\n            return false;\n        }\n        \n        // Wait for checkout page to load\n        ActionResult waitResult = action.findWithTimeout(checkoutState.getPaymentSection(), 10);\n        \n        if (!waitResult.isSuccess()) {\n            log.error("Checkout page did not load, trying to recover by refreshing");\n            action.keyPress(KeyEvent.VK_F5);\n            waitResult = action.findWithTimeout(checkoutState.getPaymentSection(), 5);\n        }\n        \n        ActionResult result = waitResult;\n        \n        if (result.isSuccess()) {\n            log.info("Successfully reached checkout");\n            cartService.markAsCheckedOut();\n        } else {\n            log.error("Failed to reach checkout: {}", result.getFailureReason());\n        }\n        \n        return result.isSuccess();\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(t.p,{children:"With states and transitions defined, you're ready to build complete automation workflows. Check out:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"../../guides/action-config-factory",children:"Action Configuration"})," for advanced action options"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"../../../testing/testing-intro",children:"Testing"})," to validate your automation"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"live-automation",children:"Live Automation"})," to see everything in action"]}),"\n"]})]})}function d(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6393],{28453:(n,e,i)=>{i.d(e,{R:()=>c,x:()=>r});var t=i(96540);const o={},a=t.createContext(o);function c(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:c(n.components),t.createElement(a.Provider,{value:e},n.children)}},33638:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"getting-started/pure-actions-quickstart","title":"Pure Actions Quick Start Guide","description":"What are Pure Actions?","source":"@site/docs/01-getting-started/pure-actions-quickstart.md","sourceDirName":"01-getting-started","slug":"/getting-started/pure-actions-quickstart","permalink":"/brobot/docs/getting-started/pure-actions-quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/01-getting-started/pure-actions-quickstart.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Pure Actions Quick Start Guide"},"sidebar":"docSidebar","previous":{"title":"Quick Start Guide","permalink":"/brobot/docs/getting-started/quick-start"},"next":{"title":"Brobot AI Implementation Guide - Complete Reference","permalink":"/brobot/docs/getting-started/ai-brobot-project-creation"}}');var o=i(74848),a=i(28453);const c={sidebar_position:8,title:"Pure Actions Quick Start Guide"},r="Pure Actions Quick Start Guide",s={},l=[{value:"What are Pure Actions?",id:"what-are-pure-actions",level:2},{value:"The Old Way vs The New Way",id:"the-old-way-vs-the-new-way",level:2},{value:"Old Way (Embedded Find)",id:"old-way-embedded-find",level:3},{value:"New Way (Pure Actions)",id:"new-way-pure-actions",level:3},{value:"Even Better Way (Conditional Chains)",id:"even-better-way-conditional-chains",level:3},{value:"Your First Pure Action",id:"your-first-pure-action",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"1. Click a Button",id:"1-click-a-button",level:3},{value:"2. Type in a Field",id:"2-type-in-a-field",level:3},{value:"3. Highlight Found Elements",id:"3-highlight-found-elements",level:3},{value:"4. Right-Click Menu",id:"4-right-click-menu",level:3},{value:"Convenience Methods",id:"convenience-methods",level:2},{value:"Working with Results",id:"working-with-results",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Separate Find from Action",id:"1-separate-find-from-action",level:3},{value:"2. Handle Both Success and Failure",id:"2-handle-both-success-and-failure",level:3},{value:"3. Reuse Find Results",id:"3-reuse-find-results",level:3},{value:"Migration Tips",id:"migration-tips",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Getting Help",id:"getting-help",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"pure-actions-quick-start-guide",children:"Pure Actions Quick Start Guide"})}),"\n",(0,o.jsx)(e.h2,{id:"what-are-pure-actions",children:"What are Pure Actions?"}),"\n",(0,o.jsx)(e.p,{children:"Pure actions are a new approach in Brobot that separates finding elements from performing actions on them. This makes your automation code clearer, more testable, and more efficient."}),"\n",(0,o.jsx)(e.h2,{id:"the-old-way-vs-the-new-way",children:"The Old Way vs The New Way"}),"\n",(0,o.jsx)(e.h3,{id:"old-way-embedded-find",children:"Old Way (Embedded Find)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find and click happen together - you can't control them separately\naction.click(buttonImage);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"new-way-pure-actions",children:"New Way (Pure Actions)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find first\nActionResult found = action.find(buttonImage);\n\n// Then click if found\nif (found.isSuccess()) {\n    action.perform(ActionType.CLICK, found.getFirstMatch());\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"even-better-way-conditional-chains",children:"Even Better Way (Conditional Chains)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Elegant chaining with automatic conditional execution\nConditionalActionChain.find(findOptions)\n    .ifFoundClick()\n    .ifNotFoundLog("Button not found")\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.h2,{id:"your-first-pure-action",children:"Your First Pure Action"}),"\n",(0,o.jsx)(e.p,{children:"Let's start with a simple example - clicking a button:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Step 1: Import the required classes\nimport io.github.jspinak.brobot.action.*;\nimport io.github.jspinak.brobot.action.basic.click.ClickOptions;\nimport io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\nimport io.github.jspinak.brobot.model.state.StateImage;\n\n// Step 2: Create your target image\nStateImage submitButton = new StateImage.Builder()\n    .addPattern("submit-button")  // No .png extension needed\n    .build();\n\n// Step 3: Find and click using conditional chain\nActionResult result = ConditionalActionChain\n    .find(new PatternFindOptions.Builder().build())\n    .ifFoundClick()\n    .perform(action, new ObjectCollection.Builder()\n        .withImages(submitButton)\n        .build());\n'})}),"\n",(0,o.jsx)(e.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,o.jsx)(e.h3,{id:"1-click-a-button",children:"1. Click a Button"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Simplest form - using convenience method\nLocation buttonLocation = new Location(100, 200);\naction.perform(ActionType.CLICK, buttonLocation);\n\n// Or with an image\nConditionalActionChain.find(findOptions)\n    .ifFoundClick()\n    .perform(action, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-type-in-a-field",children:"2. Type in a Field"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Type at current cursor position\naction.perform(ActionType.TYPE, "Hello World");\n\n// Find field and type\nConditionalActionChain.find(findOptions)\n    .ifFoundClick()\n    .thenType("Hello World")\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-highlight-found-elements",children:"3. Highlight Found Elements"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find all matching elements and highlight them\nActionResult matches = action.find(targetPattern);\nfor (Match match : matches.getMatchList()) {\n    action.perform(ActionType.HIGHLIGHT, match.getRegion());\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"4-right-click-menu",children:"4. Right-Click Menu"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"ConditionalActionChain.find(findOptions)\n    .ifFoundRightClick()\n    .then(findDeleteOptions)\n    .ifFoundClick()\n    .perform(action, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h2,{id:"convenience-methods",children:"Convenience Methods"}),"\n",(0,o.jsx)(e.p,{children:"The Action class now provides simple one-line methods for common operations:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Click at a location\naction.perform(ActionType.CLICK, new Location(100, 200));\n\n// Highlight a region  \naction.perform(ActionType.HIGHLIGHT, new Region(50, 50, 200, 100));\n\n// Type text\naction.perform(ActionType.TYPE, "Hello World");\n\n// Double-click\naction.perform(ActionType.DOUBLE_CLICK, location);\n\n// Right-click\naction.perform(ActionType.RIGHT_CLICK, region);\n'})}),"\n",(0,o.jsx)(e.h2,{id:"working-with-results",children:"Working with Results"}),"\n",(0,o.jsx)(e.p,{children:"Pure actions give you more control over results:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find returns matches you can work with\nActionResult findResult = action.find(targetImage);\n\nif (findResult.isSuccess()) {\n    // Get the first match\n    Match firstMatch = findResult.getBestMatch().get();\n    \n    // Get all matches\n    List<Match> allMatches = findResult.getMatchList();\n    \n    // Work with each match\n    for (Match match : allMatches) {\n        // Highlight each found instance\n        action.perform(ActionType.HIGHLIGHT, match.getRegion());\n        \n        // Click each one\n        action.perform(ActionType.CLICK, match.getRegion());\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(e.p,{children:"Pure actions make error handling explicit and clear:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'ConditionalActionChain.find(criticalButton)\n    .ifFoundClick()\n    .ifNotFoundLog("ERROR: Critical button not found!")\n    .ifNotFoundDo(result -> {\n        // Custom error handling\n        takeScreenshot("error-state");\n        notifyUser("Application in unexpected state");\n    })\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(e.h3,{id:"1-separate-find-from-action",children:"1. Separate Find from Action"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Good: Clear separation\nActionResult found = action.find(targetImage);\nif (found.isSuccess()) {\n    action.perform(ActionType.CLICK, found.getBestMatch().get().getTarget());\n}\n\n// Better: Use conditional chains\nConditionalActionChain.find(findOptions)\n    .ifFoundClick()\n    .perform(action, objectCollection);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-handle-both-success-and-failure",children:"2. Handle Both Success and Failure"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'ConditionalActionChain.find(saveButton)\n    .ifFoundClick()\n    .ifFoundLog("Document saved")\n    .ifNotFoundLog("Save button not found")\n    .ifNotFoundDo(result -> tryAlternativeSave())\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-reuse-find-results",children:"3. Reuse Find Results"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find once, use multiple times\nActionResult buttons = action.find(allButtons);\nfor (Match button : buttons.getMatchList()) {\n    // Highlight with pause after\n    HighlightOptions highlight = new HighlightOptions.Builder()\n        .setPauseAfterEnd(0.5)  // 500ms pause after highlighting\n        .build();\n    action.perform(highlight, button.getRegion());\n    \n    // Then click\n    action.perform(ActionType.CLICK, button.getRegion());\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"migration-tips",children:"Migration Tips"}),"\n",(0,o.jsx)(e.p,{children:"If you're migrating from the old API:"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Start Small"}),": Migrate one action at a time"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Both APIs Work Together"}),": You can use old and new actions in the same project"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Look for Patterns"}),": Similar code often uses similar migration patterns"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Use the Convenience Methods"}),": They make migration easier"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Example migration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Old code\naction.click(submitButton);\n\n// New code - Option 1 (explicit)\nActionResult found = action.find(submitButton);\nif (found.isSuccess()) {\n    action.perform(ActionType.CLICK, found.getFirstMatch());\n}\n\n// New code - Option 2 (chain)\nConditionalActionChain.find(findOptions)\n    .ifFoundClick()\n    .perform(action, new ObjectCollection.Builder()\n        .withImages(submitButton)\n        .build());\n"})}),"\n",(0,o.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Try the Examples"}),": Start with simple click and type operations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Explore Conditional Chains"}),": Learn about ifFound, ifNotFound, and always"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Read the Full Documentation"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/action-config/pure-actions-api",children:"Pure Actions API Reference"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/action-config/conditional-chains-examples",children:"Conditional Chains Examples"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/guides/action-refactoring-migration",children:"Migration Guide"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Check the ",(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/action-config/pure-actions-api",children:"API documentation"})]}),"\n",(0,o.jsxs)(e.li,{children:["See ",(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/action-config/conditional-chains-examples",children:"examples"})," for common patterns"]}),"\n",(0,o.jsxs)(e.li,{children:["File issues on ",(0,o.jsx)(e.a,{href:"https://github.com/jspinak/brobot",children:"GitHub"})," if you encounter problems"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Remember: Pure actions make your automation code clearer and more maintainable. The separation of Find from Action might seem like extra work at first, but it pays off in better testing, debugging, and code reuse."})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);
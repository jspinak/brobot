"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8954],{1647:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"core-library/configuration/brobot-properties-usage","title":"BrobotProperties Usage Guide","description":"This guide explains how to configure and use BrobotProperties in your Brobot applications.","source":"@site/docs/03-core-library/configuration/brobot-properties-usage.md","sourceDirName":"03-core-library/configuration","slug":"/core-library/configuration/brobot-properties-usage","permalink":"/brobot/docs/core-library/configuration/brobot-properties-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/configuration/brobot-properties-usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Auto-Configuration in Brobot","permalink":"/brobot/docs/core-library/configuration/auto-configuration"},"next":{"title":"Headless Configuration Guide","permalink":"/brobot/docs/core-library/configuration/headless-configuration"}}');var i=n(74848),t=n(28453);const s={},a="BrobotProperties Usage Guide",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Configuration in application.properties",id:"configuration-in-applicationproperties",level:2},{value:"Core Properties",id:"core-properties",level:3},{value:"Mouse Properties",id:"mouse-properties",level:3},{value:"Mock Timing Properties",id:"mock-timing-properties",level:3},{value:"Screenshot Properties",id:"screenshot-properties",level:3},{value:"Using BrobotProperties in Your Code",id:"using-brobotproperties-in-your-code",level:2},{value:"Basic Usage with Dependency Injection",id:"basic-usage-with-dependency-injection",level:3},{value:"Accessing Nested Properties",id:"accessing-nested-properties",level:3},{value:"Configuration in Tests",id:"configuration-in-tests",level:2},{value:"Using @TestPropertySource",id:"using-testpropertysource",level:3},{value:"Using application-test.properties",id:"using-application-testproperties",level:3},{value:"Using BrobotTestBase",id:"using-brobottestbase",level:3},{value:"Working with Non-Spring Classes",id:"working-with-non-spring-classes",level:2},{value:"Option 1: Convert to Spring Component",id:"option-1-convert-to-spring-component",level:3},{value:"Option 2: Pass as Parameter",id:"option-2-pass-as-parameter",level:3},{value:"Option 3: Use ApplicationContext",id:"option-3-use-applicationcontext",level:3},{value:"Environment-Specific Configuration",id:"environment-specific-configuration",level:2},{value:"Development Environment",id:"development-environment",level:3},{value:"Production Environment",id:"production-environment",level:3},{value:"CI/CD Environment",id:"cicd-environment",level:3},{value:"Property Validation",id:"property-validation",level:2},{value:"Common Configuration Patterns",id:"common-configuration-patterns",level:2},{value:"Conditional Bean Creation",id:"conditional-bean-creation",level:3},{value:"Configuration Profiles",id:"configuration-profiles",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Properties Not Loading",id:"properties-not-loading",level:3},{value:"Cannot Access in Static Context",id:"cannot-access-in-static-context",level:3},{value:"Test Properties Not Applied",id:"test-properties-not-applied",level:3},{value:"IDE Auto-completion Not Working",id:"ide-auto-completion-not-working",level:3},{value:"Benefits",id:"benefits",level:2},{value:"Summary",id:"summary",level:2}];function p(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"brobotproperties-usage-guide",children:"BrobotProperties Usage Guide"})}),"\n",(0,i.jsx)(r.p,{children:"This guide explains how to configure and use BrobotProperties in your Brobot applications."}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(r.p,{children:"BrobotProperties is the Spring-based configuration system for Brobot, providing type-safe, validated configuration management with excellent IDE support and testing capabilities."}),"\n",(0,i.jsx)(r.h2,{id:"configuration-in-applicationproperties",children:"Configuration in application.properties"}),"\n",(0,i.jsxs)(r.p,{children:["All Brobot configuration properties use the ",(0,i.jsx)(r.code,{children:"brobot."})," prefix and are organized into logical groups:"]}),"\n",(0,i.jsx)(r.h3,{id:"core-properties",children:"Core Properties"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Mock mode for testing without screen interaction\r\nbrobot.mock=false\r\n\r\n# Headless mode (no display available)\r\nbrobot.headless=false\r\n\r\n# Package name for state discovery\r\nbrobot.core.package-name=com.example.myapp\n"})}),"\n",(0,i.jsx)(r.h3,{id:"mouse-properties",children:"Mouse Properties"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Mouse movement delays\r\nbrobot.mouse.move-delay=0.5\r\nbrobot.mouse.pause-before-down=0.1\r\nbrobot.mouse.pause-after-down=0.1\n"})}),"\n",(0,i.jsx)(r.h3,{id:"mock-timing-properties",children:"Mock Timing Properties"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Simulated operation times (in seconds)\r\nbrobot.mock.time-find-first=0.01\r\nbrobot.mock.time-find-all=0.04\r\nbrobot.mock.time-click=0.01\n"})}),"\n",(0,i.jsx)(r.h3,{id:"screenshot-properties",children:"Screenshot Properties"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Screenshot configuration\r\nbrobot.screenshot.save-snapshots=false\r\nbrobot.screenshot.path=images\n"})}),"\n",(0,i.jsx)(r.h2,{id:"using-brobotproperties-in-your-code",children:"Using BrobotProperties in Your Code"}),"\n",(0,i.jsx)(r.h3,{id:"basic-usage-with-dependency-injection",children:"Basic Usage with Dependency Injection"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'import io.github.jspinak.brobot.config.BrobotProperties;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class MyAutomationService {\r\n\r\n    @Autowired\r\n    private BrobotProperties brobotProperties;\r\n\r\n    public void performAction() {\r\n        if (brobotProperties.isMock()) {\r\n            // Execute mock behavior\r\n            System.out.println("Running in mock mode");\r\n        } else {\r\n            // Execute real automation\r\n            System.out.println("Running real automation");\r\n        }\r\n    }\r\n\r\n    public void configureMouseBehavior() {\r\n        double moveDelay = brobotProperties.getMouse().getMoveDelay();\r\n        System.out.println("Mouse move delay: " + moveDelay);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"accessing-nested-properties",children:"Accessing Nested Properties"}),"\n",(0,i.jsx)(r.p,{children:"BrobotProperties provides structured access to configuration groups:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"@Component\r\npublic class ConfigurationExample {\r\n\r\n    @Autowired\r\n    private BrobotProperties brobotProperties;\r\n\r\n    public void showConfiguration() {\r\n        // Core properties\r\n        boolean mockMode = brobotProperties.isMock();\r\n        boolean headless = brobotProperties.isHeadless();\r\n\r\n        // Mouse configuration\r\n        BrobotProperties.MouseProperties mouse = brobotProperties.getMouse();\r\n        double moveDelay = mouse.getMoveDelay();\r\n        double pauseBeforeDown = mouse.getPauseBeforeDown();\r\n\r\n        // Mock timing configuration\r\n        BrobotProperties.MockProperties mock = brobotProperties.getMockProperties();\r\n        double findFirstTime = mock.getTimeFindFirst();\r\n        double clickTime = mock.getTimeClick();\r\n\r\n        // Screenshot configuration\r\n        BrobotProperties.ScreenshotProperties screenshot = brobotProperties.getScreenshot();\r\n        boolean saveSnapshots = screenshot.isSaveSnapshots();\r\n        String screenshotPath = screenshot.getPath();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"configuration-in-tests",children:"Configuration in Tests"}),"\n",(0,i.jsx)(r.h3,{id:"using-testpropertysource",children:"Using @TestPropertySource"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'import org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.context.TestPropertySource;\r\n\r\n@SpringBootTest\r\n@TestPropertySource(properties = {\r\n    "brobot.mock=true",\r\n    "brobot.mock.time-find-first=0.001",\r\n    "brobot.screenshot.save-snapshots=false"\r\n})\r\nclass MyIntegrationTest {\r\n\r\n    @Autowired\r\n    private BrobotProperties brobotProperties;\r\n\r\n    @Test\r\n    void testInMockMode() {\r\n        assertTrue(brobotProperties.isMock());\r\n        assertEquals(0.001, brobotProperties.getMockProperties().getTimeFindFirst());\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"using-application-testproperties",children:"Using application-test.properties"}),"\n",(0,i.jsxs)(r.p,{children:["Create ",(0,i.jsx)(r.code,{children:"src/test/resources/application-test.properties"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Test-specific configuration\r\nbrobot.mock=true\r\nbrobot.headless=true\r\nbrobot.screenshot.save-snapshots=false\r\nbrobot.mock.time-find-first=0.001\r\nbrobot.mock.time-click=0.001\n"})}),"\n",(0,i.jsx)(r.p,{children:"Then activate the test profile:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@SpringBootTest\r\n@ActiveProfiles("test")\r\nclass MyTest {\r\n    // Tests will use application-test.properties\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"using-brobottestbase",children:"Using BrobotTestBase"}),"\n",(0,i.jsxs)(r.p,{children:["For unit tests, extend ",(0,i.jsx)(r.code,{children:"BrobotTestBase"})," which automatically configures mock mode:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic class MyUnitTest extends BrobotTestBase {\r\n\r\n    @Test\r\n    public void testSomething() {\r\n        // Mock mode is automatically enabled\r\n        // No need to configure BrobotProperties manually\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"working-with-non-spring-classes",children:"Working with Non-Spring Classes"}),"\n",(0,i.jsx)(r.h3,{id:"option-1-convert-to-spring-component",children:"Option 1: Convert to Spring Component"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"// Before: Static utility class\r\npublic class ImageUtils {\r\n    public static boolean shouldSaveScreenshot() {\r\n        return FrameworkSettings.saveSnapshots; // OLD WAY\r\n    }\r\n}\r\n\r\n// After: Spring component\r\n@Component\r\npublic class ImageUtils {\r\n    @Autowired\r\n    private BrobotProperties brobotProperties;\r\n\r\n    public boolean shouldSaveScreenshot() {\r\n        return brobotProperties.getScreenshot().isSaveSnapshots();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"option-2-pass-as-parameter",children:"Option 2: Pass as Parameter"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"public class ImageUtils {\r\n    public static boolean shouldSaveScreenshot(BrobotProperties properties) {\r\n        return properties.getScreenshot().isSaveSnapshots();\r\n    }\r\n}\r\n\r\n// Usage\r\n@Component\r\npublic class MyService {\r\n    @Autowired\r\n    private BrobotProperties brobotProperties;\r\n\r\n    public void process() {\r\n        if (ImageUtils.shouldSaveScreenshot(brobotProperties)) {\r\n            // Save screenshot\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"option-3-use-applicationcontext",children:"Option 3: Use ApplicationContext"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"import org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.ApplicationContextAware;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class BrobotPropertiesProvider implements ApplicationContextAware {\r\n    private static ApplicationContext context;\r\n\r\n    @Override\r\n    public void setApplicationContext(ApplicationContext applicationContext) {\r\n        context = applicationContext;\r\n    }\r\n\r\n    public static BrobotProperties getProperties() {\r\n        return context.getBean(BrobotProperties.class);\r\n    }\r\n}\r\n\r\n// Usage in non-Spring class\r\npublic class NonSpringClass {\r\n    public void someMethod() {\r\n        BrobotProperties props = BrobotPropertiesProvider.getProperties();\r\n        if (props.isMock()) {\r\n            // Mock behavior\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"environment-specific-configuration",children:"Environment-Specific Configuration"}),"\n",(0,i.jsx)(r.h3,{id:"development-environment",children:"Development Environment"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"application-dev.properties"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"brobot.mock=false\r\nbrobot.screenshot.save-snapshots=true\r\nbrobot.debug.image.enabled=true\r\nbrobot.logging.verbosity=VERBOSE\n"})}),"\n",(0,i.jsx)(r.h3,{id:"production-environment",children:"Production Environment"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"application-prod.properties"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"brobot.mock=false\r\nbrobot.screenshot.save-snapshots=false\r\nbrobot.debug.image.enabled=false\r\nbrobot.logging.verbosity=NORMAL\n"})}),"\n",(0,i.jsx)(r.h3,{id:"cicd-environment",children:"CI/CD Environment"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"application-ci.properties"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"brobot.mock=true\r\nbrobot.headless=true\r\nbrobot.gui-access.continue-on-error=true\r\nbrobot.gui-access.check-on-startup=false\n"})}),"\n",(0,i.jsx)(r.p,{children:"Activate profiles using:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# Command line\r\njava -jar myapp.jar --spring.profiles.active=dev\r\n\r\n# Environment variable\r\nexport SPRING_PROFILES_ACTIVE=prod\r\n\r\n# Gradle\r\n./gradlew bootRun --args='--spring.profiles.active=ci'\n"})}),"\n",(0,i.jsx)(r.h2,{id:"property-validation",children:"Property Validation"}),"\n",(0,i.jsx)(r.p,{children:"BrobotProperties includes validation to ensure configuration is correct:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "brobot")\r\n@Validated\r\npublic class BrobotProperties {\r\n\r\n    @Min(0)\r\n    @Max(1)\r\n    private double mockActionSuccessProbability = 1.0;\r\n\r\n    @NotNull\r\n    private String screenshotPath = "images";\r\n\r\n    // Validation happens at startup\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"common-configuration-patterns",children:"Common Configuration Patterns"}),"\n",(0,i.jsx)(r.h3,{id:"conditional-bean-creation",children:"Conditional Bean Creation"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@Configuration\r\npublic class ConditionalConfig {\r\n\r\n    @Bean\r\n    @ConditionalOnProperty(name = "brobot.mock", havingValue = "true")\r\n    public MockActionExecutor mockActionExecutor() {\r\n        return new MockActionExecutor();\r\n    }\r\n\r\n    @Bean\r\n    @ConditionalOnProperty(name = "brobot.mock", havingValue = "false", matchIfMissing = true)\r\n    public RealActionExecutor realActionExecutor() {\r\n        return new RealActionExecutor();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"configuration-profiles",children:"Configuration Profiles"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@Component\r\n@Profile("!mock")\r\npublic class RealScreenCapture implements ScreenCapture {\r\n    // Implementation for real screen capture\r\n}\r\n\r\n@Component\r\n@Profile("mock")\r\npublic class MockScreenCapture implements ScreenCapture {\r\n    // Mock implementation\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(r.h3,{id:"properties-not-loading",children:"Properties Not Loading"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Ensure ",(0,i.jsx)(r.code,{children:"application.properties"})," is in ",(0,i.jsx)(r.code,{children:"src/main/resources"})]}),"\n",(0,i.jsxs)(r.li,{children:["Check property names use correct prefix: ",(0,i.jsx)(r.code,{children:"brobot."})]}),"\n",(0,i.jsx)(r.li,{children:"Verify Spring Boot is properly configured"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"cannot-access-in-static-context",children:"Cannot Access in Static Context"}),"\n",(0,i.jsx)(r.p,{children:"Convert to Spring component or pass BrobotProperties as parameter (see examples above)"}),"\n",(0,i.jsx)(r.h3,{id:"test-properties-not-applied",children:"Test Properties Not Applied"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Use ",(0,i.jsx)(r.code,{children:"@TestPropertySource"})," or ",(0,i.jsx)(r.code,{children:'@ActiveProfiles("test")'})]}),"\n",(0,i.jsxs)(r.li,{children:["Ensure test properties file is in ",(0,i.jsx)(r.code,{children:"src/test/resources"})]}),"\n",(0,i.jsxs)(r.li,{children:["For unit tests, extend ",(0,i.jsx)(r.code,{children:"BrobotTestBase"})]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"ide-auto-completion-not-working",children:"IDE Auto-completion Not Working"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Add Spring Boot Configuration Processor dependency:"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-gradle",children:"annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsx)(r.li,{children:"Enable annotation processing in your IDE"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Type Safety"}),": Properties are validated at startup"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"IDE Support"}),": Auto-completion and documentation"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Testing"}),": Easy to override for different test scenarios"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"No Static State"}),": Better for concurrent testing"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Spring Integration"}),": Works with profiles, conditions, and validation"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Environment Flexibility"}),": Different configs per environment"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(r.p,{children:"BrobotProperties provides a modern, flexible configuration system that integrates seamlessly with Spring Boot. By using dependency injection and property files, you get type-safe, testable, and maintainable configuration management for your Brobot automation projects."})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var o=n(96540);const i={},t=o.createContext(i);function s(e){const r=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);
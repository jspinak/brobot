"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3775],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var o=t(96540);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},99866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"core-library/tutorials/tutorial-claude-automator/project-setup","title":"Project Setup","description":"Directory Structure","source":"@site/docs/03-core-library/tutorials/tutorial-claude-automator/project-setup.md","sourceDirName":"03-core-library/tutorials/tutorial-claude-automator","slug":"/core-library/tutorials/tutorial-claude-automator/project-setup","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/project-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-claude-automator/project-setup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Claude Automator Tutorial","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/intro"},"next":{"title":"Running the Claude Automator","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/running-the-app"}}');var i=t(74848),r=t(28453);const a={},l="Project Setup",s={},c=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Gradle Configuration",id:"gradle-configuration",level:2},{value:"build.gradle",id:"buildgradle",level:3},{value:"settings.gradle (for Local Development)",id:"settingsgradle-for-local-development",level:3},{value:"Application Properties",id:"application-properties",level:2},{value:"Image Preparation",id:"image-preparation",level:2},{value:"Main Application Class",id:"main-application-class",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"project-setup",children:"Project Setup"})}),"\n",(0,i.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.p,{children:"Create the following directory structure for your Claude Automator project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"claude-automator/\n\u251c\u2500\u2500 src/main/java/com/claude/automator/\n\u2502   \u251c\u2500\u2500 states/\n\u2502   \u251c\u2500\u2500 transitions/\n\u2502   \u251c\u2500\u2500 automation/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 ClaudeAutomatorApplication.java\n\u251c\u2500\u2500 src/main/resources/\n\u2502   \u251c\u2500\u2500 application.yml\n\u2502   \u2514\u2500\u2500 images/\n\u2502       \u251c\u2500\u2500 working/\n\u2502       \u2502   \u251c\u2500\u2500 claude-icon-1.png\n\u2502       \u2502   \u251c\u2500\u2500 claude-icon-2.png\n\u2502       \u2502   \u251c\u2500\u2500 claude-icon-3.png\n\u2502       \u2502   \u2514\u2500\u2500 claude-icon-4.png\n\u2502       \u2514\u2500\u2500 prompt/\n\u2502           \u251c\u2500\u2500 claude-prompt-1.png\n\u2502           \u251c\u2500\u2500 claude-prompt-2.png\n\u2502           \u2514\u2500\u2500 claude-prompt-3.png\n\u251c\u2500\u2500 build.gradle\n\u2514\u2500\u2500 settings.gradle\n"})}),"\n",(0,i.jsx)(n.h2,{id:"gradle-configuration",children:"Gradle Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"buildgradle",children:"build.gradle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"plugins {\n    id 'org.springframework.boot' version '3.2.0'\n    id 'io.spring.dependency-management' version '1.1.4'\n    id 'java'\n}\n\ngroup = 'com.claude'\nversion = '1.0.0'\nsourceCompatibility = '21'\n\nconfigurations {\n    compileOnly {\n        extendsFrom annotationProcessor\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // Brobot 1.1.0+ includes Spring Boot, Lombok, SLF4J, and SikuliX as transitive dependencies\n    implementation 'io.github.jspinak:brobot:1.1.0'\n    \n    // Additional dependencies for this project\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'\n    \n    // Lombok annotation processor still needed for compilation\n    annotationProcessor 'org.projectlombok:lombok:1.18.32'\n    \n    // Testing\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\ntest {\n    useJUnitPlatform()\n}\n\n// Copy images to build directory\ntask copyImages(type: Copy) {\n    from 'images'\n    into \"$buildDir/resources/main/images\"\n}\n\nprocessResources.dependsOn copyImages\n"})}),"\n",(0,i.jsx)(n.h3,{id:"settingsgradle-for-local-development",children:"settings.gradle (for Local Development)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"rootProject.name = 'claude-automator'\n\n// Use local Brobot library for development\nincludeBuild('../brobot') {\n    dependencySubstitution {\n        substitute module('io.github.jspinak:brobot') using project(':library')\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Local Development",type:"tip",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"includeBuild"})," configuration allows you to use your local Brobot library instead of the Maven Central version. This is perfect for:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Testing new Brobot features"}),"\n",(0,i.jsx)(n.li,{children:"Contributing to Brobot development"}),"\n",(0,i.jsx)(n.li,{children:"Debugging library issues"}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"application-properties",children:"Application Properties"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"src/main/resources/application.yml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Spring Boot Configuration\nspring:\n  application:\n    name: claude-automator\n\n# Logging Configuration\nlogging:\n  level:\n    com.claude.automator: DEBUG\n    io.github.jspinak.brobot: INFO\n\n# Brobot Configuration (v1.1.0+)\nbrobot:\n  core:\n    image-path: images       # Base path for images\n    mock: false\n  startup:\n    # New auto-verification system (v1.1.0+)\n    auto-verify: true\n    verify-states: "Working,Prompt"  # States to verify\n    clear-states-before-verify: true\n    ui-stabilization-delay: 2.0\n    throw-on-failure: false\n    run-diagnostics-on-failure: true\n  sikuli:\n    highlight: true\n'})}),"\n",(0,i.jsxs)(n.admonition,{title:"Automatic Startup Verification",type:"info",children:[(0,i.jsx)(n.p,{children:"Brobot 1.1.0+ includes automatic startup verification that:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Discovers required images from your states"}),"\n",(0,i.jsx)(n.li,{children:"Verifies images exist before running"}),"\n",(0,i.jsx)(n.li,{children:"Checks that expected states are visible on screen"}),"\n",(0,i.jsx)(n.li,{children:"No custom startup code needed!"}),"\n"]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Zero-Code Startup",type:"tip",children:(0,i.jsxs)(n.p,{children:["Unlike earlier versions, Brobot 1.1.0+ handles all startup verification through configuration. No need to write custom ",(0,i.jsx)(n.code,{children:"ImageVerifier"})," or ",(0,i.jsx)(n.code,{children:"ActiveStateVerifier"})," classes!"]})}),"\n",(0,i.jsx)(n.h2,{id:"image-preparation",children:"Image Preparation"}),"\n",(0,i.jsx)(n.p,{children:"Place your screenshots in the appropriate folders:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Working State Images"})," (",(0,i.jsx)(n.code,{children:"images/working/"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple variations of Claude's response icon"}),"\n",(0,i.jsxs)(n.li,{children:["Name them: ",(0,i.jsx)(n.code,{children:"claude-icon-1.png"}),", ",(0,i.jsx)(n.code,{children:"claude-icon-2.png"}),", ",(0,i.jsx)(n.code,{children:"claude-icon-3.png"}),", ",(0,i.jsx)(n.code,{children:"claude-icon-4.png"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prompt State Images"})," (",(0,i.jsx)(n.code,{children:"images/prompt/"}),"):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple variations of Claude's prompt interface"}),"\n",(0,i.jsxs)(n.li,{children:["Name them: ",(0,i.jsx)(n.code,{children:"claude-prompt-1.png"}),", ",(0,i.jsx)(n.code,{children:"claude-prompt-2.png"}),", ",(0,i.jsx)(n.code,{children:"claude-prompt-3.png"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Image Guidelines",type:"warning",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Remove ",(0,i.jsx)(n.code,{children:".png"})," extensions when referencing images in code"]}),"\n",(0,i.jsx)(n.li,{children:"Crop images to show only the relevant UI element"}),"\n",(0,i.jsx)(n.li,{children:"Include multiple variations if the element changes appearance"}),"\n",(0,i.jsx)(n.li,{children:"Images are automatically discovered from your state definitions"}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"main-application-class",children:"Main Application Class"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:"src/main/java/com/claude/automator/ClaudeAutomatorApplication.java"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.claude.automator;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\n    "com.claude.automator",\n    "io.github.jspinak.brobot"  // Include Brobot components\n})\npublic class ClaudeAutomatorApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ClaudeAutomatorApplication.class, args);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"With the project structure in place, we'll start implementing the states using modern Brobot patterns."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
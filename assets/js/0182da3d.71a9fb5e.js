"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[124],{16008:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/reddot-e2783e535f73990ee1c3aebb624eca6b.png"},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},66802:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-library/guides/finding-objects/using-color","title":"Using Color","description":"Color can be used in a variety of ways to locate objects in a Brobot automation application.","source":"@site/docs/03-core-library/guides/finding-objects/using-color.md","sourceDirName":"03-core-library/guides/finding-objects","slug":"/core-library/guides/finding-objects/using-color","permalink":"/brobot/docs/core-library/guides/finding-objects/using-color","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/finding-objects/using-color.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docSidebar","previous":{"title":"Configuration Note","permalink":"/brobot/docs/core-library/guides/finding-objects/configuration-note"},"next":{"title":"Combining Find Operations","permalink":"/brobot/docs/core-library/guides/finding-objects/combining-finds"}}');var o=i(74848),r=i(28453);const s={sidebar_position:1},a="Using Color",l={},c=[{value:"ColorFindOptions",id:"colorfindoptions",level:2},{value:"Average Color",id:"average-color",level:2},{value:"Similarity",id:"similarity",level:3},{value:"Diameter",id:"diameter",level:3},{value:"K-Means Colors",id:"k-means-colors",level:3},{value:"MaxMatchesToActOn",id:"maxmatchestoacton",level:3},{value:"Color Strategies",id:"color-strategies",level:2},{value:"KMEANS",id:"kmeans",level:3},{value:"MU (Mean Color)",id:"mu-mean-color",level:3},{value:"CLASSIFICATION",id:"classification",level:3},{value:"Histogram Finding",id:"histogram-finding",level:2},{value:"Examples",id:"examples",level:2},{value:"Finding Red Dots on a Minimap",id:"finding-red-dots-on-a-minimap",level:3},{value:"Combining Color with Pattern Matching",id:"combining-color-with-pattern-matching",level:3},{value:"Using Histograms for Complex Images",id:"using-histograms-for-complex-images",level:3},{value:"Area Filtering with Color",id:"area-filtering-with-color",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Integration with Other Actions",id:"integration-with-other-actions",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"using-color",children:"Using Color"})}),"\n",(0,o.jsxs)(n.p,{children:["Color can be used in a variety of ways to locate objects in a Brobot automation application.\nWith the new API, you use ColorFindOptions for color-based finding and HistogramFindOptions for histogram-based finding. A look under the hood at how Brobot assesses color can be found in the ",(0,o.jsx)(n.a,{href:"/docs/core-library/guides/labeling/color-analysis",children:"Color Analysis Guide"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"colorfindoptions",children:"ColorFindOptions"}),"\n",(0,o.jsxs)(n.p,{children:["Color is found by comparing the color of each pixel in the scene to the colors in the target images.\nThe way that the colors in the target images are represented affects the results, and can be modified\nby the methods ",(0,o.jsx)(n.code,{children:"setKmeans"})," and ",(0,o.jsx)(n.code,{children:"setSimilarity"}),". If k-means is set to ",(0,o.jsx)(n.code,{children:"1"}),", the average color of the target\nimages is calculated and compared to the pixels. If k-means is set to a number greater than ",(0,o.jsx)(n.code,{children:"1"}),", multiple\ncolors centers are calculated and compared to the pixels. The number of colors centers is the k-means value. The similarity works in a way similar to pattern matching. The higher the similarity, the more similar the colors must be to be considered a match."]}),"\n",(0,o.jsx)(n.h2,{id:"average-color",children:"Average Color"}),"\n",(0,o.jsx)(n.p,{children:"The color find action first builds a color profile for the Image from its associated\nimage files. It then uses this color profile to find areas of similar color on the screen.\nWhen k-means is set to 1, the average color of all pixels in the target images is used to\nfind matches. Pixels on the screen receive scores with small penalties for distance\nto the average HSV values and large penalties for being outside the ranges of HSV\nvalues in the color profile."}),"\n",(0,o.jsx)(n.p,{children:"The image below is taken from the history folder of a Brobot application. The\nhistory folder is where illustrated screenshots, visual representations of actions\ntaken during execution, are stored. This illustrated screenshot shows the results\nof a color find action. Brobot built a color profile for an Image of a red dot\n(which being a Brobot Image object, allows for the inclusion of multiple image files,\neach captured from a different red dot). The Image is then searched for in the\nselected region (the minimap area), and the matches are shown as pink boxes. The\ncolors shown at the far right of the illustrated screenshot are the contents of the\nmatches. They show the colors that were found."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"illColor",src:i(16008).A+"",width:"1388",height:"800"})}),"\n",(0,o.jsx)(n.p,{children:"The below example shows the results of a similar operation on the red dot but\nallowing for a larger diameter."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"reddot",src:i(16008).A+"",width:"1388",height:"800"})}),"\n",(0,o.jsxs)(n.p,{children:["Also written to the ",(0,o.jsx)(n.em,{children:"history"})," folder is the output of the classification operation\nof the color find action. This output is a visual representation of where the target image's\ncolor was found on the entire scene. The search areas and matches are also shown.\nTo the right of the scene, the image files of the red dot Brobot Image are displayed, as well\nas the color centers used to find the matches (here, k-means is set to 2 and there are 2 color centers)."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"reddotclasses",src:i(87573).A+"",width:"1450",height:"800"})}),"\n",(0,o.jsxs)(n.p,{children:["Adjustable options include ",(0,o.jsx)(n.code,{children:"similarity"}),", ",(0,o.jsx)(n.code,{children:"diameter"}),", ",(0,o.jsx)(n.code,{children:"kmeans"}),", and ",(0,o.jsx)(n.code,{children:"maxMatchesToActOn"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"similarity",children:"Similarity"}),"\n",(0,o.jsxs)(n.p,{children:["ColorFindOptions can be adjusted with respect to ",(0,o.jsx)(n.code,{children:"similarity"})," and ",(0,o.jsx)(n.code,{children:"diameter"}),". Similarity is\na measurement similar to pattern matching. It has a scale of 0-1.00, where 1.00 is the most similar and 0 the least\nsimilar."]}),"\n",(0,o.jsx)(n.h3,{id:"diameter",children:"Diameter"}),"\n",(0,o.jsx)(n.p,{children:"Diameter gives the minimum diameter of the color cluster. For example,\na diameter of 1 allows for any pixel to be a match whereas a diameter of 2 translates\nto matches of size 2x2, where all 4 pixels need to meet the similarity requirements."}),"\n",(0,o.jsx)(n.h3,{id:"k-means-colors",children:"K-Means Colors"}),"\n",(0,o.jsx)(n.p,{children:"Looking for the average color works well for objects that have just one color, but\nnot so well for objects with multiple colors. In this case we want to search for\nparts of the screen that contain all the colors in the object. The k-Means search\nmethod provides this functionality for us. It first determines the most prominent\ncolors in the image and then looks for regions that match these colors. Matches are\nreturned that contain colors most similar to the image's prominent colors. Not all\nprominent colors must be in a region, but all colors in a region should be\nsimilar to one of the prominent colors."}),"\n",(0,o.jsx)(n.h3,{id:"maxmatchestoacton",children:"MaxMatchesToActOn"}),"\n",(0,o.jsx)(n.p,{children:"Also used often is maxMatchesToActOn, which limits the returned matches to a\nspecific number. Setting similarity will return a variable number of matches, and\nsetting maxMatchesToActOn will return a number of matches less than or equal\nto its value. For example, using a similarity of .95 may return 7 matches, and\ncombined with a maxMatchesToActOn of 5, the result will be the 5 best matches."}),"\n",(0,o.jsx)(n.h2,{id:"color-strategies",children:"Color Strategies"}),"\n",(0,o.jsx)(n.p,{children:"Brobot supports three color analysis strategies through ColorFindOptions:"}),"\n",(0,o.jsx)(n.h3,{id:"kmeans",children:"KMEANS"}),"\n",(0,o.jsx)(n.p,{children:"Finds a selected number of RGB color cluster centers for each image using the k-means algorithm.\nThis is useful for identifying dominant colors in images with multiple colors."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ColorFindOptions kmeansColor = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.KMEANS)\n        .setKmeans(3)  // Find 3 dominant colors\n        .setDiameter(5)\n        .setSimilarity(0.9)\n        .setMaxMatchesToActOn(10)\n        .build();\n\n// Execute color finding\nObjectCollection objects = new ObjectCollection.Builder()\n        .withImages(targetImage)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(kmeansColor, objects);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"mu-mean-color",children:"MU (Mean Color)"}),"\n",(0,o.jsx)(n.p,{children:"Takes all pixels from all images and finds the min, max, mean, and standard deviation\nof the HSV values to create a color profile. This is the default strategy."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ColorFindOptions meanColor = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)\n        .setDiameter(5)\n        .setSimilarity(0.95)\n        .setAreaFiltering(AreaFilteringOptions.builder()\n                .minArea(10)  // Filter out small noise\n                .build())\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(meanColor, objects);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"classification",children:"CLASSIFICATION"}),"\n",(0,o.jsx)(n.p,{children:"Performs a multi-class classification, assigning each pixel in the scene to the\nmost similar state image based on color profiles."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"ColorFindOptions classification = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.CLASSIFICATION)\n        .setSimilarity(0.8)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(classification, objects);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"histogram-finding",children:"Histogram Finding"}),"\n",(0,o.jsx)(n.p,{children:"HistogramFindOptions searches for regions that have similar histograms to the given image.\nThe histogram is calculated in HSV color space. Each image produces 5 histograms for\n5 different areas of the image: an ellipse in the center, and the remaining 4 corner\nregions. This is done to preserve some spatial information; for example, an image\nof grass and blue sky would be more likely to match regions of grass and sky as\ncompared to regions of a grassy hill above a lake."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Similarity"})," can be adjusted as well as the variables that control the number of\nHSV bins used to calculate the histograms: ",(0,o.jsx)(n.code,{children:"hueBins"}),", ",(0,o.jsx)(n.code,{children:"saturationBins"}),", and ",(0,o.jsx)(n.code,{children:"valueBins"}),".\nThe default bin sizes for HSV, respectively, are 12, 2, and 1."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"HistogramFindOptions histogramFind = new HistogramFindOptions.Builder()\n        .setSimilarity(0.8)\n        .setBinOptions(HSVBinOptions.builder()\n                .hueBins(90)\n                .saturationBins(2)\n                .valueBins(1)\n                .build())\n        .setMaxMatchesToActOn(5)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(histogramFind, objects);\n"})}),"\n",(0,o.jsx)(n.p,{children:"In the below example, maxMatchesToActOn is set to 5. The top match is the target image\nused for the histogram find action."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"histogram",src:i(84138).A+"",width:"1388",height:"800"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"finding-red-dots-on-a-minimap",children:"Finding Red Dots on a Minimap"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Create an image object for the red dot\nStateImage redDot = new StateImage.Builder()\n        .setName("red_dot")\n        .addPatterns("reddot1.png")\n        .addPatterns("reddot2.png")  // Multiple samples improve accuracy\n        .build();\n\n// Configure color finding\nColorFindOptions findRedDots = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)  // Use mean color\n        .setDiameter(3)  // Minimum cluster size\n        .setSimilarity(0.9)\n        .setMaxMatchesToActOn(10)\n        .setAreaFiltering(AreaFilteringOptions.builder()\n                .minArea(5)  // Filter out noise\n                .build())\n        .build();\n\n// Execute the find operation\nObjectCollection objects = new ObjectCollection.Builder()\n        .withImages(redDot)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(findRedDots, objects);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"combining-color-with-pattern-matching",children:"Combining Color with Pattern Matching"}),"\n",(0,o.jsx)(n.p,{children:"For more accurate results, combine pattern and color finding using ActionChainOptions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// First find patterns, then filter by color\nPatternFindOptions patternFind = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.7)\n        .build();\n\nColorFindOptions colorFilter = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.KMEANS)\n        .setKmeans(2)\n        .setSimilarity(0.85)\n        .build();\n\nActionChainOptions combineColorPattern = new ActionChainOptions.Builder(patternFind)\n        .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n        .then(colorFilter)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(combineColorPattern, objects);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"using-histograms-for-complex-images",children:"Using Histograms for Complex Images"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"HistogramFindOptions histogramFind = new HistogramFindOptions.Builder()\n        .setSimilarity(0.8)\n        .setBinOptions(HSVBinOptions.builder()\n                .hueBins(90)\n                .saturationBins(2)\n                .valueBins(1)\n                .build())\n        .setMaxMatchesToActOn(5)\n        .setIllustrate(HistogramFindOptions.Illustrate.YES)  // Save visual results\n        .build();\n\nObjectCollection complexImages = new ObjectCollection.Builder()\n        .withImages(targetImage)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult histogramResult = action.perform(histogramFind, complexImages);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"area-filtering-with-color",children:"Area Filtering with Color"}),"\n",(0,o.jsx)(n.p,{children:"ColorFindOptions supports area filtering to eliminate noise:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Find larger color regions only\nColorFindOptions largeColorRegions = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)\n        .setDiameter(10)\n        .setSimilarity(0.85)\n        .setAreaFiltering(AreaFilteringOptions.builder()\n                .minArea(100)\n                .maxArea(5000)\n                .build())\n        .build();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multiple Samples"}),": Use multiple image samples to build better color profiles"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Appropriate Diameter"}),": Choose diameter based on the size of your target objects"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Combine Methods"}),": Use ActionChainOptions to combine color with pattern matching for better accuracy"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test Different Strategies"}),": Try KMEANS, MU, and CLASSIFICATION to find what works best"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Adjust Similarity"}),": Start with lower values and increase until false positives are eliminated"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consider Lighting"}),": Account for variations in screen brightness and ambient lighting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Area Filtering"}),": Use minArea and maxArea to filter out noise and unwanted matches"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-other-actions",children:"Integration with Other Actions"}),"\n",(0,o.jsx)(n.p,{children:"Color finding can be part of complex action chains:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Find colored button, then click it\nColorFindOptions findColoredButton = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)\n        .setSimilarity(0.9)\n        .setMaxMatchesToActOn(1)\n        .build();\n\nClickOptions clickButton = new ClickOptions.Builder()\n        .setNumberOfClicks(1)\n        .build();\n\nActionChainOptions findAndClick = new ActionChainOptions.Builder(findColoredButton)\n        .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n        .then(clickButton)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(findAndClick, objects);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For more information on combining find operations, see the ",(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/guides/finding-objects/combining-finds",children:"Combining Finds"})," guide."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},84138:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/histogram-f75594eb3eabea86944c01439914134a.png"},87573:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/reddot_classes-07ddf800647b3c46cb44a1f810d87d79.png"}}]);
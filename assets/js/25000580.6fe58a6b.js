"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6925],{28453:(n,o,i)=>{i.d(o,{R:()=>a,x:()=>s});var e=i(96540);const t={},r=e.createContext(t);function a(n){const o=e.useContext(r);return e.useMemo(function(){return"function"==typeof n?n(o):{...o,...n}},[o,n])}function s(n){let o;return o=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),e.createElement(r.Provider,{value:o},n.children)}},79093:(n,o,i)=>{i.r(o),i.d(o,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>e,toc:()=>l});const e=JSON.parse('{"id":"core-library/tutorials/tutorial-mrdoob/transitions","title":"Transitions","description":"This tutorial has been updated for Brobot 1.2.0+ with the new @TransitionSet annotation system.","source":"@site/docs/03-core-library/tutorials/tutorial-mrdoob/transitions.md","sourceDirName":"03-core-library/tutorials/tutorial-mrdoob","slug":"/core-library/tutorials/tutorial-mrdoob/transitions","permalink":"/brobot/docs/core-library/tutorials/tutorial-mrdoob/transitions","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-mrdoob/transitions.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"States","permalink":"/brobot/docs/core-library/tutorials/tutorial-mrdoob/states"},"next":{"title":"Automation Instructions","permalink":"/brobot/docs/core-library/tutorials/tutorial-mrdoob/instructions"}}');var t=i(74848),r=i(28453);const a={sidebar_position:5},s="Transitions",c={},l=[{value:"Modern Approach: Unified Transition Classes",id:"modern-approach-unified-transition-classes",level:2},{value:"HomepageTransitions.java",id:"homepagetransitionsjava",level:3},{value:"HarmonyTransitions.java",id:"harmonytransitionsjava",level:3},{value:"AboutTransitions.java",id:"abouttransitionsjava",level:3},{value:"Key Improvements with @TransitionSet",id:"key-improvements-with-transitionset",level:2},{value:"Comparison: Old vs New",id:"comparison-old-vs-new",level:3},{value:"Before (Individual Transition Classes - v1.1.0)",id:"before-individual-transition-classes---v110",level:4},{value:"After (Unified Transition Classes - v1.2.0+)",id:"after-unified-transition-classes---v120",level:4},{value:"File Organization",id:"file-organization",level:2},{value:"Benefits of the New Approach",id:"benefits-of-the-new-approach",level:2},{value:"Testing Transitions",id:"testing-transitions",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function m(n){const o={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"transitions",children:"Transitions"})}),"\n",(0,t.jsx)(o.admonition,{title:"Version Note",type:"info",children:(0,t.jsx)(o.p,{children:"This tutorial has been updated for Brobot 1.2.0+ with the new @TransitionSet annotation system."})}),"\n",(0,t.jsx)(o.p,{children:"Transitions define how to navigate between states. With the new @TransitionSet annotation system, all transitions for a state are grouped together in a single class, providing better organization and clearer intent."}),"\n",(0,t.jsx)(o.h2,{id:"modern-approach-unified-transition-classes",children:"Modern Approach: Unified Transition Classes"}),"\n",(0,t.jsx)(o.h3,{id:"homepagetransitionsjava",children:"HomepageTransitions.java"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:'package com.example.mrdoob.transitions;\n\nimport org.springframework.stereotype.Component;\nimport com.example.mrdoob.states.Homepage;\nimport com.example.mrdoob.states.Harmony;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.annotations.FromTransition;\nimport io.github.jspinak.brobot.annotations.IncomingTransition;\nimport io.github.jspinak.brobot.annotations.TransitionSet;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * All transitions for the Homepage state.\n * Contains FromTransitions from other states TO Homepage,\n * and a IncomingTransition to verify arrival at Homepage.\n */\n@TransitionSet(state = Homepage.class, description = "MrDoob Homepage transitions")\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class HomepageTransitions {\n    \n    private final Homepage homepage;\n    private final Harmony harmony;\n    private final Action action;\n    \n    /**\n     * Navigate from Harmony back to Homepage.\n     * This might involve clicking a home/back button.\n     */\n    @FromTransition(from = Harmony.class, priority = 1, description = "Return from Harmony to Homepage")\n    public boolean fromHarmony() {\n        log.info("Navigating from Harmony to Homepage");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful navigation");\n            return true;\n        }\n        \n        // Assuming there\'s a home button or back navigation in Harmony\n        return action.click(harmony.getHomeButton()).isSuccess();\n    }\n    \n    /**\n     * Verify that we have successfully arrived at the Homepage state.\n     * Checks for the presence of homepage-specific elements.\n     */\n    @IncomingTransition(description = "Verify arrival at Homepage", required = true)\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at Homepage");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful verification");\n            return true;\n        }\n        \n        // Check for presence of homepage-specific elements\n        boolean foundHarmonyLink = action.find(homepage.getHarmony()).isSuccess();\n        \n        if (foundHarmonyLink) {\n            log.info("Successfully confirmed Homepage is active");\n            return true;\n        } else {\n            log.error("Failed to confirm Homepage - harmony link not found");\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(o.h3,{id:"harmonytransitionsjava",children:"HarmonyTransitions.java"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:'package com.example.mrdoob.transitions;\n\nimport org.springframework.stereotype.Component;\nimport com.example.mrdoob.states.Homepage;\nimport com.example.mrdoob.states.Harmony;\nimport com.example.mrdoob.states.About;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.annotations.FromTransition;\nimport io.github.jspinak.brobot.annotations.IncomingTransition;\nimport io.github.jspinak.brobot.annotations.TransitionSet;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * All transitions for the Harmony state.\n * Contains FromTransitions from other states TO Harmony,\n * and a IncomingTransition to verify arrival at Harmony.\n */\n@TransitionSet(state = Harmony.class, description = "MrDoob Harmony page transitions")\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class HarmonyTransitions {\n    \n    private final Homepage homepage;\n    private final Harmony harmony;\n    private final About about;\n    private final Action action;\n    \n    /**\n     * Navigate from Homepage to Harmony by clicking the harmony link.\n     */\n    @FromTransition(from = Homepage.class, priority = 1, description = "Navigate from Homepage to Harmony")\n    public boolean fromHomepage() {\n        log.info("Navigating from Homepage to Harmony");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful navigation");\n            return true;\n        }\n        \n        return action.click(homepage.getHarmony()).isSuccess();\n    }\n    \n    /**\n     * Navigate from About page back to Harmony.\n     */\n    @FromTransition(from = About.class, priority = 2, description = "Return from About to Harmony")\n    public boolean fromAbout() {\n        log.info("Navigating from About to Harmony");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful navigation");\n            return true;\n        }\n        \n        // Assuming there\'s a back button or harmony link in About page\n        return action.click(about.getBackButton()).isSuccess();\n    }\n    \n    /**\n     * Verify that we have successfully arrived at the Harmony state.\n     * Checks for the presence of harmony-specific elements.\n     */\n    @IncomingTransition(description = "Verify arrival at Harmony", required = true)\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at Harmony");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful verification");\n            return true;\n        }\n        \n        // Check for presence of harmony-specific elements\n        boolean foundAboutLink = action.find(harmony.getAbout()).isSuccess();\n        boolean foundCanvas = action.find(harmony.getHarmonyCanvas()).isSuccess();\n        \n        if (foundAboutLink || foundCanvas) {\n            log.info("Successfully confirmed Harmony state is active");\n            return true;\n        } else {\n            log.error("Failed to confirm Harmony state - expected elements not found");\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(o.h3,{id:"abouttransitionsjava",children:"AboutTransitions.java"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:'package com.example.mrdoob.transitions;\n\nimport org.springframework.stereotype.Component;\nimport com.example.mrdoob.states.Harmony;\nimport com.example.mrdoob.states.About;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.annotations.FromTransition;\nimport io.github.jspinak.brobot.annotations.IncomingTransition;\nimport io.github.jspinak.brobot.annotations.TransitionSet;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * All transitions for the About state.\n * Contains FromTransitions from other states TO About,\n * and a IncomingTransition to verify arrival at About.\n */\n@TransitionSet(state = About.class, description = "MrDoob About page transitions")\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class AboutTransitions {\n    \n    private final Harmony harmony;\n    private final About about;\n    private final Action action;\n    \n    /**\n     * Navigate from Harmony to About by clicking the about link.\n     */\n    @FromTransition(from = Harmony.class, priority = 1, description = "Navigate from Harmony to About")\n    public boolean fromHarmony() {\n        log.info("Navigating from Harmony to About");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful navigation");\n            return true;\n        }\n        \n        return action.click(harmony.getAbout()).isSuccess();\n    }\n    \n    /**\n     * Verify that we have successfully arrived at the About state.\n     * Checks for the presence of about-specific elements.\n     */\n    @IncomingTransition(description = "Verify arrival at About", required = true)\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at About");\n        \n        // Mock mode support for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            log.info("Mock mode: simulating successful verification");\n            return true;\n        }\n        \n        // Check for presence of about-specific elements\n        boolean foundAboutContent = action.find(about.getAboutContent()).isSuccess();\n        \n        if (foundAboutContent) {\n            log.info("Successfully confirmed About state is active");\n            return true;\n        } else {\n            log.error("Failed to confirm About state - content not found");\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(o.h2,{id:"key-improvements-with-transitionset",children:"Key Improvements with @TransitionSet"}),"\n",(0,t.jsx)(o.h3,{id:"comparison-old-vs-new",children:"Comparison: Old vs New"}),"\n",(0,t.jsx)(o.h4,{id:"before-individual-transition-classes---v110",children:"Before (Individual Transition Classes - v1.1.0)"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"// Separate file for each transition\n@Transition(from = Homepage.class, to = Harmony.class)\n@Component\npublic class HomepageToHarmonyTransition {\n    private final Action action;\n    private final Homepage homepage;\n    \n    public boolean execute() {\n        return action.click(homepage.getHarmony()).isSuccess();\n    }\n}\n\n// Another separate file\n@Transition(from = Harmony.class, to = About.class)\n@Component\npublic class HarmonyToAboutTransition {\n    private final Action action;\n    private final Harmony harmony;\n    \n    public boolean execute() {\n        return action.click(harmony.getAbout()).isSuccess();\n    }\n}\n"})}),"\n",(0,t.jsx)(o.h4,{id:"after-unified-transition-classes---v120",children:"After (Unified Transition Classes - v1.2.0+)"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"// All transitions for Harmony in ONE class\n@TransitionSet(state = Harmony.class)\n@Component\npublic class HarmonyTransitions {\n    \n    @FromTransition(from = Homepage.class, priority = 1)\n    public boolean fromHomepage() {\n        if (FrameworkSettings.mock) return true;\n        return action.click(homepage.getHarmony()).isSuccess();\n    }\n    \n    @FromTransition(from = About.class, priority = 2)\n    public boolean fromAbout() {\n        if (FrameworkSettings.mock) return true;\n        return action.click(about.getBackButton()).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        if (FrameworkSettings.mock) return true;\n        return action.find(harmony.getAboutLink()).isSuccess();\n    }\n}\n"})}),"\n",(0,t.jsx)(o.h2,{id:"file-organization",children:"File Organization"}),"\n",(0,t.jsx)(o.p,{children:"Organize your transitions alongside states:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{children:"src/main/java/com/example/mrdoob/\n\u251c\u2500\u2500 states/\n\u2502   \u251c\u2500\u2500 Homepage.java\n\u2502   \u251c\u2500\u2500 Harmony.java\n\u2502   \u2514\u2500\u2500 About.java\n\u2514\u2500\u2500 transitions/\n    \u251c\u2500\u2500 HomepageTransitions.java  # All transitions for Homepage\n    \u251c\u2500\u2500 HarmonyTransitions.java   # All transitions for Harmony\n    \u2514\u2500\u2500 AboutTransitions.java     # All transitions for About\n"})}),"\n",(0,t.jsx)(o.h2,{id:"benefits-of-the-new-approach",children:"Benefits of the New Approach"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Better Organization"}),": All transitions for a state in ONE place"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Clearer Intent"}),": FromTransitions vs IncomingTransition makes navigation flow obvious"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Less Boilerplate"}),": No need for separate classes for each transition path"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Mock Mode Ready"}),": Easy to add testing support with framework settings check"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Natural Structure"}),": File organization mirrors state structure"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Easier Maintenance"}),": Adding new transitions is straightforward"]}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"testing-transitions",children:"Testing Transitions"}),"\n",(0,t.jsx)(o.p,{children:"The unified structure makes testing easier:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes = {TestConfiguration.class})\npublic class HarmonyTransitionsTest {\n    \n    @Autowired\n    private HarmonyTransitions harmonyTransitions;\n    \n    @MockBean\n    private Action action;\n    \n    @MockBean\n    private Homepage homepage;\n    \n    @Test\n    public void testFromHomepageTransition() {\n        // Given\n        when(action.click(any())).thenReturn(\n            new ActionResult.Builder().setSuccess(true).build()\n        );\n        \n        // When\n        boolean result = harmonyTransitions.fromHomepage();\n        \n        // Then\n        assertTrue(result);\n        verify(action).click(homepage.getHarmony());\n    }\n    \n    @Test\n    public void testVerifyArrival() {\n        // Given\n        when(action.find(any())).thenReturn(\n            new ActionResult.Builder().setSuccess(true).build()\n        );\n        \n        // When\n        boolean arrived = harmonyTransitions.verifyArrival();\n        \n        // Then\n        assertTrue(arrived);\n    }\n}\n"})}),"\n",(0,t.jsx)(o.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Always include mock mode support"})," for testing environments"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Use descriptive method names"})," like ",(0,t.jsx)(o.code,{children:"fromHomepage()"}),", ",(0,t.jsx)(o.code,{children:"fromAbout()"})]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Add comprehensive logging"})," for debugging"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Verify critical elements"})," in IncomingTransition methods"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Handle failures gracefully"})," with try-catch blocks where appropriate"]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.strong,{children:"Set appropriate priorities"})," when multiple paths exist to the same state"]}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(o.p,{children:"With states and transitions defined using the @TransitionSet system, your entire MrDoob automation is ready to run. The framework handles all registration and wiring automatically - you just focus on the automation logic!"})]})}function u(n={}){const{wrapper:o}={...(0,r.R)(),...n.components};return o?(0,t.jsx)(o,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5214],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},95863:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"testing/TESTING_STRATEGY","title":"Brobot Testing Strategy","description":"Overview","source":"@site/docs/04-testing/TESTING_STRATEGY.md","sourceDirName":"04-testing","slug":"/testing/TESTING_STRATEGY","permalink":"/brobot/docs/testing/TESTING_STRATEGY","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/TESTING_STRATEGY.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Mock Mode Migration Guide","permalink":"/brobot/docs/testing/mock-mode-migration"},"next":{"title":"Mat Testing Utilities","permalink":"/brobot/docs/testing/mat-testing-utilities"}}');var i=s(74848),o=s(28453);const r={},l="Brobot Testing Strategy",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Test Categories",id:"test-categories",level:2},{value:"1. Unit Tests",id:"1-unit-tests",level:3},{value:"2. Integration Tests",id:"2-integration-tests",level:3},{value:"3. Performance Tests",id:"3-performance-tests",level:3},{value:"Test Base Classes",id:"test-base-classes",level:2},{value:"BrobotTestBase",id:"brobottestbase",level:3},{value:"Custom Test Base Classes",id:"custom-test-base-classes",level:3},{value:"Builder Pattern Testing",id:"builder-pattern-testing",level:2},{value:"Testing Builders with New Convention",id:"testing-builders-with-new-convention",level:3},{value:"Testing Default Values",id:"testing-default-values",level:3},{value:"Testing Immutability",id:"testing-immutability",level:3},{value:"Mock Mode Testing",id:"mock-mode-testing",level:2},{value:"Testing with Brobot Mock Mode",id:"testing-with-brobot-mock-mode",level:3},{value:"Testing Mock Scenarios",id:"testing-mock-scenarios",level:3},{value:"JSON Serialization Testing",id:"json-serialization-testing",level:2},{value:"Testing Jackson Serialization",id:"testing-jackson-serialization",level:3},{value:"Testing Polymorphic Deserialization",id:"testing-polymorphic-deserialization",level:3},{value:"Test Data Builders",id:"test-data-builders",level:2},{value:"Creating Test Data",id:"creating-test-data",level:3},{value:"Test Utilities",id:"test-utilities",level:2},{value:"Custom Assertions",id:"custom-assertions",level:3},{value:"Test Fixtures",id:"test-fixtures",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"CI Test Configuration",id:"ci-test-configuration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Test Issues",id:"common-test-issues",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"brobot-testing-strategy",children:"Brobot Testing Strategy"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This document outlines the comprehensive testing strategy for the Brobot framework, including unit tests, integration tests, and best practices."}),"\n",(0,i.jsx)(n.h2,{id:"test-categories",children:"Test Categories"}),"\n",(0,i.jsx)(n.h3,{id:"1-unit-tests",children:"1. Unit Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Location"}),": ",(0,i.jsx)(n.code,{children:"src/test/java/.../unit/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Naming"}),": ",(0,i.jsx)(n.code,{children:"*Test.java"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coverage Target"}),": 80% minimum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mock Strategy"}),": Use Mockito for external dependencies"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-integration-tests",children:"2. Integration Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Location"}),": ",(0,i.jsx)(n.code,{children:"src/test/java/.../integration/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Naming"}),": ",(0,i.jsx)(n.code,{children:"*IntegrationTest.java"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coverage Target"}),": 60% minimum"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mock Strategy"}),": Use Brobot's built-in mock mode"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-performance-tests",children:"3. Performance Tests"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Location"}),": ",(0,i.jsx)(n.code,{children:"src/test/java/.../performance/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Naming"}),": ",(0,i.jsx)(n.code,{children:"*BenchmarkTest.java"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution"}),": Separate profile, not in CI"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"test-base-classes",children:"Test Base Classes"}),"\n",(0,i.jsx)(n.h3,{id:"brobottestbase",children:"BrobotTestBase"}),"\n",(0,i.jsxs)(n.p,{children:["All Brobot tests MUST extend ",(0,i.jsx)(n.code,{children:"BrobotTestBase"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Note: BrobotProperties must be injected as a dependency\n@Autowired\nprivate BrobotProperties brobotProperties;\n\nimport io.github.jspinak.brobot.test.BrobotTestBase;\nimport io.github.jspinak.brobot.config.MockModeManager;\n\npublic class MyTest extends BrobotTestBase {\n    @Test\n    public void testFeature() {\n        // Mock mode is automatically enabled via MockModeManager\n        assertTrue(brobotProperties.getCore().isMock());\n        // Test runs in headless environment\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Automatic mock mode activation via centralized ",(0,i.jsx)(n.code,{children:"MockModeManager"})]}),"\n",(0,i.jsx)(n.li,{children:"Synchronizes mock settings across all components (ExecutionEnvironment, FrameworkSettings, system properties)"}),"\n",(0,i.jsx)(n.li,{children:"Headless environment compatibility"}),"\n",(0,i.jsx)(n.li,{children:"Consistent test configuration"}),"\n",(0,i.jsx)(n.li,{children:"Fast execution (0.01-0.04s per operation)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"custom-test-base-classes",children:"Custom Test Base Classes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public abstract class ActionTestBase extends BrobotTestBase {\n    @Mock protected Action action;\n    @Mock protected ActionResult actionResult;\n    \n    @BeforeEach\n    @Override\n    public void setupTest() {\n        super.setupTest();\n        MockitoAnnotations.openMocks(this);\n        // Common action test setup\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"builder-pattern-testing",children:"Builder Pattern Testing"}),"\n",(0,i.jsx)(n.h3,{id:"testing-builders-with-new-convention",children:"Testing Builders with New Convention"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Builder creates valid configuration with setter methods")\npublic void testBuilderWithSetters() {\n    // Given - use setXxx naming convention\n    MyOptions options = MyOptions.builder()\n        .setField1("value1")\n        .setField2(42)\n        .setNestedOptions(NestedOptions.builder()\n            .setSomething("nested")\n            .build())\n        .build();\n    \n    // Then - verify all fields\n    assertAll(\n        () -> assertEquals("value1", options.getField1()),\n        () -> assertEquals(42, options.getField2()),\n        () -> assertNotNull(options.getNestedOptions()),\n        () -> assertEquals("nested", options.getNestedOptions().getSomething())\n    );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"testing-default-values",children:"Testing Default Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Builder uses correct defaults")\npublic void testBuilderDefaults() {\n    // When - build with no setters\n    MyOptions options = MyOptions.builder().build();\n    \n    // Then - verify defaults\n    assertAll(\n        () -> assertEquals(DEFAULT_VALUE_1, options.getField1()),\n        () -> assertEquals(DEFAULT_VALUE_2, options.getField2()),\n        () -> assertNotNull(options.getNestedOptions())\n    );\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"testing-immutability",children:"Testing Immutability"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Options objects are immutable")\npublic void testImmutability() {\n    // Given\n    MyOptions original = MyOptions.builder()\n        .setField1("original")\n        .build();\n    \n    // When - create new instance with toBuilder\n    MyOptions modified = original.toBuilder()\n        .setField1("modified")\n        .build();\n    \n    // Then - original unchanged\n    assertEquals("original", original.getField1());\n    assertEquals("modified", modified.getField1());\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"mock-mode-testing",children:"Mock Mode Testing"}),"\n",(0,i.jsx)(n.h3,{id:"testing-with-brobot-mock-mode",children:"Testing with Brobot Mock Mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Action works in mock mode")\npublic void testActionInMockMode() {\n    // Given - mock mode enabled by BrobotTestBase via MockModeManager\n    assertTrue(brobotProperties.getCore().isMock());\n    // This also ensures brobotProperties.getCore().isMock() is synchronized\n    \n    // When - perform action\n    ActionResult result = action.perform(config, objectCollection);\n    \n    // Then - verify mock behavior\n    assertTrue(result.isSuccess());\n    assertNotNull(result.getDuration());\n    assertTrue(result.getDuration() < 0.1); // Fast in mock mode\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"testing-mock-scenarios",children:"Testing Mock Scenarios"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Complex scenario in mock mode")\npublic void testComplexScenario() {\n    // Given - configure mock scenario\n    MockScenario scenario = MockScenario.builder()\n        .setInitialState("LoginScreen")\n        .addTransition("LoginScreen", "login", "Dashboard")\n        .addImage("LoginScreen", "username_field.png")\n        .addImage("LoginScreen", "password_field.png")\n        .build();\n    \n    mockManager.loadScenario(scenario);\n    \n    // When - execute workflow\n    WorkflowResult result = workflow.execute();\n    \n    // Then - verify transitions\n    assertEquals("Dashboard", result.getFinalState());\n    assertEquals(2, result.getActionsPerformed());\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"json-serialization-testing",children:"JSON Serialization Testing"}),"\n",(0,i.jsx)(n.h3,{id:"testing-jackson-serialization",children:"Testing Jackson Serialization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Options serialize to JSON correctly")\npublic void testJsonSerialization() throws Exception {\n    // Given\n    ObjectMapper mapper = new ObjectMapper();\n    MyOptions original = MyOptions.builder()\n        .setField1("test")\n        .setField2(123)\n        .build();\n    \n    // When\n    String json = mapper.writeValueAsString(original);\n    MyOptions deserialized = mapper.readValue(json, MyOptions.class);\n    \n    // Then\n    assertEquals(original.getField1(), deserialized.getField1());\n    assertEquals(original.getField2(), deserialized.getField2());\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"testing-polymorphic-deserialization",children:"Testing Polymorphic Deserialization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Test\n@DisplayName("Polymorphic types deserialize correctly")\npublic void testPolymorphicDeserialization() throws Exception {\n    // Given\n    String json = "{\\"@type\\":\\"ClickOptions\\",\\"numberOfClicks\\":2}";\n    ObjectMapper mapper = new ObjectMapper();\n    \n    // When\n    ActionConfig config = mapper.readValue(json, ActionConfig.class);\n    \n    // Then\n    assertInstanceOf(ClickOptions.class, config);\n    assertEquals(2, ((ClickOptions) config).getNumberOfClicks());\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"test-data-builders",children:"Test Data Builders"}),"\n",(0,i.jsx)(n.h3,{id:"creating-test-data",children:"Creating Test Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class TestDataBuilder {\n    \n    public static StateImage createTestImage(String name) {\n        return StateImage.builder()\n            .setName(name)\n            .setOwnerStateName("TestState")\n            .setSearchRegion(createTestRegion())\n            .build();\n    }\n    \n    public static Region createTestRegion() {\n        return Region.builder()\n            .setX(100)\n            .setY(100)\n            .setW(200)\n            .setH(150)\n            .build();\n    }\n    \n    public static ObjectCollection createTestCollection() {\n        return ObjectCollection.builder()\n            .addStateImage(createTestImage("test1"))\n            .addStateImage(createTestImage("test2"))\n            .build();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"test-utilities",children:"Test Utilities"}),"\n",(0,i.jsx)(n.h3,{id:"custom-assertions",children:"Custom Assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class BrobotAssertions {\n    \n    public static void assertActionSucceeded(ActionResult result) {\n        assertAll(\n            () -> assertTrue(result.isSuccess(), "Action should succeed"),\n            () -> assertFalse(result.getMatches().isEmpty(), "Should have matches"),\n            () -> assertNotNull(result.getDuration(), "Should have duration"),\n            () -> assertTrue(result.getDuration() >= 0, "Duration should be positive")\n        );\n    }\n    \n    public static void assertOptionsValid(ActionConfig options) {\n        assertAll(\n            () -> assertNotNull(options, "Options should not be null"),\n            () -> assertTrue(options.getPauseBeforeBegin() >= 0, "Pause before should be >= 0"),\n            () -> assertTrue(options.getPauseAfterEnd() >= 0, "Pause after should be >= 0")\n        );\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-fixtures",children:"Test Fixtures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@TestFixture\npublic class ActionTestFixtures {\n    \n    public static final ClickOptions SINGLE_CLICK = ClickOptions.builder()\n        .setNumberOfClicks(1)\n        .build();\n    \n    public static final ClickOptions DOUBLE_CLICK = ClickOptions.builder()\n        .setNumberOfClicks(2)\n        .build();\n    \n    public static final PatternFindOptions QUICK_FIND = PatternFindOptions.builder()\n        .setStrategy(PatternFindOptions.Strategy.FIRST)\n        .setSimilarity(0.7)\n        .setSearchDuration(1.0)\n        .build();\n    \n    public static final PatternFindOptions PRECISE_FIND = PatternFindOptions.builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.95)\n        .setSearchDuration(5.0)\n        .build();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.h3,{id:"ci-test-configuration",children:"CI Test Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Test Suite\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        \n    - name: Cache Gradle packages\n      uses: actions/cache@v2\n      with:\n        path: |\n          ~/.gradle/caches\n          ~/.gradle/wrapper\n        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}\n        \n    - name: Run tests\n      run: ./gradlew test --no-daemon\n      env:\n        BROBOT_MOCK_MODE: true\n        \n    - name: Generate test report\n      if: always()\n      run: ./gradlew jacocoTestReport\n      \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        file: ./build/reports/jacoco/test/jacocoTestReport.xml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-test-issues",children:"Common Test Issues"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"HeadlessException in CI"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure all tests extend ",(0,i.jsx)(n.code,{children:"BrobotTestBase"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check"}),": ",(0,i.jsx)(n.code,{children:"brobotProperties.getCore().isMock()"})," should be ",(0,i.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Slow Test Execution"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Use mock mode for unit tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check"}),": Mock timings should be 0.01-0.04s"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Flaky Tests"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Use deterministic mock scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check"}),": Avoid timing-dependent assertions"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Serialization Failures"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Add proper Jackson annotations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check"}),": ",(0,i.jsx)(n.code,{children:"@JsonDeserialize"}),", ",(0,i.jsx)(n.code,{children:"@JsonPOJOBuilder"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always use BrobotTestBase"})," for consistent behavior","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Automatically configures mock mode via ",(0,i.jsx)(n.code,{children:"MockModeManager"})]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"brobotProperties.getCore().isMock()"})," instead of checking individual flags"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use setXxx() naming"})," in all builder calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Group related tests"})," with ",(0,i.jsx)(n.code,{children:"@Nested"})," classes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive names"})," with ",(0,i.jsx)(n.code,{children:"@DisplayName"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test both success and failure"})," scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mock external dependencies"})," appropriately"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep tests independent"})," - no shared state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use test fixtures"})," for common data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document complex test scenarios"})," with comments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Run tests locally"})," before pushing"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4717],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},98788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/action-config/complex-workflows","title":"Complex Workflows","description":"Build sophisticated multi-step automation workflows using ActionChainOptions","source":"@site/docs/03-core-library/action-config/08-complex-workflows.md","sourceDirName":"03-core-library/action-config","slug":"/core-library/action-config/complex-workflows","permalink":"/brobot/docs/core-library/action-config/complex-workflows","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/action-config/08-complex-workflows.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Complex Workflows","description":"Build sophisticated multi-step automation workflows using ActionChainOptions"},"sidebar":"docSidebar","previous":{"title":"Action Chaining","permalink":"/brobot/docs/core-library/action-config/action-chaining"},"next":{"title":"Conditional Actions","permalink":"/brobot/docs/core-library/action-config/conditional-actions"}}');var o=t(74848),s=t(28453);const r={sidebar_position:8,title:"Complex Workflows",description:"Build sophisticated multi-step automation workflows using ActionChainOptions"},l="Complex Workflows with Action Chains",a={},c=[{value:"Form Automation Example",id:"form-automation-example",level:2},{value:"Key Points:",id:"key-points",level:3},{value:"Multi-Step Navigation",id:"multi-step-navigation",level:2},{value:"Complex Interaction Workflow",id:"complex-interaction-workflow",level:2},{value:"Drag and Drop Operations",id:"drag-and-drop-operations",level:2},{value:"Dynamic Workflow Building",id:"dynamic-workflow-building",level:2},{value:"Error Handling in Workflows",id:"error-handling-in-workflows",level:2},{value:"Best Practices for Complex Workflows",id:"best-practices-for-complex-workflows",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"complex-workflows-with-action-chains",children:"Complex Workflows with Action Chains"})}),"\n",(0,o.jsx)(n.p,{children:"This guide demonstrates how to build sophisticated automation workflows by combining multiple actions into complex sequences. These patterns are essential for real-world automation scenarios."}),"\n",(0,o.jsx)(n.h2,{id:"form-automation-example",children:"Form Automation Example"}),"\n",(0,o.jsx)(n.p,{children:"One of the most common automation tasks is filling out forms. Here's a comprehensive example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public ActionResult fillLoginForm(StateImage usernameField, String username,\n                                  StateImage passwordField, String password,\n                                  StateImage loginButton) {\n    \n    ActionChainOptions loginChain = new ActionChainOptions.Builder(\n        // Step 1: Click username field\n        new ClickOptions.Builder()\n            .setPauseAfterEnd(0.2)\n            .build())\n        // Step 2: Type username\n        .then(new TypeOptions.Builder()\n            .setTypeDelay(0.05)\n            .build())\n        // Step 3: Click password field\n        .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(0.2)\n            .build())\n        // Step 4: Type password\n        .then(new TypeOptions.Builder()\n            .setTypeDelay(0.05)\n            .build())\n        // Step 5: Click login button\n        .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(1.0) // Wait for login to process\n            .build())\n        .build();\n    \n    // Execute with the appropriate ObjectCollections for each step\n    return chainExecutor.executeChain(loginChain, new ActionResult(),\n        usernameField.asObjectCollection(),\n        new ObjectCollection.Builder().withStrings(username).build(),\n        passwordField.asObjectCollection(),\n        new ObjectCollection.Builder().withStrings(password).build(),\n        loginButton.asObjectCollection()\n    );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"key-points",children:"Key Points:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Each action in the chain corresponds to a specific UI interaction"}),"\n",(0,o.jsx)(n.li,{children:"Delays are added to allow the UI to respond"}),"\n",(0,o.jsx)(n.li,{children:"Object collections are passed in the same order as the actions"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"multi-step-navigation",children:"Multi-Step Navigation"}),"\n",(0,o.jsx)(n.p,{children:"Navigate through complex UI hierarchies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public ActionResult navigateToSettings(StateImage menuButton, \n                                     StateImage settingsMenu,\n                                     StateImage securityTab) {\n    \n    ActionChainOptions navigationChain = new ActionChainOptions.Builder(\n        // Open main menu\n        new ClickOptions.Builder()\n            .setPauseAfterEnd(0.5)\n            .build())\n        // Find and click settings in menu\n        .then(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.FIRST)\n            .build())\n        .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(0.5)\n            .build())\n        // Find and click security tab\n        .then(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.FIRST)\n            .build())\n        .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(0.3)\n            .build())\n        .build();\n    \n    return chainExecutor.executeChain(navigationChain, new ActionResult(),\n        menuButton.asObjectCollection(),\n        settingsMenu.asObjectCollection(),\n        settingsMenu.asObjectCollection(), // Click the found menu item\n        securityTab.asObjectCollection(),\n        securityTab.asObjectCollection()  // Click the found tab\n    );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"complex-interaction-workflow",children:"Complex Interaction Workflow"}),"\n",(0,o.jsx)(n.p,{children:"This example shows a workflow that combines finding, hovering, clicking, and verification:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public ActionResult complexWorkflow(StateImage target, StateImage expectedResult) {\n    \n    ActionChainOptions workflow = new ActionChainOptions.Builder(\n        // Step 1: Find the target element\n        new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.BEST)\n            .setSimilarity(0.8)\n            .build())\n        // Step 2: Move mouse to target (hover effect)\n        .then(new MouseMoveOptions.Builder()\n            .setPauseAfterEnd(0.5) // Hold hover\n            .build())\n        // Step 3: Click the target\n        .then(new ClickOptions.Builder()\n            .setPauseAfterEnd(0.3)\n            .build())\n        // Step 4: Verify the expected result appears\n        .then(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.FIRST)\n            .setPauseBeforeBegin(2.0) // Wait for UI update\n            .build())\n        .build();\n    \n    // Note: Same target is used for find, move, and click\n    return chainExecutor.executeChain(workflow, new ActionResult(),\n        target.asObjectCollection(),\n        target.asObjectCollection(), // For mouse move\n        target.asObjectCollection(), // For click\n        expectedResult.asObjectCollection()\n    );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"drag-and-drop-operations",children:"Drag and Drop Operations"}),"\n",(0,o.jsx)(n.p,{children:"While Brobot has a dedicated Drag action, you can also build custom drag operations:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public ActionResult customDragDrop(StateImage source, StateImage target) {\n    \n    ActionChainOptions dragChain = new ActionChainOptions.Builder(\n        // Find source element\n        new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.BEST)\n            .build())\n        // Move to source\n        .then(new MouseMoveOptions.Builder()\n            .setPauseAfterEnd(0.1)\n            .build())\n        // Mouse down\n        .then(new MouseDownOptions.Builder()\n            .setPauseAfterEnd(0.2)\n            .build())\n        // Find target location\n        .then(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.BEST)\n            .build())\n        // Move to target (while holding)\n        .then(new MouseMoveOptions.Builder()\n            .setPauseAfterEnd(0.1)\n            .build())\n        // Release mouse\n        .then(new MouseUpOptions.Builder()\n            .setPauseAfterEnd(0.5)\n            .build())\n        .build();\n    \n    return chainExecutor.executeChain(dragChain, new ActionResult(),\n        source.asObjectCollection(),\n        source.asObjectCollection(), // For mouse move\n        source.asObjectCollection(), // For mouse down\n        target.asObjectCollection(), // Find target\n        target.asObjectCollection(), // Move to target\n        target.asObjectCollection()  // Mouse up at target\n    );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"dynamic-workflow-building",children:"Dynamic Workflow Building"}),"\n",(0,o.jsx)(n.p,{children:"Build workflows dynamically based on runtime conditions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class DynamicWorkflowBuilder {\n    \n    public ActionChainOptions buildWorkflow(List<WorkflowStep> steps) {\n        if (steps.isEmpty()) {\n            throw new IllegalArgumentException("Workflow must have at least one step");\n        }\n        \n        // Start with the first step\n        ActionChainOptions.Builder builder = new ActionChainOptions.Builder(\n            steps.get(0).toActionConfig()\n        );\n        \n        // Add remaining steps\n        for (int i = 1; i < steps.size(); i++) {\n            builder.then(steps.get(i).toActionConfig());\n        }\n        \n        return builder.build();\n    }\n    \n    // Example workflow step\n    public static class WorkflowStep {\n        private final String actionType;\n        private final Map<String, Object> parameters;\n        \n        public ActionConfig toActionConfig() {\n            switch (actionType) {\n                case "click":\n                    return new ClickOptions.Builder()\n                        .setPauseAfterEnd((Double) parameters.getOrDefault("pause", 0.3))\n                        .build();\n                case "type":\n                    return new TypeOptions.Builder()\n                        .setTypeDelay((Double) parameters.getOrDefault("delay", 0.05))\n                        .build();\n                case "find":\n                    return new PatternFindOptions.Builder()\n                        .setStrategy(PatternFindOptions.Strategy.valueOf(\n                            (String) parameters.getOrDefault("strategy", "FIRST")))\n                        .build();\n                default:\n                    throw new IllegalArgumentException("Unknown action type: " + actionType);\n            }\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"error-handling-in-workflows",children:"Error Handling in Workflows"}),"\n",(0,o.jsx)(n.p,{children:"Handle errors gracefully in complex workflows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public ActionResult robustWorkflow(StateImage element1, StateImage element2) {\n    \n    // Build the main workflow\n    ActionChainOptions mainWorkflow = new ActionChainOptions.Builder(\n        new PatternFindOptions.Builder().build())\n        .then(new ClickOptions.Builder().build())\n        .then(new PatternFindOptions.Builder().build())\n        .build();\n    \n    // Execute with error handling\n    ActionResult result = chainExecutor.executeChain(\n        mainWorkflow, new ActionResult(),\n        element1.asObjectCollection(),\n        element1.asObjectCollection(),\n        element2.asObjectCollection()\n    );\n    \n    // Check intermediate results if needed\n    if (!result.isSuccess()) {\n        // Try alternative workflow\n        ActionChainOptions fallbackWorkflow = new ActionChainOptions.Builder(\n            new ClickOptions.Builder()\n                .setPauseAfterEnd(1.0) // Longer pause\n                .build())\n            .then(new PatternFindOptions.Builder()\n                .setSimilarity(0.7) // Lower threshold\n                .build())\n            .build();\n        \n        result = chainExecutor.executeChain(\n            fallbackWorkflow, new ActionResult(),\n            element1.asObjectCollection(),\n            element2.asObjectCollection()\n        );\n    }\n    \n    return result;\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-for-complex-workflows",children:"Best Practices for Complex Workflows"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Break down complexity"}),": Divide large workflows into smaller, reusable chains"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Add appropriate delays"}),": UI elements need time to respond"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use meaningful variable names"}),": Make your workflow self-documenting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consider failure points"}),": Build in fallback strategies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Log intermediate results"}),": Helps with debugging complex chains"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test incrementally"}),": Build and test workflows step by step"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Minimize waits"}),": Use smart waiting strategies instead of fixed delays"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reuse search results"}),": Use NESTED strategy when searching within found elements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Batch similar actions"}),": Group similar operations when possible"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Profile your workflows"}),": Identify and optimize bottlenecks"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Learn about ",(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/action-config/conditional-actions",children:"Conditional Actions"})," for dynamic workflows"]}),"\n",(0,o.jsxs)(n.li,{children:["Explore ",(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/action-config/form-automation",children:"Form Automation"})," patterns"]}),"\n",(0,o.jsxs)(n.li,{children:["See ",(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/action-config/reusable-patterns",children:"Reusable Patterns"})," for building a library of common workflows"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
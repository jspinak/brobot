"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1134],{28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var l=n(96540);const r={},t=l.createContext(r);function s(e){const i=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(t.Provider,{value:i},e.children)}},78300:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"core-library/guides/BUILDER_PERFORMANCE_GUIDE","title":"Builder Pattern Performance Optimization Guide","description":"Overview","source":"@site/docs/03-core-library/guides/BUILDER_PERFORMANCE_GUIDE.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/BUILDER_PERFORMANCE_GUIDE","permalink":"/brobot/docs/core-library/guides/BUILDER_PERFORMANCE_GUIDE","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/BUILDER_PERFORMANCE_GUIDE.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Brobot API Documentation Template","permalink":"/brobot/docs/core-library/guides/API_DOCUMENTATION_TEMPLATE"},"next":{"title":"ActionOptions to ActionConfig Migration - Work Complete","permalink":"/brobot/docs/core-library/guides/MIGRATION_WORK_COMPLETE"}}');var r=n(74848),t=n(28453);const s={},a="Builder Pattern Performance Optimization Guide",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"1. Builder Instance Reuse",id:"1-builder-instance-reuse",level:3},{value:"\u274c Inefficient: Creating new builder for each modification",id:"-inefficient-creating-new-builder-for-each-modification",level:4},{value:"\u2705 Efficient: Reusing builder with toBuilder()",id:"-efficient-reusing-builder-with-tobuilder",level:4},{value:"2. Lazy Initialization",id:"2-lazy-initialization",level:3},{value:"\u274c Eager initialization of all fields",id:"-eager-initialization-of-all-fields",level:4},{value:"\u2705 Lazy initialization",id:"-lazy-initialization",level:4},{value:"3. Immutable Object Caching",id:"3-immutable-object-caching",level:3},{value:"\u2705 Cache commonly used configurations",id:"-cache-commonly-used-configurations",level:4},{value:"4. Builder Pool Pattern",id:"4-builder-pool-pattern",level:3},{value:"\u2705 For high-frequency builder usage",id:"-for-high-frequency-builder-usage",level:4},{value:"Memory Optimization",id:"memory-optimization",level:2},{value:"1. Null-Safe Defaults",id:"1-null-safe-defaults",level:3},{value:"\u274c Creating unnecessary objects",id:"-creating-unnecessary-objects",level:4},{value:"\u2705 Lazy creation only when needed",id:"-lazy-creation-only-when-needed",level:4},{value:"2. Primitive vs Object Fields",id:"2-primitive-vs-object-fields",level:3},{value:"\u2705 Use primitives where possible",id:"-use-primitives-where-possible",level:4},{value:"JVM Optimizations",id:"jvm-optimizations",level:2},{value:"1. Method Inlining",id:"1-method-inlining",level:3},{value:"\u2705 Keep setter methods simple for JVM inlining",id:"-keep-setter-methods-simple-for-jvm-inlining",level:4},{value:"\u274c Complex setters prevent inlining",id:"-complex-setters-prevent-inlining",level:4},{value:"2. Final Fields",id:"2-final-fields",level:3},{value:"\u2705 Mark fields final in immutable objects",id:"-mark-fields-final-in-immutable-objects",level:4},{value:"Benchmarking",id:"benchmarking",level:2},{value:"Performance Test Template",id:"performance-test-template",level:3},{value:"Expected Results",id:"expected-results",level:3},{value:"Anti-Patterns to Avoid",id:"anti-patterns-to-avoid",level:2},{value:"1. Builder Mutation After Build",id:"1-builder-mutation-after-build",level:3},{value:"2. Excessive Builder Nesting",id:"2-excessive-builder-nesting",level:3},{value:"3. Thread Safety Issues",id:"3-thread-safety-issues",level:3},{value:"Memory Profiling",id:"memory-profiling",level:2},{value:"Using JVM Flags",id:"using-jvm-flags",level:3},{value:"Profiling Code",id:"profiling-code",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"builder-pattern-performance-optimization-guide",children:"Builder Pattern Performance Optimization Guide"})}),"\n",(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(i.p,{children:"This guide provides best practices for optimizing builder pattern usage in Brobot for maximum performance."}),"\n",(0,r.jsx)(i.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(i.h3,{id:"1-builder-instance-reuse",children:"1. Builder Instance Reuse"}),"\n",(0,r.jsx)(i.h4,{id:"-inefficient-creating-new-builder-for-each-modification",children:"\u274c Inefficient: Creating new builder for each modification"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"for (int i = 0; i < 1000; i++) {\n    ClickOptions options = ClickOptions.builder()\n        .setNumberOfClicks(i)\n        .build();\n    action.perform(options, collection);\n}\n"})}),"\n",(0,r.jsx)(i.h4,{id:"-efficient-reusing-builder-with-tobuilder",children:"\u2705 Efficient: Reusing builder with toBuilder()"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"ClickOptions baseOptions = ClickOptions.builder()\n    .setPressOptions(commonPressOptions)\n    .build();\n\nfor (int i = 0; i < 1000; i++) {\n    ClickOptions options = baseOptions.toBuilder()\n        .setNumberOfClicks(i)\n        .build();\n    action.perform(options, collection);\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"2-lazy-initialization",children:"2. Lazy Initialization"}),"\n",(0,r.jsx)(i.h4,{id:"-eager-initialization-of-all-fields",children:"\u274c Eager initialization of all fields"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public class ExpensiveOptions {\n    private final ExpensiveObject expensive = new ExpensiveObject(); // Always created\n    \n    public static class Builder {\n        private ExpensiveObject expensive = new ExpensiveObject(); // Created even if not used\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h4,{id:"-lazy-initialization",children:"\u2705 Lazy initialization"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public class ExpensiveOptions {\n    private final Supplier<ExpensiveObject> expensiveSupplier;\n    private ExpensiveObject expensive;\n    \n    public ExpensiveObject getExpensive() {\n        if (expensive == null) {\n            expensive = expensiveSupplier.get();\n        }\n        return expensive;\n    }\n    \n    public static class Builder {\n        private Supplier<ExpensiveObject> expensiveSupplier = ExpensiveObject::new;\n        \n        public Builder setExpensiveSupplier(Supplier<ExpensiveObject> supplier) {\n            this.expensiveSupplier = supplier;\n            return this;\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"3-immutable-object-caching",children:"3. Immutable Object Caching"}),"\n",(0,r.jsx)(i.h4,{id:"-cache-commonly-used-configurations",children:"\u2705 Cache commonly used configurations"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public class CommonConfigurations {\n    // Singleton instances for common configurations\n    public static final ClickOptions SINGLE_LEFT_CLICK = ClickOptions.builder()\n        .setNumberOfClicks(1)\n        .build();\n    \n    public static final ClickOptions DOUBLE_CLICK = ClickOptions.builder()\n        .setNumberOfClicks(2)\n        .build();\n    \n    public static final ClickOptions RIGHT_CLICK = ClickOptions.builder()\n        .setPressOptions(MousePressOptions.builder()\n            .setButton(MouseButton.RIGHT)\n            .build())\n        .build();\n    \n    public static final PatternFindOptions QUICK_FIND = PatternFindOptions.builder()\n        .setStrategy(PatternFindOptions.Strategy.FIRST)\n        .setSimilarity(0.7)\n        .setCaptureImage(false)\n        .build();\n    \n    // Thread-safe cache for dynamic configurations\n    private static final Map<String, ActionConfig> configCache = \n        new ConcurrentHashMap<>();\n    \n    public static ActionConfig getCachedConfig(String key, Supplier<ActionConfig> builder) {\n        return configCache.computeIfAbsent(key, k -> builder.get());\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"4-builder-pool-pattern",children:"4. Builder Pool Pattern"}),"\n",(0,r.jsx)(i.h4,{id:"-for-high-frequency-builder-usage",children:"\u2705 For high-frequency builder usage"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public class BuilderPool<T> {\n    private final Queue<T> pool = new ConcurrentLinkedQueue<>();\n    private final Supplier<T> factory;\n    private final Consumer<T> resetter;\n    private final int maxSize;\n    \n    public BuilderPool(Supplier<T> factory, Consumer<T> resetter, int maxSize) {\n        this.factory = factory;\n        this.resetter = resetter;\n        this.maxSize = maxSize;\n    }\n    \n    public T acquire() {\n        T builder = pool.poll();\n        return builder != null ? builder : factory.get();\n    }\n    \n    public void release(T builder) {\n        if (pool.size() < maxSize) {\n            resetter.accept(builder);\n            pool.offer(builder);\n        }\n    }\n}\n\n// Usage\npublic class ClickOptionsBuilderPool {\n    private static final BuilderPool<ClickOptions.Builder> POOL = \n        new BuilderPool<>(\n            ClickOptions::builder,\n            builder -> {\n                // Reset to defaults\n                builder.setNumberOfClicks(1);\n                builder.setPressOptions(null);\n                builder.setVerification(null);\n            },\n            100 // max pool size\n        );\n    \n    public static ClickOptions.Builder acquire() {\n        return POOL.acquire();\n    }\n    \n    public static void release(ClickOptions.Builder builder) {\n        POOL.release(builder);\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"memory-optimization",children:"Memory Optimization"}),"\n",(0,r.jsx)(i.h3,{id:"1-null-safe-defaults",children:"1. Null-Safe Defaults"}),"\n",(0,r.jsx)(i.h4,{id:"-creating-unnecessary-objects",children:"\u274c Creating unnecessary objects"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public static class Builder {\n    private VerificationOptions verification = VerificationOptions.builder().build(); // Unnecessary object\n    private RepetitionOptions repetition = RepetitionOptions.builder().build(); // Unnecessary object\n}\n"})}),"\n",(0,r.jsx)(i.h4,{id:"-lazy-creation-only-when-needed",children:"\u2705 Lazy creation only when needed"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public static class Builder {\n    private VerificationOptions.VerificationOptionsBuilder verification;\n    private RepetitionOptions.RepetitionOptionsBuilder repetition;\n    \n    public Builder setVerification(VerificationOptions.VerificationOptionsBuilder verification) {\n        this.verification = verification;\n        return this;\n    }\n    \n    public ClickOptions build() {\n        return new ClickOptions(\n            verification != null ? verification.build() : null,\n            repetition != null ? repetition.build() : null\n        );\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"2-primitive-vs-object-fields",children:"2. Primitive vs Object Fields"}),"\n",(0,r.jsx)(i.h4,{id:"-use-primitives-where-possible",children:"\u2705 Use primitives where possible"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public static class Builder {\n    private int numberOfClicks = 1; // primitive\n    private double pauseAfter = 0.0; // primitive\n    private boolean captureImage = false; // primitive\n    \n    // Instead of\n    // private Integer numberOfClicks = 1; // boxed\n    // private Double pauseAfter = 0.0; // boxed\n    // private Boolean captureImage = false; // boxed\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"jvm-optimizations",children:"JVM Optimizations"}),"\n",(0,r.jsx)(i.h3,{id:"1-method-inlining",children:"1. Method Inlining"}),"\n",(0,r.jsx)(i.h4,{id:"-keep-setter-methods-simple-for-jvm-inlining",children:"\u2705 Keep setter methods simple for JVM inlining"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public Builder setNumberOfClicks(int clicks) {\n    this.numberOfClicks = clicks;\n    return this;\n}\n"})}),"\n",(0,r.jsx)(i.h4,{id:"-complex-setters-prevent-inlining",children:"\u274c Complex setters prevent inlining"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'public Builder setNumberOfClicks(int clicks) {\n    if (clicks < 0) {\n        logger.warn("Negative clicks: " + clicks);\n        this.numberOfClicks = 1;\n    } else if (clicks > 10) {\n        logger.warn("Too many clicks: " + clicks);\n        this.numberOfClicks = 10;\n    } else {\n        this.numberOfClicks = clicks;\n    }\n    logMetrics(clicks);\n    validateState();\n    return this;\n}\n'})}),"\n",(0,r.jsx)(i.h3,{id:"2-final-fields",children:"2. Final Fields"}),"\n",(0,r.jsx)(i.h4,{id:"-mark-fields-final-in-immutable-objects",children:"\u2705 Mark fields final in immutable objects"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"public final class ClickOptions {\n    private final int numberOfClicks;\n    private final MousePressOptions mousePressOptions;\n    \n    // JVM can optimize final fields better\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"benchmarking",children:"Benchmarking"}),"\n",(0,r.jsx)(i.h3,{id:"performance-test-template",children:"Performance Test Template"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"@State(Scope.Thread)\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\npublic class BuilderBenchmark {\n    \n    @Benchmark\n    public ClickOptions directBuilder() {\n        return ClickOptions.builder()\n            .setNumberOfClicks(2)\n            .build();\n    }\n    \n    @Benchmark\n    public ClickOptions cachedBuilder() {\n        return CommonConfigurations.DOUBLE_CLICK;\n    }\n    \n    @Benchmark\n    public ClickOptions pooledBuilder() {\n        ClickOptions.Builder builder = ClickOptionsBuilderPool.acquire();\n        try {\n            return builder.setNumberOfClicks(2).build();\n        } finally {\n            ClickOptionsBuilderPool.release(builder);\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h3,{id:"expected-results",children:"Expected Results"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"Benchmark                          Mode  Cnt    Score   Error  Units\nBuilderBenchmark.directBuilder     avgt   10  145.234 \xb1 3.456  ns/op\nBuilderBenchmark.cachedBuilder     avgt   10    2.345 \xb1 0.123  ns/op\nBuilderBenchmark.pooledBuilder     avgt   10   45.678 \xb1 2.345  ns/op\n"})}),"\n",(0,r.jsx)(i.h2,{id:"anti-patterns-to-avoid",children:"Anti-Patterns to Avoid"}),"\n",(0,r.jsx)(i.h3,{id:"1-builder-mutation-after-build",children:"1. Builder Mutation After Build"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"// \u274c WRONG - Builder should not be used after build()\nClickOptions.Builder builder = ClickOptions.builder();\nClickOptions options1 = builder.setNumberOfClicks(1).build();\nClickOptions options2 = builder.setNumberOfClicks(2).build(); // Unsafe!\n"})}),"\n",(0,r.jsx)(i.h3,{id:"2-excessive-builder-nesting",children:"2. Excessive Builder Nesting"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'// \u274c Too much nesting reduces readability\nClickOptions options = ClickOptions.builder()\n    .setPressOptions(MousePressOptions.builder()\n        .setButton(MouseButton.LEFT)\n        .setPauseBeforeMouseDown(0.1)\n        .setPauseAfterMouseDown(0.1)\n        .setPauseBeforeMouseUp(0.1)\n        .setPauseAfterMouseUp(0.1)\n        .build())\n    .setVerification(VerificationOptions.builder()\n        .setEvent(Event.TEXT_APPEARS)\n        .setText("Success")\n        .setObjectCollection(ObjectCollection.builder()\n            .addStateImage(StateImage.builder()\n                .setName("image1")\n                .build())\n            .build())\n        .build())\n    .build();\n\n// \u2705 Better - Extract complex builders\nMousePressOptions pressOptions = createPressOptions();\nVerificationOptions verification = createVerification();\n\nClickOptions options = ClickOptions.builder()\n    .setPressOptions(pressOptions)\n    .setVerification(verification)\n    .build();\n'})}),"\n",(0,r.jsx)(i.h3,{id:"3-thread-safety-issues",children:"3. Thread Safety Issues"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"// \u274c Shared mutable builder\npublic class Service {\n    private final ClickOptions.Builder sharedBuilder = ClickOptions.builder(); // NOT thread-safe\n    \n    public void performClick(int clicks) {\n        ClickOptions options = sharedBuilder\n            .setNumberOfClicks(clicks) // Race condition!\n            .build();\n    }\n}\n\n// \u2705 Thread-safe approach\npublic class Service {\n    public void performClick(int clicks) {\n        ClickOptions options = ClickOptions.builder() // New builder per invocation\n            .setNumberOfClicks(clicks)\n            .build();\n    }\n}\n"})}),"\n",(0,r.jsx)(i.h2,{id:"memory-profiling",children:"Memory Profiling"}),"\n",(0,r.jsx)(i.h3,{id:"using-jvm-flags",children:"Using JVM Flags"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"# Track object allocation\n-XX:+PrintGC -XX:+PrintGCDetails\n\n# Memory usage analysis\n-XX:+UseG1GC -XX:MaxGCPauseMillis=200\n\n# Heap dump on OOM\n-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heap.hprof\n"})}),"\n",(0,r.jsx)(i.h3,{id:"profiling-code",children:"Profiling Code"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'@Test\npublic void profileBuilderMemoryUsage() {\n    Runtime runtime = Runtime.getRuntime();\n    \n    // Warm-up\n    for (int i = 0; i < 1000; i++) {\n        ClickOptions.builder().setNumberOfClicks(i).build();\n    }\n    \n    System.gc();\n    long memBefore = runtime.totalMemory() - runtime.freeMemory();\n    \n    // Test\n    List<ClickOptions> options = new ArrayList<>();\n    for (int i = 0; i < 10000; i++) {\n        options.add(ClickOptions.builder()\n            .setNumberOfClicks(i % 10)\n            .build());\n    }\n    \n    long memAfter = runtime.totalMemory() - runtime.freeMemory();\n    long memUsed = memAfter - memBefore;\n    \n    System.out.printf("Memory used: %.2f MB for %d objects (%.2f bytes/object)%n",\n        memUsed / 1024.0 / 1024.0,\n        options.size(),\n        (double) memUsed / options.size());\n}\n'})}),"\n",(0,r.jsx)(i.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cache immutable configurations"})," that are used frequently"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Use toBuilder()"})," for variations of existing configurations"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Avoid unnecessary object creation"})," in builders"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Use primitives"})," instead of boxed types where possible"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Keep setter methods simple"})," for JVM inlining"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Extract complex builders"})," to improve readability"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Never share mutable builders"})," between threads"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Profile memory usage"})," in performance-critical paths"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Use builder pools"})," for high-frequency scenarios"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Document performance characteristics"})," in JavaDoc"]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7134],{28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>s});var t=n(96540);const o={},r=t.createContext(o);function a(e){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:i},e.children)}},47958:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"testing/profile-based-architecture","title":"Profile-Based Architecture","description":"Overview","source":"@site/docs/04-testing/profile-based-architecture.md","sourceDirName":"04-testing","slug":"/testing/profile-based-architecture","permalink":"/brobot/docs/testing/profile-based-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/profile-based-architecture.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Profile-Based Architecture"},"sidebar":"docSidebar","previous":{"title":"Mock Mode Manager","permalink":"/brobot/docs/testing/mock-mode-manager"},"next":{"title":"Unit Testing","permalink":"/brobot/docs/testing/unit-testing"}}');var o=n(74848),r=n(28453);const a={sidebar_position:3,title:"Profile-Based Architecture"},s="Profile-Based Architecture Guide",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Architecture Evolution",id:"architecture-evolution",level:2},{value:"Previous Architecture (Runtime Delegation)",id:"previous-architecture-runtime-delegation",level:3},{value:"New Architecture (Profile-Based)",id:"new-architecture-profile-based",level:3},{value:"Profile Configuration",id:"profile-configuration",level:2},{value:"Default Profiles",id:"default-profiles",level:3},{value:"<code>brobot-defaults.properties</code>",id:"brobot-defaultsproperties",level:4},{value:"<code>brobot-test-defaults.properties</code>",id:"brobot-test-defaultsproperties",level:4},{value:"Application-Specific Profiles",id:"application-specific-profiles",level:3},{value:"<code>application.properties</code>",id:"applicationproperties",level:4},{value:"<code>application-test.properties</code>",id:"application-testproperties",level:4},{value:"<code>application-dev.properties</code>",id:"application-devproperties",level:4},{value:"Profile Activation",id:"profile-activation",level:2},{value:"In Tests",id:"in-tests",level:3},{value:"Using @ActiveProfiles",id:"using-activeprofiles",level:4},{value:"Multiple Profiles",id:"multiple-profiles",level:4},{value:"Via Command Line",id:"via-command-line",level:3},{value:"Via Environment Variables",id:"via-environment-variables",level:3},{value:"Programmatically",id:"programmatically",level:3},{value:"Auto-Configuration",id:"auto-configuration",level:2},{value:"BrobotProfileAutoConfiguration",id:"brobotprofileautoconfiguration",level:3},{value:"Profile Validation",id:"profile-validation",level:3},{value:"State Configuration with Profiles",id:"state-configuration-with-profiles",level:2},{value:"Profile-Aware State Configuration",id:"profile-aware-state-configuration",level:3},{value:"Conditional Beans",id:"conditional-beans",level:3},{value:"Testing Strategies",id:"testing-strategies",level:2},{value:"Unit Tests (Mock Mode)",id:"unit-tests-mock-mode",level:3},{value:"Integration Tests (Mixed Mode)",id:"integration-tests-mixed-mode",level:3},{value:"Performance Tests",id:"performance-tests",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Profile Naming Convention",id:"1-profile-naming-convention",level:3},{value:"2. Property Organization",id:"2-property-organization",level:3},{value:"3. Profile Inheritance",id:"3-profile-inheritance",level:3},{value:"4. Documentation",id:"4-documentation",level:3},{value:"5. Fail-Safe Defaults",id:"5-fail-safe-defaults",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Step 1: Create Profile Configurations",id:"step-1-create-profile-configurations",level:3},{value:"Step 2: Update Tests",id:"step-2-update-tests",level:3},{value:"Step 3: Remove Runtime Checks (Optional)",id:"step-3-remove-runtime-checks-optional",level:3},{value:"Step 4: Verify Configuration",id:"step-4-verify-configuration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Profile Not Activating",id:"profile-not-activating",level:3},{value:"Mock Mode Not Enabled",id:"mock-mode-not-enabled",level:3},{value:"Bean Not Found",id:"bean-not-found",level:3},{value:"Property Not Resolved",id:"property-not-resolved",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"profile-based-architecture-guide",children:"Profile-Based Architecture Guide"})}),"\n",(0,o.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(i.p,{children:"Brobot's profile-based architecture provides a clean separation between test and production environments using Spring profiles. This approach eliminates runtime conditionals, improves performance, and ensures consistent behavior across different execution contexts."}),"\n",(0,o.jsx)(i.h2,{id:"architecture-evolution",children:"Architecture Evolution"}),"\n",(0,o.jsx)(i.h3,{id:"previous-architecture-runtime-delegation",children:"Previous Architecture (Runtime Delegation)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"// Old approach - runtime checks everywhere\npublic ActionResult execute(Action action) {\n    if (FrameworkSettings.mock) {\n        return mockExecution.execute(action);\n    } else {\n        return liveExecution.execute(action);\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"new-architecture-profile-based",children:"New Architecture (Profile-Based)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// New approach - dependency injection based on profile\n@Component\n@Profile("test")\npublic class MockActionExecutor implements ActionExecutor {\n    // Mock implementation\n}\n\n@Component\n@Profile("!test")\npublic class LiveActionExecutor implements ActionExecutor {\n    // Live implementation\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"profile-configuration",children:"Profile Configuration"}),"\n",(0,o.jsx)(i.h3,{id:"default-profiles",children:"Default Profiles"}),"\n",(0,o.jsx)(i.p,{children:"Brobot provides two default configuration files:"}),"\n",(0,o.jsx)(i.h4,{id:"brobot-defaultsproperties",children:(0,o.jsx)(i.code,{children:"brobot-defaults.properties"})}),"\n",(0,o.jsx)(i.p,{children:"Production/live defaults applied to all Brobot applications:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"brobot.framework.mock=false\nbrobot.action.similarity=0.85\nbrobot.highlight.enabled=true\nbrobot.screenshot.save-history=true\n"})}),"\n",(0,o.jsx)(i.h4,{id:"brobot-test-defaultsproperties",children:(0,o.jsx)(i.code,{children:"brobot-test-defaults.properties"})}),"\n",(0,o.jsx)(i.p,{children:"Test-optimized defaults automatically loaded with test profile:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"brobot.framework.mock=true\nbrobot.action.similarity=0.70\nbrobot.highlight.enabled=false\nbrobot.screenshot.save-history=false\nbrobot.mock.time-find-first=0.01  # Fast execution\n"})}),"\n",(0,o.jsx)(i.h3,{id:"application-specific-profiles",children:"Application-Specific Profiles"}),"\n",(0,o.jsx)(i.p,{children:"Create profile-specific configurations in your application:"}),"\n",(0,o.jsx)(i.h4,{id:"applicationproperties",children:(0,o.jsx)(i.code,{children:"application.properties"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"# Default/production configuration\nbrobot.framework.mock=false\nlogging.level.root=WARN\n"})}),"\n",(0,o.jsx)(i.h4,{id:"application-testproperties",children:(0,o.jsx)(i.code,{children:"application-test.properties"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"# Test profile configuration\nspring.config.import=optional:classpath:brobot-test-defaults.properties\nbrobot.framework.mock=true\nlogging.level.root=INFO\n\n# State probabilities for deterministic testing\nmyapp.mock.login-state-probability=100\nmyapp.mock.home-state-probability=100\n"})}),"\n",(0,o.jsx)(i.h4,{id:"application-devproperties",children:(0,o.jsx)(i.code,{children:"application-dev.properties"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"# Development profile\nbrobot.framework.mock=false\nbrobot.highlight.enabled=true\nbrobot.logging.verbosity=VERBOSE\nlogging.level.root=DEBUG\n"})}),"\n",(0,o.jsx)(i.h2,{id:"profile-activation",children:"Profile Activation"}),"\n",(0,o.jsx)(i.h3,{id:"in-tests",children:"In Tests"}),"\n",(0,o.jsx)(i.h4,{id:"using-activeprofiles",children:"Using @ActiveProfiles"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")  // Activates test profile\npublic class MyAutomationTest {\n    // Test will use application-test.properties\n    // Mock mode automatically enabled\n}\n'})}),"\n",(0,o.jsx)(i.h4,{id:"multiple-profiles",children:"Multiple Profiles"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles({"test", "integration"})\npublic class IntegrationTest {\n    // Combines test and integration profiles\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"via-command-line",children:"Via Command Line"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"# Run tests with test profile\n./gradlew test -Dspring.profiles.active=test\n\n# Run application with dev profile\n./gradlew bootRun --args='--spring.profiles.active=dev'\n\n# Multiple profiles\njava -jar myapp.jar --spring.profiles.active=test,debug\n"})}),"\n",(0,o.jsx)(i.h3,{id:"via-environment-variables",children:"Via Environment Variables"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"export SPRING_PROFILES_ACTIVE=test\n./gradlew test\n"})}),"\n",(0,o.jsx)(i.h3,{id:"programmatically",children:"Programmatically"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication app = new SpringApplication(MyApplication.class);\n        app.setAdditionalProfiles("dev");  // Add dev profile\n        app.run(args);\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"auto-configuration",children:"Auto-Configuration"}),"\n",(0,o.jsx)(i.h3,{id:"brobotprofileautoconfiguration",children:"BrobotProfileAutoConfiguration"}),"\n",(0,o.jsx)(i.p,{children:"The framework provides automatic configuration based on active profiles:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Configuration\n@ConditionalOnClass(Action.class)\n@PropertySource("classpath:brobot-defaults.properties")\npublic class BrobotProfileAutoConfiguration {\n    \n    @Configuration\n    @Profile("test")\n    @PropertySource("classpath:brobot-test-defaults.properties")\n    public static class TestProfileConfiguration {\n        \n        @PostConstruct\n        public void configureTestEnvironment() {\n            // Ensures mock mode is enabled\n            FrameworkSettings.mock = true;\n            // Optimizes for test execution\n            FrameworkSettings.moveMouseDelay = 0;\n            FrameworkSettings.saveSnapshots = false;\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"profile-validation",children:"Profile Validation"}),"\n",(0,o.jsx)(i.p,{children:"The framework validates configuration consistency:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Component\npublic static class ProfileValidator {\n    @PostConstruct\n    public void validateProfileConfiguration() {\n        if (isTestProfile && !FrameworkSettings.mock) {\n            log.warn("Test profile active but mock mode disabled - fixing...");\n            FrameworkSettings.mock = true;\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"state-configuration-with-profiles",children:"State Configuration with Profiles"}),"\n",(0,o.jsx)(i.h3,{id:"profile-aware-state-configuration",children:"Profile-Aware State Configuration"}),"\n",(0,o.jsx)(i.p,{children:"States can configure themselves based on the active profile:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@State(initial = true)\n@Getter\n@Slf4j\npublic class LoginState {\n    \n    @Autowired(required = false)\n    private MockStateManagement mockStateManagement;\n    \n    @Value("${myapp.mock.login-probability:100}")\n    private int mockProbability;\n    \n    @PostConstruct\n    public void configure() {\n        if (FrameworkSettings.mock && mockStateManagement != null) {\n            mockStateManagement.setStateProbabilities(mockProbability, "Login");\n            log.info("Login state mock probability: {}%", mockProbability);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"conditional-beans",children:"Conditional Beans"}),"\n",(0,o.jsx)(i.p,{children:"Create different implementations for different profiles:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Component\n@Profile("test")\npublic class MockScreenCapture implements ScreenCapture {\n    public BufferedImage capture() {\n        // Return mock image\n        return mockImage;\n    }\n}\n\n@Component\n@Profile("!test")\npublic class LiveScreenCapture implements ScreenCapture {\n    public BufferedImage capture() {\n        // Real screen capture\n        return robot.createScreenCapture(bounds);\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"testing-strategies",children:"Testing Strategies"}),"\n",(0,o.jsx)(i.h3,{id:"unit-tests-mock-mode",children:"Unit Tests (Mock Mode)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")\npublic class StateTransitionTest {\n    @Test\n    public void testLoginTransition() {\n        // Mock mode enabled automatically\n        // 100% state probabilities ensure deterministic behavior\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"integration-tests-mixed-mode",children:"Integration Tests (Mixed Mode)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("integration")\n@TestPropertySource(properties = {\n    "brobot.framework.mock=false",  // Override for real UI testing\n    "brobot.action.similarity=0.95"  // Stricter matching\n})\npublic class RealUIIntegrationTest {\n    // Tests against actual application\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"performance-tests",children:"Performance Tests"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles({"test", "performance"})\npublic class PerformanceTest {\n    // Combines test profile with performance monitoring\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(i.h3,{id:"1-profile-naming-convention",children:"1. Profile Naming Convention"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"test"})," - Unit tests with mock mode"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"integration"})," - Integration tests"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"dev"})," - Local development"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"staging"})," - Staging environment"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.code,{children:"prod"})," - Production (default, no profile)"]}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"2-property-organization",children:"2. Property Organization"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"src/main/resources/\n\u251c\u2500\u2500 application.properties          # Production defaults\n\u251c\u2500\u2500 application-test.properties     # Test overrides\n\u251c\u2500\u2500 application-dev.properties      # Development overrides\n\u2514\u2500\u2500 application-{env}.properties    # Environment-specific\n"})}),"\n",(0,o.jsx)(i.h3,{id:"3-profile-inheritance",children:"3. Profile Inheritance"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"# application-integration.properties\nspring.profiles.include=test  # Inherit from test profile\nbrobot.framework.mock=false   # Override specific properties\n"})}),"\n",(0,o.jsx)(i.h3,{id:"4-documentation",children:"4. Documentation"}),"\n",(0,o.jsx)(i.p,{children:"Always document profile purpose:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:'# application-test.properties\n# Purpose: Unit test configuration\n# Features: Mock mode, fast execution, no UI\n# Activation: @ActiveProfiles("test") or -Dspring.profiles.active=test\n'})}),"\n",(0,o.jsx)(i.h3,{id:"5-fail-safe-defaults",children:"5. Fail-Safe Defaults"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Value("${myapp.feature.enabled:false}")  // Default to safe value\nprivate boolean featureEnabled;\n'})}),"\n",(0,o.jsx)(i.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,o.jsx)(i.h3,{id:"step-1-create-profile-configurations",children:"Step 1: Create Profile Configurations"}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsxs)(i.li,{children:["Copy existing ",(0,o.jsx)(i.code,{children:"application.properties"})," to ",(0,o.jsx)(i.code,{children:"application-prod.properties"})]}),"\n",(0,o.jsxs)(i.li,{children:["Create ",(0,o.jsx)(i.code,{children:"application-test.properties"})," with test overrides"]}),"\n",(0,o.jsxs)(i.li,{children:["Update ",(0,o.jsx)(i.code,{children:"application.properties"})," with common settings"]}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"step-2-update-tests",children:"Step 2: Update Tests"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Before\n@TestPropertySource(properties = {\n    "brobot.framework.mock=true",\n    "logging.level=DEBUG"\n})\n\n// After\n@ActiveProfiles("test")\n'})}),"\n",(0,o.jsx)(i.h3,{id:"step-3-remove-runtime-checks-optional",children:"Step 3: Remove Runtime Checks (Optional)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"// Before\nif (FrameworkSettings.mock) {\n    return mockResult();\n} else {\n    return liveResult();\n}\n\n// After - Use dependency injection\n@Autowired\nprivate ActionExecutor executor;  // Injected based on profile\nreturn executor.execute();\n"})}),"\n",(0,o.jsx)(i.h3,{id:"step-4-verify-configuration",children:"Step 4: Verify Configuration"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Test\npublic void verifyTestProfile() {\n    assertTrue(environment.acceptsProfiles("test"));\n    assertTrue(FrameworkSettings.mock);\n    assertNotNull(mockStateManagement);\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(i.h3,{id:"profile-not-activating",children:"Profile Not Activating"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Add logging to verify\n@PostConstruct\npublic void logActiveProfiles() {\n    log.info("Active profiles: {}", \n        Arrays.toString(environment.getActiveProfiles()));\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"mock-mode-not-enabled",children:"Mock Mode Not Enabled"}),"\n",(0,o.jsx)(i.p,{children:"Check profile configuration order:"}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsx)(i.li,{children:"Default properties loaded first"}),"\n",(0,o.jsx)(i.li,{children:"Profile-specific properties override"}),"\n",(0,o.jsx)(i.li,{children:"@PostConstruct methods run last"}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"bean-not-found",children:"Bean Not Found"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Component\n@Profile("test")  // Only available in test profile\npublic class TestOnlyBean {\n    // Make sure test profile is active\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"property-not-resolved",children:"Property Not Resolved"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-properties",children:"# Provide defaults for all profiles\nmyapp.setting=${myapp.setting:defaultValue}\n"})}),"\n",(0,o.jsx)(i.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(i.p,{children:"The profile-based architecture provides:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Clean separation"})," between test and production code"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Automatic configuration"})," based on environment"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Better performance"})," (no runtime checks)"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Consistent behavior"})," across environments"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Easy maintenance"})," through centralized configuration"]}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"Use profiles to eliminate manual configuration, ensure consistent testing, and maintain clean separation between different execution environments."})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
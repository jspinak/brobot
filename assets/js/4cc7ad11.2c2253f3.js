"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2963],{15878:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"core-library/tutorials/tutorial-basics/states","title":"States","description":"States in Brobot represent distinct screens or UI contexts in your application. With the modern annotation-based approach, defining states is clean, declarative, and automatically integrated with Spring Boot.","source":"@site/docs/03-core-library/tutorials/tutorial-basics/states.md","sourceDirName":"03-core-library/tutorials/tutorial-basics","slug":"/core-library/tutorials/tutorial-basics/states","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/states","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-basics/states.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docSidebar","previous":{"title":"Initialize Brobot\'s Environment","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/init-brobot"},"next":{"title":"Transitions","permalink":"/brobot/docs/core-library/tutorials/tutorial-basics/transitions"}}');var a=n(74848),s=n(28453);const o={sidebar_position:4},r="States",l={},c=[{value:"Modern State Definition with @State Annotation",id:"modern-state-definition-with-state-annotation",level:2},{value:"Key Features of Modern States",id:"key-features-of-modern-states",level:2},{value:"1. Automatic Registration",id:"1-automatic-registration",level:3},{value:"2. Direct Component Access",id:"2-direct-component-access",level:3},{value:"3. StateImage with Modern ActionConfig",id:"3-stateimage-with-modern-actionconfig",level:3},{value:"Defining Multiple UI Elements",id:"defining-multiple-ui-elements",level:2},{value:"State Attributes",id:"state-attributes",level:2},{value:"Initial State",id:"initial-state",level:3},{value:"State Names",id:"state-names",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. One State Per Screen",id:"1-one-state-per-screen",level:3},{value:"2. Use Descriptive Names",id:"2-use-descriptive-names",level:3},{value:"3. Leverage Fixed Positions",id:"3-leverage-fixed-positions",level:3},{value:"4. Define Search Regions",id:"4-define-search-regions",level:3},{value:"Working with State Objects",id:"working-with-state-objects",level:2},{value:"StateImage",id:"stateimage",level:3},{value:"StateRegion",id:"stateregion",level:3},{value:"StateLocation",id:"statelocation",level:3},{value:"StateString",id:"statestring",level:3},{value:"ActionRecords for Mock Testing",id:"actionrecords-for-mock-testing",level:2},{value:"Integration with Spring Boot",id:"integration-with-spring-boot",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"states",children:"States"})}),"\n",(0,a.jsx)(t.p,{children:"States in Brobot represent distinct screens or UI contexts in your application. With the modern annotation-based approach, defining states is clean, declarative, and automatically integrated with Spring Boot."}),"\n",(0,a.jsx)(t.h2,{id:"modern-state-definition-with-state-annotation",children:"Modern State Definition with @State Annotation"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"@State"})," annotation automatically registers your state with Brobot's state management system. Note that ",(0,a.jsx)(t.code,{children:"@State"})," includes Spring's ",(0,a.jsx)(t.code,{children:"@Component"})," annotation, so you don't need to add ",(0,a.jsx)(t.code,{children:"@Component"})," separately:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.testing.data.ActionRecordTestUtils;\n\n@State(initial = true)  // Marks this as the initial state (includes @Component)\n@Getter\n@Slf4j\npublic class HomeState {\n    private final StateImage toWorldButton;\n    private final StateImage searchButton;\n    \n    public HomeState() {\n        // Define UI elements with fluent builder pattern\n        toWorldButton = new StateImage.Builder()\n            .addPatterns("toWorldButton")\n            // .setFixed(true)  // Method doesn\'t exist in current API\n            .build();\n            \n        searchButton = new StateImage.Builder()\n            .addPatterns("searchButton")\n            .setSearchRegionForAllPatterns(new Region(0, 0, 500, 100))  // Top area only\n            .build();\n            \n        // Initialize with action history for mock testing\n        initializeActionHistory();\n    }\n    \n    private void initializeActionHistory() {\n        // Add mock action records for testing using the utility class\n        // TODO: ActionHistory API needs to be updated for current version\n        // toWorldButton.getPatterns().get(0).getActionHistory()\n        //     .addSnapshot(ActionRecordTestUtils.createActionRecord(0.95, 220, 600, 20, 20));\n            \n        // searchButton.getPatterns().get(0).getActionHistory()\n        //     .addSnapshot(ActionRecordTestUtils.createActionRecord(0.92, 250, 50, 100, 30));\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"key-features-of-modern-states",children:"Key Features of Modern States"}),"\n",(0,a.jsx)(t.h3,{id:"1-automatic-registration",children:"1. Automatic Registration"}),"\n",(0,a.jsxs)(t.p,{children:["No manual registration needed - the ",(0,a.jsx)(t.code,{children:"@State"})," annotation handles everything:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@State  // That's it! State is automatically registered\npublic class WorldState {\n    // State definition...\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"2-direct-component-access",children:"2. Direct Component Access"}),"\n",(0,a.jsx)(t.p,{children:"States are Spring components, accessible via dependency injection:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Component\npublic class MyAutomation {\n    private final HomeState homeState;\n    private final WorldState worldState;\n    \n    public MyAutomation(HomeState homeState, WorldState worldState) {\n        this.homeState = homeState;\n        this.worldState = worldState;\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"3-stateimage-with-modern-actionconfig",children:"3. StateImage with Modern ActionConfig"}),"\n",(0,a.jsx)(t.p,{children:"Use the fluent builder pattern with modern configuration:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'StateImage island = new StateImage.Builder()\n    .addPatterns("island_farm", "island_mine")  // Multiple patterns\n    // .setFixed(false)  // Method doesn\'t exist in current API\n    .setSearchRegionForAllPatterns(new Region(100, 100, 800, 600))\n    .build();\n\n// Add action history for testing (optional)\nisland.getPatterns().forEach(pattern -> \n    pattern.getActionHistory().addSnapshot(\n        new ActionRecord.Builder()\n            .setActionConfig(new PatternFindOptions.Builder()\n                .setStrategy(PatternFindOptions.Strategy.BEST)\n                .build())\n            .addMatch(new Match.Builder()\n                .setRegion(400, 300, 50, 50)\n                .setSimScore(0.90)\n                .build())\n            .setActionSuccess(true)\n            .build()\n    )\n);\n'})}),"\n",(0,a.jsx)(t.h2,{id:"defining-multiple-ui-elements",children:"Defining Multiple UI Elements"}),"\n",(0,a.jsx)(t.p,{children:"States typically contain multiple UI elements:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@State\n@Getter\npublic class WorldState {\n    private final StateImage minimap;\n    private final StateImage castle;\n    private final StateImage farms;\n    private final StateImage mines;\n    private final StateRegion gameArea;\n    \n    public WorldState() {\n        minimap = new StateImage.Builder()\n            .addPatterns("minimap")\n            // .setFixed(true)  // Method doesn\'t exist in current API\n            .setSearchRegionForAllPatterns(new Region(900, 0, 124, 124))\n            .build();\n            \n        castle = new StateImage.Builder()\n            .addPatterns("castle")\n            .build();\n            \n        farms = new StateImage.Builder()\n            .addPatterns("farms")\n            .build();\n            \n        mines = new StateImage.Builder()\n            .addPatterns("mines")\n            .build();\n            \n        // Define regions for area-based interactions\n        gameArea = new StateRegion.Builder()\n            .setSearchRegion(new Region(100, 100, 800, 600))\n            .build();\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"state-attributes",children:"State Attributes"}),"\n",(0,a.jsx)(t.h3,{id:"initial-state",children:"Initial State"}),"\n",(0,a.jsx)(t.p,{children:"Mark the entry point of your automation:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@State(initial = true)\npublic class LoginState {\n    // First state in the automation flow\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"state-names",children:"State Names"}),"\n",(0,a.jsx)(t.p,{children:"By default, the class name is used. Override if needed:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@State(name = "MainMenu")\npublic class HomeState {\n    // Will be registered as "MainMenu" instead of "HomeState"\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(t.h3,{id:"1-one-state-per-screen",children:"1. One State Per Screen"}),"\n",(0,a.jsx)(t.p,{children:"Each distinct screen or UI context should have its own state:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@State public class LoginState { }\n@State public class DashboardState { }  \n@State public class SettingsState { }\n"})}),"\n",(0,a.jsx)(t.h3,{id:"2-use-descriptive-names",children:"2. Use Descriptive Names"}),"\n",(0,a.jsx)(t.p,{children:"State names should clearly indicate the UI context:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Good\n@State public class ProductDetailsState { }\n@State public class ShoppingCartState { }\n\n// Avoid\n@State public class State1 { }\n@State public class PageState { }\n"})}),"\n",(0,a.jsx)(t.h3,{id:"3-leverage-fixed-positions",children:"3. Leverage Fixed Positions"}),"\n",(0,a.jsx)(t.p,{children:"Mark UI elements that don't move as fixed for faster matching:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'StateImage logo = new StateImage.Builder()\n    .addPatterns("company_logo")\n    // .setFixed(true)  // Method doesn\'t exist in current API - Always in same position\n    .setSearchRegionForAllPatterns(new Region(10, 10, 100, 50))\n    .build();\n'})}),"\n",(0,a.jsx)(t.h3,{id:"4-define-search-regions",children:"4. Define Search Regions"}),"\n",(0,a.jsx)(t.p,{children:"Constrain searches to improve performance:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'StateImage submitButton = new StateImage.Builder()\n    .addPatterns("submit")\n    .setSearchRegionForAllPatterns(new Region(0, 500, 1024, 268))  // Bottom area only\n    .build();\n'})}),"\n",(0,a.jsx)(t.h2,{id:"working-with-state-objects",children:"Working with State Objects"}),"\n",(0,a.jsx)(t.h3,{id:"stateimage",children:"StateImage"}),"\n",(0,a.jsx)(t.p,{children:"For image-based UI elements:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'StateImage button = new StateImage.Builder()\n    .addPatterns("button.png")\n    .setSearchRegionForAllPatterns(region)\n    .build();\n\n// Optionally add action history for mock testing\nbutton.getPatterns().get(0).getActionHistory().addSnapshot(\n    new ActionRecord.Builder()\n        .setActionConfig(new PatternFindOptions.Builder()\n            .setStrategy(PatternFindOptions.Strategy.BEST)\n            .setSimilarity(0.90)\n            .build())\n        .addMatch(new Match.Builder()\n            .setRegion(100, 200, 80, 30)\n            .setSimScore(0.92)\n            .build())\n        .setActionSuccess(true)\n        .build()\n);\n'})}),"\n",(0,a.jsx)(t.h3,{id:"stateregion",children:"StateRegion"}),"\n",(0,a.jsx)(t.p,{children:"For area-based interactions:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"StateRegion dropZone = new StateRegion.Builder()\n    .setSearchRegion(new Region(200, 200, 400, 300))\n    .build();\n"})}),"\n",(0,a.jsx)(t.h3,{id:"statelocation",children:"StateLocation"}),"\n",(0,a.jsx)(t.p,{children:"For specific coordinates:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"StateLocation centerPoint = new StateLocation.Builder()\n    .setLocation(new Location(512, 384))\n    .build();\n"})}),"\n",(0,a.jsx)(t.h3,{id:"statestring",children:"StateString"}),"\n",(0,a.jsx)(t.p,{children:"For text elements:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'StateString username = new StateString.Builder()\n    .setString("admin")\n    .setSearchRegion(new Region(300, 200, 200, 30))\n    .build();\n'})}),"\n",(0,a.jsx)(t.h2,{id:"actionrecords-for-mock-testing",children:"ActionRecords for Mock Testing"}),"\n",(0,a.jsx)(t.p,{children:"For integration testing, you can initialize states with ActionRecords that provide mock data:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.testing.data.ActionRecordTestUtils;\n\n@State\n@Getter\npublic class TestableState {\n    private final StateImage element;\n    \n    public TestableState() {\n        element = new StateImage.Builder()\n            .addPatterns("element.png")\n            .build();\n        \n        // Initialize with realistic test data\n        initializeForTesting();\n    }\n    \n    private void initializeForTesting() {\n        Pattern pattern = element.getPatterns().get(0);\n        ActionHistory history = pattern.getActionHistory();\n        \n        // Add multiple snapshots for varied test outcomes using the utility class\n        history.addSnapshot(ActionRecordTestUtils.createSuccessRecord(0.98, 100, 200));\n        history.addSnapshot(ActionRecordTestUtils.createSuccessRecord(0.95, 102, 201));\n        history.addSnapshot(ActionRecordTestUtils.createFailureRecord());\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": The ActionHistory class is currently transitioning from ActionOptions to ActionConfig. While the examples above show the intended modern API, some internal ActionHistory methods may still require ActionOptions.Action for backward compatibility."]}),"\n",(0,a.jsx)(t.h2,{id:"integration-with-spring-boot",children:"Integration with Spring Boot"}),"\n",(0,a.jsx)(t.p,{children:"States integrate seamlessly with Spring Boot's dependency injection:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Service\npublic class AutomationService {\n    private final HomeState homeState;\n    private final Action action;\n    \n    @Autowired\n    public AutomationService(HomeState homeState, Action action) {\n        this.homeState = homeState;\n        this.action = action;\n    }\n    \n    public void navigateToWorld() {\n        action.click(homeState.getToWorldButton());\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,a.jsx)(t.p,{children:"Here's a complete state definition for our Day of Towers automation:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@State(initial = true)\n@Getter\n@Slf4j\npublic class MainMenuState {\n    private final StateImage playButton;\n    private final StateImage settingsButton;\n    private final StateImage exitButton;\n    private final StateRegion menuArea;\n    \n    public MainMenuState() {\n        log.info("Initializing MainMenuState");\n        \n        playButton = new StateImage.Builder()\n            .addPatterns("play_button", "play_button_hover")\n            // .setFixed(true)  // Method doesn\'t exist in current API\n            .setSearchRegionForAllPatterns(new Region(400, 300, 224, 80))\n            .build();\n            \n        settingsButton = new StateImage.Builder()\n            .addPatterns("settings_icon")\n            // .setFixed(true)  // Method doesn\'t exist in current API\n            .setSearchRegionForAllPatterns(new Region(950, 10, 64, 64))\n            .build();\n            \n        exitButton = new StateImage.Builder()\n            .addPatterns("exit_button")\n            // .setFixed(true)  // Method doesn\'t exist in current API\n            .setSearchRegionForAllPatterns(new Region(400, 500, 224, 80))\n            .build();\n            \n        menuArea = new StateRegion.Builder()\n            .setSearchRegion(new Region(0, 0, 1024, 768))\n            .build();\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(t.p,{children:["Now that you understand states, learn about ",(0,a.jsx)(t.a,{href:"transitions",children:"Transitions"})," to connect states and create automation workflows."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);
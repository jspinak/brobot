"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1906],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(96540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},55347:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"core-library/testing/test-logging-architecture","title":"Test Logging Architecture","description":"Clean architectural patterns for test logging and configuration in Brobot","source":"@site/docs/03-core-library/testing/test-logging-architecture.md","sourceDirName":"03-core-library/testing","slug":"/core-library/testing/test-logging-architecture","permalink":"/brobot/docs/core-library/testing/test-logging-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/testing/test-logging-architecture.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Test Logging Architecture","description":"Clean architectural patterns for test logging and configuration in Brobot"},"sidebar":"docSidebar","previous":{"title":"Special Keys Guide for Brobot","permalink":"/brobot/docs/core-library/keyboard/special-keys-guide"},"next":{"title":"Enhanced Mock Testing System","permalink":"/brobot/docs/core-library/testing/enhanced-mocking"}}');var o=i(74848),r=i(28453);const s={sidebar_position:5,title:"Test Logging Architecture",description:"Clean architectural patterns for test logging and configuration in Brobot"},a="Test Logging Architecture",c={},g=[{value:"Overview",id:"overview",level:2},{value:"Key Components",id:"key-components",level:2},{value:"TestLoggerFactory",id:"testloggerfactory",level:3},{value:"TestConfigurationManager",id:"testconfigurationmanager",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"1. Basic Test Configuration",id:"1-basic-test-configuration",level:3},{value:"2. Spring Integration Test Configuration",id:"2-spring-integration-test-configuration",level:3},{value:"3. Custom Test Configuration",id:"3-custom-test-configuration",level:3},{value:"Architectural Benefits",id:"architectural-benefits",level:2},{value:"1. No Circular Dependencies",id:"1-no-circular-dependencies",level:3},{value:"2. Single Responsibility Principle",id:"2-single-responsibility-principle",level:3},{value:"3. No @Lazy Annotations Required",id:"3-no-lazy-annotations-required",level:3},{value:"4. Testable and Maintainable",id:"4-testable-and-maintainable",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Performance Tests",id:"performance-tests",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Spring Context Hanging",id:"spring-context-hanging",level:3},{value:"Missing Logger Beans",id:"missing-logger-beans",level:3},{value:"Static Initialization Conflicts",id:"static-initialization-conflicts",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"test-logging-architecture",children:"Test Logging Architecture"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"Brobot's test logging architecture follows Single Responsibility Principle (SRP) and clean architecture patterns to avoid circular dependencies and Spring initialization issues. This guide explains how to use the TestLoggerFactory and related components for proper test configuration."}),"\n",(0,o.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,o.jsx)(n.h3,{id:"testloggerfactory",children:"TestLoggerFactory"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TestLoggerFactory"})," is a factory class that creates and wires logging components in the correct order, ensuring no circular dependencies and proper initialization."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Location"}),": ",(0,o.jsx)(n.code,{children:"library-test/src/test/java/io/github/jspinak/brobot/test/logging/TestLoggerFactory.java"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Single Responsibility"}),": Create and wire logger components for tests"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Component\npublic class TestLoggerFactory {\n    \n    public LoggingSystem createTestLoggingSystem(\n            ActionLogger actionLogger,\n            LoggingVerbosityConfig verbosityConfig) {\n        \n        // Components are created in dependency order\n        LoggingContext context = new LoggingContext();\n        LogSink logSink = new NoOpLogSink();\n        ConsoleFormatter formatter = new ConsoleFormatter(verbosityConfig);\n        MessageRouter router = new MessageRouter(actionLogger, verbosityConfig, formatter);\n        BrobotLogger logger = new BrobotLogger(context, router);\n        ConsoleReporterInitializer reporterInit = new ConsoleReporterInitializer(logger);\n        \n        return new LoggingSystem(context, logSink, formatter, router, logger, reporterInit);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"testconfigurationmanager",children:"TestConfigurationManager"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TestConfigurationManager"})," initializes the test environment before Spring context loads, preventing static initialization conflicts."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Location"}),": ",(0,o.jsx)(n.code,{children:"library-test/src/test/java/io/github/jspinak/brobot/test/config/TestConfigurationManager.java"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Single Responsibility"}),": Initialize test environment before Spring context"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class TestConfigurationManager implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n    \n    @Override\n    public void initialize(ConfigurableApplicationContext applicationContext) {\n        // Set system properties before any beans are created\n        System.setProperty("brobot.preserve.headless.setting", "true");\n        System.setProperty("java.awt.headless", "true");\n        \n        // Configure ExecutionEnvironment based on test type\n        String testType = System.getProperty("brobot.test.type", "unit");\n        boolean isIntegrationTest = "integration".equals(testType);\n        \n        ExecutionEnvironment env = ExecutionEnvironment.builder()\n            .mockMode(!isIntegrationTest)\n            .forceHeadless(true)\n            .allowScreenCapture(false)\n            .build();\n        \n        ExecutionEnvironment.setInstance(env);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,o.jsx)(n.h3,{id:"1-basic-test-configuration",children:"1. Basic Test Configuration"}),"\n",(0,o.jsx)(n.p,{children:"For tests that need logging but don't require Spring context:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class SimpleLoggingTest extends BrobotTestBase {\n    \n    private BrobotLogger logger;\n    \n    @BeforeEach\n    void setUp() {\n        super.setupTest();\n        \n        // Create logger using factory\n        TestLoggerFactory factory = new TestLoggerFactory();\n        ActionLogger actionLogger = new MockActionLogger();\n        LoggingVerbosityConfig config = new LoggingVerbosityConfig();\n        \n        TestLoggerFactory.LoggingSystem system = \n            factory.createTestLoggingSystem(actionLogger, config);\n        \n        this.logger = system.getLogger();\n    }\n    \n    @Test\n    void testLogging() {\n        logger.info("Test message");\n        // Your test assertions\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-spring-integration-test-configuration",children:"2. Spring Integration Test Configuration"}),"\n",(0,o.jsx)(n.p,{children:"For Spring-based integration tests, use the provided configuration classes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(classes = BrobotTestApplication.class)\n@ContextConfiguration(initializers = TestConfigurationManager.class)\n@Import({TestActionConfig.class, MockBrobotLoggerConfig.class})\npublic class IntegrationTest extends BrobotIntegrationTestBase {\n    \n    @Autowired\n    private BrobotLogger logger;\n    \n    @Autowired\n    private ActionLogger actionLogger;\n    \n    @Test\n    void testWithSpringContext() {\n        // Logger is automatically configured via MockBrobotLoggerConfig\n        logger.info("Integration test running");\n        \n        // Use action logger for automation events\n        LogData logData = actionLogger.logAction("session-1", result, collection);\n        assertNotNull(logData);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-custom-test-configuration",children:"3. Custom Test Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Create your own test configuration using the factory pattern:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@TestConfiguration\npublic class CustomTestLoggerConfig {\n    \n    @Bean\n    public TestLoggerFactory.LoggingSystem customLoggingSystem(\n            ActionLogger actionLogger,\n            LoggingVerbosityConfig verbosityConfig) {\n        \n        // Customize configuration\n        verbosityConfig.setLevel(LogLevel.DEBUG);\n        verbosityConfig.setIncludeTimestamp(true);\n        \n        TestLoggerFactory factory = new TestLoggerFactory();\n        return factory.createTestLoggingSystem(actionLogger, verbosityConfig);\n    }\n    \n    @Bean\n    @Primary\n    public BrobotLogger customLogger(TestLoggerFactory.LoggingSystem system) {\n        return system.getLogger();\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"architectural-benefits",children:"Architectural Benefits"}),"\n",(0,o.jsx)(n.h3,{id:"1-no-circular-dependencies",children:"1. No Circular Dependencies"}),"\n",(0,o.jsx)(n.p,{children:"The factory pattern ensures components are created in the correct order:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"LoggingContext \u2192 ConsoleFormatter \u2192 MessageRouter \u2192 BrobotLogger \u2192 ConsoleReporterInitializer\n"})}),"\n",(0,o.jsx)(n.p,{children:"Each arrow represents a one-way dependency with no cycles."}),"\n",(0,o.jsx)(n.h3,{id:"2-single-responsibility-principle",children:"2. Single Responsibility Principle"}),"\n",(0,o.jsx)(n.p,{children:"Each component has a clear, single responsibility:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TestLoggerFactory"}),": Create logger components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"TestConfigurationManager"}),": Initialize environment"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"MockBrobotLoggerConfig"}),": Expose beans to Spring"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"LoggingSystem"}),": Container for logger components"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-no-lazy-annotations-required",children:"3. No @Lazy Annotations Required"}),"\n",(0,o.jsxs)(n.p,{children:["The factory pattern ensures proper initialization order, eliminating the need for ",(0,o.jsx)(n.code,{children:"@Lazy"})," annotations:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Clean approach with factory\n@Bean\npublic MessageRouter messageRouter(TestLoggerFactory.LoggingSystem system) {\n    return system.getRouter(); // Already properly initialized\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-testable-and-maintainable",children:"4. Testable and Maintainable"}),"\n",(0,o.jsx)(n.p,{children:"The factory pattern makes it easy to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Create loggers for different test scenarios"}),"\n",(0,o.jsx)(n.li,{children:"Mock specific components"}),"\n",(0,o.jsx)(n.li,{children:"Test logger configuration independently"}),"\n",(0,o.jsx)(n.li,{children:"Maintain consistent initialization order"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,o.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,o.jsx)(n.p,{children:"Use mock loggers with minimal configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"TestLoggerFactory factory = new TestLoggerFactory();\nMockActionLogger mockLogger = new MockActionLogger();\nLoggingVerbosityConfig config = new LoggingVerbosityConfig();\nconfig.setLevel(LogLevel.ERROR); // Only log errors in unit tests\n\nTestLoggerFactory.LoggingSystem system = \n    factory.createTestLoggingSystem(mockLogger, config);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,o.jsx)(n.p,{children:"Use full logging with proper Spring configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@SpringBootTest\n@Import(MockBrobotLoggerConfig.class)\nclass IntegrationTest {\n    @Autowired\n    private BrobotLogger logger;\n    // Full logging system available\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"performance-tests",children:"Performance Tests"}),"\n",(0,o.jsx)(n.p,{children:"Use NoOp loggers for minimal overhead:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"TestLoggerFactory factory = new TestLoggerFactory();\nNoOpActionLogger noOpLogger = new NoOpActionLogger();\nLoggingVerbosityConfig config = new LoggingVerbosityConfig();\nconfig.setEnabled(false); // Disable all logging\n\nTestLoggerFactory.LoggingSystem system = \n    factory.createTestLoggingSystem(noOpLogger, config);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Use TestConfigurationManager for Early Initialization"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Always use ",(0,o.jsx)(n.code,{children:"@ContextConfiguration(initializers = TestConfigurationManager.class)"})," for Spring tests"]}),"\n",(0,o.jsx)(n.li,{children:"This ensures environment is configured before any beans are created"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Prefer Factory Pattern Over Direct Construction"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.code,{children:"TestLoggerFactory"})," instead of manually constructing logger components"]}),"\n",(0,o.jsx)(n.li,{children:"This ensures proper initialization order"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Separate Concerns in Test Configuration"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Logger configuration: ",(0,o.jsx)(n.code,{children:"MockBrobotLoggerConfig"})]}),"\n",(0,o.jsxs)(n.li,{children:["Action configuration: ",(0,o.jsx)(n.code,{children:"TestActionConfig"})]}),"\n",(0,o.jsxs)(n.li,{children:["Environment setup: ",(0,o.jsx)(n.code,{children:"TestConfigurationManager"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Use Appropriate Logger for Test Type"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Unit tests: ",(0,o.jsx)(n.code,{children:"MockActionLogger"})]}),"\n",(0,o.jsxs)(n.li,{children:["Integration tests: Full logger with ",(0,o.jsx)(n.code,{children:"NoOpLogSink"})]}),"\n",(0,o.jsxs)(n.li,{children:["Performance tests: ",(0,o.jsx)(n.code,{children:"NoOpActionLogger"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.h3,{id:"spring-context-hanging",children:"Spring Context Hanging"}),"\n",(0,o.jsx)(n.p,{children:"If tests hang during Spring context initialization:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Ensure ",(0,o.jsx)(n.code,{children:"TestConfigurationManager"})," is included in ",(0,o.jsx)(n.code,{children:"@ContextConfiguration"})]}),"\n",(0,o.jsxs)(n.li,{children:["Check that no ",(0,o.jsx)(n.code,{children:"@PostConstruct"})," methods are blocking"]}),"\n",(0,o.jsx)(n.li,{children:"Verify all configuration classes follow the factory pattern"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"missing-logger-beans",children:"Missing Logger Beans"}),"\n",(0,o.jsx)(n.p,{children:"If Spring can't find logger beans:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Import ",(0,o.jsx)(n.code,{children:"MockBrobotLoggerConfig"})," in your test"]}),"\n",(0,o.jsxs)(n.li,{children:["Ensure ",(0,o.jsx)(n.code,{children:"TestLoggerFactory"})," is in the classpath"]}),"\n",(0,o.jsxs)(n.li,{children:["Check that ",(0,o.jsx)(n.code,{children:"ActionLogger"})," implementation is available"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"static-initialization-conflicts",children:"Static Initialization Conflicts"}),"\n",(0,o.jsxs)(n.p,{children:["If you see conflicts with ",(0,o.jsx)(n.code,{children:"ExecutionEnvironment"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Set ",(0,o.jsx)(n.code,{children:"brobot.preserve.headless.setting=true"})," system property"]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.code,{children:"TestConfigurationManager"})," for early initialization"]}),"\n",(0,o.jsxs)(n.li,{children:["Don't modify ",(0,o.jsx)(n.code,{children:"ExecutionEnvironment"})," in ",(0,o.jsx)(n.code,{children:"@PostConstruct"})," methods"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/testing/enhanced-mocking",children:"Enhanced Mocking"})," - Mock mode configuration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/testing/integration-testing",children:"Integration Testing"})," - Integration test setup"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/testing/ci-cd-testing",children:"CI/CD Testing"})," - Testing in CI environments"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/brobot/docs/testing/test-utilities",children:"Test Utilities"})," - Testing helper classes"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9988],{28453:(n,i,e)=>{e.d(i,{R:()=>s,x:()=>r});var t=e(96540);const o={},l=t.createContext(o);function s(n){const i=t.useContext(l);return t.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(l.Provider,{value:i},n.children)}},96693:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>a,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"logging/automatic-action-logging","title":"Automatic Action Logging","description":"Streamline your automation code with built-in logging capabilities","source":"@site/docs/07-logging/automatic-action-logging.md","sourceDirName":"07-logging","slug":"/logging/automatic-action-logging","permalink":"/brobot/docs/logging/automatic-action-logging","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/07-logging/automatic-action-logging.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"Automatic Action Logging","description":"Streamline your automation code with built-in logging capabilities"},"sidebar":"docSidebar","previous":{"title":"Logging Migration Guide","permalink":"/brobot/docs/logging/logging-migration-guide"},"next":{"title":"Logging Architecture","permalink":"/brobot/docs/logging/logging-architecture"}}');var o=e(74848),l=e(28453);const s={sidebar_position:10,title:"Automatic Action Logging",description:"Streamline your automation code with built-in logging capabilities"},r="Automatic Action Logging",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Logging Best Practices",id:"logging-best-practices",level:2},{value:"1. Use Structured Logging",id:"1-use-structured-logging",level:3},{value:"2. Log at Appropriate Levels",id:"2-log-at-appropriate-levels",level:3},{value:"3. Include Context",id:"3-include-context",level:3},{value:"Action Chaining",id:"action-chaining",level:2},{value:"Basic Chaining with ActionChainOptions",id:"basic-chaining-with-actionchainoptions",level:3},{value:"Understanding ObjectCollections",id:"understanding-objectcollections",level:3},{value:"Chaining Strategies",id:"chaining-strategies",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"Form Automation with Logging",id:"form-automation-with-logging",level:3},{value:"Login Workflow",id:"login-workflow",level:3},{value:"Integration with Spring Boot",id:"integration-with-spring-boot",level:2},{value:"Summary",id:"summary",level:2}];function d(n){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"automatic-action-logging",children:"Automatic Action Logging"})}),"\n",(0,o.jsx)(i.p,{children:"Brobot provides logging capabilities for all actions through standard logging frameworks. This guide shows you how to implement logging in your automation projects."}),"\n",(0,o.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(i.p,{children:"Brobot integrates with SLF4J/Logback for logging. Instead of built-in logging methods, use standard logging practices:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'import lombok.extern.slf4j.Slf4j;\n\n@Slf4j\npublic class MyAutomation {\n    \n    public void performAction() {\n        log.info("Searching for submit button...");\n        \n        PatternFindOptions findOptions = new PatternFindOptions.Builder()\n            .setSimilarity(0.8)\n            .build();\n            \n        ActionResult result = action.perform(findOptions, button);\n        \n        if (result.isSuccess()) {\n            log.info("Submit button found");\n        } else {\n            log.warn("Submit button not found");\n        }\n        \n        log.info("Search completed in {}ms", result.getDuration().toMillis());\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"logging-best-practices",children:"Logging Best Practices"}),"\n",(0,o.jsx)(i.h3,{id:"1-use-structured-logging",children:"1. Use Structured Logging"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'log.info("Action completed", \n    "action", actionType,\n    "target", targetName,\n    "duration", duration,\n    "success", result.isSuccess()\n);\n'})}),"\n",(0,o.jsx)(i.h3,{id:"2-log-at-appropriate-levels",children:"2. Log at Appropriate Levels"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"DEBUG"}),": Detailed execution flow"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"INFO"}),": Normal operation progress"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"WARN"}),": Recoverable issues"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"ERROR"}),": Failures requiring attention"]}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"3-include-context",children:"3. Include Context"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'MDC.put("workflow", "login");\nMDC.put("step", "credentials");\ntry {\n    // Perform actions\n    log.info("Entering username");\n} finally {\n    MDC.clear();\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"action-chaining",children:"Action Chaining"}),"\n",(0,o.jsx)(i.h3,{id:"basic-chaining-with-actionchainoptions",children:"Basic Chaining with ActionChainOptions"}),"\n",(0,o.jsxs)(i.p,{children:["Action chaining must be done through ",(0,o.jsx)(i.code,{children:"ActionChainOptions"}),", not individual option builders:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Create the initial action\nPatternFindOptions findInput = new PatternFindOptions.Builder()\n    .setSimilarity(0.9)\n    .build();\n\n// Build the chain\nActionChainOptions chain = new ActionChainOptions.Builder(findInput)\n    .then(new ClickOptions.Builder()\n        .setPauseAfterEnd(0.5)\n        .build())\n    .then(new TypeOptions.Builder()\n        .setTypeDelay(0.05)\n        .build())\n    .build();\n\n// Execute the chain\nObjectCollection targets = new ObjectCollection.Builder()\n    .withImages(inputField)\n    .withStrings("Hello, World!")\n    .build();\n\nlog.info("Starting input chain");\nActionResult result = action.perform(chain, targets);\nlog.info("Chain completed: {}", result.isSuccess() ? "success" : "failed");\n'})}),"\n",(0,o.jsx)(i.h3,{id:"understanding-objectcollections",children:"Understanding ObjectCollections"}),"\n",(0,o.jsx)(i.p,{children:"ObjectCollections are containers that hold different types of automation targets:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Find/Click actions"}),": Use StateImages, Regions, or Locations"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Type actions"}),": Use Strings from the collection"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Drag actions"}),": Use source and target Locations/Regions"]}),"\n"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Create a collection with mixed types\nObjectCollection targets = new ObjectCollection.Builder()\n    .withImages(inputField)           // Used by Find action\n    .withStrings("Hello, World!")     // Used by Type action\n    .build();\n'})}),"\n",(0,o.jsx)(i.h3,{id:"chaining-strategies",children:"Chaining Strategies"}),"\n",(0,o.jsx)(i.p,{children:"ActionChainOptions supports two execution strategies:"}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"NESTED"})," (default): Each action searches within the results of the previous action"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"new ActionChainOptions.Builder(initialAction)\n    .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n    .then(nextAction)\n    .build()\n"})}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"CONFIRM"}),": Each action validates/confirms the results of the previous action"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"new ActionChainOptions.Builder(initialAction)\n    .setStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)\n    .then(confirmAction)\n    .build()\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,o.jsx)(i.h3,{id:"form-automation-with-logging",children:"Form Automation with Logging"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Slf4j\n@Component\npublic class FormAutomation {\n    \n    @Autowired\n    private Action action;\n    \n    public void fillAndSubmitForm(StateImage firstNameField, StateImage submitButton) {\n        log.info("Starting form automation");\n        \n        // Create form data\n        ObjectCollection formData = new ObjectCollection.Builder()\n            .withImages(firstNameField, submitButton)\n            .withStrings("John", "Doe", "john.doe@example.com")\n            .build();\n        \n        // Build the action chain\n        PatternFindOptions findFirstName = new PatternFindOptions.Builder()\n            .build();\n            \n        ActionChainOptions fillForm = new ActionChainOptions.Builder(findFirstName)\n            .then(new ClickOptions.Builder().build())\n            .then(new TypeOptions.Builder().build())\n            .then(new TypeOptions.Builder().build()) // Tab key\n            .then(new TypeOptions.Builder().build()) // Last name\n            .then(new TypeOptions.Builder().build()) // Tab key\n            .then(new TypeOptions.Builder().build()) // Email\n            .then(new PatternFindOptions.Builder().build()) // Find submit\n            .then(new ClickOptions.Builder().build()) // Click submit\n            .build();\n        \n        // Execute with logging\n        log.info("Filling form fields");\n        ActionResult result = action.perform(fillForm, formData);\n        \n        if (result.isSuccess()) {\n            log.info("Form submitted successfully");\n        } else {\n            log.error("Form submission failed");\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"login-workflow",children:"Login Workflow"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Slf4j\n@Component  \npublic class LoginWorkflow {\n    \n    @Autowired\n    private Action action;\n    \n    public boolean login(String username, String password) {\n        log.info("Starting login workflow for user: {}", username);\n        \n        StateImage usernameField = new StateImage.Builder()\n            .addPattern("username_field.png")\n            .build();\n            \n        StateImage passwordField = new StateImage.Builder()\n            .addPattern("password_field.png")\n            .build();\n            \n        StateImage loginButton = new StateImage.Builder()\n            .addPattern("login_button.png")\n            .build();\n        \n        try {\n            // Find and fill username\n            log.debug("Looking for username field");\n            ActionResult userResult = action.perform(\n                new PatternFindOptions.Builder().build(), \n                usernameField\n            );\n            \n            if (!userResult.isSuccess()) {\n                log.error("Username field not found");\n                return false;\n            }\n            \n            log.debug("Clicking username field");\n            action.perform(new ClickOptions.Builder().build(), usernameField);\n            \n            log.debug("Typing username");\n            action.perform(\n                new TypeOptions.Builder().build(),\n                new ObjectCollection.Builder().withStrings(username).build()\n            );\n            \n            // Find and fill password\n            log.debug("Looking for password field");\n            ActionResult passResult = action.perform(\n                new PatternFindOptions.Builder().build(),\n                passwordField\n            );\n            \n            if (!passResult.isSuccess()) {\n                log.error("Password field not found");\n                return false;\n            }\n            \n            log.debug("Clicking password field");\n            action.perform(new ClickOptions.Builder().build(), passwordField);\n            \n            log.debug("Typing password");\n            action.perform(\n                new TypeOptions.Builder().build(),\n                new ObjectCollection.Builder().withStrings(password).build()\n            );\n            \n            // Submit\n            log.debug("Clicking login button");\n            ActionResult loginResult = action.perform(\n                new ClickOptions.Builder()\n                    .setPauseAfterEnd(2.0) // Wait for login\n                    .build(),\n                loginButton\n            );\n            \n            if (loginResult.isSuccess()) {\n                log.info("Login successful");\n                return true;\n            } else {\n                log.error("Failed to click login button");\n                return false;\n            }\n            \n        } catch (Exception e) {\n            log.error("Login workflow failed", e);\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"integration-with-spring-boot",children:"Integration with Spring Boot"}),"\n",(0,o.jsxs)(i.p,{children:["Configure logging in your ",(0,o.jsx)(i.code,{children:"application.yml"}),":"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-yaml",children:'logging:\n  level:\n    com.example: DEBUG\n    io.github.jspinak.brobot: INFO\n  pattern:\n    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"\n  file:\n    name: automation.log\n'})}),"\n",(0,o.jsx)(i.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(i.p,{children:["While Brobot doesn't have built-in logging methods like ",(0,o.jsx)(i.code,{children:"withBeforeActionLog()"}),", it integrates seamlessly with standard Java logging frameworks. Use SLF4J with Logback or Log4j2 for comprehensive logging in your automation projects."]}),"\n",(0,o.jsx)(i.p,{children:"Key points:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["Use ",(0,o.jsx)(i.code,{children:"@Slf4j"})," annotation for easy logger access"]}),"\n",(0,o.jsx)(i.li,{children:"Log at appropriate levels (DEBUG, INFO, WARN, ERROR)"}),"\n",(0,o.jsx)(i.li,{children:"Include context with MDC for better debugging"}),"\n",(0,o.jsxs)(i.li,{children:["Chain actions using ",(0,o.jsx)(i.code,{children:"ActionChainOptions.Builder"})]}),"\n",(0,o.jsxs)(i.li,{children:["Pass text to Type actions via ",(0,o.jsx)(i.code,{children:"ObjectCollection.withStrings()"})]}),"\n"]})]})}function g(n={}){const{wrapper:i}={...(0,l.R)(),...n.components};return i?(0,o.jsx)(i,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2533],{7064:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"no-code-automation/configuration-website/configuration-schema/schema-overview","title":"Schema Overview","description":"Brobot Runner uses two complementary JSON schemas to define your automation projects. Understanding these schemas is","source":"@site/docs/02-no-code-automation/configuration-website/configuration-schema/schema-overview.md","sourceDirName":"02-no-code-automation/configuration-website/configuration-schema","slug":"/no-code-automation/configuration-website/configuration-schema/schema-overview","permalink":"/brobot/docs/no-code-automation/configuration-website/configuration-schema/schema-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/02-no-code-automation/configuration-website/configuration-schema/schema-overview.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"Brobot Configuration Website","permalink":"/brobot/docs/no-code-automation/configuration-website/website-overview"},"next":{"title":"Project Schema","permalink":"/brobot/docs/no-code-automation/configuration-website/configuration-schema/project-schema"}}');var i=t(74848),s=t(28453);const r={sidebar_position:3},a="Schema Overview",c={},h=[{value:"Schema Types",id:"schema-types",level:2},{value:"Relationship Between Schemas",id:"relationship-between-schemas",level:3},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Working with the Schemas",id:"working-with-the-schemas",level:2},{value:"Project Creation Workflow",id:"project-creation-workflow",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Integration with Brobot Runner",id:"integration-with-brobot-runner",level:2}];function l(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"schema-overview",children:"Schema Overview"})}),"\n",(0,i.jsx)(n.p,{children:"Brobot Runner uses two complementary JSON schemas to define your automation projects. Understanding these schemas is\nessential for creating and modifying automation configurations effectively."}),"\n",(0,i.jsx)(n.h2,{id:"schema-types",children:"Schema Types"}),"\n",(0,i.jsx)(n.p,{children:"Brobot Runner configuration is defined by two distinct but related schemas:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Project Schema"})," - Defines the structural components of automation (states, transitions, UI elements)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automation DSL Schema"})," - Defines the programming language aspects (functions, statements, expressions)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"relationship-between-schemas",children:"Relationship Between Schemas"}),"\n",(0,i.jsx)(n.p,{children:'The Project Schema defines "what" exists in your automation environment, while the Automation DSL Schema defines "how"\nyour automation behaves. Together, they provide a complete definition of your automation project:'}),"\n",(0,i.jsx)(n.p,{children:"Project Schema (structure) + Automation DSL (behavior) = Complete Automation Solution"}),"\n",(0,i.jsx)(n.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"States"})," represent distinct screens or conditions in your application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transitions"})," define how to move between states using actions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Actions"})," are operations performed on the GUI (clicking, typing, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Functions"})," contain custom automation logic using the DSL"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"working-with-the-schemas",children:"Working with the Schemas"}),"\n",(0,i.jsx)(n.h3,{id:"project-creation-workflow",children:"Project Creation Workflow"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Define states with their visual elements (images, regions, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Create state transitions that define how to move between states"}),"\n",(0,i.jsx)(n.li,{children:"Define automation functions with custom logic"}),"\n",(0,i.jsx)(n.li,{children:"Configure UI elements (buttons) that trigger automation functions"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organize by feature"}),": Group related states and transitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive names"}),": Make state and function names self-explanatory"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reuse components"}),": Define common patterns and elements once"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep functions focused"}),": Each function should do one thing well"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test incrementally"}),": Validate small changes before making larger ones"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-brobot-runner",children:"Integration with Brobot Runner"}),"\n",(0,i.jsx)(n.p,{children:"The defined schemas are used by both the configuration website and desktop runner application:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration Website"}),": Used to create and edit your automation project"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Desktop Runner"}),": Executes the automation based on the configuration"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);
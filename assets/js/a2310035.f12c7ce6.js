"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4306],{25566:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/motion1-b02d4698b4c95a37039fe657682d6818.png"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},47011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"core-library/guides/finding-objects/movement","title":"Motion","description":"Finding moving objects is available with version 1.0.6.","source":"@site/docs/03-core-library/guides/finding-objects/movement.md","sourceDirName":"03-core-library/guides/finding-objects","slug":"/core-library/guides/finding-objects/movement","permalink":"/brobot/docs/core-library/guides/finding-objects/movement","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/finding-objects/movement.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docSidebar","previous":{"title":"Combining Find Operations","permalink":"/brobot/docs/core-library/guides/finding-objects/combining-finds"},"next":{"title":"Labeling Images with Brobot","permalink":"/brobot/docs/core-library/guides/labeling/labeling-intro"}}');var o=t(74848),s=t(28453);const r={sidebar_position:3},c="Motion",a={},l=[{value:"Action Results",id:"action-results",level:2},{value:"Using MotionFindOptions",id:"using-motionfindoptions",level:2},{value:"Input Methods",id:"input-methods",level:2},{value:"Example 1: Using files",id:"example-1-using-files",level:3},{value:"Example 2: Using Brobot images",id:"example-2-using-brobot-images",level:3},{value:"Example 3: Using the screen",id:"example-3-using-the-screen",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Basic Options",id:"basic-options",level:3},{value:"Example with all options:",id:"example-with-all-options",level:3},{value:"Working with Motion Results",id:"working-with-motion-results",level:2},{value:"Practical Example: Tracking Game Characters",id:"practical-example-tracking-game-characters",level:2},{value:"Tips for Better Motion Detection",id:"tips-for-better-motion-detection",level:2},{value:"Integration with Other Actions",id:"integration-with-other-actions",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"motion",children:"Motion"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Finding moving objects is available with version 1.0.6."})}),"\n",(0,o.jsx)(n.p,{children:"Brobot has functionality for finding moving objects. Movement is detected from three scenes, either\nprovided to the function as files, as Brobot images, or taken from the screen. The reason three scenes is used is that\nchanged pixels between two scenes does not tell us the direction of movement. Three scenes allows us to\nascertain at which point the object started and where it ended."}),"\n",(0,o.jsx)(n.h2,{id:"action-results",children:"Action Results"}),"\n",(0,o.jsx)(n.p,{children:"The results of a motion finding action are stored in the ActionResult object. The matches returned are those in the last\nscene. The matches for each scene can be found within the ActionResult object, in the corresponding SceneAnalysis\nobjects (ActionResult -> SceneAnalysisCollection -> SceneAnalysis objects). If action history is\nenabled, the analysis of each scene will be saved to the history folder. Below is an example of what would appear\nin the history folder for a motion finding action:"}),"\n",(0,o.jsx)(n.p,{children:"Objects are identified with a pink box. You may have to zoom in to see the boxes."}),"\n",(0,o.jsxs)(n.p,{children:["In the first scene we see the three objects that were identified in their starting positions.\nTwo people were correctly identified and one was not. The moving fire instead was identified instead of the\nthird person because the third person moves behind a house in the last scene and confuses the algorithm.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.img,{alt:"motion_history.png",src:t(25566).A+"",width:"1974",height:"1080"})]}),"\n",(0,o.jsxs)(n.p,{children:["The second scene identifies all three people correctly, including the one that moves into the forest.\nThe game shows an outline of the person behind the trees, allowing the Brobot algorithm to follow it.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.img,{alt:"motion_history.png",src:t(62293).A+"",width:"1974",height:"1080"})]}),"\n",(0,o.jsxs)(n.p,{children:["In the third scene, the third person disappears behind a house, and its absence is selected as the match.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.img,{alt:"motion_history.png",src:t(50668).A+"",width:"1974",height:"1080"})]}),"\n",(0,o.jsx)(n.h2,{id:"using-motionfindoptions",children:"Using MotionFindOptions"}),"\n",(0,o.jsx)(n.p,{children:"The new MotionFindOptions class provides a type-safe way to configure motion detection:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"MotionFindOptions motionOptions = new MotionFindOptions.Builder()\n        .setMaxMovement(100)  // Maximum pixels an object can move between scenes\n        .setMinArea(50)       // Minimum area to filter out noise\n        .setMaxMatchesToActOn(10)  // Limit number of moving objects to track\n        .build();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"input-methods",children:"Input Methods"}),"\n",(0,o.jsx)(n.p,{children:"The three different input methods for finding motion:"}),"\n",(0,o.jsx)(n.h3,{id:"example-1-using-files",children:"Example 1: Using files"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Configure in application.yml:\n// brobot:\n//   core:\n//     mock: true\n//   screenshot:\n//     save-history: true\n// \n// Or in application.properties:\n// brobot.core.mock=true\n// brobot.screenshot.save-history=true\n//\n// Screenshots should be placed in the directory configured by\n// brobot.screenshot.path (default: screenshots/)\n\nMotionFindOptions motionOptions = new MotionFindOptions.Builder()\n        .setMaxMovement(100)\n        .setMinArea(50)\n        .setMaxMatchesToActOn(10)\n        .setSimilarity(0.7)  // Similarity threshold for matching objects across scenes\n        .build();\n\nObjectCollection objectCollection = new ObjectCollection.Builder().build();\n\n// Execute motion finding\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(motionOptions, objectCollection);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-2-using-brobot-images",children:"Example 2: Using Brobot images"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Ensure these are configured in your application properties:\n// brobot.screenshot.save-history=true\n// brobot.core.mock=true\n\nMotionFindOptions motionOptions = new MotionFindOptions.Builder()\n        .setMaxMovement(100)\n        .setMinArea(50)\n        .setMaxMatchesToActOn(10)\n        .build();\n\n// Provide scenes as Brobot images\nObjectCollection screenshots = new ObjectCollection.Builder()\n        .withScenes(\n            motionState.getScreen1(), \n            motionState.getScreen2(), \n            motionState.getScreen3()\n        )\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(motionOptions, screenshots);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-3-using-the-screen",children:"Example 3: Using the screen"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// Configure for live mode in application properties:\n// brobot.core.mock=false\n\nMotionFindOptions motionOptions = new MotionFindOptions.Builder()\n        .setMaxMovement(100)\n        .setMinArea(50)\n        .setMaxMatchesToActOn(10)\n        .setPauseBeforeBegin(1.0)  // Wait before capturing first scene\n        .setPauseBetweenActions(0.5)  // Pause between scene captures\n        .build();\n\nObjectCollection objectCollection = new ObjectCollection.Builder().build();\n\n// The motion finding action will capture three screenshots from the screen\n// with appropriate delays between captures\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(motionOptions, objectCollection);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,o.jsx)(n.h3,{id:"basic-options",children:"Basic Options"}),"\n",(0,o.jsx)(n.p,{children:"The MotionFindOptions class provides these configuration options:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"MaxMovement"}),": Limits the distance an object can move between scenes. By limiting the distance, you can eliminate false results caused by some movement in the same direction of the target object, but farther away. Set using ",(0,o.jsx)(n.code,{children:"setMaxMovement(int)"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"MinArea"}),": Limits the results to objects of a certain size. Often there are small changes on screen that we don't want to follow, like the moving of grass or clouds. This is configured through ",(0,o.jsx)(n.code,{children:"setMinArea(int)"})," in the base options."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"MaxMatchesToActOn"}),": Limits the number of moving objects to track. Set using ",(0,o.jsx)(n.code,{children:"setMaxMatchesToActOn(int)"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Similarity"}),": The similarity threshold for matching objects across scenes. Set using ",(0,o.jsx)(n.code,{children:"setSimilarity(double)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example-with-all-options",children:"Example with all options:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"MotionFindOptions advancedMotion = new MotionFindOptions.Builder()\n        .setMaxMovement(150)     // Maximum pixels moved between scenes\n        .setMinArea(100)         // Minimum area of moving objects\n        .setMaxArea(5000)        // Maximum area of moving objects  \n        .setMaxMatchesToActOn(5) // Track up to 5 moving objects\n        .setSimilarity(0.75)     // 75% similarity required to match objects\n        .setIllustrate(MotionFindOptions.Illustrate.YES)  // Save visual history\n        .build();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"working-with-motion-results",children:"Working with Motion Results"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'MotionFindOptions motionOptions = new MotionFindOptions.Builder()\n        .setMaxMovement(100)\n        .setMaxMatchesToActOn(10)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult motionResult = action.perform(motionOptions, objectCollection);\n\n// Get all moving objects\nList<Match> movingObjects = motionResult.getMatchList();\nSystem.out.println("Found " + movingObjects.size() + " moving objects");\n\n// Access scene-by-scene analysis\nSceneAnalysisCollection scenes = motionResult.getSceneAnalysis();\nif (scenes != null) {\n    for (SceneAnalysis scene : scenes.getScenes()) {\n        System.out.println("Scene " + scene.getSceneNumber() + \n                          " found " + scene.getMatches().size() + " objects");\n        \n        // Get matches for this scene\n        for (Match match : scene.getMatches()) {\n            System.out.println("  Object at " + match.getRegion());\n        }\n    }\n}\n\n// Check if motion detection was successful\nif (motionResult.isSuccess()) {\n    System.out.println("Motion detection successful!");\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"practical-example-tracking-game-characters",children:"Practical Example: Tracking Game Characters"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Configure motion detection for tracking characters\nMotionFindOptions trackCharacters = new MotionFindOptions.Builder()\n        .setMaxMovement(200)    // Characters can move up to 200 pixels\n        .setMinArea(500)        // Character sprites are at least 500 pixels\n        .setMaxArea(10000)      // But no larger than 10000 pixels\n        .setMaxMatchesToActOn(3) // Track up to 3 characters\n        .setSimilarity(0.8)     // High similarity for character matching\n        .build();\n\n// Configure for mock mode in application properties:\n// brobot.core.mock=true\n// Place screenshots in the directory configured by brobot.screenshot.path\n\n// Execute motion tracking\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult characters = action.perform(\n    trackCharacters, \n    new ObjectCollection.Builder().build()\n);\n\n// Process results\nfor (Match character : characters.getMatchList()) {\n    System.out.println("Character moved to: " + character.getTarget());\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"tips-for-better-motion-detection",children:"Tips for Better Motion Detection"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scene Timing"}),": Allow sufficient time between scene captures for objects to move noticeably"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lighting"}),": Consistent lighting between scenes improves detection accuracy"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Background"}),": Static backgrounds help distinguish moving objects"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Object Size"}),": Set appropriate minArea to filter out noise and small movements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Movement Range"}),": Adjust maxMovement based on expected object speeds"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-other-actions",children:"Integration with Other Actions"}),"\n",(0,o.jsx)(n.p,{children:"Motion finding can be combined with other actions using ActionChainOptions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"// First detect motion, then click on moving objects\nMotionFindOptions findMotion = new MotionFindOptions.Builder()\n        .setMaxMovement(100)\n        .setMaxMatchesToActOn(1)  // Find the best moving object\n        .build();\n\nClickOptions clickMoving = new ClickOptions.Builder()\n        .setNumberOfClicks(1)\n        .build();\n\nActionChainOptions trackAndClick = new ActionChainOptions.Builder(findMotion)\n        .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n        .then(clickMoving)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult result = action.perform(trackAndClick, objectCollection);\n"})}),"\n",(0,o.jsx)(n.p,{children:"For more information on find operations, see the other guides in this section:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/guides/finding-objects/using-color",children:"Using Color"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/guides/finding-objects/combining-finds",children:"Combining Finds"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/brobot/docs/core-library/guides/finding-objects/configuration-note",children:"Configuration Note"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50668:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/motion3-b4acebfe8734e1012c948965a4d98424.png"},62293:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/motion2-7c6420948ed7771a64db6e9471c07079.png"}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1520],{18424:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting-started/ai-brobot-project-creation","title":"Brobot AI Implementation Guide - Complete Reference","description":"CRITICAL RULES - NEVER VIOLATE THESE","source":"@site/docs/01-getting-started/ai-brobot-project-creation.md","sourceDirName":"01-getting-started","slug":"/getting-started/ai-brobot-project-creation","permalink":"/brobot/docs/getting-started/ai-brobot-project-creation","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/01-getting-started/ai-brobot-project-creation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Pure Actions Quick Start Guide","permalink":"/brobot/docs/getting-started/pure-actions-quickstart"},"next":{"title":"Preparing a Folder for AI-Assisted Brobot Project Creation","permalink":"/brobot/docs/getting-started/preparing-folder-for-ai-project-creation"}}');var o=t(74848),a=t(28453);const r={},s="Brobot AI Implementation Guide - Complete Reference",l={},c=[{value:"CRITICAL RULES - NEVER VIOLATE THESE",id:"critical-rules---never-violate-these",level:2},{value:"Rule 1: NEVER Use External Functions",id:"rule-1-never-use-external-functions",level:3},{value:"Rule 2: NEVER Call Transitions Directly",id:"rule-2-never-call-transitions-directly",level:3},{value:"Rule 3: State Naming Convention Is Mandatory",id:"rule-3-state-naming-convention-is-mandatory",level:3},{value:"COMPLETE PROJECT STRUCTURE",id:"complete-project-structure",level:2},{value:"COMPLETE WORKING EXAMPLES",id:"complete-working-examples",level:2},{value:"1. Complete State Class Example",id:"1-complete-state-class-example",level:3},{value:"2. Complete TransitionSet Class Example",id:"2-complete-transitionset-class-example",level:3},{value:"3. Complete Spring Boot Application Class",id:"3-complete-spring-boot-application-class",level:3},{value:"4. Complete Automation Runner Class",id:"4-complete-automation-runner-class",level:3},{value:"5. Complete application.properties Configuration",id:"5-complete-applicationproperties-configuration",level:3},{value:"6. Complete State Class with Mock Mode Support",id:"6-complete-state-class-with-mock-mode-support",level:3},{value:"7. Running in Mock Mode",id:"7-running-in-mock-mode",level:3},{value:"Enabling Mock Mode",id:"enabling-mock-mode",level:4},{value:"Running Your Automation in Mock Mode",id:"running-your-automation-in-mock-mode",level:4},{value:"Different Configurations for Live vs Mock",id:"different-configurations-for-live-vs-mock",level:4},{value:"Running with Different Profiles",id:"running-with-different-profiles",level:4},{value:"Key Points About Mock Mode",id:"key-points-about-mock-mode",level:4},{value:"GRADLE BUILD CONFIGURATION",id:"gradle-build-configuration",level:2},{value:"MAVEN POM CONFIGURATION (Alternative to Gradle)",id:"maven-pom-configuration-alternative-to-gradle",level:2},{value:"COMMON ACTION PATTERNS",id:"common-action-patterns",level:2},{value:"Adding Pauses to Actions",id:"adding-pauses-to-actions",level:3},{value:"Conditional Action Chains",id:"conditional-action-chains",level:3},{value:"Working with Regions",id:"working-with-regions",level:3},{value:"ERROR PATTERNS AND SOLUTIONS",id:"error-patterns-and-solutions",level:2},{value:"Navigation Fails",id:"navigation-fails",level:3},{value:"State Not Found",id:"state-not-found",level:3},{value:"Transition Not Executing",id:"transition-not-executing",level:3},{value:"CHECKLIST FOR NEW BROBOT PROJECT",id:"checklist-for-new-brobot-project",level:2},{value:"IMPORTANT REMINDERS",id:"important-reminders",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"brobot-ai-implementation-guide---complete-reference",children:"Brobot AI Implementation Guide - Complete Reference"})}),"\n",(0,o.jsx)(e.h2,{id:"critical-rules---never-violate-these",children:"CRITICAL RULES - NEVER VIOLATE THESE"}),"\n",(0,o.jsx)(e.h3,{id:"rule-1-never-use-external-functions",children:"Rule 1: NEVER Use External Functions"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"These will BREAK the entire model-based automation system:"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// \u274c ABSOLUTELY FORBIDDEN - These break everything:\nThread.sleep(2000);                          // Breaks mock testing completely\naction.pause(2.0);                           // This method DOES NOT EXIST in Brobot\njava.awt.Robot robot = new Robot();          // Circumvents automation model\norg.sikuli.script.Screen.wait(pattern, 5);   // Bypasses wrapper functions\norg.sikuli.script.Mouse.move(location);      // Direct SikuliX calls break mocking\n\n// \u2705 CORRECT - Always use Brobot's ActionConfig options:\nClickOptions clickWithPause = new ClickOptions.Builder()\n    .setPauseBeforeBegin(1.0)  // Wait 1 second before clicking\n    .setPauseAfterEnd(2.0)      // Wait 2 seconds after clicking\n    .build();\naction.click(stateImage, clickWithPause);\n\nPatternFindOptions findWithPause = new PatternFindOptions.Builder()\n    .setPauseBeforeBegin(0.5)\n    .setPauseAfterEnd(1.0)\n    .setWaitTime(5.0)  // Wait up to 5 seconds for pattern to appear\n    .build();\naction.find(stateImage, findWithPause);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"rule-2-never-call-transitions-directly",children:"Rule 2: NEVER Call Transitions Directly"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// \u274c WRONG - Never call transition methods directly:\n@Component\npublic class WrongApplication {\n    @Autowired\n    private MenuToPricingTransition transition;\n\n    public void run() {\n        transition.execute();        // \u274c NEVER DO THIS\n        transition.fromMenu();       // \u274c NEVER DO THIS\n        transition.verifyArrival();  // \u274c NEVER DO THIS\n    }\n}\n\n// \u2705 CORRECT - Always use Navigation service:\n@Component\n@RequiredArgsConstructor\npublic class CorrectApplication {\n    private final Navigation navigation;\n    private final Action action;\n    private final PricingState pricingState;\n\n    public void run() {\n        // Navigate using state name (WITHOUT "State" suffix)\n        navigation.openState("Pricing");  // \u2705 CORRECT\n\n        // Then perform actions on the state\n        action.click(pricingState.getStartButton());\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"rule-3-state-naming-convention-is-mandatory",children:"Rule 3: State Naming Convention Is Mandatory"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Class names MUST end with "State"\npublic class MenuState { }       // \u2705 CORRECT\npublic class PricingState { }    // \u2705 CORRECT\npublic class Menu { }             // \u274c WRONG\n\n// Navigation uses name WITHOUT "State"\nnavigation.openState("Menu");     // \u2705 CORRECT - for MenuState class\nnavigation.openState("Pricing");  // \u2705 CORRECT - for PricingState class\nnavigation.openState("MenuState"); // \u274c WRONG - don\'t include "State"\n'})}),"\n",(0,o.jsx)(e.h2,{id:"complete-project-structure",children:"COMPLETE PROJECT STRUCTURE"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"my-automation-project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/example/automation/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 Application.java           # Spring Boot main class\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 states/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 MenuState.java\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 PricingState.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 HomepageState.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 transitions/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 MenuTransitions.java      # ALL transitions for Menu\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 PricingTransitions.java   # ALL transitions for Pricing\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 HomepageTransitions.java  # ALL transitions for Homepage\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 runner/\n\u2502   \u2502   \u2502           \u2514\u2500\u2500 AutomationRunner.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.properties\n\u2502   \u2502       \u2514\u2500\u2500 images/\n\u2502   \u2502           \u251c\u2500\u2500 menu/\n\u2502   \u2502           \u2502   \u251c\u2500\u2500 menu-logo.png\n\u2502   \u2502           \u2502   \u251c\u2500\u2500 menu-pricing.png\n\u2502   \u2502           \u2502   \u2514\u2500\u2500 menu-home.png\n\u2502   \u2502           \u251c\u2500\u2500 pricing/\n\u2502   \u2502           \u2502   \u251c\u2500\u2500 pricing-start_for_free.png\n\u2502   \u2502           \u2502   \u2514\u2500\u2500 pricing-header.png\n\u2502   \u2502           \u2514\u2500\u2500 homepage/\n\u2502   \u2502               \u251c\u2500\u2500 start_for_free_big.png\n\u2502   \u2502               \u2514\u2500\u2500 enter_your_email.png\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/example/automation/\n\u2502               \u2514\u2500\u2500 MockAutomationTest.java\n\u251c\u2500\u2500 build.gradle\n\u2514\u2500\u2500 pom.xml  # If using Maven instead of Gradle\n"})}),"\n",(0,o.jsx)(e.h2,{id:"complete-working-examples",children:"COMPLETE WORKING EXAMPLES"}),"\n",(0,o.jsx)(e.h3,{id:"1-complete-state-class-example",children:"1. Complete State Class Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.automation.states;\n\nimport io.github.jspinak.brobot.primatives.enums.StateEnum;\nimport io.github.jspinak.brobot.state.annotations.State;\nimport io.github.jspinak.brobot.stateStructure.model.state.StateImage;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\n@State(initial = true)  // Mark as initial state if this is where automation starts\n@Getter\n@Slf4j\npublic class MenuState {\n\n    // State enum for identification\n    private final StateEnum stateEnum = StateEnum.MENU;\n\n    // All UI elements in this state\n    private final StateImage logo;\n    private final StateImage pricingButton;\n    private final StateImage homeButton;\n    private final StateImage searchBox;\n\n    public MenuState() {\n        log.info("Initializing MenuState");\n\n        // Initialize each UI element with proper configuration\n        logo = new StateImage.Builder()\n            .addPatterns("menu/menu-logo")  // Path relative to images/ folder\n            .setName("Menu Logo")\n            .build();\n\n        pricingButton = new StateImage.Builder()\n            .addPatterns("menu/menu-pricing")\n            .setName("Pricing Button")\n            .build();\n\n        homeButton = new StateImage.Builder()\n            .addPatterns("menu/menu-home")\n            .setName("Home Button")\n            .build();\n\n        searchBox = new StateImage.Builder()\n            .addPatterns("menu/menu-search")\n            .setName("Search Box")\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-complete-transitionset-class-example",children:"2. Complete TransitionSet Class Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.automation.transitions;\n\nimport com.example.automation.states.*;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.action.basic.click.ClickOptions;\nimport io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\nimport io.github.jspinak.brobot.state.annotations.FromTransition;\nimport io.github.jspinak.brobot.state.annotations.IncomingTransition;\nimport io.github.jspinak.brobot.state.annotations.TransitionSet;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n@TransitionSet(state = PricingState.class)  // This class handles ALL transitions for PricingState\n@RequiredArgsConstructor\n@Slf4j\npublic class PricingTransitions {\n\n    // Only needs its own state as dependency\n    private final PricingState pricingState;\n    private final Action action;\n\n    /**\n     * Navigate FROM Pricing TO Menu\n     * Priority determines order when multiple paths exist\n     */\n    @OutgoingTransition(to = MenuState.class, priority = 1)\n    public boolean toMenu() {\n        log.info("Navigating from Pricing to Menu");\n\n        // Add pause before clicking\n        ClickOptions clickOptions = new ClickOptions.Builder()\n            .setPauseBeforeBegin(0.5)\n            .setPauseAfterEnd(1.0)\n            .build();\n\n        // Click the menu button in pricing page\n        return action.click(pricingState.getMenuButton(), clickOptions).isSuccess();\n    }\n\n    /**\n     * Navigate FROM Pricing TO Homepage\n     */\n    @OutgoingTransition(to = HomepageState.class, priority = 2)\n    public boolean toHomepage() {\n        log.info("Navigating from Pricing to Homepage");\n\n        // Click the home/logo button\n        return action.click(pricingState.getHomeButton()).isSuccess();\n    }\n\n    /**\n     * Verify arrival at Pricing state\n     * This method is called after navigation to confirm arrival succeeded\n     * ONLY ONE @IncomingTransition per TransitionSet class\n     */\n    @IncomingTransition\n    public boolean verifyArrival() {\n        log.info("Verifying arrival at Pricing state");\n\n        // Wait for unique element with timeout\n        PatternFindOptions findOptions = new PatternFindOptions.Builder()\n            .setWaitTime(5.0)  // Wait up to 5 seconds\n            .setPauseAfterEnd(0.5)\n            .build();\n\n        boolean found = action.find(pricingState.getUniqueElement(), findOptions).isSuccess();\n\n        if (found) {\n            log.info("Successfully arrived at Pricing state");\n        } else {\n            log.error("Failed to verify arrival at Pricing state");\n        }\n\n        return found;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-complete-spring-boot-application-class",children:"3. Complete Spring Boot Application Class"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.automation;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.ComponentScan;\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\n    "com.example.automation",\n    "io.github.jspinak.brobot"  // REQUIRED: Scan Brobot components\n})\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"4-complete-automation-runner-class",children:"4. Complete Automation Runner Class"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.automation.runner;\n\nimport com.example.automation.states.*;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.action.basic.click.ClickOptions;\nimport io.github.jspinak.brobot.action.basic.type.TypeOptions;\nimport io.github.jspinak.brobot.navigation.Navigation;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class AutomationRunner implements CommandLineRunner {\n\n    private final Navigation navigation;\n    private final Action action;\n    private final MenuState menuState;\n    private final PricingState pricingState;\n    private final HomepageState homepageState;\n\n    @Override\n    public void run(String... args) {\n        log.info("Starting automation");\n\n        try {\n            // Step 1: Navigate to Pricing page\n            log.info("Step 1: Navigating to Pricing");\n            navigation.openState("Pricing");  // Note: "Pricing" not "PricingState"\n\n            // Step 2: Click on "Start for Free" button\n            log.info("Step 2: Clicking Start for Free");\n            ClickOptions clickOptions = new ClickOptions.Builder()\n                .setPauseBeforeBegin(1.0)\n                .setPauseAfterEnd(2.0)\n                .build();\n\n            if (!action.click(pricingState.getStartForFreeButton(), clickOptions).isSuccess()) {\n                log.error("Failed to click Start for Free button");\n                return;\n            }\n\n            // Step 3: Navigate to Homepage\n            log.info("Step 3: Navigating to Homepage");\n            navigation.openState("Homepage");\n\n            // Step 4: Type email address\n            log.info("Step 4: Entering email address");\n\n            // First click the email field\n            action.click(homepageState.getEmailField());\n\n            // Then type the email\n            TypeOptions typeOptions = new TypeOptions.Builder()\n                .setPauseBeforeBegin(0.5)\n                .setPauseAfterEnd(1.0)\n                .setModifiers(new Key[]{})  // No modifier keys\n                .build();\n\n            action.type("user@example.com", typeOptions);\n\n            // Step 5: Submit\n            log.info("Step 5: Submitting form");\n            action.click(homepageState.getSubmitButton());\n\n            log.info("Automation completed successfully");\n\n        } catch (Exception e) {\n            log.error("Automation failed", e);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"5-complete-applicationproperties-configuration",children:"5. Complete application.properties Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Spring Configuration\nspring.application.name=my-automation-project\nspring.main.banner-mode=off\n\n# Brobot Core Configuration\nbrobot.core.image-path=images/\nbrobot.core.mock=false\nbrobot.core.allow-manual-override=true\n\n# Screenshot Configuration\nbrobot.screenshot.save-history=true\nbrobot.screenshot.history-path=history/\nbrobot.screenshot.include-timestamp=true\nbrobot.screenshot.format=png\n\n# Logging Configuration\nbrobot.logging.verbosity=VERBOSE\nbrobot.console.actions.enabled=true\nbrobot.console.actions.level=VERBOSE\nbrobot.console.state-transitions.enabled=true\nbrobot.console.matches.enabled=true\n\n# Pattern Matching Configuration\nbrobot.pattern.default-similarity=0.85\nbrobot.pattern.wait-time=5.0\nbrobot.pattern.scan-rate=0.3\n\n# Mock Mode Configuration (for testing)\nbrobot.mock.enabled=false\nbrobot.mock.success-probability=0.9\nbrobot.mock.find-duration=0.02\nbrobot.mock.click-duration=0.01\nbrobot.mock.type-duration=0.03\n\n# Action Timing Defaults\nbrobot.action.pause-before-begin=0.0\nbrobot.action.pause-after-end=0.0\nbrobot.action.move-mouse-delay=0.5\n"})}),"\n",(0,o.jsx)(e.h3,{id:"6-complete-state-class-with-mock-mode-support",children:"6. Complete State Class with Mock Mode Support"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.automation.states;\n\nimport io.github.jspinak.brobot.state.annotations.State;\nimport io.github.jspinak.brobot.stateStructure.model.state.StateImage;\nimport io.github.jspinak.brobot.primatives.region.Region;\nimport io.github.jspinak.brobot.config.mock.MockStateManagement;\nimport io.github.jspinak.brobot.config.core.FrameworkSettings;\nimport io.github.jspinak.brobot.tools.testing.mock.history.MockActionHistoryFactory;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport javax.annotation.PostConstruct;\n\n@State(initial = true)  // Mark as initial state\n@Getter\n@Slf4j\npublic class MenuState {\n\n\n    private final StateImage logo;\n    private final StateImage pricingButton;\n    private final StateImage homeButton;\n\n    public MenuState() {\n        log.info("Initializing MenuState");\n\n        // Define regions where elements appear (for mock mode)\n        Region logoRegion = new Region(100, 50, 150, 60);\n        Region pricingRegion = new Region(300, 50, 100, 40);\n        Region homeRegion = new Region(200, 50, 100, 40);\n\n        // Create StateImages with ActionHistory for mock mode\n        // WITHOUT ActionHistory, patterns will NEVER be found in mock mode!\n        logo = new StateImage.Builder()\n            .addPatterns("menu/menu-logo")\n            .setName("Menu Logo")\n            // ActionHistory is REQUIRED for mock mode\n            .withActionHistory(MockActionHistoryFactory.reliableButton(logoRegion))\n            .build();\n\n        pricingButton = new StateImage.Builder()\n            .addPatterns("menu/menu-pricing")\n            .setName("Pricing Button")\n            // ActionHistory determines where/how pattern is "found" in mock\n            .withActionHistory(MockActionHistoryFactory.reliableButton(pricingRegion))\n            .build();\n\n        homeButton = new StateImage.Builder()\n            .addPatterns("menu/menu-home")\n            .setName("Home Button")\n            .withActionHistory(MockActionHistoryFactory.reliableButton(homeRegion))\n            .build();\n    }\n\n    // No need to configure state probabilities - defaults to 100%\n    // The ActionHistory in StateImages is what makes mock mode work\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"7-running-in-mock-mode",children:"7. Running in Mock Mode"}),"\n",(0,o.jsx)(e.p,{children:"Mock mode runs the SAME production code but simulates GUI interactions using ActionHistory from StateImages. No separate test classes or @SpringBootTest needed!"}),"\n",(0,o.jsx)(e.h4,{id:"enabling-mock-mode",children:"Enabling Mock Mode"}),"\n",(0,o.jsxs)(e.p,{children:["Simply set these properties in ",(0,o.jsx)(e.code,{children:"application.properties"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Enable mock mode - this is the ONLY required setting\nbrobot.mock=true\n\n# Optional: Control action success probability (default is 1.0 = 100%)\nbrobot.mock.action.success.probability=1.0\n"})}),"\n",(0,o.jsx)(e.h4,{id:"running-your-automation-in-mock-mode",children:"Running Your Automation in Mock Mode"}),"\n",(0,o.jsx)(e.p,{children:"Your existing runner class works for both live and mock mode:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.example.automation.runner;\n\nimport com.example.automation.states.*;\nimport io.github.jspinak.brobot.action.Action;\nimport io.github.jspinak.brobot.navigation.Navigation;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.stereotype.Component;\n\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class AutomationRunner implements CommandLineRunner {\n\n    private final Navigation navigation;\n    private final Action action;\n    private final MenuState menuState;\n    private final PricingState pricingState;\n    private final HomepageState homepageState;\n\n    @Override\n    public void run(String... args) {\n        // This code runs in BOTH live and mock mode\n        // In mock mode, actions use ActionHistory instead of real GUI\n\n        log.info("Starting automation (Mock mode: {})",\n                io.github.jspinak.brobot.config.core.FrameworkSettings.mock);\n\n        // Navigate to Pricing\n        log.info("Navigating to Pricing page");\n        navigation.openState("Pricing");\n\n        // Click Start for Free\n        log.info("Clicking Start for Free button");\n        var result = action.click(pricingState.getStartForFreeButton());\n        log.info("Click result: {}", result.isSuccess());\n\n        // Navigate to Homepage\n        log.info("Navigating to Homepage");\n        navigation.openState("Homepage");\n\n        // Enter email\n        log.info("Entering email address");\n        action.click(homepageState.getEmailField());\n        action.type("user@example.com");\n        action.click(homepageState.getSubmitButton());\n\n        log.info("Automation completed successfully");\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"different-configurations-for-live-vs-mock",children:"Different Configurations for Live vs Mock"}),"\n",(0,o.jsx)(e.p,{children:"Use Spring profiles or separate property files:"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"application.properties"})," (Live/Production):"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Live mode - interact with real GUI\nbrobot.mock=false\n\n# Other production settings\nbrobot.screenshot.save-history=true\nbrobot.logging.verbosity=VERBOSE\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"application-mock.properties"})," (Mock mode):"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-properties",children:"# Enable mock mode - uses ActionHistory instead of real GUI\nbrobot.mock=true\n\n# Optional: Control success probability (default 1.0 = 100%)\nbrobot.mock.action.success.probability=1.0\n\n# Fast mock timings\nbrobot.mock.find-duration=0.01\nbrobot.mock.click-duration=0.01\nbrobot.mock.type-duration=0.01\n\n# Disable screenshots in mock mode\nbrobot.screenshot.save-history=false\n"})}),"\n",(0,o.jsx)(e.h4,{id:"running-with-different-profiles",children:"Running with Different Profiles"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Run in live mode (default)\njava -jar my-automation.jar\n\n# Run in mock mode\njava -jar my-automation.jar --spring.profiles.active=mock\n\n# Or set environment variable\nexport SPRING_PROFILES_ACTIVE=mock\njava -jar my-automation.jar\n"})}),"\n",(0,o.jsx)(e.h4,{id:"key-points-about-mock-mode",children:"Key Points About Mock Mode"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Same Code"}),": Your automation code is identical for live and mock mode"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"ActionHistory Required"}),": StateImages MUST have ActionHistory or patterns won't be found"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"No Test Framework"}),": No JUnit, no @SpringBootTest, no separate test classes"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Property-Driven"}),": Switch between modes with just ",(0,o.jsx)(e.code,{children:"brobot.mock=true/false"})]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Fast Execution"}),": Mock actions complete in milliseconds (0.01s vs 1-2s for real)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"CI/CD Ready"}),": Works in headless environments without displays"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"The mock mode is designed to validate your automation logic and flow without requiring access to the actual GUI."}),"\n",(0,o.jsx)(e.h2,{id:"gradle-build-configuration",children:"GRADLE BUILD CONFIGURATION"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-gradle",children:"plugins {\n    id 'java'\n    id 'org.springframework.boot' version '3.2.0'\n    id 'io.spring.dependency-management' version '1.1.0'\n}\n\ngroup = 'com.example'\nversion = '1.0.0'\nsourceCompatibility = '21'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // Brobot Framework\n    implementation 'io.github.jspinak:brobot:1.2.0'\n\n    // Spring Boot\n    implementation 'org.springframework.boot:spring-boot-starter'\n\n    // Lombok\n    compileOnly 'org.projectlombok:lombok:1.18.32'\n    annotationProcessor 'org.projectlombok:lombok:1.18.32'\n\n    // Testing\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'\n}\n\ntest {\n    useJUnitPlatform()\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"maven-pom-configuration-alternative-to-gradle",children:"MAVEN POM CONFIGURATION (Alternative to Gradle)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0\n         http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.2.0</version>\n    </parent>\n\n    <groupId>com.example</groupId>\n    <artifactId>my-automation-project</artifactId>\n    <version>1.0.0</version>\n\n    <properties>\n        <java.version>21</java.version>\n        <brobot.version>1.2.0</brobot.version>\n        <lombok.version>1.18.32</lombok.version>\n    </properties>\n\n    <dependencies>\n        \x3c!-- Brobot Framework --\x3e\n        <dependency>\n            <groupId>io.github.jspinak</groupId>\n            <artifactId>brobot</artifactId>\n            <version>${brobot.version}</version>\n        </dependency>\n\n        \x3c!-- Spring Boot --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        \x3c!-- Lombok --\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>${lombok.version}</version>\n            <scope>provided</scope>\n        </dependency>\n\n        \x3c!-- Testing --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n'})}),"\n",(0,o.jsx)(e.h2,{id:"common-action-patterns",children:"COMMON ACTION PATTERNS"}),"\n",(0,o.jsx)(e.h3,{id:"adding-pauses-to-actions",children:"Adding Pauses to Actions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Click with pauses\nClickOptions clickWithPause = new ClickOptions.Builder()\n    .setPauseBeforeBegin(1.0)  // Wait 1 second before clicking\n    .setPauseAfterEnd(2.0)      // Wait 2 seconds after clicking\n    .setNumberOfClicks(2)       // Double-click\n    .build();\naction.click(stateImage, clickWithPause);\n\n// Find with timeout and pauses\nPatternFindOptions findOptions = new PatternFindOptions.Builder()\n    .setWaitTime(10.0)          // Wait up to 10 seconds\n    .setPauseBeforeBegin(0.5)   // Pause before searching\n    .setPauseAfterEnd(1.0)      // Pause after finding\n    .setSimilarity(0.95)        // 95% match required\n    .build();\naction.find(stateImage, findOptions);\n\n// Type with pauses\nTypeOptions typeOptions = new TypeOptions.Builder()\n    .setPauseBeforeBegin(0.5)\n    .setPauseAfterEnd(1.0)\n    .setPauseBetweenKeys(0.1)  // Pause between each keystroke\n    .build();\naction.type("text to type", typeOptions);\n\n// Drag with pauses\nDragOptions dragOptions = new DragOptions.Builder()\n    .setPauseBeforeBegin(1.0)\n    .setPauseAfterEnd(2.0)\n    .setPauseBeforeMouseUp(0.5)  // Pause before releasing\n    .build();\naction.drag(fromImage, toImage, dragOptions);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"conditional-action-chains",children:"Conditional Action Chains"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Chain multiple conditional actions\nConditionalActionChain\n    .find(loginButton)\n    .ifFoundClick()\n    .then(usernameField)\n    .ifFoundType("myusername")\n    .then(passwordField)\n    .ifFoundType("mypassword")\n    .then(submitButton)\n    .ifFoundClick()\n    .ifNotFoundLog("Login failed - submit button not found")\n    .perform(action, objectCollection);\n\n// With custom success handling\nConditionalActionChain\n    .find(element)\n    .ifFound(result -> {\n        log.info("Found at: " + result.getLocation());\n        return action.click(result.getLocation());\n    })\n    .ifNotFound(result -> {\n        log.error("Element not found, trying alternative");\n        return action.click(alternativeElement);\n    })\n    .perform(action, objectCollection);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"working-with-regions",children:"Working with Regions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Define a search region\nRegion searchRegion = Region.builder()\n    .withX(100)\n    .withY(200)\n    .withWidth(500)\n    .withHeight(300)\n    .build();\n\n// Search within specific region\nPatternFindOptions regionSearch = new PatternFindOptions.Builder()\n    .setSearchRegion(searchRegion)\n    .build();\naction.find(stateImage, regionSearch);\n\n// Screen-relative regions\nRegion topRight = Region.builder()\n    .withPosition(Positions.Name.TOPRIGHT)\n    .withSize(200, 100)\n    .build();\n\n// Use Location for screen positions\nLocation center = new Location(Positions.Name.MIDDLEMIDDLE);\naction.move(center);\n"})}),"\n",(0,o.jsx)(e.h2,{id:"error-patterns-and-solutions",children:"ERROR PATTERNS AND SOLUTIONS"}),"\n",(0,o.jsx)(e.h3,{id:"navigation-fails",children:"Navigation Fails"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Error"}),": ",(0,o.jsx)(e.code,{children:"No path found from [CurrentState] to [TargetState]"}),"\n",(0,o.jsx)(e.strong,{children:"Solution"}),": Ensure TransitionSet classes are properly annotated and scanned:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@TransitionSet(state = TargetState.class)  // Must have this annotation\n@RequiredArgsConstructor  // For dependency injection\npublic class TargetTransitions {\n    @OutgoingTransition(to = NextState.class)\n    public boolean toNext() { /* ... */ }\n\n    @IncomingTransition\n    public boolean verifyArrival() { /* ... */ }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"state-not-found",children:"State Not Found"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Error"}),": ",(0,o.jsx)(e.code,{children:"State not found: [StateName]"}),"\n",(0,o.jsx)(e.strong,{children:"Solution"}),": Check state naming convention:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Class must end with "State"\n@State\npublic class MenuState { }  // \u2705 CORRECT\n\n// Navigation uses name without "State"\nnavigation.openState("Menu");  // \u2705 CORRECT\n'})}),"\n",(0,o.jsx)(e.h3,{id:"transition-not-executing",children:"Transition Not Executing"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Error"}),": Transition methods not being called\n",(0,o.jsx)(e.strong,{children:"Solution"}),": NEVER call transitions directly, use Navigation:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// \u274c WRONG\ntransition.execute();\n\n// \u2705 CORRECT\nnavigation.openState("Target");\n'})}),"\n",(0,o.jsx)(e.h2,{id:"checklist-for-new-brobot-project",children:"CHECKLIST FOR NEW BROBOT PROJECT"}),"\n",(0,o.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Project structure follows standard layout (states/, transitions/ folders)"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ",'All State classes end with "State"']}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Each state has ONE TransitionSet class with ALL its transitions"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","@OutgoingTransition methods navigate FROM the state TO other states"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Only ONE @IncomingTransition method per TransitionSet"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Images organized in folders by state name"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","application.properties configured with brobot settings"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Spring Boot main class scans both project and brobot packages"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ",(0,o.jsx)(e.strong,{children:"ActionHistory configured in StateImage.Builder for ALL patterns that need to be found in mock mode"})]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","NO Thread.sleep() anywhere in code"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","NO direct SikuliX calls"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","NO java.awt.Robot usage"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Navigation.openState() used for all state transitions"]}),"\n",(0,o.jsxs)(e.li,{className:"task-list-item",children:[(0,o.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Pauses configured via ActionConfig options, not action.pause()"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"important-reminders",children:"IMPORTANT REMINDERS"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Brobot wraps SikuliX"})," - Never call SikuliX methods directly"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Mock mode REQUIRES ActionHistory"})," - Patterns will NEVER be found without it! Use withActionHistory() in StateImage.Builder"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"@State includes @Component"})," - Don't add @Component to State classes"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"@TransitionSet includes @Component"})," - Don't add @Component to TransitionSet classes"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Navigation handles pathing"})," - It finds the route and executes transitions automatically"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"State suffix is removed"}),' - MenuState becomes "Menu" in navigation']}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Pauses are in ActionConfig"})," - Use setPauseBeforeBegin/setPauseAfterEnd"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"One TransitionSet per state"})," - All transitions for a state in one class"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"OutgoingTransition + IncomingTransition"})," - OutgoingTransitions navigate FROM the state, IncomingTransition verifies arrival"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"This guide contains everything needed to create a Brobot automation project. All code examples are complete and functional. Follow the patterns exactly as shown to ensure proper operation."})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var i=t(96540);const o={},a=i.createContext(o);function r(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2673],{28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>a});var t=i(96540);const o={},r=t.createContext(o);function s(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(r.Provider,{value:e},n.children)}},41166:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/confirmedFind-c48a2eae105b18fcce074f84db6f026a.png"},54296:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core-library/guides/finding-objects/combining-finds","title":"Combining Find Operations","description":"Combining multiple find operations in the same Action can give us better results.","source":"@site/docs/03-core-library/guides/finding-objects/combining-finds.md","sourceDirName":"03-core-library/guides/finding-objects","slug":"/core-library/guides/finding-objects/combining-finds","permalink":"/brobot/docs/core-library/guides/finding-objects/combining-finds","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/finding-objects/combining-finds.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docSidebar","previous":{"title":"Using Color","permalink":"/brobot/docs/core-library/guides/finding-objects/using-color"},"next":{"title":"Motion","permalink":"/brobot/docs/core-library/guides/finding-objects/movement"}}');var o=i(74848),r=i(28453);const s={sidebar_position:2},a="Combining Find Operations",l={},c=[{value:"Related Documentation",id:"related-documentation",level:2},{value:"Using ActionChainOptions",id:"using-actionchainoptions",level:2},{value:"Nested Finds",id:"nested-finds",level:3},{value:"Confirmed Finds",id:"confirmed-finds",level:2},{value:"Multiple Chained Operations",id:"multiple-chained-operations",level:2},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Finding Yellow Health Bars",id:"finding-yellow-health-bars",level:3},{value:"Confirming UI Elements",id:"confirming-ui-elements",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"combining-find-operations",children:"Combining Find Operations"})}),"\n",(0,o.jsx)(e.p,{children:"Combining multiple find operations in the same Action can give us better results.\nWith the new ActionChainOptions, you can create nested or confirmed find operations."}),"\n",(0,o.jsx)(e.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/guides/action-config-factory",children:"ActionConfig Factory"})})," - Learn about creating and managing action configurations"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.a,{href:"/docs/ai-brobot-project-creation#conditionalactionchain---the-foundation",children:"Enhanced Conditional Action Chaining"})})," - Build complex conditional execution flows"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.a,{href:"/docs/ai-brobot-project-creation#when-to-use-actionchainbuilder-vs-then",children:"AI Project Creation Guide"})})," - Comprehensive action chaining patterns"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.a,{href:"https://github.com/jspinak/brobot/tree/main/examples/03-core-library/action-config/conditional-chains-examples",children:"ConditionalActionChain Example"})})," - Complete implementation example"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"Combining find methods can give us more accurate matches in scenarios where the\nform and color of an object are not unique. Take the example below, where we are looking\nfor the yellow bars above the kobolds (the top-left bar has blue circles on it).\nA relatively solid bar of color will correspond to other places on the screen, including\nthe green and red bars above the character. On the other hand, the yellow color of\nthe bars would also be found in other places, including on the character's weapon and\ninterspersed throughout the grass. One way to narrow down our search is to look for\nboth a pattern and a color."}),"\n",(0,o.jsx)(e.h2,{id:"using-actionchainoptions",children:"Using ActionChainOptions"}),"\n",(0,o.jsx)(e.p,{children:"The new ActionChainOptions class provides a clean way to chain multiple find operations together with different strategies."}),"\n",(0,o.jsx)(e.h3,{id:"nested-finds",children:"Nested Finds"}),"\n",(0,o.jsx)(e.p,{children:"Nested Finds find objects inside the matches from the previous Find operation. This is useful when you want to find specific elements within larger patterns."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find pattern matches first, then search for color within those matches\nPatternFindOptions patternFind = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.8)\n        .build();\n\nColorFindOptions colorFind = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)  // Use mean color statistics\n        .setDiameter(5)\n        .setSimilarity(0.9)\n        .build();\n\nActionChainOptions nestedChain = new ActionChainOptions.Builder(patternFind)\n        .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n        .then(colorFind)\n        .build();\n\n// Execute the chain\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nObjectCollection objectCollection = new ObjectCollection.Builder()\n        .withImages(barImage, yellowColorSample)\n        .build();\n        \nActionResult result = action.perform(nestedChain, objectCollection);\n"})}),"\n",(0,o.jsx)(e.p,{children:"In the below example, all pattern matches from the initial find operation are drawn in\nblue bounding boxes, and the color matches are drawn in pink bounding boxes. To the\nright of the scene are the contents of the color matches. As expected, all color matches\nare some variation of yellow, showing that they are taken only from the pattern matches of\nyellow bars and not from the red or green bars."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"nestedFind",src:i(98002).A+"",width:"1334",height:"800"})}),"\n",(0,o.jsx)(e.h2,{id:"confirmed-finds",children:"Confirmed Finds"}),"\n",(0,o.jsx)(e.p,{children:"Confirmed Finds look for matches inside the matches from the first Find operation.\nAll subsequent Find operations are performed on the match regions from the first operation.\nIf a match is found, the match region from the first Find operation will be returned.\nFor a match to exist, all subsequent Find operations need to succeed within its region."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find pattern matches and confirm with color\nPatternFindOptions patternFind = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.8)\n        .build();\n\nColorFindOptions colorConfirm = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)\n        .setDiameter(5)\n        .setSimilarity(0.85)\n        .build();\n\nActionChainOptions confirmedChain = new ActionChainOptions.Builder(patternFind)\n        .setStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)\n        .then(colorConfirm)\n        .build();\n\n// Execute the chain\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nObjectCollection objectCollection = new ObjectCollection.Builder()\n        .withImages(barImage, yellowColorSample)\n        .build();\n        \nActionResult result = action.perform(confirmedChain, objectCollection);\n"})}),"\n",(0,o.jsx)(e.p,{children:"In the below example, the pattern matches from the initial find operation are drawn in\nblue and the color matches are drawn in pink. To the right of the scene are the contents of the\ncolor matches. The pattern match is selected in its original size. Only the yellow bars are selected."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{alt:"confirmedFind",src:i(41166).A+"",width:"1334",height:"800"})}),"\n",(0,o.jsx)(e.h2,{id:"multiple-chained-operations",children:"Multiple Chained Operations"}),"\n",(0,o.jsx)(e.p,{children:"You can chain more than two operations together for complex scenarios:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find all patterns, filter by color, then filter by size\nPatternFindOptions findPatterns = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .build();\n\nColorFindOptions filterByColor = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.KMEANS)\n        .setKmeans(2)  // Look for 2 dominant colors\n        .setSimilarity(0.85)\n        .build();\n\n// You can add another color filter or pattern filter here\n// For example, filter by a different color strategy\nColorFindOptions filterByClassification = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.CLASSIFICATION)\n        .setSimilarity(0.9)\n        .build();\n\nActionChainOptions complexChain = new ActionChainOptions.Builder(findPatterns)\n        .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n        .then(filterByColor)\n        .then(filterByClassification)\n        .build();\n"})}),"\n",(0,o.jsx)(e.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,o.jsx)(e.h3,{id:"finding-yellow-health-bars",children:"Finding Yellow Health Bars"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// First find all bar-shaped patterns\nPatternFindOptions barPatterns = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.7)  // Lower similarity to catch all bars\n        .build();\n\n// Then filter for yellow color\nColorFindOptions yellowFilter = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.MU)\n        .setDiameter(10)  // Larger diameter for solid color areas\n        .setSimilarity(0.9)  // High similarity for color matching\n        .build();\n\n// Create nested chain to find yellow bars\nActionChainOptions findYellowBars = new ActionChainOptions.Builder(barPatterns)\n        .setStrategy(ActionChainOptions.ChainingStrategy.NESTED)\n        .then(yellowFilter)\n        .setPauseAfterEnd(0.5)  // Add pause after finding\n        .build();\n\n// Execute\nStateImage barImage = new StateImage.Builder()\n        .setName("health_bar")\n        .addPatterns("bar_pattern.png")\n        .build();\n\nObjectCollection objects = new ObjectCollection.Builder()\n        .withImages(barImage)\n        .build();\n\n@Autowired\nprivate Action action; // obtain from Spring context or dependency injection\n\nActionResult yellowBars = action.perform(findYellowBars, objects);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"confirming-ui-elements",children:"Confirming UI Elements"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// Find buttons by pattern, confirm by color to reduce false positives\nPatternFindOptions buttonPattern = new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.ALL)\n        .setSimilarity(0.8)\n        .build();\n\nColorFindOptions buttonColor = new ColorFindOptions.Builder()\n        .setColorStrategy(ColorFindOptions.Color.CLASSIFICATION)\n        .setSimilarity(0.85)\n        .build();\n\nActionChainOptions confirmButtons = new ActionChainOptions.Builder(buttonPattern)\n        .setStrategy(ActionChainOptions.ChainingStrategy.CONFIRM)\n        .then(buttonColor)\n        .build();\n"})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Choose the Right Strategy"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use NESTED when searching for elements within elements"}),"\n",(0,o.jsx)(e.li,{children:"Use CONFIRM when you need to validate matches with additional criteria"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Order Matters"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Put the most selective operation first to reduce processing time"}),"\n",(0,o.jsx)(e.li,{children:"Pattern matching is usually faster than color analysis"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Adjust Similarities"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use lower similarity for the first operation to catch more candidates"}),"\n",(0,o.jsx)(e.li,{children:"Use higher similarity for subsequent operations to filter accurately"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Test Incrementally"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Test each operation separately before chaining"}),"\n",(0,o.jsx)(e.li,{children:"Use illustration to visualize what each step finds"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["For more detailed information on color finding, see the ",(0,o.jsx)(e.a,{href:"/brobot/docs/core-library/guides/finding-objects/using-color",children:"Using Color"})," guide."]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},98002:(n,e,i)=>{i.d(e,{A:()=>t});const t=i.p+"assets/images/nestedFind-e379b095dd3f6b19eb910a6c27c1b518.png"}}]);
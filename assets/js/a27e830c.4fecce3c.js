"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1106],{8550:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"core-library/configuration/auto-configuration","title":"Auto-Configuration in Brobot","description":"Brobot provides comprehensive auto-configuration capabilities that eliminate the need for applications to manually configure most framework settings. This document describes the auto-configuration features that are built into the Brobot library.","source":"@site/docs/03-core-library/configuration/auto-configuration.md","sourceDirName":"03-core-library/configuration","slug":"/core-library/configuration/auto-configuration","permalink":"/brobot/docs/core-library/configuration/auto-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/configuration/auto-configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"AutomationRunner - Graceful Failure Handling","permalink":"/brobot/docs/core-library/automation-runner"},"next":{"title":"Initial State Configuration Guide","permalink":"/brobot/docs/core-library/configuration/initial-states"}}');var s=n(74848),t=n(28453);const o={},a="Auto-Configuration in Brobot",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Built-in Configuration Classes",id:"built-in-configuration-classes",level:2},{value:"1. BrobotDPIConfiguration",id:"1-brobotdpiconfiguration",level:3},{value:"2. ConsoleReporterInitializer",id:"2-consolereporterinitializer",level:3},{value:"3. Image Find Debugging (New)",id:"3-image-find-debugging-new",level:3},{value:"4. ImagePathManager",id:"4-imagepathmanager",level:3},{value:"4. MockConfiguration with Test Profile Optimization",id:"4-mockconfiguration-with-test-profile-optimization",level:3},{value:"5. BrobotAutoConfiguration",id:"5-brobotautoconfiguration",level:3},{value:"6. NativeLibraryDebugSuppressor",id:"6-nativelibrarydebugsuppressor",level:3},{value:"6. NativeLibraryDebugSuppressor",id:"6-nativelibrarydebugsuppressor-1",level:3},{value:"Configuration Properties",id:"configuration-properties",level:2},{value:"Migration from Application-Specific Configuration",id:"migration-from-application-specific-configuration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Example: Minimal Brobot Application",id:"example-minimal-brobot-application",level:2}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"auto-configuration-in-brobot",children:"Auto-Configuration in Brobot"})}),"\n",(0,s.jsx)(i.p,{children:"Brobot provides comprehensive auto-configuration capabilities that eliminate the need for applications to manually configure most framework settings. This document describes the auto-configuration features that are built into the Brobot library."}),"\n",(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"Brobot applications should require minimal to no configuration files. The framework automatically handles:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"DPI scaling and cross-version compatibility"}),"\n",(0,s.jsx)(i.li,{children:"Image path resolution and verification"}),"\n",(0,s.jsx)(i.li,{children:"Console reporter output levels"}),"\n",(0,s.jsx)(i.li,{children:"Mock mode optimization for testing"}),"\n",(0,s.jsx)(i.li,{children:"Cross-platform compatibility"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"built-in-configuration-classes",children:"Built-in Configuration Classes"}),"\n",(0,s.jsx)(i.h3,{id:"1-brobotdpiconfiguration",children:"1. BrobotDPIConfiguration"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Automatically detects and compensates for DPI scaling differences and Java version compatibility issues."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Detects Windows DPI scaling (125%, 150%, etc.)"}),"\n",(0,s.jsx)(i.li,{children:"Applies appropriate pattern scaling compensation"}),"\n",(0,s.jsx)(i.li,{children:"Handles Java 8 vs Java 9+ rendering differences"}),"\n",(0,s.jsx)(i.li,{children:"Configures consistent color rendering across versions"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Auto-configured settings"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"Settings.AlwaysResize    // Automatically set based on DPI scaling\r\nSettings.MinSimilarity    // Adjusted for Java version differences\r\nSettings.CheckLastSeen    // Enabled for performance\n"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Java Version Compatibility"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Java 9+: Applies rendering consistency settings"}),"\n",(0,s.jsx)(i.li,{children:"Disables hardware acceleration for consistent pattern matching"}),"\n",(0,s.jsx)(i.li,{children:"Adjusts similarity thresholds for version-specific rendering differences"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"2-consolereporterinitializer",children:"2. ConsoleReporterInitializer"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Automatically configures console output levels based on logging verbosity settings."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Verbosity Mapping"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"QUIET"})," \u2192 ",(0,s.jsx)(i.code,{children:"ConsoleReporter.OutputLevel.NONE"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"NORMAL"})," \u2192 ",(0,s.jsx)(i.code,{children:"ConsoleReporter.OutputLevel.LOW"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"VERBOSE"})," \u2192 ",(0,s.jsx)(i.code,{children:"ConsoleReporter.OutputLevel.HIGH"})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Configuration"}),": Set via ",(0,s.jsx)(i.code,{children:"brobot.logging.verbosity"})," property"]}),"\n",(0,s.jsx)(i.h3,{id:"3-image-find-debugging-new",children:"3. Image Find Debugging (New)"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Provides comprehensive debugging for image finding operations with colorful console output and visual reports."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Colorful console output with success/failure indicators"}),"\n",(0,s.jsx)(i.li,{children:"Visual annotations on screenshots"}),"\n",(0,s.jsx)(i.li,{children:"HTML/JSON reports with statistics"}),"\n",(0,s.jsx)(i.li,{children:"Pattern vs match comparison grids"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Auto-configured when enabled"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"AOP interceptors for Find operations"}),"\n",(0,s.jsx)(i.li,{children:"Visual debug renderer"}),"\n",(0,s.jsx)(i.li,{children:"Report generator"}),"\n",(0,s.jsx)(i.li,{children:"Session management"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Configuration"}),": Enable via ",(0,s.jsx)(i.code,{children:"brobot.debug.image.enabled=true"})]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"See"}),": ",(0,s.jsx)(i.a,{href:"/brobot/docs/core-library/tools/image-find-debugging",children:"Image Find Debugging Guide"})," and ",(0,s.jsx)(i.a,{href:"/brobot/docs/core-library/configuration/properties-reference#image-find-debugging",children:"Properties Reference"})]}),"\n",(0,s.jsx)(i.h3,{id:"4-imagepathmanager",children:"4. ImagePathManager"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Intelligent image path resolution with multiple fallback strategies."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Automatic path resolution strategies (absolute, relative, classpath, JAR)"}),"\n",(0,s.jsx)(i.li,{children:"JAR extraction for packaged applications"}),"\n",(0,s.jsx)(i.li,{children:"Image verification and diagnostics"}),"\n",(0,s.jsx)(i.li,{children:"Alternative location checking"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"New Methods"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"// Verify expected images and directories\r\nboolean verifyImageSetup(List<String> expectedDirs, List<String> expectedImages)\r\n\r\n// Get diagnostic information\r\nMap<String, Object> getDiagnostics()\n"})}),"\n",(0,s.jsx)(i.h3,{id:"4-mockconfiguration-with-test-profile-optimization",children:"4. MockConfiguration with Test Profile Optimization"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Automatically optimizes settings when running tests with the ",(0,s.jsx)(i.code,{children:"test"})," profile."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Test Profile Features"})," (activated with ",(0,s.jsx)(i.code,{children:'@Profile("test")'}),"):"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Forces mock mode for consistent testing"}),"\n",(0,s.jsx)(i.li,{children:"Ultra-fast operation timings (0.005-0.02 seconds)"}),"\n",(0,s.jsx)(i.li,{children:"Disables all visual elements (drawing, snapshots)"}),"\n",(0,s.jsx)(i.li,{children:"Removes all mouse pauses and delays"}),"\n",(0,s.jsx)(i.li,{children:"Enables deterministic state management"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Optimized Settings"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-properties",children:"# Automatically applied with test profile\r\nbrobot.mock=true\r\nbrobot.mock.time.find-first=0.01\r\nbrobot.mock.time.click=0.005\r\nbrobot.draw.*=false\r\nbrobot.pause.*=0\n"})}),"\n",(0,s.jsx)(i.h3,{id:"5-brobotautoconfiguration",children:"5. BrobotAutoConfiguration"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Central auto-configuration that ties everything together."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Conditional bean creation based on environment"}),"\n",(0,s.jsx)(i.li,{children:"ExecutionEnvironment detection (mock vs live)"}),"\n",(0,s.jsx)(i.li,{children:"Primary bean designations for conflict resolution"}),"\n",(0,s.jsx)(i.li,{children:"Automatic wrapper configuration"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"6-nativelibrarydebugsuppressor",children:"6. NativeLibraryDebugSuppressor"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Automatically suppresses debug output from JavaCV/FFmpeg native libraries."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:'Suppresses messages like "Debug: Loading library nppig64_12"'}),"\n",(0,s.jsx)(i.li,{children:'Suppresses "Debug: Failed to load for nppig64_12: java.lang.UnsatisfiedLinkError"'}),"\n",(0,s.jsx)(i.li,{children:'Suppresses "Debug: Collecting org.bytedeco.javacpp.Pointer$NativeDeallocator"'}),"\n",(0,s.jsx)(i.li,{children:"Runs very early in startup process via Spring ApplicationContextInitializer"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Configuration"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-properties",children:"# Enable/disable suppression (default: true)\r\nbrobot.native.logging.suppress=true\r\n\r\n# Fine-grained control (defaults: false)\r\nbrobot.javacpp.debug=false\r\nbrobot.javacv.debug=false\n"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Why it's needed"}),": JavaCV/FFmpeg libraries print debug messages directly to stdout/stderr, bypassing Java's logging system. These messages cannot be controlled through standard logging configuration and require system properties to be set before the libraries are loaded."]}),"\n",(0,s.jsx)(i.h3,{id:"6-nativelibrarydebugsuppressor-1",children:"6. NativeLibraryDebugSuppressor"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Purpose"}),": Automatically suppresses debug output from JavaCV/FFmpeg native libraries."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Features"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:'Suppresses messages like "Debug: Loading library nppig64_12"'}),"\n",(0,s.jsx)(i.li,{children:'Suppresses "Debug: Failed to load for nppig64_12: java.lang.UnsatisfiedLinkError"'}),"\n",(0,s.jsx)(i.li,{children:'Suppresses "Debug: Collecting org.bytedeco.javacpp.Pointer$NativeDeallocator"'}),"\n",(0,s.jsx)(i.li,{children:"Runs very early in startup process via Spring ApplicationContextInitializer"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Configuration"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-properties",children:"# Enable/disable suppression (default: true)\r\nbrobot.native.logging.suppress=true\r\n\r\n# Fine-grained control (defaults: false)\r\nbrobot.javacpp.debug=false\r\nbrobot.javacv.debug=false\n"})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Why it's needed"}),": JavaCV/FFmpeg libraries print debug messages directly to stdout/stderr, bypassing Java's logging system. These messages cannot be controlled through standard logging configuration and require system properties to be set before the libraries are loaded."]}),"\n",(0,s.jsx)(i.h2,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,s.jsxs)(i.p,{children:["While Brobot auto-configures most settings, you can override them via ",(0,s.jsx)(i.code,{children:"application.properties"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-properties",children:"# Core settings (usually auto-detected)\r\nbrobot.core.image-path=images          # Auto-resolved by ImagePathManager\r\nbrobot.mock=false            # Auto-set to true in test profile\r\n\r\n# Logging (affects ConsoleReporter output)\r\nbrobot.logging.verbosity=NORMAL        # QUIET, NORMAL, or VERBOSE\r\n\r\n# DPI/Scaling (usually auto-detected)\r\nbrobot.dpi.manual-scaling=125          # Override auto-detection if needed\r\n\r\n# Native Library Debug Suppression (since 1.0)\r\nbrobot.native.logging.suppress=true    # Suppress JavaCV/FFmpeg debug messages (default: true)\r\nbrobot.javacpp.debug=false            # Enable JavaCPP debug output (default: false)\r\nbrobot.javacv.debug=false             # Enable JavaCV debug output (default: false)\r\n\r\n# Native Library Debug Suppression (since 1.0)\r\nbrobot.native.logging.suppress=true    # Suppress JavaCV/FFmpeg debug messages (default: true)\r\nbrobot.javacpp.debug=false            # Enable JavaCPP debug output (default: false)\r\nbrobot.javacv.debug=false             # Enable JavaCV debug output (default: false)\r\n\r\n# Test optimization (auto-applied with test profile)\r\nspring.profiles.active=test            # Activates all test optimizations\n"})}),"\n",(0,s.jsx)(i.h2,{id:"migration-from-application-specific-configuration",children:"Migration from Application-Specific Configuration"}),"\n",(0,s.jsx)(i.p,{children:"If you're migrating from application-specific configuration classes, here's what's now handled by the framework:"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Old Application Config"}),(0,s.jsx)(i.th,{children:"Brobot Framework Replacement"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"SikuliXIDEMatchingConfig"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"BrobotDPIConfiguration"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"ImagePathConfiguration"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"ImagePathManager"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"ConsoleReporterConfiguration"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"ConsoleReporterInitializer"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"ImageSetupVerifier"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"ImagePathManager.verifyImageSetup()"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"CrossVersionCompatibilityConfig"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"BrobotDPIConfiguration"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"TestProfileMockConfiguration"})}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"MockConfiguration.TestProfileOptimization"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Custom JavaCV debug suppression"}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"NativeLibraryDebugSuppressor"})})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"Custom JavaCV debug suppression"}),(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"NativeLibraryDebugSuppressor"})})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Let the framework auto-configure"}),": Don't create custom configuration classes unless absolutely necessary."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Use profiles for environment-specific settings"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"# For testing\r\njava -jar app.jar --spring.profiles.active=test\r\n\r\n# For production\r\njava -jar app.jar --spring.profiles.active=prod\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Override only when necessary"}),": Use properties files to override specific settings rather than creating configuration classes."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Leverage built-in diagnostics"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'@Autowired\r\nprivate ImagePathManager imagePathManager;\r\n\r\n// Get diagnostic information\r\nMap<String, Object> diagnostics = imagePathManager.getDiagnostics();\r\n\r\n// Verify expected images\r\nboolean valid = imagePathManager.verifyImageSetup(\r\n    Arrays.asList("images/states", "images/patterns"),\r\n    Arrays.asList("images/states/home.png", "images/patterns/button.png")\r\n);\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"example-minimal-brobot-application",children:"Example: Minimal Brobot Application"}),"\n",(0,s.jsx)(i.p,{children:"With auto-configuration, a Brobot application needs minimal setup:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'@SpringBootApplication\r\n@ComponentScan(basePackages = {\r\n    "com.myapp",\r\n    "io.github.jspinak.brobot"  // Enables all auto-configuration\r\n})\r\npublic class MyBrobotApp {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MyBrobotApp.class, args);\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(i.p,{children:["Optional ",(0,s.jsx)(i.code,{children:"application.properties"}),":"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-properties",children:"# That's it! Everything else is auto-configured\r\nbrobot.core.image-path=images\r\nbrobot.logging.verbosity=NORMAL\n"})}),"\n",(0,s.jsx)(i.p,{children:"The framework handles all DPI scaling, image path resolution, console output configuration, and test optimizations automatically."})]})}function p(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>a});var r=n(96540);const s={},t=r.createContext(s);function o(e){const i=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);
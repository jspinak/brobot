"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2055],{28453:(e,r,i)=>{i.d(r,{R:()=>o,x:()=>l});var n=i(96540);const t={},s=n.createContext(t);function o(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(s.Provider,{value:r},e.children)}},94283:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"core-library/capture/modular-capture-system","title":"Modular Capture System","description":"Complete guide to Brobot\'s modular screen capture system","source":"@site/docs/03-core-library/capture/modular-capture-system.md","sourceDirName":"03-core-library/capture","slug":"/core-library/capture/modular-capture-system","permalink":"/brobot/docs/core-library/capture/modular-capture-system","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/capture/modular-capture-system.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Modular Capture System","description":"Complete guide to Brobot\'s modular screen capture system","keywords":["screen capture","robot","ffmpeg","sikulix","dpi","physical resolution"]},"sidebar":"docSidebar","previous":{"title":"ActionResult Components Quick Reference","permalink":"/brobot/docs/core-library/action-config/actionresult-components"},"next":{"title":"Capture Quick Reference","permalink":"/brobot/docs/core-library/capture/capture-quick-reference"}}');var t=i(74848),s=i(28453);const o={sidebar_position:1,title:"Modular Capture System",description:"Complete guide to Brobot's modular screen capture system",keywords:["screen capture","robot","ffmpeg","sikulix","dpi","physical resolution"]},l="Modular Screen Capture System",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Configuration",id:"basic-configuration",level:3},{value:"Available Providers",id:"available-providers",level:3},{value:"Provider Details",id:"provider-details",level:2},{value:"SikuliX Provider (Default)",id:"sikulix-provider-default",level:3},{value:"Robot Provider",id:"robot-provider",level:3},{value:"FFmpeg Provider",id:"ffmpeg-provider",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Screen Capture",id:"basic-screen-capture",level:3},{value:"Runtime Provider Switching",id:"runtime-provider-switching",level:3},{value:"Configuration Validation",id:"configuration-validation",level:3},{value:"Configuration Reference",id:"configuration-reference",level:2},{value:"Complete Properties List",id:"complete-properties-list",level:3},{value:"Environment-Specific Profiles",id:"environment-specific-profiles",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Custom Provider Implementation",id:"custom-provider-implementation",level:3},{value:"Provider Selection Logic",id:"provider-selection-logic",level:3},{value:"Handling DPI Scaling",id:"handling-dpi-scaling",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From Direct SikuliX Usage",id:"from-direct-sikulix-usage",level:3},{value:"From Direct Robot Usage",id:"from-direct-robot-usage",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"UnifiedCaptureService",id:"unifiedcaptureservice",level:3},{value:"CaptureConfiguration",id:"captureconfiguration",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"modular-screen-capture-system",children:"Modular Screen Capture System"})}),"\n",(0,t.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(r.p,{children:"Brobot's screen capture system is designed to be completely modular, allowing you to switch between different capture providers (Robot, FFmpeg, SikuliX) with just a single configuration property. This architecture provides maximum flexibility while maintaining a consistent API across all providers."}),"\n",(0,t.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Property-Based Configuration"}),": Switch providers via ",(0,t.jsx)(r.code,{children:"application.properties"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Zero Code Changes"}),": Change capture tools without modifying code"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Automatic Fallback"}),": System selects best available provider"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"DPI Scaling Support"}),": Automatic compensation for Windows scaling"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Unified Interface"}),": Same API regardless of provider"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(r.h3,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,t.jsx)(r.p,{children:"The default configuration uses SikuliX with automatic DPI detection:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# Default settings in brobot-defaults.properties:\r\nbrobot.capture.provider=SIKULIX   # SikuliX for maximum compatibility\r\nbrobot.dpi.disable=false          # Keep DPI awareness enabled for detection\r\nbrobot.dpi.resize-factor=auto     # Automatic DPI detection and compensation\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"No configuration needed!"})," These defaults provide:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Automatic DPI scaling detection"}),"\n",(0,t.jsx)(r.li,{children:"Pattern resize compensation"}),"\n",(0,t.jsx)(r.li,{children:"Maximum compatibility with existing patterns"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"available-providers",children:"Available Providers"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Provider"}),(0,t.jsx)(r.th,{children:"Property Value"}),(0,t.jsx)(r.th,{children:"Dependencies"}),(0,t.jsx)(r.th,{children:"Best For"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"SikuliX"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"SIKULIX"})}),(0,t.jsx)(r.td,{children:"SikuliX library (included)"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.strong,{children:"Default"})," - Maximum compatibility"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Robot"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ROBOT"})}),(0,t.jsx)(r.td,{children:"None (built-in Java)"}),(0,t.jsx)(r.td,{children:"DPI scaling compensation"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"FFmpeg"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"FFMPEG"})}),(0,t.jsx)(r.td,{children:"JavaCV (included in Brobot)"}),(0,t.jsx)(r.td,{children:"True physical capture"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Auto"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"AUTO"})}),(0,t.jsx)(r.td,{children:"None"}),(0,t.jsx)(r.td,{children:"Automatic selection"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"provider-details",children:"Provider Details"}),"\n",(0,t.jsx)(r.h3,{id:"sikulix-provider-default",children:"SikuliX Provider (Default)"}),"\n",(0,t.jsx)(r.p,{children:"SikuliX is the default provider for maximum compatibility with existing patterns and workflows."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Advantages:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Proven compatibility with existing Brobot patterns"}),"\n",(0,t.jsxs)(r.li,{children:["Automatic DPI handling with ",(0,t.jsx)(r.code,{children:"resize-factor=auto"})]}),"\n",(0,t.jsx)(r.li,{children:"Consistent behavior across Brobot versions"}),"\n",(0,t.jsx)(r.li,{children:"Well-tested pattern matching"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Configuration:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.provider=SIKULIX\r\nbrobot.dpi.resize-factor=auto  # Automatic DPI recognition\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Resolution Behavior:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Java 8: Captures at physical resolution"}),"\n",(0,t.jsx)(r.li,{children:"Java 21+: Captures at logical resolution, handled by auto resize-factor"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"robot-provider",children:"Robot Provider"}),"\n",(0,t.jsxs)(r.p,{children:["The Robot provider uses Java's built-in ",(0,t.jsx)(r.code,{children:"java.awt.Robot"})," class with intelligent DPI scaling compensation."]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Advantages:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"No external dependencies"}),"\n",(0,t.jsx)(r.li,{children:"Fast in-memory operations"}),"\n",(0,t.jsx)(r.li,{children:"Automatic DPI scaling to physical resolution"}),"\n",(0,t.jsx)(r.li,{children:"Cross-platform support"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Configuration:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.provider=ROBOT\r\nbrobot.capture.robot.scale-to-physical=true\r\nbrobot.capture.robot.expected-physical-width=1920\r\nbrobot.capture.robot.expected-physical-height=1080\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"DPI Scaling Detection:"}),"\r\nThe Robot provider automatically detects Windows DPI scaling and compensates:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"125% scaling: 1536x864 \u2192 1920x1080"}),"\n",(0,t.jsx)(r.li,{children:"150% scaling: 1280x720 \u2192 1920x1080"}),"\n",(0,t.jsx)(r.li,{children:"200% scaling: 960x540 \u2192 1920x1080"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"ffmpeg-provider",children:"FFmpeg Provider"}),"\n",(0,t.jsx)(r.p,{children:"FFmpeg provides true physical resolution capture without any scaling, using the JavaCV library that's already included in Brobot."}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Advantages:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"True physical resolution capture"}),"\n",(0,t.jsx)(r.li,{children:"Professional-grade quality"}),"\n",(0,t.jsx)(r.li,{children:"Platform-specific optimizations"}),"\n",(0,t.jsx)(r.li,{children:"No scaling artifacts"}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No external installation required"})," (uses bundled JavaCV)"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Configuration:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.provider=FFMPEG\r\nbrobot.capture.ffmpeg.timeout=5\r\nbrobot.capture.ffmpeg.format=png\r\nbrobot.capture.ffmpeg.log-level=error\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Platform-Specific Capture Methods (via JavaCV):"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Windows: Uses ",(0,t.jsx)(r.code,{children:"gdigrab"})]}),"\n",(0,t.jsxs)(r.li,{children:["macOS: Uses ",(0,t.jsx)(r.code,{children:"avfoundation"})]}),"\n",(0,t.jsxs)(r.li,{children:["Linux: Uses ",(0,t.jsx)(r.code,{children:"x11grab"})]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(r.h3,{id:"basic-screen-capture",children:"Basic Screen Capture"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"@Autowired\r\nprivate UnifiedCaptureService captureService;\r\n\r\n// Capture full screen\r\nBufferedImage screen = captureService.captureScreen();\r\n\r\n// Capture specific screen (multi-monitor)\r\nBufferedImage screen1 = captureService.captureScreen(1);\r\n\r\n// Capture region\r\nRectangle region = new Rectangle(100, 100, 400, 300);\r\nBufferedImage regionCapture = captureService.captureRegion(region);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"runtime-provider-switching",children:"Runtime Provider Switching"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"@Autowired\r\nprivate CaptureConfiguration captureConfig;\r\n\r\n// Switch providers at runtime\r\ncaptureConfig.useRobot();     // Use Robot with scaling\r\ncaptureConfig.useFFmpeg();    // Use FFmpeg (if available)\r\ncaptureConfig.useSikuliX();   // Use SikuliX\r\ncaptureConfig.useAuto();      // Automatic selection\r\n\r\n// Check current configuration\r\nString provider = captureConfig.getCurrentProvider();\r\nboolean isPhysical = captureConfig.isCapturingPhysicalResolution();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'// Validate configuration\r\nif (captureConfig.validateConfiguration()) {\r\n    System.out.println("Capture configuration is valid");\r\n}\r\n\r\n// Get detailed configuration report\r\ncaptureConfig.printConfigurationReport();\r\n\r\n// Get all properties\r\nMap<String, String> props = captureConfig.getAllCaptureProperties();\n'})}),"\n",(0,t.jsx)(r.h2,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,t.jsx)(r.h3,{id:"complete-properties-list",children:"Complete Properties List"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# ==================================================\r\n# Main Capture Settings\r\n# ==================================================\r\n# Provider selection: AUTO, ROBOT, FFMPEG, SIKULIX\r\n# Default is SIKULIX for maximum compatibility\r\nbrobot.capture.provider=SIKULIX\r\n\r\n# Prefer physical resolution captures\r\nbrobot.capture.prefer-physical=true\r\n\r\n# Enable fallback to other providers\r\nbrobot.capture.fallback-enabled=true\r\n\r\n# Enable debug logging\r\nbrobot.capture.enable-logging=false\r\n\r\n# Retry configuration\r\nbrobot.capture.auto-retry=true\r\nbrobot.capture.retry-count=3\r\n\r\n# ==================================================\r\n# Robot Provider Settings\r\n# ==================================================\r\n# Scale to physical resolution\r\nbrobot.capture.robot.scale-to-physical=true\r\n\r\n# Expected physical resolution\r\nbrobot.capture.robot.expected-physical-width=1920\r\nbrobot.capture.robot.expected-physical-height=1080\r\n\r\n# ==================================================\r\n# FFmpeg Provider Settings (uses bundled JavaCV)\r\n# ==================================================\r\n# Capture timeout (seconds)\r\nbrobot.capture.ffmpeg.timeout=5\r\n\r\n# Output format\r\nbrobot.capture.ffmpeg.format=png\r\n\r\n# Log level\r\nbrobot.capture.ffmpeg.log-level=error\n"})}),"\n",(0,t.jsx)(r.h3,{id:"environment-specific-profiles",children:"Environment-Specific Profiles"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"# application-dev.properties\r\nbrobot.capture.provider=ROBOT\r\nbrobot.capture.enable-logging=true\r\n\r\n# application-test.properties  \r\nbrobot.capture.provider=AUTO\r\nbrobot.capture.fallback-enabled=true\r\n\r\n# application-prod.properties\r\nbrobot.capture.provider=FFMPEG\r\nbrobot.capture.retry-count=5\n"})}),"\n",(0,t.jsx)(r.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,t.jsx)(r.h3,{id:"custom-provider-implementation",children:"Custom Provider Implementation"}),"\n",(0,t.jsxs)(r.p,{children:["You can create custom capture providers by implementing the ",(0,t.jsx)(r.code,{children:"CaptureProvider"})," interface:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Component\r\npublic class CustomCaptureProvider implements CaptureProvider {\r\n    \r\n    @Override\r\n    public BufferedImage captureScreen() throws IOException {\r\n        // Your implementation\r\n    }\r\n    \r\n    @Override\r\n    public boolean isAvailable() {\r\n        // Check if your provider can work\r\n    }\r\n    \r\n    @Override\r\n    public String getName() {\r\n        return "Custom";\r\n    }\r\n    \r\n    @Override\r\n    public ResolutionType getResolutionType() {\r\n        return ResolutionType.PHYSICAL;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Register as a Spring bean and use via properties:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.provider=CUSTOM\n"})}),"\n",(0,t.jsx)(r.h3,{id:"provider-selection-logic",children:"Provider Selection Logic"}),"\n",(0,t.jsxs)(r.p,{children:["When ",(0,t.jsx)(r.code,{children:"AUTO"})," is configured, the selection order is:"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Configured Provider"})," - If explicitly set and available"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Robot"})," - Always available, preferred for physical resolution"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"FFmpeg"})," - If installed and available"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"SikuliX"})," - Fallback option"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"handling-dpi-scaling",children:"Handling DPI Scaling"}),"\n",(0,t.jsx)(r.p,{children:"The system automatically handles DPI scaling in different ways:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Robot Provider"}),": Detects and compensates via image scaling"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"FFmpeg Provider"}),": Captures at true physical resolution"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"SikuliX Provider"}),": Behavior varies by Java version"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Provider"}),(0,t.jsx)(r.th,{children:"Speed"}),(0,t.jsx)(r.th,{children:"Memory Usage"}),(0,t.jsx)(r.th,{children:"Quality"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Robot"}),(0,t.jsx)(r.td,{children:"Fast"}),(0,t.jsx)(r.td,{children:"Low"}),(0,t.jsx)(r.td,{children:"Good (with scaling)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"FFmpeg"}),(0,t.jsx)(r.td,{children:"Medium"}),(0,t.jsx)(r.td,{children:"Medium"}),(0,t.jsx)(r.td,{children:"Excellent"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"SikuliX"}),(0,t.jsx)(r.td,{children:"Medium"}),(0,t.jsx)(r.td,{children:"Medium"}),(0,t.jsx)(r.td,{children:"Variable"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(r.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Provider Not Available"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"Error: Provider not available: FFMPEG\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Solution:"})," Install FFmpeg or switch to ROBOT provider"]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Wrong Resolution Captured"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"Captured: 1536x864 (expected 1920x1080)\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Solution:"})," Enable Robot scaling:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.robot.scale-to-physical=true\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Capture Fails Intermittently"}),"\r\n",(0,t.jsx)(r.strong,{children:"Solution:"})," Enable retry logic:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.auto-retry=true\r\nbrobot.capture.retry-count=5\n"})}),"\n",(0,t.jsx)(r.h3,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsx)(r.p,{children:"Enable logging to diagnose issues:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.enable-logging=true\n"})}),"\n",(0,t.jsx)(r.p,{children:"Check provider status programmatically:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"System.out.println(captureService.getProvidersInfo());\n"})}),"\n",(0,t.jsx)(r.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,t.jsx)(r.h3,{id:"from-direct-sikulix-usage",children:"From Direct SikuliX Usage"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Before:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"Screen screen = new Screen();\r\nBufferedImage img = screen.capture().getImage();\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"After:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"@Autowired\r\nprivate UnifiedCaptureService captureService;\r\n\r\nBufferedImage img = captureService.captureScreen();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"from-direct-robot-usage",children:"From Direct Robot Usage"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Before:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"Robot robot = new Robot();\r\nBufferedImage img = robot.createScreenCapture(bounds);\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"After:"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"@Autowired\r\nprivate UnifiedCaptureService captureService;\r\n\r\nBufferedImage img = captureService.captureRegion(bounds);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Use Properties for Configuration"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Configure via properties files, not code"}),"\n",(0,t.jsx)(r.li,{children:"Use Spring profiles for different environments"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Enable Fallback for Production"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-properties",children:"brobot.capture.fallback-enabled=true\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Validate Configuration on Startup"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"@PostConstruct\r\npublic void validateCapture() {\r\n    captureConfig.validateConfiguration();\r\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Monitor Provider Status"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Log provider selection"}),"\n",(0,t.jsx)(r.li,{children:"Monitor capture failures"}),"\n",(0,t.jsx)(r.li,{children:"Track performance metrics"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Choose Appropriate Provider"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Development: ",(0,t.jsx)(r.code,{children:"ROBOT"})," (no setup required)"]}),"\n",(0,t.jsxs)(r.li,{children:["CI/CD: ",(0,t.jsx)(r.code,{children:"AUTO"})," (flexible)"]}),"\n",(0,t.jsxs)(r.li,{children:["Production: ",(0,t.jsx)(r.code,{children:"FFMPEG"})," (if accuracy critical)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(r.h3,{id:"unifiedcaptureservice",children:"UnifiedCaptureService"}),"\n",(0,t.jsx)(r.p,{children:"Primary service for all capture operations:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public interface UnifiedCaptureService {\r\n    BufferedImage captureScreen() throws IOException;\r\n    BufferedImage captureScreen(int screenId) throws IOException;\r\n    BufferedImage captureRegion(Rectangle region) throws IOException;\r\n    BufferedImage captureRegion(int screenId, Rectangle region) throws IOException;\r\n    void setProvider(String providerName);\r\n    CaptureProvider getActiveProvider();\r\n    String getProvidersInfo();\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"captureconfiguration",children:"CaptureConfiguration"}),"\n",(0,t.jsx)(r.p,{children:"Configuration and management helper:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public interface CaptureConfiguration {\r\n    void useRobot();\r\n    void useFFmpeg();\r\n    void useSikuliX();\r\n    void useAuto();\r\n    void setCaptureMode(CaptureMode mode);\r\n    String getCurrentProvider();\r\n    boolean isCapturingPhysicalResolution();\r\n    boolean validateConfiguration();\r\n    Map<String, String> getAllCaptureProperties();\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(r.p,{children:"The modular capture system provides:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Complete Flexibility"}),": Switch providers with a single property"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Zero Code Impact"}),": No code changes when switching"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Production Ready"}),": Automatic fallback and retry logic"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"DPI Aware"}),": Handles Windows scaling correctly"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Extensible"}),": Support for custom providers"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["Simply set ",(0,t.jsx)(r.code,{children:"brobot.capture.provider"})," in your properties file and let the system handle the rest!"]})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);
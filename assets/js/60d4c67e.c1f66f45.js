"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2754],{21802:(n,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tutorial-basics/transitions","title":"Transitions","description":"Transitions allow Brobot to move from one state to another. Any state that","source":"@site/versioned_docs/version-1.0.6/tutorial-basics/transitions.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/transitions","permalink":"/brobot/docs/1.0.6/tutorial-basics/transitions","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/tutorial-basics/transitions.md","tags":[],"version":"1.0.6","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"States","permalink":"/brobot/docs/1.0.6/tutorial-basics/states"},"next":{"title":"Define the Capture Region","permalink":"/brobot/docs/1.0.6/tutorial-basics/define-capture-region"}}');var o=i(74848),e=i(28453);const a={sidebar_position:5},r="Transitions",l={},c=[{value:"Home Transitions",id:"home-transitions",level:2},{value:"World Transitions",id:"world-transitions",level:2},{value:"Island Transitions",id:"island-transitions",level:2}];function d(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,e.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"transitions",children:"Transitions"})}),"\n",(0,o.jsx)(t.p,{children:"Transitions allow Brobot to move from one state to another. Any state that\nwill be accessed needs a StateTransitions class."}),"\n",(0,o.jsx)(t.h2,{id:"home-transitions",children:"Home Transitions"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Component\npublic class HomeTransitions {\n\n    private final Action action;\n    private final Home home;\n\n    private StateTransitions transitions;\n\n    public HomeTransitions(StateTransitionsRepository stateTransitionsRepository,\n                           Action action, Home home) {\n        this.action = action;\n        this.home = home;\n        transitions = new StateTransitions.Builder(HOME)\n                .addTransition(this::goToWorld, WORLD)\n                .build();\n        stateTransitionsRepository.add(transitions);\n    }\n\n    private boolean goToWorld() {\n        return action.perform(ActionOptions.Action.CLICK, home.getToWorldButton()).isSuccess();\n    }\n\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"world-transitions",children:"World Transitions"}),"\n",(0,o.jsx)(t.p,{children:"We use the builder for the transition from World to Island since it requires\na special option: in this transition the World state stays visible."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Component\npublic class WorldTransitions {\n\n    private final Action action;\n    private final World world;\n\n    private StateTransitions transitions;\n\n    public WorldTransitions(StateTransitionsRepository stateTransitionsRepository,\n                            Action action, World world) {\n        this.action = action;\n        this.world = world;\n        transitions = new StateTransitions.Builder(WORLD)\n                .addTransitionFinish(this::finishTransition)\n                .addTransition(new StateTransition.Builder()\n                        .addToActivate(ISLAND)\n                        .setFunction(this::goToIsland)\n                        .setStaysVisibleAfterTransition(TRUE)\n                        .build())\n                .build();\n        stateTransitionsRepository.add(transitions);\n    }\n\n    private boolean finishTransition() {\n        ObjectCollection worldImages = new ObjectCollection.Builder()\n                .withAllStateImages(world.getState())\n                .build();\n        return action.perform(FIND, worldImages).isSuccess();\n    }\n\n    public boolean goToIsland() {\n        ActionOptions clickTwice = new ActionOptions.Builder()\n                .setAction(ActionOptions.Action.CLICK)\n                .setTimesToRepeatIndividualAction(2)\n                .setPauseBetweenActions(.2)\n                .build();\n        ObjectCollection searchButton = new ObjectCollection.Builder()\n                .withImages(world.getSearchButton())\n                .build();\n        return action.perform(clickTwice, searchButton).isSuccess();\n    }\n\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"island-transitions",children:"Island Transitions"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:"@Component\npublic class IslandTransitions {\n\n    private final Action action;\n    private final Island island;\n\n    private StateTransitions transitions;\n\n    public IslandTransitions(StateTransitionsRepository stateTransitionsRepository,\n                             Action action, Island island) {\n        this.action = action;\n        this.island = island;\n        transitions = new StateTransitions.Builder(ISLAND)\n                .addTransitionFinish(this::finishTransition)\n                .build();\n        stateTransitionsRepository.add(transitions);\n    }\n\n    private boolean finishTransition() {\n        ObjectCollection worldImages = new ObjectCollection.Builder()\n                .withAllStateImages(island.getState())\n                .build();\n        return action.perform(FIND, worldImages).isSuccess();\n    }\n\n}\n"})})]})}function u(n={}){const{wrapper:t}={...(0,e.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,t,i)=>{i.d(t,{R:()=>a,x:()=>r});var s=i(96540);const o={},e=s.createContext(o);function a(n){const t=s.useContext(e);return s.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(e.Provider,{value:t},n.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[891],{5505:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/states3-98898e923053ebe0970df7aca545cd9d.png"},6085:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"getting-started/states","title":"States","description":"What is a Brobot State?","source":"@site/docs/01-getting-started/states.md","sourceDirName":"01-getting-started","slug":"/getting-started/states","permalink":"/brobot/docs/getting-started/states","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/01-getting-started/states.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"States"},"sidebar":"docSidebar","previous":{"title":"Core Concepts","permalink":"/brobot/docs/getting-started/core-concepts"},"next":{"title":"Transitions","permalink":"/brobot/docs/getting-started/transitions"}}');var i=n(74848),s=n(28453);const o={sidebar_position:3,title:"States"},r=void 0,l={},c=[{value:"What is a Brobot State?",id:"what-is-a-brobot-state",level:2},{value:"Multiple Active States",id:"multiple-active-states",level:3},{value:"Defining States in Code",id:"defining-states-in-code",level:2},{value:"Traditional Approach (From the Paper)",id:"traditional-approach-from-the-paper",level:3},{value:"Modern Approach with @State Annotation (Recommended)",id:"modern-approach-with-state-annotation-recommended",level:3},{value:"Marking Initial States",id:"marking-initial-states",level:3},{value:"State Components and Direct Access",id:"state-components-and-direct-access",level:3},{value:"Why Both Approaches Work",id:"why-both-approaches-work",level:3},{value:"When to Use Each Approach",id:"when-to-use-each-approach",level:3},{value:"Optional: Explicit State with @State",id:"optional-explicit-state-with-state",level:3},{value:"Migration Tips",id:"migration-tips",level:3}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"what-is-a-brobot-state",children:"What is a Brobot State?"}),"\n",(0,i.jsx)(t.p,{children:"A state in Brobot is a collection of related objects, including images, regions, and locations. This relationship usually involves space (objects are often grouped together) and time (objects often appear together). The defining characteristic of a state is the reliability of expected results: when a state is active, a specific action performed on one of its objects should give the same expected result every time."}),"\n",(0,i.jsxs)(t.p,{children:["In the formal model, a ",(0,i.jsx)(t.strong,{children:"State (S)"})," is a collection of related GUI elements chosen to model a distinct configuration of the user interface."]}),"\n",(0,i.jsx)(t.p,{children:'Below is an example of a state in a mobile game. The state holds 5 objects: 1 region, 1 location, and 3 images. Clicking on the image "Raid" should always produce the same result when in this state.'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"island state",src:n(93498).A+"",width:"1920",height:"1080"})}),"\n",(0,i.jsx)(t.h3,{id:"multiple-active-states",children:"Multiple Active States"}),"\n",(0,i.jsxs)(t.p,{children:["In practice, there are usually multiple active states at any time. A key concept in the model is that the visible screen can be described as a set of active states S",(0,i.jsx)("sub",{children:"\u039e"}),". States can transition independently without affecting other active states. When designing your automation, think of what might change as a group and what might not; objects that change together should be included in the same state."]}),"\n",(0,i.jsx)(t.p,{children:"The example below shows a screen with multiple states active simultaneously, each highlighted in a different color."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"States Example",src:n(5505).A+"",width:"2560",height:"1600"})}),"\n",(0,i.jsx)(t.h2,{id:"defining-states-in-code",children:"Defining States in Code"}),"\n",(0,i.jsx)(t.p,{children:"Brobot provides two approaches for defining states: the traditional approach shown in the research paper and the modern annotation-based approach introduced in version 1.1.0+."}),"\n",(0,i.jsx)(t.h3,{id:"traditional-approach-from-the-paper",children:"Traditional Approach (From the Paper)"}),"\n",(0,i.jsx)(t.p,{children:"This approach uses manual registration with the StateService:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@Component\n@Getter\npublic class Home { \n    public enum Name implements StateEnum { HOME } \n    \n    private StateImageObject toWorldButton = new StateImageObject.Builder() \n        .withImage("toWorldButton") \n        .isFixed(true) \n        .addSnapshot(new MatchSnapshot(220, 600, 20, 20)) \n        .build(); \n\n    private State state = new State.Builder(HOME) \n        .withImages(toWorldButton) \n        .build(); \n\n    public Home(StateService stateService) { \n        stateService.save(state); \n    } \n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Key characteristics:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Manual state registration in constructor"}),"\n",(0,i.jsxs)(t.li,{children:["Uses ",(0,i.jsx)(t.code,{children:"StateImageObject"})," (older API)"]}),"\n",(0,i.jsxs)(t.li,{children:["Requires explicit ",(0,i.jsx)(t.code,{children:"@Component"})," annotation"]}),"\n",(0,i.jsx)(t.li,{children:"State saved during construction"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"modern-approach-with-state-annotation-recommended",children:"Modern Approach with @State Annotation (Recommended)"}),"\n",(0,i.jsxs)(t.p,{children:["The modern approach uses the ",(0,i.jsx)(t.code,{children:"@State"})," annotation for automatic registration and cleaner code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@State  // Automatically registers as Spring component and Brobot state\n@Getter\n@Slf4j\npublic class HomeState {\n    private final StateImage toWorldButton;  // Only define the components you need\n    \n    public enum Name implements StateEnum { HOME }\n    \n    public HomeState() {\n        // Just initialize the components - no State object needed!\n        toWorldButton = new StateImage.Builder()\n            .addPatterns("toWorldButton")  // No .png extension needed\n            .setName("ToWorldButton")\n            .build();\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Key improvements:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@State"})," annotation handles everything automatically"]}),"\n",(0,i.jsx)(t.li,{children:"No need to manually create a State object"}),"\n",(0,i.jsx)(t.li,{children:"Framework extracts components via reflection"}),"\n",(0,i.jsxs)(t.li,{children:["Uses ",(0,i.jsx)(t.code,{children:"StateImage"})," (modern API) instead of ",(0,i.jsx)(t.code,{children:"StateImageObject"})]}),"\n",(0,i.jsx)(t.li,{children:"Cleaner, less boilerplate code"}),"\n",(0,i.jsx)(t.li,{children:"Better naming convention (HomeState vs Home)"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"marking-initial-states",children:"Marking Initial States"}),"\n",(0,i.jsx)(t.p,{children:"For states that should be active when the application starts:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@State(initial = true)  // Marks as initial state for state machine\n@Getter\n@Slf4j\npublic class HomeState {\n    // State definition\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"state-components-and-direct-access",children:"State Components and Direct Access"}),"\n",(0,i.jsx)(t.p,{children:"The modern approach encourages exposing frequently-used components:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@State\n@Getter\n@Slf4j\npublic class GameMenuState {\n    private final StateImage playButton;\n    private final StateImage settingsButton;\n    private final StateImage exitButton;\n    private final StateRegion menuArea;\n    \n    public enum Name implements StateEnum { GAME_MENU }\n    \n    public GameMenuState() {\n        // Create all components with direct access\n        playButton = new StateImage.Builder()\n            .addPatterns("menu/play-button")\n            .setName("PlayButton")\n            .build();\n            \n        settingsButton = new StateImage.Builder()\n            .addPatterns("menu/settings-button")\n            .setName("SettingsButton")\n            .build();\n            \n        exitButton = new StateImage.Builder()\n            .addPatterns("menu/exit-button")\n            .setName("ExitButton")\n            .build();\n            \n        menuArea = new StateRegion.Builder()\n            .setSearchRegion(new Region(100, 100, 400, 600))\n            .setName("MenuArea")\n            .build();\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"This pattern provides clean access in transitions:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@TransitionSet(state = GamePlayState.class)\n@Component\n@RequiredArgsConstructor\npublic class GamePlayTransitions {\n    private final GameMenuState menuState;\n    private final GamePlayState gamePlayState;\n    private final Action action;\n    \n    @FromTransition(from = GameMenuState.class, priority = 1)\n    public boolean fromMenu() {\n        // In mock mode, return true for testing\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            return true;\n        }\n        // Direct, readable access to state components\n        return action.click(menuState.getPlayButton()).isSuccess();\n    }\n    \n    @IncomingTransition(required = true)\n    public boolean verifyArrival() {\n        // Verify we're in the game play state\n        if (io.github.jspinak.brobot.config.core.FrameworkSettings.mock) {\n            return true;\n        }\n        return action.find(gamePlayState.getGameBoard()).isSuccess();\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"why-both-approaches-work",children:"Why Both Approaches Work"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"@State"})," annotation uses reflection through ",(0,i.jsx)(t.code,{children:"AnnotatedStateBuilder"})," and ",(0,i.jsx)(t.code,{children:"StateComponentExtractor"})," to:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Automatically extract"})," all StateImage, StateRegion, StateLocation, and StateString fields from the class"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Build a State object"})," internally using the extracted components"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Register it"})," with the state management system"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This means:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["When you use ",(0,i.jsx)(t.code,{children:"@State"}),", you don't need an explicit ",(0,i.jsx)(t.code,{children:"state"})," field"]}),"\n",(0,i.jsx)(t.li,{children:"The framework creates the State object for you"}),"\n",(0,i.jsx)(t.li,{children:'It derives the state name from the class name (removing "State" suffix if present)'}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"when-to-use-each-approach",children:"When to Use Each Approach"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Use the traditional approach (with explicit State object) when:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Working with legacy code that predates @State"}),"\n",(0,i.jsx)(t.li,{children:"You need explicit control over state construction"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Use the modern approach (components only) when:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"You want cleaner, less boilerplate code"}),"\n",(0,i.jsx)(t.li,{children:"You only need access to the components (most common case)"}),"\n",(0,i.jsx)(t.li,{children:"Building new projects with Brobot 1.1.0+"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"optional-explicit-state-with-state",children:"Optional: Explicit State with @State"}),"\n",(0,i.jsxs)(t.p,{children:["While not necessary, you ",(0,i.jsx)(t.em,{children:"can"})," still define an explicit ",(0,i.jsx)(t.code,{children:"state"})," field with @State if you need direct access:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'@State\n@Getter\npublic class HomeState {\n    private final State state;  // Optional - only if you need it\n    private final StateImage toWorldButton;\n    \n    public HomeState() {\n        toWorldButton = new StateImage.Builder()...\n        // Manual state creation - framework will use this instead of creating its own\n        state = new State.Builder("HOME")...\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"However, this is rarely needed since:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Transitions work with components directly"}),"\n",(0,i.jsx)(t.li,{children:"State navigation uses state names/enums"}),"\n",(0,i.jsx)(t.li,{children:"The framework manages the State object internally"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"migration-tips",children:"Migration Tips"}),"\n",(0,i.jsx)(t.p,{children:"When migrating from traditional to modern approach:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Add ",(0,i.jsx)(t.code,{children:"@State"})," annotation to existing state classes"]}),"\n",(0,i.jsxs)(t.li,{children:["Remove manual ",(0,i.jsx)(t.code,{children:"stateService.save()"})," calls"]}),"\n",(0,i.jsxs)(t.li,{children:["Remove the explicit ",(0,i.jsx)(t.code,{children:"state"})," field (unless you specifically need it)"]}),"\n",(0,i.jsxs)(t.li,{children:["Update ",(0,i.jsx)(t.code,{children:"StateImageObject"})," to ",(0,i.jsx)(t.code,{children:"StateImage"})]}),"\n",(0,i.jsx)(t.li,{children:"Consider renaming classes to follow StateNameState convention"}),"\n",(0,i.jsx)(t.li,{children:"Expose commonly-used components as fields with getters"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(96540);const i={},s=a.createContext(i);function o(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:t},e.children)}},93498:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/island-state-10c9fdb01510eea2bee9021317d9441c.jpeg"}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8296],{28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var t=n(96540);const a={},s=t.createContext(a);function o(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:i},e.children)}},29224:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>h,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"API/state structure/image-analysis","title":"Image Analysis","description":"How carefully you select your images and define your regions","source":"@site/versioned_docs/version-1.0.6/API/state structure/image-analysis.md","sourceDirName":"API/state structure","slug":"/API/state structure/image-analysis","permalink":"/brobot/docs/1.0.6/API/state structure/image-analysis","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/API/state structure/image-analysis.md","tags":[],"version":"1.0.6","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docSidebar","previous":{"title":"Attributes","permalink":"/brobot/docs/1.0.6/API/state structure/attributes"},"next":{"title":"Transitions","permalink":"/brobot/docs/1.0.6/API/state structure/transitions"}}');var a=n(74848),s=n(28453);const o={sidebar_position:4},r="Image Analysis",h={},l=[{value:"Common issues with images and regions",id:"common-issues-with-images-and-regions",level:2},{value:"Brobot&#39;s image analysis",id:"brobots-image-analysis",level:2},{value:"Using the image analysis",id:"using-the-image-analysis",level:2},{value:"Multiple matches found",id:"multiple-matches-found",level:3},{value:"Image not found",id:"image-not-found",level:3},{value:"Defining regions",id:"defining-regions",level:2},{value:"Defining regions without static images",id:"defining-regions-without-static-images",level:3},{value:"Defining regions with variable-location images",id:"defining-regions-with-variable-location-images",level:3},{value:"Defining the region of a State",id:"defining-the-region-of-a-state",level:3}];function d(e){const i={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"image-analysis",children:"Image Analysis"})}),"\n",(0,a.jsx)(i.p,{children:"How carefully you select your images and define your regions\nwill be key to the robustness and\neffectiveness of your automation application. Identifying\nthe optimal images to use early on will save you lots of time and frustration.\nIdeally, you should analyze and optimize your images before writing any code.\nBrobot has functionality that is dedicated to pre-code image analysis. It works together\nwith the State Structure builder to give you an idea of which images may cause\nproblems and what you may want to change."}),"\n",(0,a.jsx)(i.h2,{id:"common-issues-with-images-and-regions",children:"Common issues with images and regions"}),"\n",(0,a.jsx)(i.p,{children:"Adjusting the minimum similarity of images is a common technique for situations\nwhere an image is not recognized as we expect. The image may vary slightly but still\nneeds to be found with high certainty, in which case the minimum similarity would\nbe lowered. Minimum similarity is also adjusted upwards, in scenarios where similar images\nexist on the screen, and it's important to find only the one we want. Both scenarios\ninvolve trial-and-error programming, a technique that we want to avoid when\ndeveloping automation software. Ideally, we will choose images that don't require\nadjusting the minimum similarity at some point down the line."}),"\n",(0,a.jsxs)(i.p,{children:["Sometimes we can't choose an image that is unique. For example, we have a\nclose button like the 'X' at the top right of a window that is the same for\nall windows in the environment. In this case, it is best to\nset the SearchRegion to look for only the button we want to press.",(0,a.jsx)(i.br,{}),"\n","In addition, the close image should be defined as ",(0,a.jsx)(i.code,{children:"shared"})," so that it is not\nused to find a State in the case that Brobot gets lost."]}),"\n",(0,a.jsx)(i.p,{children:"Defining regions can be difficult during execution. If we are working with\nimages that don't always appear in the same location, we may want to identify the\narea where they could appear and limit our search to this area. Even if\nwe know in advance where this area is, identifying the exact coordinates on the\nscreen is not always easy to do and the results can be imprecise.\nFinding regions during\nexecution is especially difficult when the regions contain few or no static\nimages."}),"\n",(0,a.jsx)(i.h2,{id:"brobots-image-analysis",children:"Brobot's image analysis"}),"\n",(0,a.jsx)(i.p,{children:"During the process that builds the StateStructure, an analysis of each screenshot\nis output to the console. This analysis contains information on GROUP_DEFINE and\nTRANSFER operations as well as images and their matches under the following conditions:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsx)(i.li,{children:"at least one match is found"}),"\n",(0,a.jsx)(i.li,{children:"an active attribute fails"}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"using-the-image-analysis",children:"Using the image analysis"}),"\n",(0,a.jsx)(i.p,{children:"Errors in the attribute operations give us valuable information about our images."}),"\n",(0,a.jsx)(i.h3,{id:"multiple-matches-found",children:"Multiple matches found"}),"\n",(0,a.jsxs)(i.p,{children:["If an image should be found only once but is found multiple times in a screenshot,\nwe know that this is either a shared image or that it should be changed or replaced.\nShared images are sometimes necessary, but should include a defined SearchRegion\nwhen possible. When an image does not have an active MULTIPLE_MATCHES attribute and\nappears multiple times, it is initialized with the field ",(0,a.jsx)(i.code,{children:".isShared(true)"}),". Images\nthat are meant to be unique and appear once but are found multiple times are problems.\nYou should check out the screenshot and try to find the matches from the coordinates\ngiven in the image analysis. If changing or replacing the image is not possible, think\nabout either defining the image's SearchRegion\nto exclude the other matches or using a different strategy to achieve your goal."]}),"\n",(0,a.jsx)(i.h3,{id:"image-not-found",children:"Image not found"}),"\n",(0,a.jsx)(i.p,{children:"Not finding an image at all when it should be found is a sign of a poorly chosen image,\nor of a non-static image that is not well suited for traditional image recognition.\nIf there is no way to use an image that is more static, you may want to change your\nstrategy for this specific process. There are almost always multiple ways to achieve\nthings in process automation."}),"\n",(0,a.jsx)(i.p,{children:"Failure to define a region is usually caused by not finding an image. Finding\ntoo many matches or finding an image in the wrong place can result in an\nincorrectly defined region. The coordinates and size of defined regions are printed\nto the console along with information about images and matches."}),"\n",(0,a.jsx)(i.h2,{id:"defining-regions",children:"Defining regions"}),"\n",(0,a.jsx)(i.p,{children:"Having well-defined SearchRegions will make your process flow more robust,\nand many regions can and should be defined before execution by the\nState Structure build process."}),"\n",(0,a.jsx)(i.h3,{id:"defining-regions-without-static-images",children:"Defining regions without static images"}),"\n",(0,a.jsx)(i.p,{children:"Static images are ones that do not change their appearance. Fixed-location images are\nones that do not change their location. Finding regions without static, fixed-location\nimages is very difficult during a real run, but can be easily captured when using\nscreenshots. Take, for example, the minimap portrayed here after this paragraph.\nTo find the region of the minimap during a real run, I would try to find\nthe one static and fixed-location image, the small circle in the top left with\n2D written on it,\nand then adjust the region around this match by guessing and readjusting my guesses\nthrough trial and error.\nIf there were no static, fixed-location images, I would try to find\nsuch images outside the minimap and adjust the region accordingly."}),"\n",(0,a.jsx)("img",{src:"https://jspinak.github.io/brobot/img/minimap.png",alt:"minimap",width:"200"}),"\n",(0,a.jsxs)(i.p,{children:["The attribute to use in this situation is REGION. When the filename of an image\ncontains the String ",(0,a.jsx)(i.code,{children:"_r"}),", it will search for the image and write a StateRegion\nwith a pre-defined SearchRegion to the corresponding State. In order not to\nreceive error messages in the image analysis for every other screenshot, make\nsure to specify the screenshot to use after the ",(0,a.jsx)(i.code,{children:"_r"})," (i.e. ",(0,a.jsx)(i.code,{children:"_r28"}),")."]}),"\n",(0,a.jsx)(i.h3,{id:"defining-regions-with-variable-location-images",children:"Defining regions with variable-location images"}),"\n",(0,a.jsxs)(i.p,{children:["There are regions that have a variable number of images, each with\nvariable locations. We may want to find the region that includes all of them,\nin order to make our searches faster and more effective.\nThere are two ways to do this. The first is to take an image of the area you\nthink you need and give\nit the TRANSFER attribute for this screenshot. The TRANSFER attribute will\ntransfer the match to the SearchRegions of all images in the State.",(0,a.jsx)(i.br,{}),"\n","Another option is to use GROUP_DEFINE, which will set the SearchRegions of each\nimage in the group to be the union of their matches."]}),"\n",(0,a.jsx)(i.h3,{id:"defining-the-region-of-a-state",children:"Defining the region of a State"}),"\n",(0,a.jsx)(i.p,{children:"Many States have one area of the screen where all the State objects can be found.\nIt is a good idea to set this region to be the SearchRegion for all images in the\nState. Doing this with the StateStructure builder is easy. The attributes to use\nare TRANSFER or GROUP_DEFINE."})]})}function c(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);
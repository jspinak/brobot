"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9055],{4116:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"core-library/action-config/conditional-action-wrapper","title":"ConditionalActionWrapper","description":"Spring-friendly wrapper for ConditionalActionChain with comparison to FindAndClick/FindAndType","source":"@site/docs/03-core-library/action-config/16-conditional-action-wrapper.md","sourceDirName":"03-core-library/action-config","slug":"/core-library/action-config/conditional-action-wrapper","permalink":"/brobot/docs/core-library/action-config/conditional-action-wrapper","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/action-config/16-conditional-action-wrapper.md","tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"sidebar_position":16,"title":"ConditionalActionWrapper","description":"Spring-friendly wrapper for ConditionalActionChain with comparison to FindAndClick/FindAndType"},"sidebar":"docSidebar","previous":{"title":"Enhanced Conditional Action Chains","permalink":"/brobot/docs/core-library/action-config/conditional-chains-examples"},"next":{"title":"ActionResult Components Quick Reference","permalink":"/brobot/docs/core-library/action-config/actionresult-components"}}');var o=e(74848),a=e(28453);const l={sidebar_position:16,title:"ConditionalActionWrapper",description:"Spring-friendly wrapper for ConditionalActionChain with comparison to FindAndClick/FindAndType"},r="ConditionalActionWrapper",c={},d=[{value:"Overview",id:"overview",level:2},{value:"ConditionalActionWrapper vs FindAndClick/FindAndType",id:"conditionalactionwrapper-vs-findandclickfindandtype",level:2},{value:"FindAndClick and FindAndType",id:"findandclick-and-findandtype",level:3},{value:"ConditionalActionWrapper",id:"conditionalactionwrapper-1",level:3},{value:"When to Use Each",id:"when-to-use-each",level:2},{value:"Use FindAndClick/FindAndType When:",id:"use-findandclickfindandtype-when",level:3},{value:"Use ConditionalActionWrapper When:",id:"use-conditionalactionwrapper-when",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Setup",id:"setup",level:3},{value:"Simple Operations",id:"simple-operations",level:3},{value:"Building Conditional Chains",id:"building-conditional-chains",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Error Recovery",id:"error-recovery",level:3},{value:"Multi-Step Form Filling",id:"multi-step-form-filling",level:3},{value:"Retry Pattern",id:"retry-pattern",level:3},{value:"Comparison Example",id:"comparison-example",level:2},{value:"Using FindAndClick (No Conditions)",id:"using-findandclick-no-conditions",level:3},{value:"Using ConditionalActionChain (Direct API)",id:"using-conditionalactionchain-direct-api",level:3},{value:"Using ConditionalActionWrapper (Spring-Friendly)",id:"using-conditionalactionwrapper-spring-friendly",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Dependency Injection",id:"1-use-dependency-injection",level:3},{value:"2. Create Reusable Methods",id:"2-create-reusable-methods",level:3},{value:"3. Handle Results Appropriately",id:"3-handle-results-appropriately",level:3},{value:"4. Use Static Factory Methods",id:"4-use-static-factory-methods",level:3},{value:"Integration with Spring Boot",id:"integration-with-spring-boot",level:2},{value:"Configuration Class",id:"configuration-class",level:3},{value:"Using in Tests",id:"using-in-tests",level:3},{value:"Summary",id:"summary",level:2}];function s(n){const i={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"conditionalactionwrapper",children:"ConditionalActionWrapper"})}),"\n",(0,o.jsx)(i.p,{children:"The ConditionalActionWrapper is a Spring-friendly utility that simplifies the use of ConditionalActionChain in Spring Boot applications. It provides convenient methods for common patterns and integrates seamlessly with dependency injection."}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Note:"})," ConditionalActionWrapper now uses the enhanced ",(0,o.jsx)(i.code,{children:"ConditionalActionChain"})," internally, providing access to improved convenience methods and enhanced functionality."]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(i.p,{children:"ConditionalActionWrapper serves as a bridge between Spring applications and Brobot's ConditionalActionChain, offering:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Spring Integration"}),": ",(0,o.jsx)(i.code,{children:"@Component"})," annotation for easy dependency injection"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Simplified API"}),": Convenient methods for common patterns"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Fluent Builder"}),": Clean, readable chain construction"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Type Safety"}),": Works with StateObject interface"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"conditionalactionwrapper-vs-findandclickfindandtype",children:"ConditionalActionWrapper vs FindAndClick/FindAndType"}),"\n",(0,o.jsx)(i.p,{children:"Brobot provides multiple ways to combine actions. Understanding the differences helps you choose the right tool:"}),"\n",(0,o.jsx)(i.h3,{id:"findandclick-and-findandtype",children:"FindAndClick and FindAndType"}),"\n",(0,o.jsxs)(i.p,{children:["These are ",(0,o.jsx)(i.strong,{children:"composite ActionConfig"})," classes that bundle actions together:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"// FindAndClick - always finds then clicks\nFindAndClick findAndClick = new FindAndClick.Builder()\n    .withSimilarity(0.9)\n    .withNumberOfClicks(2)\n    .build();\n\naction.perform(findAndClick, objectCollection);\n\n// FindAndType - always finds, clicks, then types\nFindAndType findAndType = new FindAndType.Builder()\n    .withFindOptions(customFindOptions)\n    .withTypeOptions(customTypeOptions)\n    .build();\n\naction.perform(findAndType, objectCollection);\n"})}),"\n",(0,o.jsx)(i.p,{children:(0,o.jsx)(i.strong,{children:"Characteristics:"})}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Execute all actions sequentially (no conditional logic)"}),"\n",(0,o.jsx)(i.li,{children:"Configuration objects (not Spring components)"}),"\n",(0,o.jsx)(i.li,{children:"Simple, straightforward for basic sequences"}),"\n",(0,o.jsx)(i.li,{children:"If find fails, click/type still attempt to execute"}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"conditionalactionwrapper-1",children:"ConditionalActionWrapper"}),"\n",(0,o.jsxs)(i.p,{children:["This provides ",(0,o.jsx)(i.strong,{children:"conditional execution"})," with Spring integration:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Autowired\nprivate ConditionalActionWrapper actions;\n\n// Conditional execution - only clicks if found\nactions.findAndClick(submitButton);\n\n// Complex conditional chains\nactions.createChain()\n    .find(loginButton)\n    .ifFoundClick()\n    .ifNotFound(actions.find(alternativeButton))\n    .ifFoundClick()\n    .ifNotFoundLog("No login button found")\n    .execute();\n'})}),"\n",(0,o.jsx)(i.p,{children:(0,o.jsx)(i.strong,{children:"Characteristics:"})}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Conditional execution based on success/failure"}),"\n",(0,o.jsx)(i.li,{children:"Spring component (injectable)"}),"\n",(0,o.jsx)(i.li,{children:"Supports complex branching logic"}),"\n",(0,o.jsx)(i.li,{children:"Better error handling and logging"}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"when-to-use-each",children:"When to Use Each"}),"\n",(0,o.jsx)(i.h3,{id:"use-findandclickfindandtype-when",children:"Use FindAndClick/FindAndType When:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"You always want to execute all steps"}),"\n",(0,o.jsx)(i.li,{children:"You don't need conditional logic"}),"\n",(0,o.jsx)(i.li,{children:"You're not using Spring dependency injection"}),"\n",(0,o.jsx)(i.li,{children:"Simple, predictable sequences are sufficient"}),"\n"]}),"\n",(0,o.jsx)(i.h3,{id:"use-conditionalactionwrapper-when",children:"Use ConditionalActionWrapper When:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"You need conditional execution paths"}),"\n",(0,o.jsx)(i.li,{children:"You want better error handling"}),"\n",(0,o.jsx)(i.li,{children:"You're in a Spring Boot application"}),"\n",(0,o.jsx)(i.li,{children:"You need complex conditional chains"}),"\n",(0,o.jsx)(i.li,{children:"You want to log success/failure at each step"}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(i.h3,{id:"setup",children:"Setup"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"@Component\npublic class LoginAutomation {\n    private final ConditionalActionWrapper actions;\n    \n    @Autowired\n    public LoginAutomation(ConditionalActionWrapper actions) {\n        this.actions = actions;\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"simple-operations",children:"Simple Operations"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Find and click with automatic error handling\npublic void clickLoginButton(StateImage loginButton) {\n    ActionResult result = actions.findAndClick(loginButton);\n    \n    if (!result.isSuccess()) {\n        log.error("Failed to click login button");\n    }\n}\n\n// Find and type\npublic void enterCredentials(StateImage usernameField, String username) {\n    actions.findAndType(usernameField, username);\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"building-conditional-chains",children:"Building Conditional Chains"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'public ActionResult performLogin(StateImage loginButton, \n                               StateImage usernameField,\n                               StateImage passwordField,\n                               String username,\n                               String password) {\n    return actions.createChain()\n        .find(loginButton)\n        .ifFoundClick()\n        .ifNotFoundLog("Login button not visible")\n        .always(ConditionalActionWrapper.find())\n        .find(usernameField)\n        .ifFoundClick()\n        .ifFoundType(username)\n        .execute();\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,o.jsx)(i.h3,{id:"error-recovery",children:"Error Recovery"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'public ActionResult saveWithFallback(StateImage saveButton, \n                                   StateImage fileMenu,\n                                   StateImage saveMenuItem) {\n    return actions.createChain()\n        // Try the save button first\n        .find(saveButton)\n        .ifFoundClick()\n        \n        // If not found, try menu approach\n        .ifNotFound(actions.createChain()\n            .find(fileMenu)\n            .ifFoundClick()\n            .find(saveMenuItem)\n            .ifFoundClick()\n            .execute())\n        \n        // Log the result\n        .ifFoundLog("Document saved successfully")\n        .ifNotFoundLog("Failed to save document")\n        .execute();\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"multi-step-form-filling",children:"Multi-Step Form Filling"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Service\npublic class FormAutomation {\n    @Autowired\n    private ConditionalActionWrapper actions;\n    \n    public ActionResult fillRegistrationForm(RegistrationData data) {\n        ChainBuilder chain = actions.createChain();\n        \n        // Find and fill each field conditionally\n        chain.find(nameField)\n            .ifFoundClick()\n            .ifFoundType(data.getName())\n            .ifFoundLog("Entering name: " + data.getName());\n            \n        // Add email field\n        chain.find(emailField)\n            .ifFoundClick()\n            .ifFoundType(data.getEmail())\n            .ifFoundLog("Entering email: " + data.getEmail());\n            \n        // Submit only if all fields were found\n        chain.find(submitButton)\n            .ifFoundClick()\n            .ifFoundLog("Form submitted")\n            .ifNotFoundLog("Submit button not found - form incomplete");\n            \n        return chain.execute();\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"retry-pattern",children:"Retry Pattern"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'public ActionResult clickWithRetry(StateObject target, int maxAttempts) {\n    for (int i = 0; i < maxAttempts; i++) {\n        ActionResult result = actions.findAndClick(target);\n        \n        if (result.isSuccess()) {\n            log.info("Successfully clicked on attempt {}", i + 1);\n            return result;\n        }\n        \n        log.warn("Attempt {} failed, retrying...", i + 1);\n        Thread.sleep(1000); // Wait before retry\n    }\n    \n    log.error("Failed to click after {} attempts", maxAttempts);\n    return new ActionResult.Builder().setSuccess(false).build();\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"comparison-example",children:"Comparison Example"}),"\n",(0,o.jsx)(i.p,{children:"Here's the same task implemented three ways:"}),"\n",(0,o.jsx)(i.h3,{id:"using-findandclick-no-conditions",children:"Using FindAndClick (No Conditions)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"// Simple but inflexible - always tries to click even if find fails\npublic void submitForm() {\n    FindAndClick submitAction = new FindAndClick.Builder()\n        .withSimilarity(0.9)\n        .build();\n        \n    action.perform(submitAction, new ObjectCollection.Builder()\n        .withImages(submitButton)\n        .build());\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"using-conditionalactionchain-direct-api",children:"Using ConditionalActionChain (Direct API)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Flexible but verbose\npublic void submitForm() {\n    ConditionalActionChain.find(new PatternFindOptions.Builder().build())\n        .ifFoundClick()\n        .ifNotFoundLog("Submit button not found")\n        .perform(action, new ObjectCollection.Builder()\n            .withImages(submitButton)\n            .build());\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"using-conditionalactionwrapper-spring-friendly",children:"Using ConditionalActionWrapper (Spring-Friendly)"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'// Clean, Spring-integrated, and flexible\n@Autowired\nprivate ConditionalActionWrapper actions;\n\npublic void submitForm() {\n    actions.createChain()\n        .find(submitButton)\n        .ifFoundClick()\n        .ifNotFoundLog("Submit button not found")\n        .execute();\n}\n'})}),"\n",(0,o.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(i.h3,{id:"1-use-dependency-injection",children:"1. Use Dependency Injection"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"@Configuration\npublic class AutomationConfig {\n    @Bean\n    public ConditionalActionWrapper conditionalActionWrapper(Action action) {\n        return new ConditionalActionWrapper(action);\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"2-create-reusable-methods",children:"2. Create Reusable Methods"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Component\npublic class CommonActions {\n    @Autowired\n    private ConditionalActionWrapper actions;\n    \n    public ActionResult clickIfExists(StateObject element) {\n        return actions.createChain()\n            .find(element)\n            .ifFoundClick()\n            .ifNotFoundLog("Optional element not found: " + element.getName())\n            .execute();\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"3-handle-results-appropriately",children:"3. Handle Results Appropriately"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'public boolean performCriticalAction(StateObject target) {\n    ActionResult result = actions.findAndClick(target);\n    \n    if (!result.isSuccess()) {\n        // Log error details\n        log.error("Critical action failed: {}", result.getText());\n        \n        // Take screenshot for debugging\n        captureScreenshot("critical-action-failure");\n        \n        // Alert monitoring system\n        alertOps("Critical UI element not found: " + target.getName());\n        \n        return false;\n    }\n    \n    return true;\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"4-use-static-factory-methods",children:"4. Use Static Factory Methods"}),"\n",(0,o.jsx)(i.p,{children:"ConditionalActionWrapper provides static factory methods for common actions:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'import static com.example.ConditionalActionWrapper.*;\n\nactions.createChain()\n    .find(element)\n    .ifFoundClick()        // Convenience method\n    .ifFoundType("text")   // Convenience method\n    .thenFind()            // Chain method\n    .execute();\n'})}),"\n",(0,o.jsx)(i.h2,{id:"integration-with-spring-boot",children:"Integration with Spring Boot"}),"\n",(0,o.jsx)(i.h3,{id:"configuration-class",children:"Configuration Class"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:'@Configuration\n@EnableAutoConfiguration\npublic class BrobotConfiguration {\n    \n    @Bean\n    @ConditionalOnMissingBean\n    public ConditionalActionWrapper conditionalActionWrapper(Action action) {\n        return new ConditionalActionWrapper(action);\n    }\n    \n    @Bean\n    @ConditionalOnProperty(\n        prefix = "brobot.conditional",\n        name = "logging.enabled",\n        havingValue = "true",\n        matchIfMissing = true\n    )\n    public ConditionalActionLogger conditionalActionLogger() {\n        return new ConditionalActionLogger();\n    }\n}\n'})}),"\n",(0,o.jsx)(i.h3,{id:"using-in-tests",children:"Using in Tests"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-java",children:"@SpringBootTest\npublic class LoginAutomationTest {\n    \n    @MockBean\n    private Action mockAction;\n    \n    @Autowired\n    private ConditionalActionWrapper actions;\n    \n    @Test\n    public void testConditionalLogin() {\n        // Setup mock responses\n        when(mockAction.perform(any(), any()))\n            .thenReturn(successfulResult());\n            \n        // Test the conditional flow\n        ActionResult result = actions.createChain()\n            .find(loginButton)\n            .ifFoundClick()\n            .execute();\n            \n        assertTrue(result.isSuccess());\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(i.p,{children:"ConditionalActionWrapper enhances Brobot's automation capabilities by:"}),"\n",(0,o.jsxs)(i.ol,{children:["\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Providing Spring Integration"}),": Easy dependency injection and configuration"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Simplifying Conditional Logic"}),": Clean API for complex conditional flows"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Improving Error Handling"}),": Built-in logging and error recovery patterns"]}),"\n",(0,o.jsxs)(i.li,{children:[(0,o.jsx)(i.strong,{children:"Complementing Existing Tools"}),": Works alongside FindAndClick/FindAndType for different use cases"]}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"Choose ConditionalActionWrapper when you need conditional execution, Spring integration, or complex automation flows. Use FindAndClick/FindAndType for simple, always-execute sequences where Spring integration isn't required."})]})}function u(n={}){const{wrapper:i}={...(0,a.R)(),...n.components};return i?(0,o.jsx)(i,{...n,children:(0,o.jsx)(s,{...n})}):s(n)}},28453:(n,i,e)=>{e.d(i,{R:()=>l,x:()=>r});var t=e(96540);const o={},a=t.createContext(o);function l(n){const i=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(i):{...i,...n}},[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),t.createElement(a.Provider,{value:i},n.children)}}}]);
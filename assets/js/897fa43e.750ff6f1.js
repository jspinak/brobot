"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2730],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(96540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},52265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tutorial-state-structure-builder/post-state-structure","title":"Where do I go from here?","description":"Now that you have a state structure, you can start writing the code for your automation program.","source":"@site/versioned_docs/version-1.0.6/tutorial-state-structure-builder/post-state-structure.md","sourceDirName":"tutorial-state-structure-builder","slug":"/tutorial-state-structure-builder/post-state-structure","permalink":"/brobot/docs/1.0.6/tutorial-state-structure-builder/post-state-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/versioned_docs/version-1.0.6/tutorial-state-structure-builder/post-state-structure.md","tags":[],"version":"1.0.6","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docSidebar","previous":{"title":"Building the Visual API","permalink":"/brobot/docs/1.0.6/tutorial-state-structure-builder/videos"},"next":{"title":"Tutorial for Using the Latest Brobot Code in Github","permalink":"/brobot/docs/1.0.6/tutorial-using-the-latest-code-in-github/intro"}}');var s=n(74848),o=n(28453);const r={sidebar_position:5},a="Where do I go from here?",c={},l=[{value:"Activities classes",id:"activities-classes",level:2},{value:"Action basics",id:"action-basics",level:2},{value:"Action tips",id:"action-tips",level:2}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"where-do-i-go-from-here",children:"Where do I go from here?"})}),"\n",(0,s.jsx)(t.p,{children:"Now that you have a state structure, you can start writing the code for your automation program.\nHow you do this is ultimately up to you, but I'll share here how I write my Brobot code."}),"\n",(0,s.jsx)(t.h2,{id:"activities-classes",children:"Activities classes"}),"\n",(0,s.jsxs)(t.p,{children:["I usually create a class with the name ",(0,s.jsx)(t.em,{children:"someClass"}),' + "Activities" for actions that happen within\na specific class. We have a class called ',(0,s.jsx)(t.em,{children:"BlackSpriritsAdventure"})," inside the folder ",(0,s.jsx)(t.em,{children:"blackSpiritsAdventure"}),". If I want\nto click on the ",(0,s.jsx)(t.em,{children:"Acquire"})," button, I would first create a class called ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventureActivities"}),"\nwithin the same folder."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"files",src:n(72744).A+"",width:"343",height:"504"})}),"\n",(0,s.jsxs)(t.p,{children:["This class would inject 3 dependencies in its constructor: ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventure"}),",\n",(0,s.jsx)(t.em,{children:"StateTransitionsManagement"}),", and ",(0,s.jsx)(t.em,{children:"Action"}),". If you have correctly defined the transitions in each of your transitions classes,\nyou can use the ",(0,s.jsx)(t.em,{children:"StateTransitionsManagement"})," class to open any state in your application. It doesn't matter\nwhere you are currently in the environment, as long as you have defined the transitions correctly, you can\nopen any state."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventure"})," dependency is necessary only to reference the objects in it (here, the\n",(0,s.jsx)(t.em,{children:"Acquire"})," button). To open the state with the ",(0,s.jsx)(t.em,{children:"StateTransitionsManagement"})," dependency, you don't need to inject\nthe ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventure"})," state class. This is because the ",(0,s.jsx)(t.em,{children:"StateTransitionsManagement"})," class's ",(0,s.jsx)(t.em,{children:"open"})," method takes an ",(0,s.jsx)(t.em,{children:"Enum"})," object\nas a parameter. The ",(0,s.jsx)(t.em,{children:"Enum"})," object is the name of the state you want to open (here, BLACKSPIRITSADVENTURE),\nand it is defined as a public variable. If we just wanted to open the ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventure"})," state, we wouldn't\nneed a ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventureActivities"})," class; we could open it with one line of code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"stateTransitionsManagement.openState(BLACKSPIRITSADVENTURE);\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"Action"})," is used to perform actions on the screen."]}),"\n",(0,s.jsxs)(t.p,{children:["Our class ",(0,s.jsx)(t.em,{children:"BlackSpriritsAdventureActivities"})," would look like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"@Component\npublic class BlackSpriritsAdventureActivities {\n\n    private BlackSpriritsAdventure blackSpriritsAdventure;\n    private StateTransitionsManagement stateTransitionsManagement;\n    private Action action;\n\n    public BlackSpriritsAdventureActivities(BlackSpriritsAdventure blackSpriritsAdventure,\n                                            StateTransitionsManagement stateTransitionsManagement,\n                                            Action action) {\n        this.blackSpriritsAdventure = blackSpriritsAdventure;\n        this.stateTransitionsManagement = stateTransitionsManagement;\n        this.action = action;\n    }\n\n    public boolean acquire() {\n        if (!stateTransitionsManagement.openState(BLACKSPIRITSADVENTURE)) return false;\n        return action.perform(CLICK, blackSpriritsAdventure.getAcquireButton());\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"action-basics",children:"Action basics"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"Action"})," class is used to perform actions on the screen. It has a method called ",(0,s.jsx)(t.em,{children:"perform"})," that takes\nan ",(0,s.jsx)(t.em,{children:"ActionOptions"})," object and an ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," object. The ",(0,s.jsx)(t.em,{children:"ActionOptions"})," object defines the action\nto be performed, and the ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," object defines the objects on the screen that the action will\nbe performed on. The ",(0,s.jsx)(t.em,{children:"ActionOptions"})," object has a builder that allows you to define the action to be performed.\nThe ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," object has a builder that allows you to define the objects on the screen that the action\nwill be performed on. The ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," object can be created with a single object, or with a list of objects."]}),"\n",(0,s.jsx)(t.h2,{id:"action-tips",children:"Action tips"}),"\n",(0,s.jsx)(t.p,{children:"When using a standard action; for example, a single left click without any modifiers, you can use the\nfollowing code to perform the action:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"action.perform(CLICK, objectCollection);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you wish to use a non-standard action, you will need to create an ",(0,s.jsx)(t.em,{children:"ActionOptions"})," variable and\nspecific its parameters. Then you would pass it to the ",(0,s.jsx)(t.em,{children:"perform"})," method along with the ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," object."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ActionOptions actionOptions = ActionOptions.builder()\n        .actionType(CLICK)\n        .clickType(RIGHT)\n        .build();\naction.perform(actionOptions, objectCollection);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The same applies to the ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," object. If you wish to use a single image, you can just pass the\nimage to the ",(0,s.jsx)(t.em,{children:"perform"})," method as such:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"action.perform(actionOptions, image);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If you want the action to be performed on multiple objects, you can use the ",(0,s.jsx)(t.em,{children:"ObjectCollection"})," builder to\ncreate a list of objects."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"ObjectCollection objectCollection = ObjectCollection.builder()\n        .withImages(image1, image2, image3)\n        .withRegions(region1, region2, region3)\n        .build();\naction.perform(actionOptions, objectCollection);\n"})}),"\n",(0,s.jsx)(t.p,{children:"To perform a standard click on one image:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"action.perform(CLICK, image);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},72744:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/state-structure-filestructure2-c2058937bea07108d7a7533326dc872f.png"}}]);
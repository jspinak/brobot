"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8745],{28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>a});var t=i(96540);const r={},o=t.createContext(r);function s(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),t.createElement(o.Provider,{value:e},n.children)}},86264:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"core-library/migration/actionhistory-migration-guide","title":"ActionHistory Migration Guide","description":"Overview","source":"@site/docs/03-core-library/migration/actionhistory-migration-guide.md","sourceDirName":"03-core-library/migration","slug":"/core-library/migration/actionhistory-migration-guide","permalink":"/brobot/docs/core-library/migration/actionhistory-migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/migration/actionhistory-migration-guide.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"ActionHistory Migration Guide","sidebar_position":1},"sidebar":"docSidebar","previous":{"title":"Migration Guides","permalink":"/brobot/docs/category/migration-guides"},"next":{"title":"ActionResult Refactoring Migration Guide","permalink":"/brobot/docs/core-library/migration/actionresult-refactoring"}}');var r=i(74848),o=i(28453);const s={title:"ActionHistory Migration Guide",sidebar_position:1},a="ActionHistory Migration Guide",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Why Migrate?",id:"why-migrate",level:2},{value:"Benefits of the Modern API",id:"benefits-of-the-modern-api",level:3},{value:"Deprecation Timeline",id:"deprecation-timeline",level:3},{value:"Quick Start Migration",id:"quick-start-migration",level:2},{value:"Automated Migration Tool",id:"automated-migration-tool",level:3},{value:"Manual Migration Steps",id:"manual-migration-steps",level:3},{value:"Migration Patterns",id:"migration-patterns",level:2},{value:"1. ActionHistory Method Updates",id:"1-actionhistory-method-updates",level:3},{value:"Finding Records by Action Type",id:"finding-records-by-action-type",level:4},{value:"Getting Random Text",id:"getting-random-text",level:4},{value:"2. ActionRecord Creation",id:"2-actionrecord-creation",level:3},{value:"Creating Find Records",id:"creating-find-records",level:4},{value:"Creating Click Records",id:"creating-click-records",level:4},{value:"3. Type Text Actions",id:"3-type-text-actions",level:3},{value:"4. Common ActionConfig Classes",id:"4-common-actionconfig-classes",level:3},{value:"5. Find Strategy Mapping",id:"5-find-strategy-mapping",level:3},{value:"Testing Your Migration",id:"testing-your-migration",level:2},{value:"1. Run Existing Tests",id:"1-run-existing-tests",level:3},{value:"2. Check for Deprecation Warnings",id:"2-check-for-deprecation-warnings",level:3},{value:"3. Monitor Migration Metrics",id:"3-monitor-migration-metrics",level:3},{value:"Backward Compatibility",id:"backward-compatibility",level:2},{value:"Gradual Migration",id:"gradual-migration",level:3},{value:"Example: Mixed Usage",id:"example-mixed-usage",level:3},{value:"JSON Data Migration",id:"json-data-migration",level:2},{value:"Automatic Migration",id:"automatic-migration",level:3},{value:"Batch JSON Migration",id:"batch-json-migration",level:3},{value:"Spring Boot Integration",id:"spring-boot-integration",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Monitoring Dashboard",id:"monitoring-dashboard",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"1. Import Resolution Errors",id:"1-import-resolution-errors",level:4},{value:"2. ClassCastException",id:"2-classcastexception",level:4},{value:"3. Null ActionConfig",id:"3-null-actionconfig",level:4},{value:"Getting Help",id:"getting-help",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Migrate by Module",id:"1-migrate-by-module",level:3},{value:"2. Use the Adapter Pattern",id:"2-use-the-adapter-pattern",level:3},{value:"3. Monitor Production",id:"3-monitor-production",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"actionhistory-migration-guide",children:"ActionHistory Migration Guide"})}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(e.p,{children:["Brobot 1.2.0 introduces a major API modernization, transitioning from the legacy ",(0,r.jsx)(e.code,{children:"ActionOptions"})," system to the new ",(0,r.jsx)(e.code,{children:"ActionConfig"})," hierarchy. This guide helps you migrate your existing code to the modern API."]}),"\n",(0,r.jsx)(e.h2,{id:"why-migrate",children:"Why Migrate?"}),"\n",(0,r.jsx)(e.h3,{id:"benefits-of-the-modern-api",children:"Benefits of the Modern API"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Type Safety"}),": Strongly-typed configuration classes for each action type"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Better IDE Support"}),": Enhanced autocomplete and documentation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Cleaner Code"}),": More intuitive builder patterns"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Performance"}),": Optimized caching and reduced overhead"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Future-Proof"}),": All new features will use the modern API"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"deprecation-timeline",children:"Deprecation Timeline"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"1.2.0"}),": Deprecation warnings introduced, migration tools available"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"1.3.0"}),": Enhanced warnings, deprecated methods marked for removal"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"2.0.0"}),": Legacy API removed completely"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"quick-start-migration",children:"Quick Start Migration"}),"\n",(0,r.jsx)(e.h3,{id:"automated-migration-tool",children:"Automated Migration Tool"}),"\n",(0,r.jsx)(e.p,{children:"The fastest way to migrate is using the automated migration tool:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Download the migration tool\nwget https://github.com/jspinak/brobot/releases/download/v1.2.0/brobot-migration-tool.jar\n\n# Analyze your project\njava -jar brobot-migration-tool.jar --path /your/project --mode analyze\n\n# Review the report, then migrate\njava -jar brobot-migration-tool.jar --path /your/project --mode migrate --backup true\n"})}),"\n",(0,r.jsx)(e.h3,{id:"manual-migration-steps",children:"Manual Migration Steps"}),"\n",(0,r.jsx)(e.p,{children:"If you prefer manual migration, follow these patterns:"}),"\n",(0,r.jsx)(e.h2,{id:"migration-patterns",children:"Migration Patterns"}),"\n",(0,r.jsx)(e.h3,{id:"1-actionhistory-method-updates",children:"1. ActionHistory Method Updates"}),"\n",(0,r.jsx)(e.h4,{id:"finding-records-by-action-type",children:"Finding Records by Action Type"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Before (Deprecated):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"Optional<ActionRecord> record = actionHistory.getRandomSnapshot(ActionOptions.Action.FIND);\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"After (Modern):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\n\nPatternFindOptions findConfig = new PatternFindOptions.Builder()\n    .setStrategy(PatternFindOptions.Strategy.BEST)\n    .build();\nOptional<ActionRecord> record = actionHistory.getRandomSnapshot(findConfig);\n"})}),"\n",(0,r.jsx)(e.h4,{id:"getting-random-text",children:"Getting Random Text"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Before:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"String text = actionHistory.getRandomText();\n// This internally used ActionOptions.Action.FIND\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"After:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"String text = actionHistory.getRandomText();\n// Now uses PatternFindOptions internally - no code change needed!\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-actionrecord-creation",children:"2. ActionRecord Creation"}),"\n",(0,r.jsx)(e.h4,{id:"creating-find-records",children:"Creating Find Records"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Before:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"ActionRecord record = new ActionRecord.Builder()\n    .setActionOptions(new ActionOptions.Builder()\n        .setAction(ActionOptions.Action.FIND)\n        .setFind(ActionOptions.Find.BEST)\n        .setSimilarity(0.85)\n        .build())\n    .addMatch(match)\n    .setActionSuccess(true)\n    .build();\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"After:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\n\nActionRecord record = new ActionRecord.Builder()\n    .setActionConfig(new PatternFindOptions.Builder()\n        .setStrategy(PatternFindOptions.Strategy.BEST)\n        .setSimilarity(0.85)\n        .build())\n    .addMatch(match)\n    .setActionSuccess(true)\n    .build();\n"})}),"\n",(0,r.jsx)(e.h4,{id:"creating-click-records",children:"Creating Click Records"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Before:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"ActionRecord record = new ActionRecord.Builder()\n    .setActionOptions(new ActionOptions.Builder()\n        .setAction(ActionOptions.Action.CLICK)\n        .setClickType(ActionOptions.ClickType.DOUBLE)\n        .setNumberOfClicks(2)\n        .build())\n    .setActionSuccess(true)\n    .build();\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"After:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.action.basic.click.ClickOptions;\n\nActionRecord record = new ActionRecord.Builder()\n    .setActionConfig(new ClickOptions.Builder()\n        .setClickType(ClickOptions.Type.DOUBLE)\n        .setNumberOfClicks(2)\n        .build())\n    .setActionSuccess(true)\n    .build();\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-type-text-actions",children:"3. Type Text Actions"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Before:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'ActionRecord record = new ActionRecord.Builder()\n    .setActionOptions(new ActionOptions.Builder()\n        .setAction(ActionOptions.Action.TYPE)\n        .setModifierKeys(Arrays.asList(17, 65)) // Ctrl+A\n        .build())\n    .setText("Hello World")\n    .build();\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"After:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.action.basic.type.TypeOptions;\n\nActionRecord record = new ActionRecord.Builder()\n    .setActionConfig(new TypeOptions.Builder()\n        .setModifierKeys(Arrays.asList(17, 65)) // Ctrl+A\n        .build())\n    .setText("Hello World")\n    .build();\n'})}),"\n",(0,r.jsx)(e.h3,{id:"4-common-actionconfig-classes",children:"4. Common ActionConfig Classes"}),"\n",(0,r.jsx)(e.p,{children:"Here's a mapping of all action types to their modern equivalents:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Legacy ActionOptions.Action"}),(0,r.jsx)(e.th,{children:"Modern ActionConfig Class"}),(0,r.jsx)(e.th,{children:"Import"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"FIND"}),(0,r.jsx)(e.td,{children:"PatternFindOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.find.PatternFindOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"CLICK"}),(0,r.jsx)(e.td,{children:"ClickOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.click.ClickOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"TYPE"}),(0,r.jsx)(e.td,{children:"TypeOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.type.TypeOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"DRAG"}),(0,r.jsx)(e.td,{children:"DragOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.composite.drag.DragOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"VANISH"}),(0,r.jsx)(e.td,{children:"VanishOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.vanish.VanishOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"MOVE"}),(0,r.jsx)(e.td,{children:"MouseMoveOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.mouse.MouseMoveOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"MOUSE_DOWN"}),(0,r.jsx)(e.td,{children:"MouseDownOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.mouse.MouseDownOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"MOUSE_UP"}),(0,r.jsx)(e.td,{children:"MouseUpOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.mouse.MouseUpOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"DEFINE"}),(0,r.jsx)(e.td,{children:"DefineRegionOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.region.DefineRegionOptions"})})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"HIGHLIGHT"}),(0,r.jsx)(e.td,{children:"HighlightOptions"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"io.github.jspinak.brobot.action.basic.highlight.HighlightOptions"})})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"5-find-strategy-mapping",children:"5. Find Strategy Mapping"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Legacy Find Type"}),(0,r.jsx)(e.th,{children:"Modern Strategy"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"ActionOptions.Find.FIRST"}),(0,r.jsx)(e.td,{children:"PatternFindOptions.Strategy.FIRST"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"ActionOptions.Find.BEST"}),(0,r.jsx)(e.td,{children:"PatternFindOptions.Strategy.BEST"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"ActionOptions.Find.ALL"}),(0,r.jsx)(e.td,{children:"PatternFindOptions.Strategy.ALL"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"ActionOptions.Find.EACH"}),(0,r.jsx)(e.td,{children:"PatternFindOptions.Strategy.EACH"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"testing-your-migration",children:"Testing Your Migration"}),"\n",(0,r.jsx)(e.h3,{id:"1-run-existing-tests",children:"1. Run Existing Tests"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Backend tests\ncd brobot-builder/backend\npytest\n\n# Frontend tests  \ncd brobot-builder/frontend\n./run-tests-safe.sh\n"})}),"\n",(0,r.jsx)(e.h3,{id:"2-check-for-deprecation-warnings",children:"2. Check for Deprecation Warnings"}),"\n",(0,r.jsx)(e.p,{children:"Enable deprecation logging to see what still needs migration:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// In your application.properties\nlogging.level.io.github.jspinak.brobot.tools.migration=DEBUG\n"})}),"\n",(0,r.jsx)(e.h3,{id:"3-monitor-migration-metrics",children:"3. Monitor Migration Metrics"}),"\n",(0,r.jsx)(e.p,{children:"The migration system tracks usage metrics:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'import io.github.jspinak.brobot.tools.migration.DeprecationMetrics;\n\n// Generate a report\nString report = DeprecationMetrics.getInstance().generateReport();\nSystem.out.println(report);\n\n// Check migration progress\ndouble progress = DeprecationMetrics.getInstance()\n    .getMigrationProgress(modernApiCalls);\nSystem.out.println("Migration progress: " + progress + "%");\n'})}),"\n",(0,r.jsx)(e.h2,{id:"backward-compatibility",children:"Backward Compatibility"}),"\n",(0,r.jsx)(e.h3,{id:"gradual-migration",children:"Gradual Migration"}),"\n",(0,r.jsx)(e.p,{children:"The system maintains backward compatibility during the transition:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Both APIs Work"}),": You can use ActionOptions and ActionConfig simultaneously"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Automatic Conversion"}),": The framework converts between formats as needed"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mixed Records"}),": ActionHistory can contain both legacy and modern records"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"example-mixed-usage",children:"Example: Mixed Usage"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"ActionHistory history = new ActionHistory();\n\n// Add modern record\nhistory.addSnapshot(new ActionRecord.Builder()\n    .setActionConfig(new PatternFindOptions.Builder().build())\n    .build());\n\n// Add legacy record (still works but deprecated)\nhistory.addSnapshot(new ActionRecord.Builder()\n    .setActionOptions(new ActionOptions.Builder()\n        .setAction(ActionOptions.Action.FIND)\n        .build())\n    .build());\n\n// Query with modern API - finds both!\nOptional<ActionRecord> record = history.getRandomSnapshot(\n    new PatternFindOptions.Builder().build()\n);\n"})}),"\n",(0,r.jsx)(e.h2,{id:"json-data-migration",children:"JSON Data Migration"}),"\n",(0,r.jsx)(e.h3,{id:"automatic-migration",children:"Automatic Migration"}),"\n",(0,r.jsx)(e.p,{children:"JSON files are automatically migrated when deserialized:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.tools.migration.ActionHistoryJsonConverter;\n\n@Autowired\nActionHistoryJsonConverter jsonConverter;\n\n// This automatically migrates legacy JSON\nActionHistory history = jsonConverter.deserialize(legacyJson);\n"})}),"\n",(0,r.jsx)(e.h3,{id:"batch-json-migration",children:"Batch JSON Migration"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'// Migrate all JSON files in a directory\nActionHistoryJsonConverter.BatchMigrationResult result = \n    jsonConverter.migrateDirectory(\n        Paths.get("/data/histories"),\n        "*.json"\n    );\n\nSystem.out.println("Migrated " + result.successfulMigrations + " files");\n'})}),"\n",(0,r.jsx)(e.h2,{id:"spring-boot-integration",children:"Spring Boot Integration"}),"\n",(0,r.jsx)(e.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(e.p,{children:"Add migration configuration to your Spring Boot application:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"@Configuration\n@EnableScheduling\npublic class MigrationConfig {\n    \n    @Bean\n    public ActionHistoryMigrationService migrationService(\n            ActionConfigAdapter adapter) {\n        return new ActionHistoryMigrationService(adapter);\n    }\n    \n    @Bean\n    public MigrationStatusTracker statusTracker() {\n        return new MigrationStatusTracker();\n    }\n    \n    @Bean\n    public DeprecationMetrics deprecationMetrics() {\n        return DeprecationMetrics.getInstance();\n    }\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"monitoring-dashboard",children:"Monitoring Dashboard"}),"\n",(0,r.jsx)(e.p,{children:"Create an endpoint to monitor migration progress:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/migration")\npublic class MigrationController {\n    \n    @Autowired\n    private MigrationStatusTracker statusTracker;\n    \n    @GetMapping("/status")\n    public String getStatus() {\n        return statusTracker.generateStatusReport();\n    }\n    \n    @GetMapping("/progress")\n    public Map<String, Object> getProgress() {\n        MigrationStatus status = statusTracker.getStatus();\n        return Map.of(\n            "progress", status.getProgressPercentage(),\n            "phase", status.getCurrentPhase(),\n            "migrated", status.getMigratedFiles(),\n            "total", status.getTotalFiles()\n        );\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(e.h4,{id:"1-import-resolution-errors",children:"1. Import Resolution Errors"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Problem"}),": Cannot resolve symbol 'PatternFindOptions'"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Solution"}),": Add the correct import:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"import io.github.jspinak.brobot.action.basic.find.PatternFindOptions;\n"})}),"\n",(0,r.jsx)(e.h4,{id:"2-classcastexception",children:"2. ClassCastException"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Problem"}),": ClassCastException when mixing ActionOptions and ActionConfig"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Solution"}),": Ensure consistent usage within a single operation:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Don't mix types in the same query\nactionHistory.getRandomSnapshot(findConfig); // Use ActionConfig\n// OR\nactionHistory.getRandomSnapshot(ActionOptions.Action.FIND); // Use legacy (deprecated)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"3-null-actionconfig",children:"3. Null ActionConfig"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Problem"}),": ActionRecord has null ActionConfig after migration"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Solution"}),": Check if the record had ActionOptions before migration:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"if (record.getActionOptions() != null && record.getActionConfig() == null) {\n    // Record needs migration\n    record = migrationService.migrateActionRecord(record);\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Check Logs"}),": Enable DEBUG logging for migration packages"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Run Analysis"}),": Use the migration tool in analyze mode first"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"File Issues"}),": Report problems at ",(0,r.jsx)(e.a,{href:"https://github.com/jspinak/brobot/issues",children:"https://github.com/jspinak/brobot/issues"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Community Support"}),": Join the Brobot Discord server"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"1-migrate-by-module",children:"1. Migrate by Module"}),"\n",(0,r.jsx)(e.p,{children:"Migrate one module at a time to minimize risk:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Migrate only the core module first\njava -jar brobot-migration-tool.jar \\\n  --path /project \\\n  --include "core/**/*.java" \\\n  --mode migrate\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2-use-the-adapter-pattern",children:"2. Use the Adapter Pattern"}),"\n",(0,r.jsx)(e.p,{children:"Create an adapter during transition:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'public class ActionHistoryAdapter {\n    private final ActionHistory history;\n    private final ActionConfigAdapter adapter;\n    \n    public Optional<ActionRecord> findRecord(Object config) {\n        if (config instanceof ActionConfig) {\n            return history.getRandomSnapshot((ActionConfig) config);\n        } else if (config instanceof ActionOptions.Action) {\n            // Deprecated path\n            return history.getRandomSnapshot((ActionOptions.Action) config);\n        }\n        throw new IllegalArgumentException("Unknown config type");\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"3-monitor-production",children:"3. Monitor Production"}),"\n",(0,r.jsx)(e.p,{children:"Track deprecated API usage in production:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'@Component\npublic class MigrationMonitor {\n    \n    @EventListener(ApplicationReadyEvent.class)\n    public void startMonitoring() {\n        // Schedule periodic reports\n        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n        executor.scheduleAtFixedRate(() -> {\n            DeprecationMetrics metrics = DeprecationMetrics.getInstance();\n            if (metrics.getTotalDeprecatedCalls().get() > 1000) {\n                log.warn("High deprecated API usage detected: {}", \n                    metrics.getMostUsedMethod());\n            }\n        }, 0, 1, TimeUnit.HOURS);\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Run the analysis tool"})," to assess your migration scope"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Create a migration plan"})," based on the analysis"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Set up monitoring"})," to track progress"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Migrate incrementally"})," starting with non-critical modules"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Test thoroughly"})," after each migration phase"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Update documentation"})," to use modern examples"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["For more information, see the ",(0,r.jsx)(e.a,{href:"/docs/core-library/action-config/overview",children:"ActionConfig API Reference"})," and ",(0,r.jsx)(e.a,{href:"/docs/core-library/guides/migration-guide",children:"Migration Guide"}),"."]})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}}}]);
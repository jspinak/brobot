"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6504],{1840:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"core-library/guides/screen-adaptive-regions","title":"Region Building with Position Integration","description":"Create regions using flexible positioning with the RegionBuilder and Position integration for precise placement.","source":"@site/docs/03-core-library/guides/screen-adaptive-regions.md","sourceDirName":"03-core-library/guides","slug":"/core-library/guides/screen-adaptive-regions","permalink":"/brobot/docs/core-library/guides/screen-adaptive-regions","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/guides/screen-adaptive-regions.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"docSidebar","previous":{"title":"Logging Migration Guide","permalink":"/brobot/docs/core-library/guides/logging-migration-guide"},"next":{"title":"Automatic Action Logging","permalink":"/brobot/docs/core-library/guides/automatic-action-logging"}}');var t=i(74848),s=i(28453);const r={sidebar_position:8},a="Region Building with Position Integration",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Creating a RegionBuilder",id:"creating-a-regionbuilder",level:3},{value:"Absolute Positioning",id:"absolute-positioning",level:3},{value:"Position-Based Placement",id:"position-based-placement",level:2},{value:"Using Position Objects",id:"using-position-objects",level:3},{value:"Named Positions",id:"named-positions",level:3},{value:"Convenience Methods",id:"convenience-methods",level:3},{value:"Screen Percentage Sizing",id:"screen-percentage-sizing",level:2},{value:"Relative Positioning",id:"relative-positioning",level:2},{value:"Predefined Screen Regions",id:"predefined-screen-regions",level:2},{value:"Quick methods for common screen divisions:",id:"quick-methods-for-common-screen-divisions",level:3},{value:"Adjustments and Modifications",id:"adjustments-and-modifications",level:2},{value:"Fine-tuning Position and Size",id:"fine-tuning-position-and-size",level:3},{value:"Expanding and Contracting",id:"expanding-and-contracting",level:3},{value:"Working with Existing Regions",id:"working-with-existing-regions",level:3},{value:"Custom Anchoring",id:"custom-anchoring",level:2},{value:"Constraints",id:"constraints",level:2},{value:"Screen Boundary Constraints",id:"screen-boundary-constraints",level:3},{value:"Aspect Ratio Maintenance",id:"aspect-ratio-maintenance",level:3},{value:"Complex Layout Examples",id:"complex-layout-examples",level:2},{value:"Dashboard Layout",id:"dashboard-layout",level:3},{value:"Modal Dialog with Overlay",id:"modal-dialog-with-overlay",level:3},{value:"Grid Layout",id:"grid-layout",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Percentages for Cross-Platform Compatibility",id:"1-use-percentages-for-cross-platform-compatibility",level:3},{value:"2. Use Direct Coordinates for Pixel-Perfect Placement",id:"2-use-direct-coordinates-for-pixel-perfect-placement",level:3},{value:"3. Use Named Positions for Clarity",id:"3-use-named-positions-for-clarity",level:3},{value:"4. Combine Relative and Absolute Positioning",id:"4-combine-relative-and-absolute-positioning",level:3},{value:"5. Use Percentage-Based Sizing for Flexibility",id:"5-use-percentage-based-sizing-for-flexibility",level:3},{value:"Integration with Brobot Actions",id:"integration-with-brobot-actions",level:2},{value:"Using RegionBuilder in State Definitions",id:"using-regionbuilder-in-state-definitions",level:3},{value:"Dynamic Region Creation",id:"dynamic-region-creation",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Region Outside Screen Bounds",id:"region-outside-screen-bounds",level:3},{value:"Size Issues",id:"size-issues",level:3},{value:"Position Calculation Errors",id:"position-calculation-errors",level:3},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"region-building-with-position-integration",children:"Region Building with Position Integration"})}),"\n",(0,t.jsxs)(n.p,{children:["Create regions using flexible positioning with the ",(0,t.jsx)(n.code,{children:"RegionBuilder"})," and Position integration for precise placement."]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"RegionBuilder"})," class provides a fluent API for creating regions with precise positioning. By integrating with the ",(0,t.jsx)(n.code,{children:"Position"})," class and ",(0,t.jsx)(n.code,{children:"Positions.Name"})," enum, it offers both absolute pixel positioning and percentage-based placement options."]}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Absolute Positioning"}),": Define regions using exact pixel coordinates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Position Integration"}),": Leverage the Position class for percentage-based placement"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Named Positions"}),": Use semantic positions like TOPLEFT, MIDDLEMIDDLE, BOTTOMRIGHT"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Relative Positioning"}),": Position regions relative to other regions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Percentage-Based Sizing"}),": Define regions as percentages of screen size"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fluent API"}),": Chain methods for readable region construction"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-regionbuilder",children:"Creating a RegionBuilder"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.model.element.Region;\nimport io.github.jspinak.brobot.model.element.RegionBuilder;\nimport io.github.jspinak.brobot.model.element.Position;\nimport static io.github.jspinak.brobot.model.element.Positions.Name.*;\n\n// Access the builder through Region's static method\nRegion region = Region.builder()\n    .withSize(200, 150)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"absolute-positioning",children:"Absolute Positioning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Simple region with absolute coordinates\nRegion absolute = Region.builder()\n    .withRegion(100, 100, 200, 150)  // x, y, width, height\n    .build();\n\n// Position and size separately\nRegion separate = Region.builder()\n    .withPosition(50, 75)\n    .withSize(300, 200)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"position-based-placement",children:"Position-Based Placement"}),"\n",(0,t.jsx)(n.h3,{id:"using-position-objects",children:"Using Position Objects"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Position"})," class provides percentage-based coordinates (0.0 to 1.0) for resolution-independent placement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Place region at 70% width, 30% height of screen\nRegion customPos = Region.builder()\n    .withSize(200, 150)\n    .withPosition(new Position(0.7, 0.3))\n    .build();\n\n// Center of screen using Position\nRegion centered = Region.builder()\n    .withSize(400, 300)\n    .withPosition(new Position(0.5, 0.5))\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"named-positions",children:"Named Positions"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"Positions.Name"})," enum for semantic positioning:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Quick placement using named positions\nRegion topRight = Region.builder()\n    .withSize(300, 200)\n    .withPosition(TOPRIGHT)\n    .build();\n\nRegion bottomCenter = Region.builder()\n    .withSize(250, 100)\n    .withPosition(BOTTOMMIDDLE)\n    .build();\n\n// All available named positions:\n// TOPLEFT, TOPMIDDLE, TOPRIGHT\n// MIDDLELEFT, MIDDLEMIDDLE, MIDDLERIGHT\n// BOTTOMLEFT, BOTTOMMIDDLE, BOTTOMRIGHT\n"})}),"\n",(0,t.jsx)(n.h3,{id:"convenience-methods",children:"Convenience Methods"}),"\n",(0,t.jsx)(n.p,{children:"RegionBuilder provides helper methods for common positions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Center on screen\nRegion dialog = Region.builder()\n    .withSize(600, 400)\n    .centerOnScreen()\n    .build();\n\n// Corner positions\nRegion topLeft = Region.builder()\n    .withSize(100, 100)\n    .topLeft()\n    .build();\n\nRegion bottomRight = Region.builder()\n    .withSize(120, 80)\n    .bottomRight()\n    .build();\n\n// Edge positions\nRegion topBar = Region.builder()\n    .withScreenPercentageSize(1.0, 0.1)  // Full width, 10% height\n    .topCenter()\n    .build();\n\nRegion sidebar = Region.builder()\n    .withScreenPercentageSize(0.2, 1.0)  // 20% width, full height\n    .leftCenter()\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"screen-percentage-sizing",children:"Screen Percentage Sizing"}),"\n",(0,t.jsx)(n.p,{children:"Define regions as percentages of screen dimensions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Size as percentage of screen\nRegion halfScreen = Region.builder()\n    .withScreenPercentageSize(0.5, 0.5)  // 50% width, 50% height\n    .centerOnScreen()\n    .build();\n\n// Position and size using percentages\nRegion searchArea = Region.builder()\n    .withScreenPercentage(0.1, 0.1, 0.8, 0.3)  // x%, y%, width%, height%\n    .build();\n\n// Just percentage size (position separately)\nRegion percentSized = Region.builder()\n    .withScreenPercentageSize(0.3, 0.4)\n    .topRight()\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"relative-positioning",children:"Relative Positioning"}),"\n",(0,t.jsx)(n.p,{children:"Position regions relative to other regions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Region mainWindow = Region.builder()\n    .withSize(800, 600)\n    .centerOnScreen()\n    .build();\n\n// Position tooltip above the main window\nRegion tooltip = Region.builder()\n    .withSize(200, 50)\n    .positionRelativeTo(mainWindow, TOPMIDDLE)\n    .adjustY(-10)  // 10px gap above\n    .build();\n\n// Position button in bottom-right of window\nRegion button = Region.builder()\n    .withSize(100, 40)\n    .positionRelativeTo(mainWindow, BOTTOMRIGHT)\n    .adjustX(-10)  // 10px margin from right\n    .adjustY(-10)  // 10px margin from bottom\n    .build();\n\n// Custom relative position (25% from left, 75% from top)\nRegion marker = Region.builder()\n    .withSize(20, 20)\n    .positionRelativeTo(mainWindow, new Position(0.25, 0.75))\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"predefined-screen-regions",children:"Predefined Screen Regions"}),"\n",(0,t.jsx)(n.h3,{id:"quick-methods-for-common-screen-divisions",children:"Quick methods for common screen divisions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Full screen\nRegion fullScreen = Region.builder()\n    .fullScreen()\n    .build();\n\n// Half regions\nRegion topHalf = Region.builder()\n    .topHalf()\n    .build();\n\nRegion bottomHalf = Region.builder()\n    .bottomHalf()\n    .build();\n\nRegion leftHalf = Region.builder()\n    .leftHalf()\n    .build();\n\nRegion rightHalf = Region.builder()\n    .rightHalf()\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adjustments-and-modifications",children:"Adjustments and Modifications"}),"\n",(0,t.jsx)(n.h3,{id:"fine-tuning-position-and-size",children:"Fine-tuning Position and Size"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Adjust individual dimensions\nRegion adjusted = Region.builder()\n    .withRegion(100, 100, 200, 150)\n    .adjustX(10)      // Move 10px right\n    .adjustY(-20)     // Move 20px up\n    .adjustWidth(50)  // Increase width by 50px\n    .adjustHeight(30) // Increase height by 30px\n    .build();\n\n// Adjust all at once\nRegion bulkAdjusted = Region.builder()\n    .withRegion(100, 100, 200, 150)\n    .adjustBy(10, -5, 20, 20)  // x, y, width, height adjustments\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"expanding-and-contracting",children:"Expanding and Contracting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Expand region by pixels on all sides\nRegion expanded = Region.builder()\n    .withRegion(100, 100, 200, 150)\n    .expand(20)  // Grows by 20px on all sides\n    .build();\n// Result: x=80, y=80, width=240, height=190\n\n// Contract region (negative expansion)\nRegion contracted = Region.builder()\n    .withRegion(100, 100, 200, 150)\n    .expand(-10)  // Shrinks by 10px on all sides\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"working-with-existing-regions",children:"Working with Existing Regions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Region original = new Region(100, 100, 200, 150);\n\n// Modify existing region\nRegion modified = Region.builder()\n    .fromRegion(original)\n    .adjustWidth(50)\n    .adjustHeight(50)\n    .build();\n\n// Create region relative to existing\nRegion adjacent = Region.builder()\n    .fromRegion(original)\n    .adjustX(original.getW() + 10)  // Position to the right\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"custom-anchoring",children:"Custom Anchoring"}),"\n",(0,t.jsx)(n.p,{children:"Control how regions are positioned using anchor points:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Default anchor is TOPLEFT (0.0, 0.0)\nRegion defaultAnchor = Region.builder()\n    .withSize(100, 100)\n    .withPosition(500, 300)  // Top-left corner at (500, 300)\n    .build();\n\n// Center anchor - position specifies center point\nRegion centerAnchor = Region.builder()\n    .withSize(100, 100)\n    .withAnchor(MIDDLEMIDDLE)\n    .withPosition(500, 300)  // Center at (500, 300)\n    .build();\n\n// Custom anchor point (75% width, 25% height)\nRegion customAnchor = Region.builder()\n    .withSize(100, 100)\n    .withAnchor(new Position(0.75, 0.25))\n    .withPosition(500, 300)  // Anchor point at (500, 300)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"constraints",children:"Constraints"}),"\n",(0,t.jsx)(n.h3,{id:"screen-boundary-constraints",children:"Screen Boundary Constraints"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Constrain to screen boundaries (default: true)\nRegion constrained = Region.builder()\n    .withPosition(10000, 10000)  // Way off screen\n    .withSize(200, 150)\n    .constrainToScreen(true)\n    .build();\n// Will be repositioned to stay within screen bounds\n\n// Allow off-screen positioning\nRegion offScreen = Region.builder()\n    .withPosition(-50, -50)\n    .withSize(200, 150)\n    .constrainToScreen(false)\n    .build();\n// Maintains negative coordinates\n"})}),"\n",(0,t.jsx)(n.h3,{id:"aspect-ratio-maintenance",children:"Aspect Ratio Maintenance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Maintain aspect ratio when resizing\nRegion aspectLocked = Region.builder()\n    .withSize(400, 300)  // 4:3 ratio\n    .maintainAspectRatio(true)\n    .withWidth(600)  // Height automatically becomes 450\n    .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complex-layout-examples",children:"Complex Layout Examples"}),"\n",(0,t.jsx)(n.h3,{id:"dashboard-layout",children:"Dashboard Layout"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Create a dashboard with header, sidebar, and content area\nRegion header = Region.builder()\n    .withScreenPercentageSize(1.0, 0.1)  // Full width, 10% height\n    .topCenter()\n    .build();\n\nRegion sidebar = Region.builder()\n    .withScreenPercentageSize(0.2, 0.9)  // 20% width, 90% height\n    .positionRelativeTo(header, BOTTOMLEFT)\n    .build();\n\nRegion content = Region.builder()\n    .positionRelativeTo(sidebar, MIDDLERIGHT)\n    .withScreenPercentageSize(0.8, 0.9)\n    .build();\n\nRegion footer = Region.builder()\n    .withScreenPercentageSize(1.0, 0.05)\n    .bottomCenter()\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"modal-dialog-with-overlay",children:"Modal Dialog with Overlay"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Semi-transparent overlay\nRegion overlay = Region.builder()\n    .fullScreen()\n    .build();\n\n// Centered modal dialog\nRegion modal = Region.builder()\n    .withScreenPercentageSize(0.5, 0.6)  // 50% width, 60% height\n    .centerOnScreen()\n    .build();\n\n// Close button in modal's top-right\nRegion closeButton = Region.builder()\n    .withSize(30, 30)\n    .positionRelativeTo(modal, TOPRIGHT)\n    .adjustX(-10)\n    .adjustY(10)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"grid-layout",children:"Grid Layout"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Create a 3x3 grid of regions\nList<Region> grid = new ArrayList<>();\ndouble cellWidth = 0.33;\ndouble cellHeight = 0.33;\n\nfor (int row = 0; row < 3; row++) {\n    for (int col = 0; col < 3; col++) {\n        Region cell = Region.builder()\n            .withScreenPercentage(\n                col * cellWidth,      // x position\n                row * cellHeight,     // y position\n                cellWidth * 0.9,      // width with gap\n                cellHeight * 0.9      // height with gap\n            )\n            .build();\n        grid.add(cell);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-percentages-for-cross-platform-compatibility",children:"1. Use Percentages for Cross-Platform Compatibility"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good: Percentage-based, works on any screen\nRegion adaptive = Region.builder()\n    .withScreenPercentageSize(0.3, 0.4)\n    .centerOnScreen()\n    .build();\n\n// Avoid: Fixed pixels may not work on different screens\nRegion fixed = Region.builder()\n    .withRegion(640, 360, 640, 480)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-use-direct-coordinates-for-pixel-perfect-placement",children:"2. Use Direct Coordinates for Pixel-Perfect Placement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Specify exact pixel coordinates when precision is needed\nRegion precise = Region.builder()\n    .withPosition(500, 300)\n    .withSize(400, 200)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-named-positions-for-clarity",children:"3. Use Named Positions for Clarity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Clear intent\nRegion notification = Region.builder()\n    .withSize(300, 100)\n    .topRight()\n    .adjustX(-20)\n    .adjustY(20)\n    .build();\n\n// Less clear\nRegion notification2 = Region.builder()\n    .withSize(300, 100)\n    .withAnchor(new Position(1.0, 0.0))\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-combine-relative-and-absolute-positioning",children:"4. Combine Relative and Absolute Positioning"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Start with relative, fine-tune with absolute\nRegion precise = Region.builder()\n    .withScreenPercentageSize(0.25, 0.2)\n    .centerOnScreen()\n    .adjustX(-10)  // Fine adjustments\n    .adjustY(5)\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-use-percentage-based-sizing-for-flexibility",children:"5. Use Percentage-Based Sizing for Flexibility"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Create regions that work well at any resolution\nRegion flexible = Region.builder()\n    .withScreenPercentage(0.1, 0.1, 0.8, 0.8)  // 10% margins, 80% of screen\n    .build();\n\n// Verify region is properly defined\nassert flexible.isDefined();\nassert flexible.getW() > 0 && flexible.getH() > 0;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-brobot-actions",children:"Integration with Brobot Actions"}),"\n",(0,t.jsx)(n.h3,{id:"using-regionbuilder-in-state-definitions",children:"Using RegionBuilder in State Definitions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\npublic class LoginState implements State {\n    \n    private final Region usernameField = Region.builder()\n        .withScreenPercentage(0.4, 0.4, 0.2, 0.05)\n        .build();\n    \n    private final Region passwordField = Region.builder()\n        .positionRelativeTo(usernameField, BOTTOMMIDDLE)\n        .withSize(usernameField.getW(), usernameField.getH())\n        .adjustY(20)\n        .build();\n    \n    private final Region loginButton = Region.builder()\n        .positionRelativeTo(passwordField, BOTTOMMIDDLE)\n        .withSize(100, 40)\n        .adjustY(30)\n        .build();\n    \n    // Use in actions\n    public void login(String username, String password) {\n        action.perform(new ObjectCollection.Builder()\n            .withRegions(usernameField)\n            .click()\n            .type(username)\n            .build());\n        \n        action.perform(new ObjectCollection.Builder()\n            .withRegions(passwordField)\n            .click()\n            .type(password)\n            .build());\n        \n        action.perform(new ObjectCollection.Builder()\n            .withRegions(loginButton)\n            .click()\n            .build());\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-region-creation",children:"Dynamic Region Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class AdaptiveSearch {\n    \n    public Region getSearchAreaForScreen() {\n        // Detect current screen size and create appropriate search area\n        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n        \n        if (screenSize.width > 2000) {\n            // Large screen: search in center third\n            return Region.builder()\n                .withScreenPercentage(0.33, 0.33, 0.34, 0.34)\n                .build();\n        } else if (screenSize.width > 1400) {\n            // Medium screen: search in center half\n            return Region.builder()\n                .withScreenPercentageSize(0.5, 0.5)\n                .centerOnScreen()\n                .build();\n        } else {\n            // Small screen: search most of screen\n            return Region.builder()\n                .withScreenPercentage(0.1, 0.1, 0.8, 0.8)\n                .build();\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"region-outside-screen-bounds",children:"Region Outside Screen Bounds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Problem: Region appears cut off\nRegion problem = Region.builder()\n    .withPosition(1800, 1000)\n    .withSize(300, 200)\n    .build();\n\n// Solution: Enable screen constraints\nRegion solution = Region.builder()\n    .withPosition(1800, 1000)\n    .withSize(300, 200)\n    .constrainToScreen(true)  // Ensures region stays on screen\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"size-issues",children:"Size Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Problem: Region too small for reliable clicking\nRegion tooSmall = Region.builder()\n    .withPosition(100, 100)\n    .withSize(5, 5)  // Too small!\n    .build();\n\n// Solution: Use appropriate minimum sizes\nRegion clickable = Region.builder()\n    .withPosition(100, 100)\n    .withSize(50, 30)  // Reasonable click target\n    .build();\n\n// Or use percentage-based sizing for flexibility\nRegion flexible = Region.builder()\n    .withScreenPercentage(0.1, 0.1, 0.05, 0.03)  // 5% width, 3% height\n    .build();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"position-calculation-errors",children:"Position Calculation Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Problem: Unexpected position with custom anchor\nRegion unexpected = Region.builder()\n    .withSize(100, 100)\n    .withAnchor(MIDDLEMIDDLE)  // Changes reference point\n    .withPosition(0, 0)  // Now refers to center, not top-left\n    .build();\n\n// Solution: Understand anchor behavior\n// With MIDDLEMIDDLE anchor, position (0,0) means center at (0,0)\n// So actual top-left will be at (-50, -50)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(n.p,{children:"The enhanced RegionBuilder with Position integration provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resolution Independence"}),": Define once, run anywhere"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Intuitive API"}),": Named positions and percentage-based sizing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexibility"}),": Combine relative and absolute positioning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintainability"}),": Clear, readable region definitions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Adaptability"}),": Automatic scaling between resolutions"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Use RegionBuilder to create robust, screen-adaptive automation that works consistently across different environments and display configurations."})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var o=i(96540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);
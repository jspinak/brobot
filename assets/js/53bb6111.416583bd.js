"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5086],{28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>c});var i=o(96540);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},67082:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"testing/mock-mode-manager","title":"Mock Mode Manager","description":"Centralized mock mode management for consistent testing","source":"@site/docs/04-testing/mock-mode-manager.md","sourceDirName":"04-testing","slug":"/testing/mock-mode-manager","permalink":"/brobot/docs/testing/mock-mode-manager","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/mock-mode-manager.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Mock Mode Manager","description":"Centralized mock mode management for consistent testing"},"sidebar":"docSidebar","previous":{"title":"ActionHistory and Mock Snapshots","permalink":"/brobot/docs/testing/actionhistory-mock-snapshots"},"next":{"title":"Profile-Based Architecture","permalink":"/brobot/docs/testing/profile-based-architecture"}}');var t=o(74848),r=o(28453);const s={sidebar_position:3,title:"Mock Mode Manager",description:"Centralized mock mode management for consistent testing"},c="Mock Mode Manager",d={},a=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Single Source of Truth",id:"single-source-of-truth",level:3},{value:"Automatic Synchronization",id:"automatic-synchronization",level:3},{value:"Debug Capabilities",id:"debug-capabilities",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Enabling Mock Mode",id:"enabling-mock-mode",level:3},{value:"Checking Mock Mode Status",id:"checking-mock-mode-status",level:3},{value:"Debugging Mock Mode State",id:"debugging-mock-mode-state",level:3},{value:"Integration with Tests",id:"integration-with-tests",level:2},{value:"Using with BrobotTestBase",id:"using-with-brobottestbase",level:3},{value:"Manual Test Configuration",id:"manual-test-configuration",level:3},{value:"Application Startup",id:"application-startup",level:2},{value:"Initializing Mock Mode from Properties",id:"initializing-mock-mode-from-properties",level:3},{value:"Spring Configuration",id:"spring-configuration",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Synchronized Properties",id:"synchronized-properties",level:3},{value:"Priority Order",id:"priority-order",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Use MockModeManager",id:"1-always-use-mockmodemanager",level:3},{value:"2. Set Mock Mode Once",id:"2-set-mock-mode-once",level:3},{value:"3. Use Logging for Debugging",id:"3-use-logging-for-debugging",level:3},{value:"4. Handle Mode Transitions Carefully",id:"4-handle-mode-transitions-carefully",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From Direct Property Setting",id:"from-direct-property-setting",level:3},{value:"From Multiple Mock Checks",id:"from-multiple-mock-checks",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Mock Mode Not Taking Effect",id:"mock-mode-not-taking-effect",level:3},{value:"Inconsistent Mock Behavior",id:"inconsistent-mock-behavior",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"MockModeManager Methods",id:"mockmodemanager-methods",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mock-mode-manager",children:"Mock Mode Manager"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"MockModeManager"})," class provides centralized control over mock mode configuration across the entire Brobot framework, ensuring consistency and eliminating confusion about which mock mode flag to use."]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["Prior to the introduction of ",(0,t.jsx)(n.code,{children:"MockModeManager"}),", mock mode configuration was scattered across multiple components:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"brobotProperties.getCore().isMock()"})," (legacy SikuliX setting)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ExecutionEnvironment.mockMode"})," (runtime environment setting)"]}),"\n",(0,t.jsxs)(n.li,{children:["Various system properties (",(0,t.jsx)(n.code,{children:"brobot.mock.mode"}),", ",(0,t.jsx)(n.code,{children:"brobot.mock"}),", etc.)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This led to confusion and potential inconsistencies. The ",(0,t.jsx)(n.code,{children:"MockModeManager"})," solves this by providing a single source of truth."]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsx)(n.h3,{id:"single-source-of-truth",children:"Single Source of Truth"}),"\n",(0,t.jsxs)(n.p,{children:["All mock mode checks and settings go through ",(0,t.jsx)(n.code,{children:"MockModeManager"}),", ensuring consistency across the entire framework."]}),"\n",(0,t.jsx)(n.h3,{id:"automatic-synchronization",children:"Automatic Synchronization"}),"\n",(0,t.jsxs)(n.p,{children:["When you set mock mode through ",(0,t.jsx)(n.code,{children:"MockModeManager"}),", it automatically updates:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"All relevant system properties"}),"\n",(0,t.jsx)(n.li,{children:"ExecutionEnvironment configuration"}),"\n",(0,t.jsx)(n.li,{children:"FrameworkSettings (for SikuliX compatibility)"}),"\n",(0,t.jsx)(n.li,{children:"Any other framework-specific mock settings"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"debug-capabilities",children:"Debug Capabilities"}),"\n",(0,t.jsx)(n.p,{children:"Built-in logging to help debug mock mode state across all components."}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"enabling-mock-mode",children:"Enabling Mock Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Note: BrobotProperties must be injected as a dependency\n@Autowired\nprivate BrobotProperties brobotProperties;\n\nimport io.github.jspinak.brobot.config.MockModeManager;\n\n// Enable mock mode globally\nMockModeManager.setMockMode(true);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"checking-mock-mode-status",children:"Checking Mock Mode Status"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Check if mock mode is enabled\nif (brobotProperties.getCore().isMock()) {\n    // Execute mock-specific logic\n    System.out.println("Running in mock mode");\n} else {\n    // Execute real mode logic\n    System.out.println("Running in real mode");\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"debugging-mock-mode-state",children:"Debugging Mock Mode State"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Log the current mock mode state across all components\nMockModeManager.logMockModeState();\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will output something like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Mock Mode State:\n  System Properties:\n    brobot.mock.mode = true\n    brobot.mock = true\n    brobot.mock-mode = true\n  ExecutionEnvironment:\n    mockMode = true\n    hasDisplay = false\n    canCaptureScreen = false\n  // Mock mode is now configured via application.properties:\n// brobot.core.mock=true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"integration-with-tests",children:"Integration with Tests"}),"\n",(0,t.jsx)(n.h3,{id:"using-with-brobottestbase",children:"Using with BrobotTestBase"}),"\n",(0,t.jsxs)(n.p,{children:["All test classes that extend ",(0,t.jsx)(n.code,{children:"BrobotTestBase"})," automatically use ",(0,t.jsx)(n.code,{children:"MockModeManager"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.test.BrobotTestBase;\nimport org.junit.jupiter.api.Test;\n\npublic class MyTest extends BrobotTestBase {\n    \n    @Test\n    public void testInMockMode() {\n        // Mock mode is automatically enabled via MockModeManager\n        assertTrue(isMockMode());\n        \n        // Your test logic here\n    }\n    \n    @Test\n    public void testInRealMode() {\n        // Temporarily disable mock mode\n        disableMockMode();\n        \n        try {\n            assertFalse(isMockMode());\n            // Test with real screen capture\n        } finally {\n            // Re-enable mock mode for other tests\n            MockModeManager.setMockMode(true);\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"manual-test-configuration",children:"Manual Test Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["For tests that don't extend ",(0,t.jsx)(n.code,{children:"BrobotTestBase"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.config.MockModeManager;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class StandaloneTest {\n    \n    @BeforeEach\n    public void setup() {\n        // Manually enable mock mode\n        MockModeManager.setMockMode(true);\n    }\n    \n    @Test\n    public void testFeature() {\n        assertTrue(brobotProperties.getCore().isMock());\n        // Test logic\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"application-startup",children:"Application Startup"}),"\n",(0,t.jsx)(n.h3,{id:"initializing-mock-mode-from-properties",children:"Initializing Mock Mode from Properties"}),"\n",(0,t.jsx)(n.p,{children:"During application startup, you can initialize mock mode based on system properties:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"import io.github.jspinak.brobot.config.MockModeManager;\n\n@SpringBootApplication\npublic class BrobotApplication {\n    \n    public static void main(String[] args) {\n        // Initialize mock mode based on system properties\n        MockModeManager.initializeMockMode();\n        \n        SpringApplication.run(BrobotApplication.class, args);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"spring-configuration",children:"Spring Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Configure mock mode through Spring properties:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nbrobot:\n  mock:\n    mode: true\n  framework:\n    mock: true\n  core:\n    mock-mode: true\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or via command line:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"java -jar myapp.jar --brobot.mock.mode=true\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.h3,{id:"synchronized-properties",children:"Synchronized Properties"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MockModeManager.setMockMode(true)"})," sets the following:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"System Properties:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"brobot.mock.mode"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"brobot.mock"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"brobot.mock-mode"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ExecutionEnvironment:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"mockMode = true"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"forceHeadless = true"})," (in mock mode)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"allowScreenCapture = false"})," (in mock mode)"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"FrameworkSettings:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"// Mock mode is now configured via application.properties: // brobot.core.mock=true"})," (via reflection)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"priority-order",children:"Priority Order"}),"\n",(0,t.jsxs)(n.p,{children:["When checking mock mode status, ",(0,t.jsx)(n.code,{children:"brobotProperties.getCore().isMock()"})," checks in this order:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"ExecutionEnvironment (if available)"}),"\n",(0,t.jsx)(n.li,{children:"System properties (as fallback)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-always-use-mockmodemanager",children:"1. Always Use MockModeManager"}),"\n",(0,t.jsx)(n.p,{children:"Instead of checking individual mock flags:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// \u274c Don't do this\nif (brobotProperties.getCore().isMock() || ExecutionEnvironment.getInstance().isMockMode()) {\n    // ...\n}\n\n// \u2705 Do this\nif (brobotProperties.getCore().isMock()) {\n    // ...\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-set-mock-mode-once",children:"2. Set Mock Mode Once"}),"\n",(0,t.jsx)(n.p,{children:"Set mock mode at the beginning of your test or application:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@BeforeAll\npublic static void setupClass() {\n    MockModeManager.setMockMode(true);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-use-logging-for-debugging",children:"3. Use Logging for Debugging"}),"\n",(0,t.jsx)(n.p,{children:"When troubleshooting mock mode issues:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Before your test\nMockModeManager.logMockModeState();\n\n// Run your test\n// ...\n\n// After if needed\nMockModeManager.logMockModeState();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-handle-mode-transitions-carefully",children:"4. Handle Mode Transitions Carefully"}),"\n",(0,t.jsx)(n.p,{children:"If switching between modes in a test:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Test\npublic void testModeTransition() {\n    // Start in mock mode\n    MockModeManager.setMockMode(true);\n    // ... mock tests ...\n    \n    // Switch to real mode\n    MockModeManager.setMockMode(false);\n    try {\n        // ... real mode tests ...\n    } finally {\n        // Always restore mock mode for other tests\n        MockModeManager.setMockMode(true);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,t.jsx)(n.h3,{id:"from-direct-property-setting",children:"From Direct Property Setting"}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'System.setProperty("brobot.mock", "true");\n// Mock mode is now configured via application.properties:\n// brobot.core.mock=true;\nExecutionEnvironment env = ExecutionEnvironment.builder()\n    .mockMode(true)\n    .build();\nExecutionEnvironment.setInstance(env);\n'})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"MockModeManager.setMockMode(true);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"from-multiple-mock-checks",children:"From Multiple Mock Checks"}),"\n",(0,t.jsx)(n.p,{children:"Before:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'boolean isMock = brobotProperties.getCore().isMock() || \n                 "true".equals(System.getProperty("brobot.mock.mode")) ||\n                 ExecutionEnvironment.getInstance().isMockMode();\n'})}),"\n",(0,t.jsx)(n.p,{children:"After:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"boolean isMock = brobotProperties.getCore().isMock();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"mock-mode-not-taking-effect",children:"Mock Mode Not Taking Effect"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Check that ",(0,t.jsx)(n.code,{children:"MockModeManager"})," is being used:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"MockModeManager.logMockModeState();\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Ensure you're calling ",(0,t.jsx)(n.code,{children:"setMockMode()"})," early enough in your test/application lifecycle"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Verify no other code is directly setting mock flags after ",(0,t.jsx)(n.code,{children:"MockModeManager"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"inconsistent-mock-behavior",children:"Inconsistent Mock Behavior"}),"\n",(0,t.jsx)(n.p,{children:"If you see inconsistent behavior between components:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"MockModeManager.setMockMode()"})," instead of setting individual flags"]}),"\n",(0,t.jsx)(n.li,{children:"Check for any legacy code still using direct property access"}),"\n",(0,t.jsx)(n.li,{children:"Enable debug logging to trace mock mode changes"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(n.h3,{id:"mockmodemanager-methods",children:"MockModeManager Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"setMockMode(boolean enable)"})}),(0,t.jsx)(n.td,{children:"Enable or disable mock mode globally"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"isMockMode()"})}),(0,t.jsx)(n.td,{children:"Check if mock mode is currently enabled"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"logMockModeState()"})}),(0,t.jsx)(n.td,{children:"Log current mock mode state for debugging"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"initializeMockMode()"})}),(0,t.jsx)(n.td,{children:"Initialize mock mode based on system properties"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/brobot/docs/testing/mock-mode-guide",children:"Mock Mode Guide"})," - Comprehensive guide to using mock mode"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/brobot/docs/testing/test-utilities",children:"Test Utilities"})," - Testing utilities and BrobotTestBase"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/brobot/docs/core-library/testing/enhanced-mocking",children:"Enhanced Mocking"})," - Advanced mock scenarios"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9876],{28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>s});var r=n(96540);const t={},o=r.createContext(t);function l(e){const i=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(o.Provider,{value:i},e.children)}},56056:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"testing/hybrid-architecture-summary","title":"Hybrid Architecture Summary","description":"Overview","source":"@site/docs/04-testing/hybrid-architecture-summary.md","sourceDirName":"04-testing","slug":"/testing/hybrid-architecture-summary","permalink":"/brobot/docs/testing/hybrid-architecture-summary","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/04-testing/hybrid-architecture-summary.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Hybrid Architecture Summary"},"sidebar":"docSidebar","previous":{"title":"Debugging Pattern Matching","permalink":"/brobot/docs/testing/debugging-pattern-matching"},"next":{"title":"Profile-Based Testing","permalink":"/brobot/docs/testing/profile-based-testing"}}');var t=n(74848),o=n(28453);const l={sidebar_position:5,title:"Hybrid Architecture Summary"},s="Hybrid Architecture Implementation Summary",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Completed Implementation",id:"completed-implementation",level:2},{value:"Phase 1: Profile-Based Configuration \u2705",id:"phase-1-profile-based-configuration-",level:3},{value:"Phase 2: Component Refactoring \u2705",id:"phase-2-component-refactoring-",level:3},{value:"Phase 3: Hybrid Wrapper Pattern \u2705",id:"phase-3-hybrid-wrapper-pattern-",level:3},{value:"Phase 4: Documentation \u2705",id:"phase-4-documentation-",level:3},{value:"Architecture Benefits",id:"architecture-benefits",level:2},{value:"1. Performance",id:"1-performance",level:3},{value:"2. Flexibility",id:"2-flexibility",level:3},{value:"3. Maintainability",id:"3-maintainability",level:3},{value:"Migration Strategy",id:"migration-strategy",level:2},{value:"For New Components",id:"for-new-components",level:3},{value:"For Existing Components",id:"for-existing-components",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Standard Test Profile",id:"standard-test-profile",level:3},{value:"Mixed-Mode Test",id:"mixed-mode-test",level:3},{value:"Gradual Migration",id:"gradual-migration",level:3},{value:"Key Files Created",id:"key-files-created",level:2},{value:"Library Level (Brobot)",id:"library-level-brobot",level:3},{value:"Application Level (Claude Automator)",id:"application-level-claude-automator",level:3},{value:"Documentation",id:"documentation",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Short Term",id:"short-term",level:3},{value:"Long Term",id:"long-term",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Do&#39;s",id:"dos",level:3},{value:"Don&#39;ts",id:"donts",level:3},{value:"Conclusion",id:"conclusion",level:2}];function a(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"hybrid-architecture-implementation-summary",children:"Hybrid Architecture Implementation Summary"})}),"\n",(0,t.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(i.p,{children:"The hybrid architecture successfully combines Spring's profile-based dependency injection with Brobot's runtime delegation pattern, enabling flexible execution modes and gradual migration paths."}),"\n",(0,t.jsx)(i.h2,{id:"completed-implementation",children:"Completed Implementation"}),"\n",(0,t.jsx)(i.h3,{id:"phase-1-profile-based-configuration-",children:"Phase 1: Profile-Based Configuration \u2705"}),"\n",(0,t.jsx)(i.p,{children:"Created foundational profile support:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"BrobotProfileAutoConfiguration"})," - Auto-configures based on active profiles"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"brobot-test-defaults.properties"})," - Test-optimized defaults"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"application-test.properties"})," - Application-specific test configuration"]}),"\n",(0,t.jsx)(i.li,{children:"Profile validation to ensure consistency"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"phase-2-component-refactoring-",children:"Phase 2: Component Refactoring \u2705"}),"\n",(0,t.jsx)(i.p,{children:"Demonstrated refactoring pattern with text typing:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Interface Extraction"}),": ",(0,t.jsx)(i.code,{children:"TextTyper"})," interface"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Profile Implementations"}),":","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"MockTextTyper"})," - Test profile implementation"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"LiveTextTyper"})," - Production profile implementation"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Default Implementation"}),": ",(0,t.jsx)(i.code,{children:"DefaultTextTyper"})," - Main text typing implementation"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"phase-3-hybrid-wrapper-pattern-",children:"Phase 3: Hybrid Wrapper Pattern \u2705"}),"\n",(0,t.jsx)(i.p,{children:"Implemented wrapper pattern for mixed-mode execution:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"HybridTextTyper"})," - Bridges profile and runtime architectures"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"HybridExecutionConfiguration"})," - Manages hybrid mode"]}),"\n",(0,t.jsx)(i.li,{children:"Support for dynamic mode switching"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"phase-4-documentation-",children:"Phase 4: Documentation \u2705"}),"\n",(0,t.jsx)(i.p,{children:"Comprehensive documentation created:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Profile-based architecture guide"}),"\n",(0,t.jsx)(i.li,{children:"Runtime delegation migration guide"}),"\n",(0,t.jsx)(i.li,{children:"Mixed-mode execution guide"}),"\n",(0,t.jsx)(i.li,{children:"Example test scenarios"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"architecture-benefits",children:"Architecture Benefits"}),"\n",(0,t.jsx)(i.h3,{id:"1-performance",children:"1. Performance"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"No runtime overhead"})," in pure profile mode"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Better JVM optimization"})," with static dispatch"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Reduced complexity"})," in execution paths"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"2-flexibility",children:"2. Flexibility"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Three execution modes"}),":","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Pure profile-based (fastest)"}),"\n",(0,t.jsx)(i.li,{children:"Pure runtime delegation (legacy)"}),"\n",(0,t.jsx)(i.li,{children:"Hybrid (maximum flexibility)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Gradual migration"})," path from legacy to modern"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Dynamic switching"})," for complex test scenarios"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"3-maintainability",children:"3. Maintainability"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Clear separation"})," of test and production code"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Single responsibility"})," for each implementation"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Type-safe"})," with compile-time verification"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,t.jsx)(i.h3,{id:"for-new-components",children:"For New Components"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'// Note: BrobotProperties must be injected as a dependency\n@Autowired\nprivate BrobotProperties brobotProperties;\n\n// 1. Define interface\npublic interface ComponentExecutor {\n    Result execute(Input input);\n}\n\n// 2. Create profile implementations\n@Component\n@Profile("test")\npublic class MockComponentExecutor implements ComponentExecutor { }\n\n@Component\n@Profile("!test")\npublic class LiveComponentExecutor implements ComponentExecutor { }\n'})}),"\n",(0,t.jsx)(i.h3,{id:"for-existing-components",children:"For Existing Components"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:"// Keep original for compatibility\npublic class LegacyComponent {\n    public Result execute() {\n        if (brobotProperties.getCore().isMock()) {\n            return mockExecute();\n        }\n        return liveExecute();\n    }\n}\n\n// Add hybrid wrapper\n@Component\n@Primary\npublic class HybridComponent {\n    @Autowired(required = false)\n    private MockComponent mock;\n    \n    @Autowired(required = false)\n    private LiveComponent live;\n    \n    @Autowired\n    private LegacyComponent legacy;\n    \n    public Result execute() {\n        // Try profile-based first, fall back to legacy\n        if (mock != null && brobotProperties.getCore().isMock()) {\n            return mock.execute();\n        }\n        if (live != null && !brobotProperties.getCore().isMock()) {\n            return live.execute();\n        }\n        return legacy.execute();\n    }\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(i.h3,{id:"standard-test-profile",children:"Standard Test Profile"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@ActiveProfiles("test")\npublic class StandardTest {\n    // Automatically uses mock implementations\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"mixed-mode-test",children:"Mixed-Mode Test"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",children:'@SpringBootTest\n@TestPropertySource(properties = "brobot.hybrid.enabled=true")\npublic class MixedModeTest {\n    @Autowired\n    private HybridComponentConfigurer configurer;\n    \n    @Test\n    public void testWithModeSwitching() {\n        configurer.switchAllToMock();\n        // Mock operations\n        \n        configurer.switchAllToLive();\n        // Live operations\n    }\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"gradual-migration",children:"Gradual Migration"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-properties",children:"# Start with hybrid mode\nbrobot.hybrid.enabled=true\n\n# Migrate components incrementally\nbrobot.component.text-typer.mode=profile\nbrobot.component.click-executor.mode=hybrid\nbrobot.component.scene-provider.mode=legacy\n"})}),"\n",(0,t.jsx)(i.h2,{id:"key-files-created",children:"Key Files Created"}),"\n",(0,t.jsx)(i.h3,{id:"library-level-brobot",children:"Library Level (Brobot)"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/resources/brobot-test-defaults.properties"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/java/io/github/jspinak/brobot/config/BrobotProfileAutoConfiguration.java"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/java/io/github/jspinak/brobot/config/HybridExecutionConfiguration.java"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/java/io/github/jspinak/brobot/action/internal/text/TextTyper.java"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/java/io/github/jspinak/brobot/action/internal/text/MockTextTyper.java"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/java/io/github/jspinak/brobot/action/internal/text/LiveTextTyper.java"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/library/src/main/java/io/github/jspinak/brobot/action/internal/text/HybridTextTyper.java"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"application-level-claude-automator",children:"Application Level (Claude Automator)"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/claude-automator/src/main/resources/application-test.properties"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/claude-automator/src/test/java/com/claude/automator/ProfileBasedMockVerificationTest.java"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/claude-automator/src/test/java/com/claude/automator/MixedModeExecutionTest.java"})}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/docs/docs/04-testing/profile-based-architecture.md"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/docs/docs/04-testing/mixed-mode-execution.md"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/docs/docs/04-testing/mock-mode-guide.md"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/docs/docs/03-core-library/guides/runtime-delegation-migration.md"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"/brobot/docs/docs/04-testing/hybrid-architecture-summary.md"})}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(i.h3,{id:"short-term",children:"Short Term"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Component Migration"}),": Migrate high-impact components first"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"SingleClickExecutor"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"SceneProvider"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"MouseWheel"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Test Coverage"}),": Add tests for hybrid mode scenarios"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Mode switching under load"}),"\n",(0,t.jsx)(i.li,{children:"Concurrent mode changes"}),"\n",(0,t.jsx)(i.li,{children:"Error recovery patterns"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Performance Metrics"}),": Benchmark profile vs. runtime approaches"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Startup time comparison"}),"\n",(0,t.jsx)(i.li,{children:"Execution speed analysis"}),"\n",(0,t.jsx)(i.li,{children:"Memory usage patterns"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"long-term",children:"Long Term"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Full Migration"}),": Convert all runtime checks to profile-based"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Deprecation"}),": Mark legacy runtime checks as deprecated"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Optimization"}),": Remove runtime overhead completely"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Tooling"}),": Create migration automation tools"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(i.h3,{id:"dos",children:"Do's"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"\u2705 Use profiles for clear environment separation"}),"\n",(0,t.jsx)(i.li,{children:"\u2705 Implement interfaces for testability"}),"\n",(0,t.jsx)(i.li,{children:"\u2705 Keep legacy code during migration"}),"\n",(0,t.jsx)(i.li,{children:"\u2705 Document mode requirements clearly"}),"\n",(0,t.jsx)(i.li,{children:"\u2705 Test both modes thoroughly"}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"donts",children:"Don'ts"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"\u274c Mix profile and runtime checks in new code"}),"\n",(0,t.jsx)(i.li,{children:"\u274c Force immediate migration of stable components"}),"\n",(0,t.jsx)(i.li,{children:"\u274c Remove legacy code without migration period"}),"\n",(0,t.jsx)(i.li,{children:"\u274c Use hybrid mode in production (test only)"}),"\n",(0,t.jsx)(i.li,{children:"\u274c Switch modes during critical operations"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(i.p,{children:"The hybrid architecture successfully provides:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Immediate benefits"})," through profile-based testing"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Backward compatibility"})," with existing code"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Flexible migration"})," path for gradual adoption"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Enhanced testing"})," capabilities with mixed-mode execution"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The implementation demonstrates that Brobot can evolve from runtime delegation to profile-based architecture while maintaining stability and providing powerful new testing capabilities."})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);
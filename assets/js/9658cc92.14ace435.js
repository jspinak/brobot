"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5794],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(96540);const i={},r=a.createContext(i);function o(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:t},e.children)}},45130:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"core-library/tutorials/tutorial-claude-automator/states","title":"Creating States with Annotations","description":"Overview","source":"@site/docs/03-core-library/tutorials/tutorial-claude-automator/states.md","sourceDirName":"03-core-library/tutorials/tutorial-claude-automator","slug":"/core-library/tutorials/tutorial-claude-automator/states","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/states","draft":false,"unlisted":false,"editUrl":"https://github.com/jspinak/brobot/edit/main/docs/docs/03-core-library/tutorials/tutorial-claude-automator/states.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Running the Claude Automator","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/running-the-app"},"next":{"title":"Implementing Transitions with @TransitionSet","permalink":"/brobot/docs/core-library/tutorials/tutorial-claude-automator/transitions"}}');var i=n(74848),r=n(28453);const o={},s="Creating States with Annotations",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Working State",id:"working-state",level:2},{value:"WorkingState.java",id:"workingstatejava",level:3},{value:"Key Features:",id:"key-features",level:3},{value:"Prompt State",id:"prompt-state",level:2},{value:"PromptState.java",id:"promptstatejava",level:3},{value:"Key Features:",id:"key-features-1",level:3},{value:"Comparison: Before and After",id:"comparison-before-and-after",level:2},{value:"Before (Manual Registration):",id:"before-manual-registration",level:3},{value:"After (With Annotations):",id:"after-with-annotations",level:3},{value:"Benefits of Annotation Approach",id:"benefits-of-annotation-approach",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Required Annotations",id:"required-annotations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"creating-states-with-annotations",children:"Creating States with Annotations"})}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(t.p,{children:"The Claude automator demonstrates the new annotation-based approach for defining states. This significantly simplifies state configuration by eliminating manual registration and boilerplate code."}),"\n",(0,i.jsx)(t.h2,{id:"working-state",children:"Working State"}),"\n",(0,i.jsx)(t.p,{children:"The Working state represents the screen where Claude is actively responding:"}),"\n",(0,i.jsx)(t.h3,{id:"workingstatejava",children:"WorkingState.java"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.claude.automator.states;\n\nimport io.github.jspinak.brobot.annotations.State;\nimport io.github.jspinak.brobot.model.state.StateImage;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\n@State\n@Getter\n@Slf4j\npublic class WorkingState {\n    \n    private final StateImage claudeIcon;\n    \n    public WorkingState() {\n        log.info("Creating WorkingState");\n        \n        // Create the claude icon images\n        claudeIcon = new StateImage.Builder()\n            .addPatterns("working/claude-icon-1", \n                        "working/claude-icon-2", \n                        "working/claude-icon-3", \n                        "working/claude-icon-4")\n            .setName("ClaudeIcon")\n            .build();\n        \n        log.info("WorkingState created successfully");\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"key-features",children:"Key Features:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"@State Annotation"}),": Automatically registers the state with Brobot"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"No Manual Registration"}),": No need for StateRegistrationListener"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Direct Component Access"}),": The ",(0,i.jsx)(t.code,{children:"claudeIcon"})," is stored as a field with a getter"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Multiple Image Patterns"}),": Uses ",(0,i.jsx)(t.code,{children:"addPatterns()"})," to handle UI variations"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Simplified Structure"}),": No need for State.Builder or StateEnum"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"prompt-state",children:"Prompt State"}),"\n",(0,i.jsx)(t.p,{children:"The Prompt state represents the screen where we can enter prompts:"}),"\n",(0,i.jsx)(t.h3,{id:"promptstatejava",children:"PromptState.java"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.claude.automator.states;\n\nimport io.github.jspinak.brobot.annotations.State;\nimport io.github.jspinak.brobot.model.state.StateImage;\nimport io.github.jspinak.brobot.model.state.StateString;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\n@State(initial = true)\n@Getter\n@Slf4j\npublic class PromptState {\n    \n    private final StateImage claudePrompt;\n    private final StateString continueCommand;\n    \n    public PromptState() {\n        log.info("Creating PromptState");\n        \n        // Initialize the claude prompt image\n        claudePrompt = new StateImage.Builder()\n            .addPatterns("prompt/claude-prompt-1",\n                        "prompt/claude-prompt-2",\n                        "prompt/claude-prompt-3")\n            .setName("ClaudePrompt")\n            .build();\n        \n        // Create the continue command as a string\n        continueCommand = new StateString.Builder()\n            .setName("ContinueCommand")\n            .setString("continue\\n")\n            .build();\n        \n        log.info("PromptState created successfully");\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"key-features-1",children:"Key Features:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Initial State Marking"}),": ",(0,i.jsx)(t.code,{children:"@State(initial = true)"})," designates this as the starting state"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Automatic Framework Integration"}),": Spring and Brobot automatically discover and register the state"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mixed State Components"}),": Combines StateImage (for visual elements) and StateString (for text input)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Clean API"}),": Direct access to both ",(0,i.jsx)(t.code,{children:"claudePrompt"})," and ",(0,i.jsx)(t.code,{children:"continueCommand"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"No Boilerplate"}),": No need for State objects or manual registration"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"comparison-before-and-after",children:"Comparison: Before and After"}),"\n",(0,i.jsx)(t.h3,{id:"before-manual-registration",children:"Before (Manual Registration):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// StateRegistrationListener.java - 67 lines of boilerplate\n@Component\n@RequiredArgsConstructor\n@Slf4j\npublic class StateRegistrationListener {\n    private final StateService stateService;\n    private final StateTransitionStore stateTransitionStore;\n    // ... lots of manual registration code\n    \n    @EventListener(ApplicationReadyEvent.class)\n    public void onApplicationReady() {\n        stateService.save(workingState.getState());\n        stateService.save(promptState.getState());\n        // ... more registration\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"after-with-annotations",children:"After (With Annotations):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"// No registration needed! Just add @State annotation\n@State(initial = true)\n@Getter\n@Slf4j\npublic class PromptState {\n    // State definition\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"benefits-of-annotation-approach",children:"Benefits of Annotation Approach"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Zero Configuration"}),": States are automatically discovered and registered"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Less Code"}),": Eliminate 60+ lines of registration boilerplate"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Clearer Intent"}),": ",(0,i.jsx)(t.code,{children:"@State(initial = true)"})," clearly marks starting states"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Better Separation"}),": State definition and registration are unified"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Type Safety"}),": Compile-time checking of state relationships"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Always use @Getter"})," - Lombok generates getters for state components"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Always use @Slf4j"})," - Provides consistent logging"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mark initial states"})," - Use ",(0,i.jsx)(t.code,{children:"@State(initial = true)"})," for entry points"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Keep states focused"})," - Each state represents one UI screen"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Use descriptive names"})," - Component names should be self-documenting"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"required-annotations",children:"Required Annotations"}),"\n",(0,i.jsx)(t.p,{children:"When using the annotation system, include these annotations on your state classes:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"@State              // Brobot state registration\n@Getter             // Lombok getter generation\n@Slf4j              // Lombok logging\npublic class MyState {\n    // State implementation\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(t.p,{children:"With our states defined using annotations, we'll implement transitions that also use the annotation system for automatic registration and simplified configuration."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
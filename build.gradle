// build.gradle (Root Project: brobot)
// This file configures settings shared across all modules in the project.

plugins {
    // Make the Spring Boot plugin version available to sub-projects without applying it to the root.
    id 'org.springframework.boot' version '3.2.4' apply false

    // This plugin is applied to the root to make it available to all sub-projects.
    id 'io.freefair.lombok' version '8.11'
    
    // JReleaser for publishing to Maven Central
    id 'org.jreleaser' version '1.15.0' apply false
    
    // JaCoCo for code coverage reporting
    id 'jacoco'
    
    // Spotless for code formatting and linting
    id 'com.diffplug.spotless' version '6.25.0'
}

// Apply coverage configuration
// apply from: 'coverage-config.gradle'

allprojects {
    group = 'io.github.jspinak.brobot'
    version = '1.1.0'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    java {
        // Use a toolchain to ensure a consistent JDK is used for compiling and running.
        sourceCompatibility = JavaVersion.VERSION_21
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
            // Remove vendor restriction to allow any Java 21 implementation
            // This makes it work with GitHub Actions and other CI environments
        }
    }

    // Dependencies are managed at the module level
    // Modules that depend on 'library' will get its API dependencies transitively

    // Central dependency management for all sub-projects.
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.4"
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }
    
    jacoco {
        toolVersion = "0.8.11"
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
            csv.required = true
        }
    }
    
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.60 // Start with 60% coverage requirement
                }
            }
        }
    }
}

// Aggregate JaCoCo coverage report from all subprojects
task jacocoAggregatedReport(type: JacocoReport) {
    dependsOn subprojects*.test
    
    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)
    
    reports {
        xml.required = true
        html.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco/aggregate')
    }
    
    doLast {
        println "Aggregate coverage report generated at: ${layout.buildDirectory.dir('reports/jacoco/aggregate').get()}"
    }
}

// Configure Spotless for code formatting and linting
spotless {
    // Java formatting configuration
    java {
        target 'library/src/**/*.java', 'library-test/src/**/*.java', 'library-features/src/**/*.java',
               'persistence/src/**/*.java', 'pattern-capture-tool/src/**/*.java'

        // Note: Example projects that are included as subprojects handle their own spotless configuration
        
        // Use Google Java Format for consistent formatting
        googleJavaFormat('1.19.2')
            .aosp()  // Android Open Source Project style (4-space indentation)
            .reflowLongStrings()  // Reflow long string literals
            .formatJavadoc(true)  // Format Javadoc
        
        // Remove unused imports
        removeUnusedImports()
        
        // Organize imports
        importOrder('java', 'javax', 'jakarta', 'org', 'com', 'io.github.jspinak', '')
        
        // Format annotations
        formatAnnotations()
        
        // Trim trailing whitespace
        trimTrailingWhitespace()
        
        // Ensure files end with newline
        endWithNewline()
        
        // Custom license header (optional - uncomment if needed)
        // licenseHeader '/* Copyright (c) 2024 Brobot Project */'
    }
    
    // Format properties files (removed Gradle formatting to avoid errors)
    format 'misc', {
        target '**/*.properties', '**/*.yml', '**/*.yaml'
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}

// Apply Spotless to all subprojects
subprojects {
    apply plugin: 'com.diffplug.spotless'
    
    spotless {
        java {
            // Use the same configuration as root project
            googleJavaFormat('1.19.2')
                .aosp()
                .reflowLongStrings()
                .formatJavadoc(true)
            
            removeUnusedImports()
            importOrder('java', 'javax', 'jakarta', 'org', 'com', 'io.github.jspinak', '')
            formatAnnotations()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}

/**
 * jpackage configuration for creating native installers
 * 
 * This file contains the configuration for building native installers
 * for Windows, macOS, and Linux using Java's jpackage tool.
 */

import java.nio.file.Files
import java.nio.file.StandardCopyOption

// Helper function to detect OS
def getOS() {
    def os = System.getProperty("os.name").toLowerCase()
    if (os.contains("win")) {
        return "windows"
    } else if (os.contains("mac")) {
        return "macos"
    } else if (os.contains("nux") || os.contains("nix")) {
        return "linux"
    }
    return "unknown"
}

// Create directories for packaging resources
task createPackagingDirs {
    doLast {
        mkdir "${buildDir}/packaging/icons"
        mkdir "${buildDir}/packaging/config"
        mkdir "${buildDir}/packaging/licenses"
    }
}

// Task to prepare runtime image with jlink
task prepareRuntime(type: Exec, dependsOn: [bootJar, createPackagingDirs]) {
    def javaHome = System.getProperty("java.home")
    def outputDir = "${buildDir}/runtime"
    
    // Delete existing runtime if it exists
    doFirst {
        delete outputDir
    }
    
    commandLine "${javaHome}/bin/jlink",
        "--add-modules", "java.base,java.desktop,java.logging,java.management,java.naming,java.prefs,java.scripting,java.sql,java.xml,jdk.unsupported,jdk.crypto.ec",
        "--add-modules", "javafx.controls,javafx.fxml,javafx.graphics,javafx.swing,javafx.web",
        "--add-modules", "jdk.localedata",
        "--output", outputDir,
        "--strip-debug",
        "--compress", "2",
        "--no-header-files",
        "--no-man-pages"
}

// Base task for jpackage configuration
task jpackageBase(dependsOn: [bootJar, prepareRuntime]) {
    doFirst {
        // Ensure output directories exist
        mkdir "${buildDir}/installers"
        
        // Copy application JAR to input directory
        def inputDir = file("${buildDir}/jpackage-input")
        inputDir.mkdirs()
        copy {
            from bootJar
            into inputDir
            rename { "brobot-runner.jar" }
        }
    }
}

// Windows installer configuration
task jpackageWindows(type: Exec, dependsOn: jpackageBase) {
    onlyIf { getOS() == "windows" }
    
    def appVersion = project.version.toString().replace("-SNAPSHOT", "")
    def javaHome = System.getProperty("java.home")
    
    doFirst {
        // Create Windows-specific resources
        file("${buildDir}/packaging/windows").mkdirs()
    }
    
    commandLine "${javaHome}/bin/jpackage",
        "--type", "msi",
        "--name", "Brobot Runner",
        "--app-version", appVersion,
        "--vendor", "Brobot Team",
        "--copyright", "Copyright (c) 2024 Brobot Team",
        "--description", "Desktop runner for Brobot automation framework",
        "--runtime-image", "${buildDir}/runtime",
        "--input", "${buildDir}/jpackage-input",
        "--dest", "${buildDir}/installers",
        "--main-jar", "brobot-runner.jar",
        "--main-class", "io.github.jspinak.brobot.runner.BrobotRunnerApplication",
        "--java-options", "-Xmx2048m",
        "--java-options", "-Dspring.profiles.active=production",
        "--win-dir-chooser",
        "--win-menu",
        "--win-menu-group", "Brobot",
        "--win-shortcut",
        "--win-shortcut-prompt",
        "--win-per-user-install",
        "--file-associations", "${projectDir}/packaging/file-associations-win.properties"
    
    // Add icon if it exists
    if (file("${projectDir}/packaging/icons/brobot.ico").exists()) {
        args "--icon", "${projectDir}/packaging/icons/brobot.ico"
    }
}

// macOS installer configuration
task jpackageMacOS(type: Exec, dependsOn: jpackageBase) {
    onlyIf { getOS() == "macos" }
    
    def appVersion = project.version.toString().replace("-SNAPSHOT", "")
    def javaHome = System.getProperty("java.home")
    
    commandLine "${javaHome}/bin/jpackage",
        "--type", "dmg",
        "--name", "Brobot Runner",
        "--app-version", appVersion,
        "--vendor", "Brobot Team",
        "--copyright", "Copyright (c) 2024 Brobot Team",
        "--description", "Desktop runner for Brobot automation framework",
        "--runtime-image", "${buildDir}/runtime",
        "--input", "${buildDir}/jpackage-input",
        "--dest", "${buildDir}/installers",
        "--main-jar", "brobot-runner.jar",
        "--main-class", "io.github.jspinak.brobot.runner.BrobotRunnerApplication",
        "--java-options", "-Xmx2048m",
        "--java-options", "-Dspring.profiles.active=production",
        "--mac-package-name", "Brobot Runner",
        "--mac-package-identifier", "io.github.jspinak.brobot.runner",
        "--file-associations", "${projectDir}/packaging/file-associations-mac.properties"
    
    // Add icon if it exists
    if (file("${projectDir}/packaging/icons/brobot.icns").exists()) {
        args "--icon", "${projectDir}/packaging/icons/brobot.icns"
    }
}

// Linux installer configuration
task jpackageLinux(type: Exec, dependsOn: jpackageBase) {
    onlyIf { getOS() == "linux" }
    
    def appVersion = project.version.toString().replace("-SNAPSHOT", "")
    def javaHome = System.getProperty("java.home")
    
    // Default to DEB, can be overridden with -PlinuxType=rpm
    def packageType = project.hasProperty('linuxType') ? project.linuxType : 'deb'
    
    commandLine "${javaHome}/bin/jpackage",
        "--type", packageType,
        "--name", "brobot-runner",
        "--app-version", appVersion,
        "--vendor", "Brobot Team",
        "--copyright", "Copyright (c) 2024 Brobot Team",
        "--description", "Desktop runner for Brobot automation framework",
        "--runtime-image", "${buildDir}/runtime",
        "--input", "${buildDir}/jpackage-input",
        "--dest", "${buildDir}/installers",
        "--main-jar", "brobot-runner.jar",
        "--main-class", "io.github.jspinak.brobot.runner.BrobotRunnerApplication",
        "--java-options", "-Xmx2048m",
        "--java-options", "-Dspring.profiles.active=production",
        "--linux-package-name", "brobot-runner",
        "--linux-app-category", "Development",
        "--linux-menu-group", "Development;IDE;",
        "--linux-shortcut",
        "--file-associations", "${projectDir}/packaging/file-associations-linux.properties"
    
    // Add icon if it exists
    if (file("${projectDir}/packaging/icons/brobot.png").exists()) {
        args "--icon", "${projectDir}/packaging/icons/brobot.png"
    }
}

// Main jpackage task that runs the appropriate OS-specific task
task jpackage {
    dependsOn {
        switch (getOS()) {
            case "windows":
                return jpackageWindows
            case "macos":
                return jpackageMacOS
            case "linux":
                return jpackageLinux
            default:
                throw new GradleException("Unsupported operating system: ${getOS()}")
        }
    }
    
    doLast {
        println "Native installer created in: ${buildDir}/installers"
    }
}

// Task to create all installers (requires running on each platform)
task jpackageAll {
    dependsOn jpackageWindows, jpackageMacOS, jpackageLinux
    description = "Create installers for all platforms (must be run on each platform)"
}

// Task to validate jpackage environment
task validateJpackage {
    doLast {
        def javaHome = System.getProperty("java.home")
        def jpackageExe = "${javaHome}/bin/jpackage"
        
        if (!file(jpackageExe).exists() && !file("${jpackageExe}.exe").exists()) {
            throw new GradleException("jpackage not found. Make sure you're using JDK 14 or later.")
        }
        
        println "jpackage found at: ${jpackageExe}"
        println "Current OS: ${getOS()}"
        println "Java version: ${System.getProperty("java.version")}"
    }
}

// Configure tasks
jpackageWindows.onlyIf { getOS() == "windows" }
jpackageMacOS.onlyIf { getOS() == "macos" }
jpackageLinux.onlyIf { getOS() == "linux" }
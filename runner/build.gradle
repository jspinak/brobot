// build.gradle for Brobot Runner module
// This module provides a JavaFX UI for the Brobot automation framework

plugins {
    id 'java'
    id 'application'
    id 'io.freefair.lombok'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot' version '3.2.4'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    //id 'org.beryx.jlink' version '3.1.1'  // Add jlink plugin for jpackage support
}

description = 'Brobot Runner - JavaFX UI for Brobot Automation'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base']
}

def platform = org.gradle.internal.os.OperatingSystem.current().isWindows() ? 'win' :
        org.gradle.internal.os.OperatingSystem.current().isLinux() ? 'linux' : 'mac'


dependencies {
    // Project dependencies
    implementation project(':library')
    implementation project(':log')

    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'

    // Spring core dependencies
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework:spring-core'

    // Explicit JavaFX dependencies
    // javafx-base is included as a transitive dependency
    implementation "org.openjfx:javafx-controls:21"
    implementation "org.openjfx:javafx-fxml:21"
    implementation "org.openjfx:javafx-graphics:21"
    implementation("net.rgielen:javafx-weaver-spring:2.0.1")

    // JSON parsing with specific version
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.4'

    implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'

    implementation 'org.slf4j:slf4j-api:2.0.9'

    // Testing with specific versions
    testImplementation "org.openjfx:javafx-base:21:${platform}"
    testImplementation "org.openjfx:javafx-controls:21:${platform}"
    testImplementation "org.openjfx:javafx-graphics:21:${platform}"
    testImplementation "org.openjfx:javafx-fxml:21:${platform}"
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-inline:4.5.1'  // For static mocking support
}

test {
    useJUnitPlatform()

    // More robust module configuration for JavaFX
    jvmArgs = [
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.desktop/java.awt=ALL-UNNAMED'
    ]

    // Configure TestFX for better stability
    systemProperty 'testfx.setup.timeout', '10000'
    systemProperty 'testfx.robot.write.sleep', '30'
    systemProperty 'testfx.robot', 'glass'

    // For headless testing environments
    if (System.getProperty('testfx.headless') == 'true') {
        systemProperty 'testfx.headless', 'true'
        systemProperty 'glass.platform', 'Monocle'
        systemProperty 'monocle.platform', 'Headless'
        systemProperty 'prism.order', 'sw'
        systemProperty 'prism.text', 't2k'
        systemProperty 'java.awt.headless', 'true'
    }

    // Optional: increase verbosity for debugging
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
    }
}

application {
    mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
    //mainModule = 'runner'  // when using modules for JavaFX
}

// Runtime configuration for JavaFX
tasks.withType(JavaExec).configureEach {
    jvmArgs += [
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base',
            '--add-reads', 'runner=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.desktop/java.awt=ALL-UNNAMED',
            '--add-opens', 'java.desktop/java.awt.image=ALL-UNNAMED',
            '--add-opens', 'java.desktop/javax.imageio=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
    ]
}

// For packaging the application
bootJar {
    mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
        )
    }
}

/*
// Configure jlink task for modular JavaFX application
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'brobot'
        mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
        jvmArgs = [
                '--add-modules', 'javafx.controls,javafx.fxml,javafx.graphics,javafx.base',
                '--add-reads', 'runner=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'java.desktop/java.awt=ALL-UNNAMED',
                '--add-opens', 'java.desktop/java.awt.image=ALL-UNNAMED',
                '--add-opens', 'java.desktop/javax.imageio=ALL-UNNAMED',
                '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
                '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
        ]
    }

    // Set jpackage-specific options
    jpackage {
        // The jpackage configuration differs between versions of the plugin
        // Some properties must be set via installer options

        // Set application version (using project version)
        imageOptions = ['--app-version', project.version]

        installerOptions = []

        // Set platform-specific installer settings
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = 'exe'
            installerOptions.addAll([
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    '--name', 'Brobot', // Set app name
                    '--vendor', 'io.github.jspinak', // Set vendor
                    '--description', 'Brobot Automation Desktop Application'
            ])
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            installerType = 'dmg'
            installerOptions.addAll([
                    '--name', 'Brobot', // Set app name
                    '--vendor', 'io.github.jspinak', // Set vendor
                    '--mac-package-name', 'Brobot',
                    '--description', 'Brobot Automation Desktop Application'
            ])
        } else {
            installerType = 'deb'
            installerOptions.addAll([
                    '--name', 'Brobot', // Set app name
                    '--vendor', 'io.github.jspinak', // Set vendor
                    '--linux-shortcut',
                    '--linux-package-name', 'brobot',
                    '--linux-app-category', 'Development',
                    '--description', 'Brobot Automation Desktop Application'
            ])
        }
    }
}

 */

// Create a direct jpackage task (with a DIFFERENT name to avoid conflicts)
task directJpackage(type: Exec) {
    group = 'packaging'
    description = 'Package the application using jpackage command line tool directly'
    dependsOn bootJar

    def jpackageHome = System.getProperty('java.home')
    def jpackageExe = "${jpackageHome}/bin/jpackage"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        jpackageExe += '.exe'
    }

    workingDir = file("${buildDir}")

    doFirst {
        // Create a directory for resources and prepare files
        def resourcesDir = file("${buildDir}/jpackage-resources")
        resourcesDir.mkdirs()

        // Create the command line based on the OS
        commandLine = [
                jpackageExe,
                '--type', 'app-image',
                '--input', "${buildDir}/libs",
                '--dest', "${buildDir}/jpackage",
                '--name', 'Brobot',
                '--main-jar', bootJar.archiveFileName.get(),
                '--main-class', 'io.github.jspinak.brobot.runner.BrobotRunnerApplication',
                '--app-version', project.version,
                '--vendor', 'io.github.jspinak'
        ]

        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            commandLine += ['--win-menu', '--win-shortcut']
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            commandLine += ['--mac-package-name', 'Brobot']
        } else {
            commandLine += ['--linux-shortcut']
        }

        println "Running jpackage command: ${commandLine.join(' ')}"
    }

    // Make sure that bootJar is executed before this task
    mustRunAfter bootJar
}

// Task to create distribution zip (fallback option)
tasks.register('createDistributionZip', Zip) {
    dependsOn bootJar

    archiveFileName = "brobot-runner-${project.version}.zip"
    destinationDirectory = file("${buildDir}/distributions")

    from("${buildDir}/libs") {
        include "*.jar"
    }

    from("${projectDir}/src/main/resources") {
        include "application.properties"
        into "config"
    }

    // Check if LICENSE.txt exists, if not try LICENSE
    def licenseFile = rootProject.file("LICENSE.txt")
    if (!licenseFile.exists()) {
        licenseFile = rootProject.file("LICENSE")
    }
    if (licenseFile.exists()) {
        from(licenseFile) {
            into "."
        }
    }

    // Add README.md if it exists
    def readmeFile = rootProject.file("README.md")
    if (readmeFile.exists()) {
        from(readmeFile) {
            into "."
        }
    }

    doLast {
        println "Distribution zip created at: ${archiveFile.get().asFile.absolutePath}"
    }
}

// Diagnostic tasks
tasks.register('printClasspath') {
    doLast {
        println "\n=== RUNTIME CLASSPATH ==="
        runtimeClasspath.files.each { file ->
            println file
        }
    }
}

tasks.register('printJavaHome') {
    doLast {
        println "\n=== JAVA HOME ==="
        println System.getProperty('java.home')
        println "\n=== JPackage Executable ==="
        def jpackage = new File("${System.getProperty('java.home')}/bin/jpackage")
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            jpackage = new File("${System.getProperty('java.home')}/bin/jpackage.exe")
        }
        println "Path: ${jpackage.absolutePath}"
        println "Exists: ${jpackage.exists()}"
        println "Executable: ${jpackage.canExecute()}"
    }
}

// Print available tasks to help with debugging
tasks.register('listJpackageTasks') {
    doLast {
        println "\n=== Available Packaging Tasks ==="
        tasks.findAll { task ->
            task.name.toLowerCase().contains('pack') ||
                    task.name.toLowerCase().contains('jlink') ||
                    task.name.toLowerCase().contains('jar')
        }.each { task ->
            println "${task.name}: ${task.group ?: 'no group'} - ${task.description ?: 'no description'}"
        }
    }
}

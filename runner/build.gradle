// build.gradle for Brobot Runner module
// This module provides a JavaFX UI for the Brobot automation framework

plugins {
    id 'java'
    id 'application'
    id 'io.freefair.lombok'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot' version '3.2.4'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

description = 'Brobot Runner - JavaFX UI for Brobot Automation'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base']
}

def platform = org.gradle.internal.os.OperatingSystem.current().isWindows() ? 'win' :
        org.gradle.internal.os.OperatingSystem.current().isLinux() ? 'linux' : 'mac'

dependencies {
    // Project dependencies
    implementation project(':library')
    implementation project(':log')

    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'

    // Spring core dependencies
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework:spring-core'

    // Explicit JavaFX dependencies
    implementation "org.openjfx:javafx-controls:21"
    implementation "org.openjfx:javafx-fxml:21"
    implementation "org.openjfx:javafx-graphics:21"
    implementation "org.openjfx:javafx-base:21"  // ADDED: Explicit base dependency
    implementation "net.rgielen:javafx-weaver-spring:2.0.1"

    // JSON parsing with specific version
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.4'

    implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'

    implementation 'org.bytedeco:javacv-platform:1.5.10'

    implementation 'org.slf4j:slf4j-api:2.0.9'

    // Testing with specific versions
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-jdbc'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-jpa'
    }
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'

    // FIXED: JavaFX testing dependencies - ensure platform-specific natives are available
    testImplementation "org.openjfx:javafx-base:21"
    testImplementation "org.openjfx:javafx-controls:21"
    testImplementation "org.openjfx:javafx-graphics:21"
    testImplementation "org.openjfx:javafx-fxml:21"

    // Platform-specific natives for tests
    testRuntimeOnly "org.openjfx:javafx-base:21:${platform}"
    testRuntimeOnly "org.openjfx:javafx-controls:21:${platform}"
    testRuntimeOnly "org.openjfx:javafx-graphics:21:${platform}"
    testRuntimeOnly "org.openjfx:javafx-fxml:21:${platform}"

    // FIXED: TestFX dependencies with correct monocle version for headless testing
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'

    // CRITICAL: Use monocle for headless JavaFX testing (fixes PlatformFactory null issue)
    testImplementation "org.openjfx:javafx-base:21:win"
    testImplementation "org.openjfx:javafx-controls:21:win"
    testImplementation "org.openjfx:javafx-graphics:21:win"
    testImplementation "org.openjfx:javafx-fxml:21:win"

    // Add TestFX Monocle for headless testing - this provides the missing PlatformFactory
    testImplementation "org.testfx:openjfx-monocle:jdk-12.0.1+2"

    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // mockito for mocking
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.mockito:mockito-inline:4.5.1'
}

test {
    useJUnitPlatform()

    // CRITICAL FIX: Configure for Monocle headless testing to avoid PlatformFactory null error
    jvmArgs = [
            // TestFX specific exports (without --add-modules)
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
            '--add-opens', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.utils=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui.monocle=ALL-UNNAMED'
    ]

    // FIXED: Use Monocle for headless testing (prevents PlatformFactory null)
    systemProperties = [
            // TestFX configuration
            'testfx.setup.timeout': '30000',
            'testfx.robot.write.sleep': '30',
            'testfx.robot': 'glass',

            // CRITICAL: Force Monocle headless mode for tests
            'java.awt.headless': 'true',
            'testfx.headless': 'true',
            'glass.platform': 'Monocle',
            'monocle.platform': 'Headless',
            'prism.order': 'sw',
            'prism.text': 't2k',
            'prism.verbose': 'false'
    ]

    // Increase memory for tests
    minHeapSize = '512m'
    maxHeapSize = '2g'

    // Better test logging
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }

    // Set test timeout
    timeout = Duration.ofMinutes(10)
}

// ADDED: Task to run tests in headless mode when needed
task testHeadless(type: Test) {
    useJUnitPlatform()

    // Don't use --add-modules here either
    jvmArgs = [
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
            '--add-opens', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.util=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.utils=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui.monocle=ALL-UNNAMED'
    ]

    systemProperties = [
            // TestFX configuration
            'testfx.setup.timeout': '30000',
            'testfx.robot.write.sleep': '30',
            'testfx.robot': 'glass',

            // Headless mode settings
            'java.awt.headless': 'true',
            'testfx.headless': 'true',
            'glass.platform': 'Monocle',
            'monocle.platform': 'Headless',
            'prism.order': 'sw',
            'prism.text': 't2k'
    ]

    // Configure testLogging properly
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

application {
    mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
}

// FIXED: Runtime configuration for JavaFX applications (remove --add-modules)
tasks.withType(JavaExec).configureEach {
    jvmArgs += [
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
    ]
}

// For packaging the application
bootJar {
    mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
        )
    }
}

// ADDED: Diagnostic task to check JavaFX setup
task checkJavaFX {
    doLast {
        println "\n=== JavaFX Configuration Check ==="
        println "JavaFX Version: ${javafx.version}"
        println "JavaFX Modules: ${javafx.modules}"
        println "Platform: ${platform}"
        println "Java Version: ${java.sourceCompatibility}"

        println "\n=== Checking JavaFX Dependencies ==="
        configurations.testRuntimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.name.contains('javafx')) {
                println "${artifact.name} - ${artifact.classifier ?: 'main'}"
            }
        }

        println "\n=== Checking TestFX Dependencies ==="
        configurations.testRuntimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.name.contains('testfx')) {
                println "${artifact.name}"
            }
        }
    }
}

// Rest of your existing tasks...
task directJpackage(type: Exec) {
    group = 'packaging'
    description = 'Package the application using jpackage command line tool directly'
    dependsOn bootJar

    def jpackageHome = System.getProperty('java.home')
    def jpackageExe = "${jpackageHome}/bin/jpackage"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        jpackageExe += '.exe'
    }

    workingDir = file("${buildDir}")

    doFirst {
        def resourcesDir = file("${buildDir}/jpackage-resources")
        resourcesDir.mkdirs()

        commandLine = [
                jpackageExe,
                '--type', 'app-image',
                '--input', "${buildDir}/libs",
                '--dest', "${buildDir}/jpackage",
                '--name', 'Brobot',
                '--main-jar', bootJar.archiveFileName.get(),
                '--main-class', 'io.github.jspinak.brobot.runner.BrobotRunnerApplication',
                '--app-version', project.version,
                '--vendor', 'io.github.jspinak'
        ]

        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            commandLine += ['--win-menu', '--win-shortcut']
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            commandLine += ['--mac-package-name', 'Brobot']
        } else {
            commandLine += ['--linux-shortcut']
        }

        println "Running jpackage command: ${commandLine.join(' ')}"
    }

    mustRunAfter bootJar
}

tasks.register('createDistributionZip', Zip) {
    dependsOn bootJar

    archiveFileName = "brobot-runner-${project.version}.zip"
    destinationDirectory = file("${buildDir}/distributions")

    from("${buildDir}/libs") {
        include "*.jar"
    }

    from("${projectDir}/src/main/resources") {
        include "application.properties"
        into "config"
    }

    def licenseFile = rootProject.file("LICENSE.txt")
    if (!licenseFile.exists()) {
        licenseFile = rootProject.file("LICENSE")
    }
    if (licenseFile.exists()) {
        from(licenseFile) {
            into "."
        }
    }

    def readmeFile = rootProject.file("README.md")
    if (readmeFile.exists()) {
        from(readmeFile) {
            into "."
        }
    }

    doLast {
        println "Distribution zip created at: ${archiveFile.get().asFile.absolutePath}"
    }
}

tasks.register('printClasspath') {
    doLast {
        println "\n=== RUNTIME CLASSPATH ==="
        runtimeClasspath.files.each { file ->
            println file
        }
    }
}

tasks.register('printJavaHome') {
    doLast {
        println "\n=== JAVA HOME ==="
        println System.getProperty('java.home')
        println "\n=== JPackage Executable ==="
        def jpackage = new File("${System.getProperty('java.home')}/bin/jpackage")
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            jpackage = new File("${System.getProperty('java.home')}/bin/jpackage.exe")
        }
        println "Path: ${jpackage.absolutePath}"
        println "Exists: ${jpackage.exists()}"
        println "Executable: ${jpackage.canExecute()}"
    }
}

tasks.register('listJpackageTasks') {
    doLast {
        println "\n=== Available Packaging Tasks ==="
        tasks.findAll { task ->
            task.name.toLowerCase().contains('pack') ||
                    task.name.toLowerCase().contains('jlink') ||
                    task.name.toLowerCase().contains('jar')
        }.each { task ->
            println "${task.name}: ${task.group ?: 'no group'} - ${task.description ?: 'no description'}"
        }
    }
}
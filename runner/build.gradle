plugins {
    id 'java'
    id 'application'
    //id 'io.freefair.lombok'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot' version '3.2.4'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

// Apply jpackage configuration
apply from: 'jpackage.gradle'

description = 'Brobot Runner - JavaFX UI for Brobot Automation'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

// Define versions in one place for consistency
ext {
    jfxVersion = '21.0.2'
    testFxVersion = '4.0.16-alpha'
    junitVersion = '5.9.2'
    mockitoVersion = '4.5.1'
}

javafx {
    version = "${jfxVersion}"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing', 'javafx.web']
}

dependencies {
    // Project dependencies
    implementation project(':library')

    // Spring Boot - additional starter for JPA (Spring context comes from library)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'net.rgielen:javafx-weaver-spring:2.0.1' // For Spring/JavaFX integration

    // Database (Using H2 for embedded persistence)
    runtimeOnly 'com.h2database:h2'

    // Other Utilities
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.4'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    // Note: javacv-platform and slf4j-api are now provided transitively by the library
    
    // AtlantaFX Theme
    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'

    // --- Testing Dependencies ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // TestFX for JavaFX UI testing
    testImplementation "org.testfx:testfx-core:${testFxVersion}"
    testImplementation "org.testfx:testfx-junit5:${testFxVersion}"
    // Monocle for headless testing is brought in transitively by TestFX now

    // JUnit 5
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    // Mockito
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

test {
    useJUnitPlatform()
    
    // Temporary test exclusions due to API changes during refactoring
    // TODO: Remove these exclusions after fixing test compilation issues
    exclude '**/StateVisualizationServiceTest.class'
    exclude '**/RefactoredExecutionDashboardPanelTest.class'
    exclude '**/RefactoredConfigDetailsPanelTest.class'
    exclude '**/AtlantaConfigUIFactoryTest.class'
    exclude '**/ConfigFileOperationsServiceTest.class'
    exclude '**/ConfigOperationsServiceTest.class'
    exclude '**/TaskManagementServiceTest.class'
    exclude '**/AutomationButtonServiceTest.class'
    exclude '**/EnhancedButtonServiceTest.class'
    exclude '**/EnhancedHotkeyServiceTest.class'
    exclude '**/RefactoredAutomationPanelTest.class'
    exclude '**/PanelVisualRegressionTest.class'
    exclude '**/IntegrationTest.class'
    exclude '**/PerformanceBenchmarkTest.class'

    // Configure system properties for headless testing
    // To run headless, execute: ./gradlew test -Dtestfx.headless=true
    if (System.getProperty('testfx.headless', 'false') == 'true') {
        systemProperties = [
                'testfx.robot': 'glass',
                'testfx.headless': 'true',
                'prism.order': 'sw',
                'prism.text': 't2k',
                'java.awt.headless': 'true',
                'testfx.setup.timeout': '25000'
        ]
    }

    // JVM arguments needed for testing frameworks to access JavaFX internals
    jvmArgs += [
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
            '--add-opens', 'javafx.base/com.sun.javafx.runtime=ALL-UNNAMED',
            '--add-opens', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.javafx.application=ALL-UNNAMED',
            '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED'
    ]

    testLogging {
        events "passed", "skipped", "failed"
    }
}

application {
    mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
    // The openjfx plugin handles adding the required --module-path and --add-modules args
}

bootJar {
    mainClass = 'io.github.jspinak.brobot.runner.BrobotRunnerApplication'
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

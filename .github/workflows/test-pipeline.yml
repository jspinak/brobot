name: Test Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  fast-tests:
    name: Fast Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests with Python script
      run: |
        python3 library/scripts/run-all-tests.py library --mode sequential --timeout 60 --retry-failed --pattern "Fast"
      env:
        GRADLE_OPTS: -Xmx2048m -XX:MaxMetaspaceSize=512m
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fast-test-results
        path: library/build/reports/tests/
    
    - name: Publish test results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: |
          library/build/test-results/**/*.xml

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Run tests with Python script
      run: |
        python3 library/scripts/run-all-tests.py library --mode sequential --timeout 60 --retry-failed
      env:
        GRADLE_OPTS: -Xmx2048m -XX:MaxMetaspaceSize=512m
    
    - name: Generate coverage report
      run: ./gradlew jacocoTestReport
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./library/build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: library/build/reports/tests/

  cv-tests:
    name: Computer Vision Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Install OpenCV dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Run tests with Python script
      run: |
        python3 library/scripts/run-all-tests.py library --mode sequential --timeout 60 --retry-failed --pattern "CV"
      env:
        GRADLE_OPTS: -Xmx3072m -XX:MaxMetaspaceSize=768m
        _JAVA_OPTIONS: -Djava.awt.headless=true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cv-test-results
        path: library/build/reports/tests/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Set up virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Run tests with Python script
      run: |
        export DISPLAY=:99
        python3 library/scripts/run-all-tests.py library-test --mode sequential --timeout 60 --retry-failed
      env:
        GRADLE_OPTS: -Xmx4096m -XX:MaxMetaspaceSize=1024m
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: library/build/reports/tests/

  nightly-tests:
    name: Nightly Comprehensive Tests
    runs-on: ubuntu-latest
    timeout-minutes: 120
    if: github.event.schedule == '0 2 * * *'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Run tests with Python script
      run: |
        python3 library/scripts/run-all-tests.py library --mode sequential --timeout 60 --retry-failed
        python3 library/scripts/run-all-tests.py library-test --mode sequential --timeout 60 --retry-failed
      continue-on-error: true
      env:
        GRADLE_OPTS: -Xmx6144m -XX:MaxMetaspaceSize=1536m
    
    - name: Generate comprehensive report
      run: ./gradlew testReport
    
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      with:
        name: nightly-test-results
        path: |
          library/build/reports/tests/
          library/build/reports/jacoco/

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for comparison
    
    - name: Checkout base branch
      run: |
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Run tests with Python script
      run: |
        python3 library/scripts/run-all-tests.py library --mode sequential --timeout 60 --retry-failed --pattern "Benchmark" > baseline-benchmarks.txt
    
    - name: Checkout PR branch
      run: git checkout ${{ github.sha }}
    
    - name: Run tests with Python script
      run: |
        python3 library/scripts/run-all-tests.py library --mode sequential --timeout 60 --retry-failed --pattern "Benchmark" > pr-benchmarks.txt
    
    - name: Compare benchmarks
      run: |
        echo "## Performance Comparison" >> $GITHUB_STEP_SUMMARY
        echo "Baseline vs PR" >> $GITHUB_STEP_SUMMARY
        # Add comparison logic here
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          // Read benchmark results and post comparison comment
          const fs = require('fs');
          const baseline = fs.readFileSync('baseline-benchmarks.txt', 'utf8');
          const pr = fs.readFileSync('pr-benchmarks.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## Performance Benchmark Results\n' +
                  'Comparison between baseline and PR...'
          })

  test-matrix:
    name: Test Matrix
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [17, 21]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: gradle
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Grant execute permissions (Unix)
      if: runner.os != 'Windows'
      run: chmod +x gradlew
    
    - name: Clear Gradle cache (macOS)
      if: runner.os == 'macOS'
      run: |
        rm -rf ~/.gradle/caches/modules-2/modules-2.lock
        rm -rf ~/.gradle/caches/*/plugin-resolution/
    
    - name: Run tests with CI-optimized script
      run: |
        python3 library/scripts/run-tests-ci.py library --timeout 30 --batch-size 5
      env:
        GRADLE_OPTS: -Xmx2048m -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=false
        JAVA_TOOL_OPTIONS: -Djava.awt.headless=true
        CI: true
name: E2E Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_pattern:
        description: 'Test pattern to run (e.g., "*Integration*")'
        required: false
        default: "*"

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17, 21 ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
      
      - name: Setup Python for test runner
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      - name: Build library module
        run: ./gradlew :library:build -x test --no-daemon
        
      - name: Build library-test module
        run: ./gradlew :library-test:build -x test --no-daemon
      
      - name: Run library-test integration tests
        run: |
          python3 library/scripts/run-all-tests.py library-test \
            --mode sequential \
            --timeout 60 \
            --retry-failed \
            --pattern "${{ github.event.inputs.test_pattern || '*Integration*' }}"
      
      - name: Generate test report
        if: always()
        run: |
          ./gradlew :library-test:testReport --no-daemon || true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.java-version }}
          path: |
            library-test/build/reports/tests/
            library-test/build/test-results/
      
      - name: Upload coverage reports
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: library-test/build/reports/jacoco/test/jacocoTestReport.xml
          flags: e2e-tests
          name: e2e-coverage-${{ matrix.java-version }}

  spring-integration-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      
      - name: Setup Python for test runner
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      - name: Run Spring Boot integration tests
        run: |
          python3 library/scripts/run-all-tests.py library-test \
            --mode sequential \
            --timeout 120 \
            --retry-failed \
            --pattern "*SpringBoot*|*Configuration*|*Context*"
      
      - name: Upload Spring test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spring-test-results
          path: |
            library-test/build/reports/tests/
            library-test/build/test-results/

  mock-mode-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      
      - name: Setup Python for test runner
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      - name: Run mock mode tests
        run: |
          python3 library/scripts/run-all-tests.py library-test \
            --mode sequential \
            --timeout 60 \
            --retry-failed \
            --pattern "*Mock*"
      
      - name: Upload mock test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mock-test-results
          path: |
            library-test/build/reports/tests/
            library-test/build/test-results/

  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-tests, spring-integration-tests, mock-mode-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
      
      - name: Generate combined test report
        run: |
          echo "# E2E Test Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Execution Status" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Spring Integration Tests: ${{ needs.spring-integration-tests.result }}" >> test-summary.md
          echo "- Mock Mode Tests: ${{ needs.mock-mode-tests.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "Test artifacts have been uploaded for detailed analysis." >> test-summary.md
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
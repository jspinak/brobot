// brobot app build.gradle

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.freefair.lombok'
    id 'io.spring.dependency-management' 
    id 'org.flywaydb.flyway' version '10.18.0'
}

// Keep the version separate from parent as this is a standalone application
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation project(':library') 
    implementation project(':log')
    
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // Database
    implementation 'org.postgresql:postgresql:42.7.4'
    implementation 'org.hibernate:hibernate-core:6.1.0.Final'
    testImplementation 'com.h2database:h2:2.2.224'
    
    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
    
    // Core dependencies - same as in library but with slf4j exclusions
    implementation('com.sikulix:sikulixapi:2.0.5') {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'org.bytedeco:javacv-platform:1.5.10'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'com.github.kwhat:jnativehook:2.2.2'
    
    // Other utilities
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/Brobot'
    user = System.getenv('ADMIN_USERNAME') ?: 'default_username'
    password = System.getenv('ADMIN_PASSWORD') ?: 'default_username'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-Amapstruct.defaultComponentModel=spring',
        '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform {
        excludeTags 'manual'
    }
    
    // JVM args
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.desktop/java.awt=ALL-UNNAMED',
        '--add-opens', 'java.desktop/java.awt.image=ALL-UNNAMED',
        '--add-opens', 'java.desktop/javax.imageio=ALL-UNNAMED'
    ]
}

// A separate task for manual tests
tasks.register('manualTest', Test) {
    useJUnitPlatform {
        includeTags 'manual'
    }
    
    // Same JVM args as regular tests
    jvmArgs = [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.desktop/java.awt=ALL-UNNAMED',
        '--add-opens', 'java.desktop/java.awt.image=ALL-UNNAMED',
        '--add-opens', 'java.desktop/javax.imageio=ALL-UNNAMED'
    ]
    
    group = 'verification'
    description = 'Runs manual tests that require user interaction'
}
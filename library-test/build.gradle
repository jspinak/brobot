// In brobot/library-test/build.gradle

plugins {
    // This applies the Spring Boot framework to your test module.
    id 'org.springframework.boot'
    // The 'java' plugin is included by the Spring Boot plugin automatically.
}

dependencies {
    // This gives your tests access to the main 'library' code and its 'api' dependencies.
    implementation project(':library')

    // This single dependency provides JUnit 5, Mockito, AssertJ, and the Spring Test framework.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // These dependencies are needed for your test code to compile.
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation 'com.networknt:json-schema-validator:1.4.0'
    testImplementation 'org.json:json:20240303'
}

// These tasks prevent Gradle from creating a runnable JAR for this module, which is correct.
tasks.named('bootJar') {
    enabled = false
}
tasks.named('jar') {
    enabled = false
}

// ** THE FINAL FIX IS HERE **
// This task explicitly finds the JARs containing native code and extracts them.
tasks.register('copyTestNatives', Copy) {
    dependsOn(project(':library').tasks.named('jar'))
    from(configurations.testRuntimeClasspath.files.collect { file ->
        file.isDirectory() ? file : zipTree(file).matching {
            // Target common native library paths inside JARs
            include "**/win32-x86-64/*.dll"
            include "**/win32-x86/*.dll"
            include "**/opencv/*.dll"
        }
    }) {
        include "*.dll"
    }
    into layout.buildDirectory.dir("natives")
}

// The 'test' task will now depend on this new copy task.
tasks.named('test', Test) {
    dependsOn tasks.named('copyTestNatives')
    useJUnitPlatform()

    // This modifies the PATH environment variable for the test process.
    // On Windows, this is the most reliable way to ensure native .dll files are found.
    environment 'PATH', "${layout.buildDirectory.dir('natives').get().asFile.absolutePath};${System.getenv('PATH')}"
}
